
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba10  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018cc  0800bba8  0800bba8  0001bba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d474  0800d474  00020408  2**0
                  CONTENTS
  4 .ARM          00000008  0800d474  0800d474  0001d474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d47c  0800d47c  00020408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d47c  0800d47c  0001d47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d480  0800d480  0001d480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000408  20000000  0800d484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010f74  20000408  0800d88c  00020408  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001137c  0800d88c  0002137c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bb4  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  00037fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d9d  00000000  00000000  0003cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188d3  00000000  00000000  00055ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1728  00000000  00000000  0006e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010fce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005828  00000000  00000000  0010fda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  001155c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000408 	.word	0x20000408
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bb90 	.word	0x0800bb90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000040c 	.word	0x2000040c
 80001d4:	0800bb90 	.word	0x0800bb90

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000b74:	4bb9      	ldr	r3, [pc, #740]	; (8000e5c <menu_vars+0x304>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4bb7      	ldr	r3, [pc, #732]	; (8000e5c <menu_vars+0x304>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4bb7      	ldr	r3, [pc, #732]	; (8000e60 <menu_vars+0x308>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f00a ff58 	bl	800ba50 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4bad      	ldr	r3, [pc, #692]	; (8000e5c <menu_vars+0x304>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bab      	ldr	r3, [pc, #684]	; (8000e5c <menu_vars+0x304>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba9      	ldr	r3, [pc, #676]	; (8000e5c <menu_vars+0x304>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba8      	ldr	r3, [pc, #672]	; (8000e5c <menu_vars+0x304>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b31      	cmp	r3, #49	; 0x31
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bc0:	4aa8      	ldr	r2, [pc, #672]	; (8000e64 <menu_vars+0x30c>)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	4aa7      	ldr	r2, [pc, #668]	; (8000e68 <menu_vars+0x310>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d903      	bls.n	8000bda <menu_vars+0x82>
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	4aa4      	ldr	r2, [pc, #656]	; (8000e68 <menu_vars+0x310>)
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b30      	cmp	r3, #48	; 0x30
 8000bde:	f200 81ef 	bhi.w	8000fc0 <menu_vars+0x468>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <menu_vars+0x90>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000cad 	.word	0x08000cad
 8000bec:	08000cb3 	.word	0x08000cb3
 8000bf0:	08000cc5 	.word	0x08000cc5
 8000bf4:	08000cd9 	.word	0x08000cd9
 8000bf8:	08000ced 	.word	0x08000ced
 8000bfc:	08000d01 	.word	0x08000d01
 8000c00:	08000d15 	.word	0x08000d15
 8000c04:	08000d1b 	.word	0x08000d1b
 8000c08:	08000d2d 	.word	0x08000d2d
 8000c0c:	08000d41 	.word	0x08000d41
 8000c10:	08000d55 	.word	0x08000d55
 8000c14:	08000d69 	.word	0x08000d69
 8000c18:	08000d6f 	.word	0x08000d6f
 8000c1c:	08000d81 	.word	0x08000d81
 8000c20:	08000d95 	.word	0x08000d95
 8000c24:	08000da9 	.word	0x08000da9
 8000c28:	08000dbd 	.word	0x08000dbd
 8000c2c:	08000dd1 	.word	0x08000dd1
 8000c30:	08000de5 	.word	0x08000de5
 8000c34:	08000df9 	.word	0x08000df9
 8000c38:	08000e0d 	.word	0x08000e0d
 8000c3c:	08000e21 	.word	0x08000e21
 8000c40:	08000e27 	.word	0x08000e27
 8000c44:	08000e2d 	.word	0x08000e2d
 8000c48:	08000e33 	.word	0x08000e33
 8000c4c:	08000e3f 	.word	0x08000e3f
 8000c50:	08000e4d 	.word	0x08000e4d
 8000c54:	08000e85 	.word	0x08000e85
 8000c58:	08000e91 	.word	0x08000e91
 8000c5c:	08000e9f 	.word	0x08000e9f
 8000c60:	08000ead 	.word	0x08000ead
 8000c64:	08000ebb 	.word	0x08000ebb
 8000c68:	08000ec9 	.word	0x08000ec9
 8000c6c:	08000ed7 	.word	0x08000ed7
 8000c70:	08000ee5 	.word	0x08000ee5
 8000c74:	08000ef3 	.word	0x08000ef3
 8000c78:	08000f07 	.word	0x08000f07
 8000c7c:	08000f19 	.word	0x08000f19
 8000c80:	08000f2d 	.word	0x08000f2d
 8000c84:	08000f41 	.word	0x08000f41
 8000c88:	08000f55 	.word	0x08000f55
 8000c8c:	08000f67 	.word	0x08000f67
 8000c90:	08000f7b 	.word	0x08000f7b
 8000c94:	08000f8f 	.word	0x08000f8f
 8000c98:	08000fa3 	.word	0x08000fa3
 8000c9c:	08000fa9 	.word	0x08000fa9
 8000ca0:	08000faf 	.word	0x08000faf
 8000ca4:	08000fb5 	.word	0x08000fb5
 8000ca8:	08000fbb 	.word	0x08000fbb
	case 0:     menu_vars_var1= NULL; break;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	e189      	b.n	8000fc6 <menu_vars+0x46e>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000cb2:	78fa      	ldrb	r2, [r7, #3]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4a6b      	ldr	r2, [pc, #428]	; (8000e6c <menu_vars+0x314>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e180      	b.n	8000fc6 <menu_vars+0x46e>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a67      	ldr	r2, [pc, #412]	; (8000e6c <menu_vars+0x314>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e176      	b.n	8000fc6 <menu_vars+0x46e>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4a62      	ldr	r2, [pc, #392]	; (8000e6c <menu_vars+0x314>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e16c      	b.n	8000fc6 <menu_vars+0x46e>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4a5d      	ldr	r2, [pc, #372]	; (8000e6c <menu_vars+0x314>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	e162      	b.n	8000fc6 <menu_vars+0x46e>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;
 8000d00:	78fa      	ldrb	r2, [r7, #3]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4a59      	ldr	r2, [pc, #356]	; (8000e70 <menu_vars+0x318>)
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3304      	adds	r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	e158      	b.n	8000fc6 <menu_vars+0x46e>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	e155      	b.n	8000fc6 <menu_vars+0x46e>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	4a53      	ldr	r2, [pc, #332]	; (8000e74 <menu_vars+0x31c>)
 8000d26:	4413      	add	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e14c      	b.n	8000fc6 <menu_vars+0x46e>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <menu_vars+0x31c>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e142      	b.n	8000fc6 <menu_vars+0x46e>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <menu_vars+0x31c>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e138      	b.n	8000fc6 <menu_vars+0x46e>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	4a45      	ldr	r2, [pc, #276]	; (8000e74 <menu_vars+0x31c>)
 8000d60:	4413      	add	r3, r2
 8000d62:	3303      	adds	r3, #3
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	e12e      	b.n	8000fc6 <menu_vars+0x46e>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	e12b      	b.n	8000fc6 <menu_vars+0x46e>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4a3f      	ldr	r2, [pc, #252]	; (8000e78 <menu_vars+0x320>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e122      	b.n	8000fc6 <menu_vars+0x46e>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <menu_vars+0x320>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3301      	adds	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e118      	b.n	8000fc6 <menu_vars+0x46e>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <menu_vars+0x320>)
 8000da0:	4413      	add	r3, r2
 8000da2:	3302      	adds	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e10e      	b.n	8000fc6 <menu_vars+0x46e>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <menu_vars+0x320>)
 8000db4:	4413      	add	r3, r2
 8000db6:	3303      	adds	r3, #3
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e104      	b.n	8000fc6 <menu_vars+0x46e>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <menu_vars+0x320>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	3304      	adds	r3, #4
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e0fa      	b.n	8000fc6 <menu_vars+0x46e>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <menu_vars+0x320>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	3305      	adds	r3, #5
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e0f0      	b.n	8000fc6 <menu_vars+0x46e>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <menu_vars+0x320>)
 8000df0:	4413      	add	r3, r2
 8000df2:	3306      	adds	r3, #6
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e0e6      	b.n	8000fc6 <menu_vars+0x46e>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <menu_vars+0x320>)
 8000e04:	4413      	add	r3, r2
 8000e06:	3307      	adds	r3, #7
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e0dc      	b.n	8000fc6 <menu_vars+0x46e>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	3308      	adds	r3, #8
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <menu_vars+0x320>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e0d2      	b.n	8000fc6 <menu_vars+0x46e>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	e0cf      	b.n	8000fc6 <menu_vars+0x46e>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <menu_vars+0x324>)
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	e0cc      	b.n	8000fc6 <menu_vars+0x46e>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <menu_vars+0x328>)
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	e0c9      	b.n	8000fc6 <menu_vars+0x46e>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <menu_vars+0x324>)
 8000e36:	4413      	add	r3, r2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	e0c3      	b.n	8000fc6 <menu_vars+0x46e>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	3310      	adds	r3, #16
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <menu_vars+0x324>)
 8000e44:	4413      	add	r3, r2
 8000e46:	3303      	adds	r3, #3
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	e0bc      	b.n	8000fc6 <menu_vars+0x46e>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	3320      	adds	r3, #32
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <menu_vars+0x324>)
 8000e52:	4413      	add	r3, r2
 8000e54:	3304      	adds	r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	e0b5      	b.n	8000fc6 <menu_vars+0x46e>
 8000e5a:	bf00      	nop
 8000e5c:	20000894 	.word	0x20000894
 8000e60:	2000022c 	.word	0x2000022c
 8000e64:	200079b1 	.word	0x200079b1
 8000e68:	0800c6b0 	.word	0x0800c6b0
 8000e6c:	2000443c 	.word	0x2000443c
 8000e70:	200051dc 	.word	0x200051dc
 8000e74:	20004720 	.word	0x20004720
 8000e78:	20000158 	.word	0x20000158
 8000e7c:	200051ac 	.word	0x200051ac
 8000e80:	200051ad 	.word	0x200051ad
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <menu_vars+0x478>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e09a      	b.n	8000fc6 <menu_vars+0x46e>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4a4e      	ldr	r2, [pc, #312]	; (8000fd0 <menu_vars+0x478>)
 8000e96:	4413      	add	r3, r2
 8000e98:	3301      	adds	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	e093      	b.n	8000fc6 <menu_vars+0x46e>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <menu_vars+0x478>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	e08c      	b.n	8000fc6 <menu_vars+0x46e>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <menu_vars+0x478>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	e085      	b.n	8000fc6 <menu_vars+0x46e>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <menu_vars+0x478>)
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	e07e      	b.n	8000fc6 <menu_vars+0x46e>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4a40      	ldr	r2, [pc, #256]	; (8000fd0 <menu_vars+0x478>)
 8000ece:	4413      	add	r3, r2
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	e077      	b.n	8000fc6 <menu_vars+0x46e>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <menu_vars+0x478>)
 8000edc:	4413      	add	r3, r2
 8000ede:	3306      	adds	r3, #6
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	e070      	b.n	8000fc6 <menu_vars+0x46e>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4a39      	ldr	r2, [pc, #228]	; (8000fd0 <menu_vars+0x478>)
 8000eea:	4413      	add	r3, r2
 8000eec:	3305      	adds	r3, #5
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e069      	b.n	8000fc6 <menu_vars+0x46e>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <menu_vars+0x47c>)
 8000efe:	4413      	add	r3, r2
 8000f00:	3305      	adds	r3, #5
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	e05f      	b.n	8000fc6 <menu_vars+0x46e>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <menu_vars+0x47c>)
 8000f12:	4413      	add	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	e056      	b.n	8000fc6 <menu_vars+0x46e>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f18:	78fa      	ldrb	r2, [r7, #3]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <menu_vars+0x47c>)
 8000f24:	4413      	add	r3, r2
 8000f26:	3301      	adds	r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	e04c      	b.n	8000fc6 <menu_vars+0x46e>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <menu_vars+0x47c>)
 8000f38:	4413      	add	r3, r2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	e042      	b.n	8000fc6 <menu_vars+0x46e>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <menu_vars+0x47c>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3303      	adds	r3, #3
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	e038      	b.n	8000fc6 <menu_vars+0x46e>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f54:	78fa      	ldrb	r2, [r7, #3]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <menu_vars+0x480>)
 8000f60:	4413      	add	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	e02f      	b.n	8000fc6 <menu_vars+0x46e>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <menu_vars+0x480>)
 8000f72:	4413      	add	r3, r2
 8000f74:	3301      	adds	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	e025      	b.n	8000fc6 <menu_vars+0x46e>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000f7a:	78fa      	ldrb	r2, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <menu_vars+0x480>)
 8000f86:	4413      	add	r3, r2
 8000f88:	3304      	adds	r3, #4
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e01b      	b.n	8000fc6 <menu_vars+0x46e>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <menu_vars+0x480>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e011      	b.n	8000fc6 <menu_vars+0x46e>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <menu_vars+0x484>)
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e00e      	b.n	8000fc6 <menu_vars+0x46e>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <menu_vars+0x488>)
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	e00b      	b.n	8000fc6 <menu_vars+0x46e>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <menu_vars+0x48c>)
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	e008      	b.n	8000fc6 <menu_vars+0x46e>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <menu_vars+0x490>)
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e005      	b.n	8000fc6 <menu_vars+0x46e>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <menu_vars+0x494>)
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	e002      	b.n	8000fc6 <menu_vars+0x46e>

	default :		menu_vars_var1= NULL   ; break;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000fc6:	693b      	ldr	r3, [r7, #16]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200001e4 	.word	0x200001e4
 8000fd4:	200051dc 	.word	0x200051dc
 8000fd8:	200046e4 	.word	0x200046e4
 8000fdc:	20000212 	.word	0x20000212
 8000fe0:	20000213 	.word	0x20000213
 8000fe4:	20000214 	.word	0x20000214
 8000fe8:	20000215 	.word	0x20000215
 8000fec:	20000208 	.word	0x20000208

08000ff0 <sampler_ram_record>:

void sampler_ram_record(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

memcpy(	&RAM[sampler.ram_pos], input_holder,sizeof(input_holder));
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <sampler_ram_record+0x44>)
 8000ff6:	899b      	ldrh	r3, [r3, #12]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <sampler_ram_record+0x48>)
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <sampler_ram_record+0x4c>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00a fd0d 	bl	800ba24 <memcpy>
	sampler.ram_pos =sampler.ram_pos+512;
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <sampler_ram_record+0x44>)
 800100c:	899b      	ldrh	r3, [r3, #12]
 800100e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <sampler_ram_record+0x44>)
 8001016:	819a      	strh	r2, [r3, #12]
if (sampler.ram_pos>16383) { sampler.ram_pos=0; sampler.record_enable=0; } // reset and stop record
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <sampler_ram_record+0x44>)
 800101a:	899b      	ldrh	r3, [r3, #12]
 800101c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001020:	d305      	bcc.n	800102e <sampler_ram_record+0x3e>
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <sampler_ram_record+0x44>)
 8001024:	2200      	movs	r2, #0
 8001026:	819a      	strh	r2, [r3, #12]
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <sampler_ram_record+0x44>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000204 	.word	0x20000204
 8001038:	20007bb8 	.word	0x20007bb8
 800103c:	20004020 	.word	0x20004020

08001040 <menu_parser>:




void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8001046:	4a6c      	ldr	r2, [pc, #432]	; (80011f8 <menu_parser+0x1b8>)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001050:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 8001054:	4a69      	ldr	r2, [pc, #420]	; (80011fc <menu_parser+0x1bc>)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105c:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001064:	f240 6336 	movw	r3, #1590	; 0x636
 8001068:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 800106a:	4b65      	ldr	r3, [pc, #404]	; (8001200 <menu_parser+0x1c0>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	8aba      	ldrh	r2, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f0c0 80bc 	bcc.w	80011ee <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8001076:	4b62      	ldr	r3, [pc, #392]	; (8001200 <menu_parser+0x1c0>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b61      	ldr	r3, [pc, #388]	; (8001204 <menu_parser+0x1c4>)
 800107e:	441a      	add	r2, r3
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	6810      	ldr	r0, [r2, #0]
 8001086:	6851      	ldr	r1, [r2, #4]
 8001088:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800108a:	2300      	movs	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]
 800108e:	e093      	b.n	80011b8 <menu_parser+0x178>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	4a5d      	ldr	r2, [pc, #372]	; (8001208 <menu_parser+0x1c8>)
 8001094:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	6810      	ldr	r0, [r2, #0]
 800109c:	6851      	ldr	r1, [r2, #4]
 800109e:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 80010a0:	1d39      	adds	r1, r7, #4
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2208      	movs	r2, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00a fcd1 	bl	800ba50 <strncmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d17e      	bne.n	80011b2 <menu_parser+0x172>
		    {

			    if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <menu_parser+0x1cc>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b6e      	cmp	r3, #110	; 0x6e
 80010ba:	d909      	bls.n	80010d0 <menu_parser+0x90>
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <menu_parser+0x1cc>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	2b7f      	cmp	r3, #127	; 0x7f
 80010c2:	d805      	bhi.n	80010d0 <menu_parser+0x90>
 80010c4:	4b51      	ldr	r3, [pc, #324]	; (800120c <menu_parser+0x1cc>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	3310      	adds	r3, #16
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <menu_parser+0x1cc>)
 80010ce:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 80010d0:	4b4e      	ldr	r3, [pc, #312]	; (800120c <menu_parser+0x1cc>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	2bed      	cmp	r3, #237	; 0xed
 80010d6:	d909      	bls.n	80010ec <menu_parser+0xac>
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <menu_parser+0x1cc>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d805      	bhi.n	80010ec <menu_parser+0xac>
 80010e0:	4b4a      	ldr	r3, [pc, #296]	; (800120c <menu_parser+0x1cc>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	3310      	adds	r3, #16
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <menu_parser+0x1cc>)
 80010ea:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <menu_parser+0x1cc>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80010f4:	d30a      	bcc.n	800110c <menu_parser+0xcc>
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <menu_parser+0x1cc>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80010fe:	d205      	bcs.n	800110c <menu_parser+0xcc>
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <menu_parser+0x1cc>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	3310      	adds	r3, #16
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <menu_parser+0x1cc>)
 800110a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>493)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <menu_parser+0x1cc>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001114:	d30a      	bcc.n	800112c <menu_parser+0xec>
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <menu_parser+0x1cc>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111e:	d205      	bcs.n	800112c <menu_parser+0xec>
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <menu_parser+0x1cc>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	3310      	adds	r3, #16
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <menu_parser+0x1cc>)
 800112a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>621)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <menu_parser+0x1cc>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	f240 226d 	movw	r2, #621	; 0x26d
 8001134:	4293      	cmp	r3, r2
 8001136:	d90a      	bls.n	800114e <menu_parser+0x10e>
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <menu_parser+0x1cc>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001140:	d205      	bcs.n	800114e <menu_parser+0x10e>
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <menu_parser+0x1cc>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	3310      	adds	r3, #16
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <menu_parser+0x1cc>)
 800114c:	801a      	strh	r2, [r3, #0]
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <menu_parser+0x1cc>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800115a:	18d1      	adds	r1, r2, r3
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <menu_parser+0x1d0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <menu_parser+0x1d4>)
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <menu_parser+0x1d0>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	461a      	mov	r2, r3
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <menu_parser+0x1d8>)
 8001172:	18d0      	adds	r0, r2, r3
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <menu_parser+0x1c0>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	3b02      	subs	r3, #2
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <menu_parser+0x1c4>)
 800117c:	4413      	add	r3, r2
 800117e:	2202      	movs	r2, #2
 8001180:	4619      	mov	r1, r3
 8001182:	f00a fc4f 	bl	800ba24 <memcpy>
        			    menu_title_count++;
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <menu_parser+0x1d0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <menu_parser+0x1d0>)
 8001190:	701a      	strb	r2, [r3, #0]
			    menu_counter++;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <menu_parser+0x1cc>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <menu_parser+0x1cc>)
 800119c:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <menu_parser+0x1dc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <menu_parser+0x1c0>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3308      	adds	r3, #8
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <menu_parser+0x1c0>)
 80011ae:	801a      	strh	r2, [r3, #0]
    			    return;}
 80011b0:	e01e      	b.n	80011f0 <menu_parser+0x1b0>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	3301      	adds	r3, #1
 80011b6:	75fb      	strb	r3, [r7, #23]
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b31      	cmp	r3, #49	; 0x31
 80011bc:	f67f af68 	bls.w	8001090 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <menu_parser+0x1dc>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d905      	bls.n	80011d4 <menu_parser+0x194>
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <menu_parser+0x1cc>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <menu_parser+0x1cc>)
 80011d2:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <menu_parser+0x1dc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <menu_parser+0x1dc>)
 80011de:	701a      	strb	r2, [r3, #0]
	    string_search++;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <menu_parser+0x1c0>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <menu_parser+0x1c0>)
 80011ea:	801a      	strh	r2, [r3, #0]
	    return;
 80011ec:	e000      	b.n	80011f0 <menu_parser+0x1b0>
		    return;    }    // check if bigger than search area
 80011ee:	bf00      	nop

    }
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800bf5c 	.word	0x0800bf5c
 80011fc:	0800bf64 	.word	0x0800bf64
 8001200:	2000536c 	.word	0x2000536c
 8001204:	0800c070 	.word	0x0800c070
 8001208:	2000022c 	.word	0x2000022c
 800120c:	2000536e 	.word	0x2000536e
 8001210:	20005371 	.word	0x20005371
 8001214:	20005374 	.word	0x20005374
 8001218:	20005774 	.word	0x20005774
 800121c:	20005370 	.word	0x20005370

08001220 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
uint8_t skip=0;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 800122a:	4b91      	ldr	r3, [pc, #580]	; (8001470 <patch_target_parse+0x250>)
 800122c:	2200      	movs	r2, #0
 800122e:	801a      	strh	r2, [r3, #0]
 8001230:	e113      	b.n	800145a <patch_target_parse+0x23a>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 8001232:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <patch_target_parse+0x250>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	4a8e      	ldr	r2, [pc, #568]	; (8001474 <patch_target_parse+0x254>)
 800123a:	460b      	mov	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	717b      	strb	r3, [r7, #5]
			if (patch[n].input1>=menu_lookup_count) patch[n].input1=0;    // limit
 8001248:	4b89      	ldr	r3, [pc, #548]	; (8001470 <patch_target_parse+0x250>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4a89      	ldr	r2, [pc, #548]	; (8001474 <patch_target_parse+0x254>)
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b31      	cmp	r3, #49	; 0x31
 800125e:	d90a      	bls.n	8001276 <patch_target_parse+0x56>
 8001260:	4b83      	ldr	r3, [pc, #524]	; (8001470 <patch_target_parse+0x250>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4a83      	ldr	r2, [pc, #524]	; (8001474 <patch_target_parse+0x254>)
 8001268:	460b      	mov	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b03      	cmp	r3, #3
 800127e:	d842      	bhi.n	8001306 <patch_target_parse+0xe6>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <patch_target_parse+0x68>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	08001299 	.word	0x08001299
 800128c:	080012b3 	.word	0x080012b3
 8001290:	080012cf 	.word	0x080012cf
 8001294:	080012eb 	.word	0x080012eb

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4a73      	ldr	r2, [pc, #460]	; (8001478 <patch_target_parse+0x258>)
 80012aa:	4413      	add	r3, r2
 80012ac:	3306      	adds	r3, #6
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	e029      	b.n	8001306 <patch_target_parse+0xe6>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 80012b2:	797b      	ldrb	r3, [r7, #5]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4613      	mov	r3, r2
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	3318      	adds	r3, #24
 80012c4:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <patch_target_parse+0x258>)
 80012c6:	4413      	add	r3, r2
 80012c8:	3302      	adds	r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	e01b      	b.n	8001306 <patch_target_parse+0xe6>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 80012ce:	797b      	ldrb	r3, [r7, #5]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4613      	mov	r3, r2
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3328      	adds	r3, #40	; 0x28
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <patch_target_parse+0x258>)
 80012e2:	4413      	add	r3, r2
 80012e4:	3306      	adds	r3, #6
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	e00d      	b.n	8001306 <patch_target_parse+0xe6>
						case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4613      	mov	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	3328      	adds	r3, #40	; 0x28
 80012fc:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <patch_target_parse+0x258>)
 80012fe:	4413      	add	r3, r2
 8001300:	3306      	adds	r3, #6
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	bf00      	nop
						}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <patch_target_parse+0x250>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	4a59      	ldr	r2, [pc, #356]	; (8001474 <patch_target_parse+0x254>)
 800130e:	460b      	mov	r3, r1
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4413      	add	r3, r2
 8001318:	3320      	adds	r3, #32
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	601a      	str	r2, [r3, #0]
			if (patch[n].target) {  // test if above zero
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <patch_target_parse+0x250>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4a53      	ldr	r2, [pc, #332]	; (8001474 <patch_target_parse+0x254>)
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	3304      	adds	r3, #4
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 808a 	beq.w	800144e <patch_target_parse+0x22e>
				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 800133a:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <patch_target_parse+0x250>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4a4c      	ldr	r2, [pc, #304]	; (8001474 <patch_target_parse+0x254>)
 8001342:	460b      	mov	r3, r1
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	3304      	adds	r3, #4
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e00a      	b.n	800136e <patch_target_parse+0x14e>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4a48      	ldr	r2, [pc, #288]	; (800147c <patch_target_parse+0x25c>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <patch_target_parse+0x148>
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	3301      	adds	r3, #1
 8001366:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b31      	cmp	r3, #49	; 0x31
 8001372:	d9f1      	bls.n	8001358 <patch_target_parse+0x138>
				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b31      	cmp	r3, #49	; 0x31
 8001378:	d901      	bls.n	800137e <patch_target_parse+0x15e>
 800137a:	2331      	movs	r3, #49	; 0x31
 800137c:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b23      	cmp	r3, #35	; 0x23
 8001382:	d058      	beq.n	8001436 <patch_target_parse+0x216>
			patch[n].target=target_input; // write back corrected value
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <patch_target_parse+0x250>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <patch_target_parse+0x254>)
 800138c:	460b      	mov	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4413      	add	r3, r2
 8001396:	3304      	adds	r3, #4
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	701a      	strb	r2, [r3, #0]
			uint8_t target_index=patch[n].target_index;
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <patch_target_parse+0x250>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4a34      	ldr	r2, [pc, #208]	; (8001474 <patch_target_parse+0x254>)
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	3305      	adds	r3, #5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	71bb      	strb	r3, [r7, #6]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	4a32      	ldr	r2, [pc, #200]	; (8001480 <patch_target_parse+0x260>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	79ba      	ldrb	r2, [r7, #6]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d903      	bls.n	80013c8 <patch_target_parse+0x1a8>
			{	target_index=menu_vars_index_limit[target_index]; }
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <patch_target_parse+0x260>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <patch_target_parse+0x250>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4a29      	ldr	r2, [pc, #164]	; (8001474 <patch_target_parse+0x254>)
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	3305      	adds	r3, #5
 80013dc:	79ba      	ldrb	r2, [r7, #6]
 80013de:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4a28      	ldr	r2, [pc, #160]	; (8001484 <patch_target_parse+0x264>)
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	79ba      	ldrb	r2, [r7, #6]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fbb3 	bl	8000b58 <menu_vars>
 80013f2:	6038      	str	r0, [r7, #0]
			if (target_out_ptr)           {patch[n].out_ptr =target_out_ptr;     // write ptr
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d029      	beq.n	800144e <patch_target_parse+0x22e>
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <patch_target_parse+0x250>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <patch_target_parse+0x254>)
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	331c      	adds	r3, #28
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	601a      	str	r2, [r3, #0]
			patch[n].limiter=menu_vars_limiter[menu_vars_ref]; }
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <patch_target_parse+0x268>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <patch_target_parse+0x250>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <patch_target_parse+0x26c>)
 8001420:	5c98      	ldrb	r0, [r3, r2]
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <patch_target_parse+0x254>)
 8001424:	460b      	mov	r3, r1
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	3324      	adds	r3, #36	; 0x24
 8001430:	4602      	mov	r2, r0
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e00b      	b.n	800144e <patch_target_parse+0x22e>
				}
				else patch[n].target=0;  // write back 0 if failed
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <patch_target_parse+0x250>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <patch_target_parse+0x254>)
 800143e:	460b      	mov	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	3304      	adds	r3, #4
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <patch_target_parse+0x250>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <patch_target_parse+0x250>)
 8001458:	801a      	strh	r2, [r3, #0]
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <patch_target_parse+0x250>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b09      	cmp	r3, #9
 8001460:	f67f aee7 	bls.w	8001232 <patch_target_parse+0x12>
			}
		}
	}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000088e 	.word	0x2000088e
 8001474:	200051dc 	.word	0x200051dc
 8001478:	2000443c 	.word	0x2000443c
 800147c:	0800c718 	.word	0x0800c718
 8001480:	0800c6b0 	.word	0x0800c6b0
 8001484:	2000022c 	.word	0x2000022c
 8001488:	200079b1 	.word	0x200079b1
 800148c:	0800c6e4 	.word	0x0800c6e4

08001490 <patch_target_replace>:
			*ptr_to_modify =var_replaced;   // replace original value,ok
		}
	}
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 8001490:	b490      	push	{r4, r7}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <patch_target_replace+0x104>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	73bb      	strb	r3, [r7, #14]

	    for (n=0;n<10;n++){
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <patch_target_replace+0x108>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	e06b      	b.n	8001580 <patch_target_replace+0xf0>



		    if (patch[n].target) {         // check first for enable
 80014a8:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <patch_target_replace+0x108>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <patch_target_replace+0x10c>)
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	3304      	adds	r3, #4
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d058      	beq.n	8001574 <patch_target_replace+0xe4>

			    patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <patch_target_replace+0x108>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4a34      	ldr	r2, [pc, #208]	; (800159c <patch_target_replace+0x10c>)
 80014ca:	460b      	mov	r3, r1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	3320      	adds	r3, #32
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <patch_target_replace+0x108>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	4610      	mov	r0, r2
 80014e4:	7bba      	ldrb	r2, [r7, #14]
 80014e6:	881c      	ldrh	r4, [r3, #0]
 80014e8:	492c      	ldr	r1, [pc, #176]	; (800159c <patch_target_replace+0x10c>)
 80014ea:	4603      	mov	r3, r0
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4403      	add	r3, r0
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	440b      	add	r3, r1
 80014f8:	4622      	mov	r2, r4
 80014fa:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <patch_target_replace+0x108>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <patch_target_replace+0x10c>)
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	331c      	adds	r3, #28
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60bb      	str	r3, [r7, #8]
			    uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <patch_target_replace+0x108>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	7bba      	ldrb	r2, [r7, #14]
 800151c:	491f      	ldr	r1, [pc, #124]	; (800159c <patch_target_replace+0x10c>)
 800151e:	4603      	mov	r3, r0
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4403      	add	r3, r0
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	440b      	add	r3, r1
 800152c:	88db      	ldrh	r3, [r3, #6]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	80fb      	strh	r3, [r7, #6]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	717b      	strb	r3, [r7, #5]

			    uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	73fb      	strb	r3, [r7, #15]

			    if (var_replaced>patch[n].limiter) var_replaced=patch[n].limiter;  // limit lfo output
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <patch_target_replace+0x108>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4619      	mov	r1, r3
 8001540:	4a16      	ldr	r2, [pc, #88]	; (800159c <patch_target_replace+0x10c>)
 8001542:	460b      	mov	r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	3324      	adds	r3, #36	; 0x24
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	429a      	cmp	r2, r3
 8001554:	d90b      	bls.n	800156e <patch_target_replace+0xde>
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <patch_target_replace+0x108>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <patch_target_replace+0x10c>)
 800155e:	460b      	mov	r3, r1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	3324      	adds	r3, #36	; 0x24
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	73fb      	strb	r3, [r7, #15]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	701a      	strb	r2, [r3, #0]
	    for (n=0;n<10;n++){
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <patch_target_replace+0x108>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <patch_target_replace+0x108>)
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <patch_target_replace+0x108>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	2b09      	cmp	r3, #9
 8001586:	d98f      	bls.n	80014a8 <patch_target_replace+0x18>
		    }
	    }
    }
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bc90      	pop	{r4, r7}
 8001592:	4770      	bx	lr
 8001594:	20005988 	.word	0x20005988
 8001598:	2000088e 	.word	0x2000088e
 800159c:	200051dc 	.word	0x200051dc

080015a0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d118      	bne.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015ba:	4413      	add	r3, r2
 80015bc:	2236      	movs	r2, #54	; 0x36
 80015be:	4619      	mov	r1, r3
 80015c0:	482c      	ldr	r0, [pc, #176]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015c2:	f008 f9ff 	bl	80099c4 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80015ce:	d206      	bcs.n	80015de <HAL_TIM_PeriodElapsedCallback+0x3e>
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	3336      	adds	r3, #54	; 0x36
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015da:	801a      	strh	r2, [r3, #0]
 80015dc:	e002      	b.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0x44>
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a23      	ldr	r2, [pc, #140]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d137      	bne.n	800165e <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015f8:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4a20      	ldr	r2, [pc, #128]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001604:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800160a:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	3301      	adds	r3, #1
 8001616:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001618:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800161e:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800162a:	4293      	cmp	r3, r2
 800162c:	d906      	bls.n	800163c <HAL_TIM_PeriodElapsedCallback+0x9c>
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001630:	2202      	movs	r2, #2
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001636:	2200      	movs	r2, #0
 8001638:	801a      	strh	r2, [r3, #0]
 800163a:	e006      	b.n	800164a <HAL_TIM_PeriodElapsedCallback+0xaa>
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b29b      	uxth	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001648:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800165c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40014400 	.word	0x40014400
 800166c:	20010bc0 	.word	0x20010bc0
 8001670:	2000fbc0 	.word	0x2000fbc0
 8001674:	20011118 	.word	0x20011118
 8001678:	40000400 	.word	0x40000400
 800167c:	20004438 	.word	0x20004438
 8001680:	2000189c 	.word	0x2000189c
 8001684:	20000898 	.word	0x20000898
 8001688:	2000189e 	.word	0x2000189e
 800168c:	200018a0 	.word	0x200018a0
 8001690:	2000014e 	.word	0x2000014e

08001694 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001698:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <analoginputloopb+0xf4>)
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b3a      	ldr	r3, [pc, #232]	; (800178c <analoginputloopb+0xf8>)
 80016a4:	701a      	strb	r2, [r3, #0]
		    menuSelectX=cursor_menu[2]&15;  // Y select inside page
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <analoginputloopb+0xf4>)
 80016a8:	889b      	ldrh	r3, [r3, #4]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <analoginputloopb+0xfc>)
 80016b4:	701a      	strb	r2, [r3, #0]
        		    cursor_menu[1]=0;
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <analoginputloopb+0xf4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <analoginputloopb+0x100>)
 80016be:	881a      	ldrh	r2, [r3, #0]
 80016c0:	4b31      	ldr	r3, [pc, #196]	; (8001788 <analoginputloopb+0xf4>)
 80016c2:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 80016c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80016ce:	337f      	adds	r3, #127	; 0x7f
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b30      	ldr	r3, [pc, #192]	; (8001798 <analoginputloopb+0x104>)
 80016d6:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <analoginputloopb+0x108>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80016e0:	337f      	adds	r3, #127	; 0x7f
 80016e2:	085b      	lsrs	r3, r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <analoginputloopb+0x10c>)
 80016e8:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <analoginputloopb+0x104>)
 80016ec:	881a      	ldrh	r2, [r3, #0]
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <analoginputloopb+0x110>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d908      	bls.n	8001708 <analoginputloopb+0x74>
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <analoginputloopb+0x114>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <analoginputloopb+0x114>)
 8001706:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <analoginputloopb+0x104>)
 800170a:	881a      	ldrh	r2, [r3, #0]
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <analoginputloopb+0x110>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d208      	bcs.n	8001726 <analoginputloopb+0x92>
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <analoginputloopb+0x114>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <analoginputloopb+0x114>)
 8001724:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <analoginputloopb+0x10c>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	43db      	mvns	r3, r3
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <analoginputloopb+0x100>)
 8001730:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <analoginputloopb+0x114>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 800173c:	4293      	cmp	r3, r2
 800173e:	dd02      	ble.n	8001746 <analoginputloopb+0xb2>
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <analoginputloopb+0x114>)
 8001742:	2200      	movs	r2, #0
 8001744:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <analoginputloopb+0x114>)
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	2b00      	cmp	r3, #0
 800174e:	da03      	bge.n	8001758 <analoginputloopb+0xc4>
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <analoginputloopb+0x114>)
 8001752:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001756:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <analoginputloopb+0x104>)
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <analoginputloopb+0x110>)
 800175e:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <analoginputloopb+0x10c>)
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <analoginputloopb+0x118>)
 8001766:	801a      	strh	r2, [r3, #0]


    potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <analoginputloopb+0x11c>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <analoginputloopb+0x120>)
 8001770:	5c9b      	ldrb	r3, [r3, r2]
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <analoginputloopb+0x11c>)
 8001774:	8812      	ldrh	r2, [r2, #0]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	b2d9      	uxtb	r1, r3
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <analoginputloopb+0x124>)
 800177c:	5499      	strb	r1, [r3, r2]


    }
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	200034e4 	.word	0x200034e4
 800178c:	20000888 	.word	0x20000888
 8001790:	20000889 	.word	0x20000889
 8001794:	200034ce 	.word	0x200034ce
 8001798:	200034c6 	.word	0x200034c6
 800179c:	40000800 	.word	0x40000800
 80017a0:	200034ca 	.word	0x200034ca
 80017a4:	200034c8 	.word	0x200034c8
 80017a8:	200034d0 	.word	0x200034d0
 80017ac:	200034cc 	.word	0x200034cc
 80017b0:	2000088c 	.word	0x2000088c
 80017b4:	20000628 	.word	0x20000628
 80017b8:	20000428 	.word	0x20000428

080017bc <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <note_reset+0x78>)
 80017c2:	22ff      	movs	r2, #255	; 0xff
 80017c4:	71da      	strb	r2, [r3, #7]
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <note_reset+0x78>)
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	755a      	strb	r2, [r3, #21]
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <note_reset+0x78>)
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <note_reset+0x78>)
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <note_reset+0x78>)
 80017de:	22ff      	movs	r2, #255	; 0xff
 80017e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <note_reset+0x78>)
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <note_reset+0x78>)
 80017ee:	22ff      	movs	r2, #255	; 0xff
 80017f0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=127;note[1].detune=127;note[2].detune=127;note[3].detune=127;note[4].detune=127;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <note_reset+0x78>)
 80017f6:	227f      	movs	r2, #127	; 0x7f
 80017f8:	721a      	strb	r2, [r3, #8]
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <note_reset+0x78>)
 80017fc:	227f      	movs	r2, #127	; 0x7f
 80017fe:	759a      	strb	r2, [r3, #22]
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <note_reset+0x78>)
 8001802:	227f      	movs	r2, #127	; 0x7f
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <note_reset+0x78>)
 800180a:	227f      	movs	r2, #127	; 0x7f
 800180c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <note_reset+0x78>)
 8001812:	227f      	movs	r2, #127	; 0x7f
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=127;note[6].detune=127;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <note_reset+0x78>)
 800181a:	227f      	movs	r2, #127	; 0x7f
 800181c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <note_reset+0x78>)
 8001822:	227f      	movs	r2, #127	; 0x7f
 8001824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000158 	.word	0x20000158

08001838 <main_initial>:

void main_initial(void){
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b0a0      	sub	sp, #128	; 0x80
 800183c:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 800183e:	4ba7      	ldr	r3, [pc, #668]	; (8001adc <main_initial+0x2a4>)
 8001840:	66bb      	str	r3, [r7, #104]	; 0x68



	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001842:	48a7      	ldr	r0, [pc, #668]	; (8001ae0 <main_initial+0x2a8>)
 8001844:	f007 fc46 	bl	80090d4 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001848:	48a6      	ldr	r0, [pc, #664]	; (8001ae4 <main_initial+0x2ac>)
 800184a:	f007 fc43 	bl	80090d4 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 800184e:	48a6      	ldr	r0, [pc, #664]	; (8001ae8 <main_initial+0x2b0>)
 8001850:	f008 fbde 	bl	800a010 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001854:	4ba5      	ldr	r3, [pc, #660]	; (8001aec <main_initial+0x2b4>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 800185a:	48a5      	ldr	r0, [pc, #660]	; (8001af0 <main_initial+0x2b8>)
 800185c:	f008 fb7e 	bl	8009f5c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001860:	48a4      	ldr	r0, [pc, #656]	; (8001af4 <main_initial+0x2bc>)
 8001862:	f008 fb7b 	bl	8009f5c <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001866:	2100      	movs	r1, #0
 8001868:	489f      	ldr	r0, [pc, #636]	; (8001ae8 <main_initial+0x2b0>)
 800186a:	f008 fce5 	bl	800a238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800186e:	2104      	movs	r1, #4
 8001870:	489d      	ldr	r0, [pc, #628]	; (8001ae8 <main_initial+0x2b0>)
 8001872:	f008 fce1 	bl	800a238 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800187a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001880:	489d      	ldr	r0, [pc, #628]	; (8001af8 <main_initial+0x2c0>)
 8001882:	f004 f93b 	bl	8005afc <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001886:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800188a:	499c      	ldr	r1, [pc, #624]	; (8001afc <main_initial+0x2c4>)
 800188c:	489a      	ldr	r0, [pc, #616]	; (8001af8 <main_initial+0x2c0>)
 800188e:	f004 fa75 	bl	8005d7c <HAL_ADC_Start_DMA>
	HAL_DMA_Init(&hdma_spi2_tx);
 8001892:	489b      	ldr	r0, [pc, #620]	; (8001b00 <main_initial+0x2c8>)
 8001894:	f005 fa70 	bl	8006d78 <HAL_DMA_Init>

	HAL_I2C_MspInit(&hi2c2);
 8001898:	489a      	ldr	r0, [pc, #616]	; (8001b04 <main_initial+0x2cc>)
 800189a:	f003 fd37 	bl	800530c <HAL_I2C_MspInit>
	uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 800189e:	4a9a      	ldr	r2, [pc, #616]	; (8001b08 <main_initial+0x2d0>)
 80018a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a8:	6018      	str	r0, [r3, #0]
 80018aa:	3304      	adds	r3, #4
 80018ac:	7019      	strb	r1, [r3, #0]
	HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

	*/


	HAL_Delay(5);
 80018ae:	2005      	movs	r0, #5
 80018b0:	f004 f8bc 	bl	8005a2c <HAL_Delay>

	//               ----                  16Mbyte   flash   , w25q128   -----  16M (24bit) * 8bits   ( 1 page 256 bytes)
		send_spi1[0]=0x06; //enable write  , only lasts for single operation
 80018b4:	2306      	movs	r3, #6
 80018b6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2110      	movs	r1, #16
 80018be:	4893      	ldr	r0, [pc, #588]	; (8001b0c <main_initial+0x2d4>)
 80018c0:	f005 ffbe 	bl	8007840 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80018c4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	2201      	movs	r2, #1
 80018ce:	4885      	ldr	r0, [pc, #532]	; (8001ae4 <main_initial+0x2ac>)
 80018d0:	f007 fc89 	bl	80091e6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	2110      	movs	r1, #16
 80018d8:	488c      	ldr	r0, [pc, #560]	; (8001b0c <main_initial+0x2d4>)
 80018da:	f005 ffb1 	bl	8007840 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80018de:	2005      	movs	r0, #5
 80018e0:	f004 f8a4 	bl	8005a2c <HAL_Delay>
		send_spi1[0]=0x20; //sector erase
 80018e4:	2320      	movs	r3, #32
 80018e6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		send_spi1[2]=0; //24bit address
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		send_spi1[3]=1; //24bit address lsb
 80018f6:	2301      	movs	r3, #1
 80018f8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80018fc:	2200      	movs	r2, #0
 80018fe:	2110      	movs	r1, #16
 8001900:	4882      	ldr	r0, [pc, #520]	; (8001b0c <main_initial+0x2d4>)
 8001902:	f005 ff9d 	bl	8007840 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8001906:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	2204      	movs	r2, #4
 8001910:	4874      	ldr	r0, [pc, #464]	; (8001ae4 <main_initial+0x2ac>)
 8001912:	f007 fc68 	bl	80091e6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	2110      	movs	r1, #16
 800191a:	487c      	ldr	r0, [pc, #496]	; (8001b0c <main_initial+0x2d4>)
 800191c:	f005 ff90 	bl	8007840 <HAL_GPIO_WritePin>


		send_spi1[0]=0x05; //read status register  if writing
 8001920:	2305      	movs	r3, #5
 8001922:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		status_reg[1]=1; // set busy on
 800192c:	4b78      	ldr	r3, [pc, #480]	; (8001b10 <main_initial+0x2d8>)
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]

		while (status_reg[1]&1){								// check if write busy
 8001932:	e012      	b.n	800195a <main_initial+0x122>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2110      	movs	r1, #16
 8001938:	4874      	ldr	r0, [pc, #464]	; (8001b0c <main_initial+0x2d4>)
 800193a:	f005 ff81 	bl	8007840 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 800193e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001942:	23c8      	movs	r3, #200	; 0xc8
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2302      	movs	r3, #2
 8001948:	4a71      	ldr	r2, [pc, #452]	; (8001b10 <main_initial+0x2d8>)
 800194a:	4866      	ldr	r0, [pc, #408]	; (8001ae4 <main_initial+0x2ac>)
 800194c:	f007 fe98 	bl	8009680 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001950:	2201      	movs	r2, #1
 8001952:	2110      	movs	r1, #16
 8001954:	486d      	ldr	r0, [pc, #436]	; (8001b0c <main_initial+0x2d4>)
 8001956:	f005 ff73 	bl	8007840 <HAL_GPIO_WritePin>
		while (status_reg[1]&1){								// check if write busy
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <main_initial+0x2d8>)
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e6      	bne.n	8001934 <main_initial+0xfc>
		}

		send_spi1[0]=0x06; //enable write again
 8001966:	2306      	movs	r3, #6
 8001968:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2110      	movs	r1, #16
 8001970:	4866      	ldr	r0, [pc, #408]	; (8001b0c <main_initial+0x2d4>)
 8001972:	f005 ff65 	bl	8007840 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001976:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	2201      	movs	r2, #1
 8001980:	4858      	ldr	r0, [pc, #352]	; (8001ae4 <main_initial+0x2ac>)
 8001982:	f007 fc30 	bl	80091e6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	2110      	movs	r1, #16
 800198a:	4860      	ldr	r0, [pc, #384]	; (8001b0c <main_initial+0x2d4>)
 800198c:	f005 ff58 	bl	8007840 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001990:	2005      	movs	r0, #5
 8001992:	f004 f84b 	bl	8005a2c <HAL_Delay>

		//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
		uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001996:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <main_initial+0x2dc>)
 8001998:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800199c:	461d      	mov	r5, r3
 800199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	8023      	strh	r3, [r4, #0]
		memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 80019a6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80019aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ae:	220e      	movs	r2, #14
 80019b0:	4618      	mov	r0, r3
 80019b2:	f00a f837 	bl	800ba24 <memcpy>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2110      	movs	r1, #16
 80019ba:	4854      	ldr	r0, [pc, #336]	; (8001b0c <main_initial+0x2d4>)
 80019bc:	f005 ff40 	bl	8007840 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 80019c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80019c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c8:	220e      	movs	r2, #14
 80019ca:	4846      	ldr	r0, [pc, #280]	; (8001ae4 <main_initial+0x2ac>)
 80019cc:	f007 fc0b 	bl	80091e6 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2110      	movs	r1, #16
 80019d4:	484d      	ldr	r0, [pc, #308]	; (8001b0c <main_initial+0x2d4>)
 80019d6:	f005 ff33 	bl	8007840 <HAL_GPIO_WritePin>

		HAL_Delay(25);
 80019da:	2019      	movs	r0, #25
 80019dc:	f004 f826 	bl	8005a2c <HAL_Delay>
		send_spi1[0]=0x04; //disable write
 80019e0:	2304      	movs	r3, #4
 80019e2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2110      	movs	r1, #16
 80019ea:	4848      	ldr	r0, [pc, #288]	; (8001b0c <main_initial+0x2d4>)
 80019ec:	f005 ff28 	bl	8007840 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80019f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80019f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f8:	2201      	movs	r2, #1
 80019fa:	483a      	ldr	r0, [pc, #232]	; (8001ae4 <main_initial+0x2ac>)
 80019fc:	f007 fbf3 	bl	80091e6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2110      	movs	r1, #16
 8001a04:	4841      	ldr	r0, [pc, #260]	; (8001b0c <main_initial+0x2d4>)
 8001a06:	f005 ff1b 	bl	8007840 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f004 f80e 	bl	8005a2c <HAL_Delay>
		memcpy  (send_spi1,return_spi1, 14);   // clear out
 8001a10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a14:	220e      	movs	r2, #14
 8001a16:	4940      	ldr	r1, [pc, #256]	; (8001b18 <main_initial+0x2e0>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00a f803 	bl	800ba24 <memcpy>
		send_spi1[0]=0x03; //read page 1
 8001a1e:	2303      	movs	r3, #3
 8001a20:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		send_spi1[2]=0; //24bit address
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		send_spi1[3]=1; //24bit address lsb
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8001a36:	2200      	movs	r2, #0
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4834      	ldr	r0, [pc, #208]	; (8001b0c <main_initial+0x2d4>)
 8001a3c:	f005 ff00 	bl	8007840 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8001a40:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a44:	2364      	movs	r3, #100	; 0x64
 8001a46:	2204      	movs	r2, #4
 8001a48:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <main_initial+0x2ac>)
 8001a4a:	f007 fbcc 	bl	80091e6 <HAL_SPI_Transmit>
		HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8001a4e:	2364      	movs	r3, #100	; 0x64
 8001a50:	220a      	movs	r2, #10
 8001a52:	4931      	ldr	r1, [pc, #196]	; (8001b18 <main_initial+0x2e0>)
 8001a54:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <main_initial+0x2ac>)
 8001a56:	f007 fd02 	bl	800945e <HAL_SPI_Receive>

		//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
		//HAL_Delay(5);

		//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2110      	movs	r1, #16
 8001a5e:	482b      	ldr	r0, [pc, #172]	; (8001b0c <main_initial+0x2d4>)
 8001a60:	f005 feee 	bl	8007840 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001a64:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <main_initial+0x2ac>)
 8001a70:	f007 fbb9 	bl	80091e6 <HAL_SPI_Transmit>


	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	223c      	movs	r2, #60	; 0x3c
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f009 ffdd 	bl	800ba40 <memset>
	uint16_t mem_count2=0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <main_initial+0x2e4>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	2240      	movs	r2, #64	; 0x40
 8001aa0:	21a0      	movs	r1, #160	; 0xa0
 8001aa2:	4818      	ldr	r0, [pc, #96]	; (8001b04 <main_initial+0x2cc>)
 8001aa4:	f006 f93c 	bl	8007d20 <HAL_I2C_Mem_Read>

		uint16_t mem_counter=0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <main_initial+0x2e8>)
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <main_initial+0x2e4>)
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ac2:	c407      	stmia	r4!, {r0, r1, r2}
 8001ac4:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <main_initial+0x2ec>)
 8001ac8:	22a0      	movs	r2, #160	; 0xa0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4816      	ldr	r0, [pc, #88]	; (8001b28 <main_initial+0x2f0>)
 8001ace:	f009 ffa9 	bl	800ba24 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001ad8:	e082      	b.n	8001be0 <main_initial+0x3a8>
 8001ada:	bf00      	nop
 8001adc:	0800d2f0 	.word	0x0800d2f0
 8001ae0:	20011118 	.word	0x20011118
 8001ae4:	200110c0 	.word	0x200110c0
 8001ae8:	20011218 	.word	0x20011218
 8001aec:	40000400 	.word	0x40000400
 8001af0:	200111d0 	.word	0x200111d0
 8001af4:	20011260 	.word	0x20011260
 8001af8:	20010fc4 	.word	0x20010fc4
 8001afc:	200018a8 	.word	0x200018a8
 8001b00:	20011170 	.word	0x20011170
 8001b04:	2001106c 	.word	0x2001106c
 8001b08:	0800bf6c 	.word	0x0800bf6c
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	20000154 	.word	0x20000154
 8001b14:	0800bf74 	.word	0x0800bf74
 8001b18:	20004424 	.word	0x20004424
 8001b1c:	20000628 	.word	0x20000628
 8001b20:	200051ac 	.word	0x200051ac
 8001b24:	200006c4 	.word	0x200006c4
 8001b28:	20000158 	.word	0x20000158

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001b2c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b30:	4613      	mov	r3, r2
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4aa9      	ldr	r2, [pc, #676]	; (8001de0 <main_initial+0x5a8>)
 8001b3a:	1898      	adds	r0, r3, r2
 8001b3c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	332e      	adds	r3, #46	; 0x2e
 8001b4a:	4aa6      	ldr	r2, [pc, #664]	; (8001de4 <main_initial+0x5ac>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	2206      	movs	r2, #6
 8001b50:	4619      	mov	r1, r3
 8001b52:	f009 ff67 	bl	800ba24 <memcpy>

			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001b56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b5a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4aa1      	ldr	r2, [pc, #644]	; (8001de8 <main_initial+0x5b0>)
 8001b64:	1898      	adds	r0, r3, r2
 8001b66:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	336a      	adds	r3, #106	; 0x6a
 8001b72:	4a9c      	ldr	r2, [pc, #624]	; (8001de4 <main_initial+0x5ac>)
 8001b74:	4413      	add	r3, r2
 8001b76:	2205      	movs	r2, #5
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f009 ff53 	bl	800ba24 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001b7e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4a98      	ldr	r2, [pc, #608]	; (8001dec <main_initial+0x5b4>)
 8001b8c:	1898      	adds	r0, r3, r2
 8001b8e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b9e:	4a91      	ldr	r2, [pc, #580]	; (8001de4 <main_initial+0x5ac>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	2206      	movs	r2, #6
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f009 ff3d 	bl	800ba24 <memcpy>
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001baa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4a8e      	ldr	r2, [pc, #568]	; (8001df0 <main_initial+0x5b8>)
 8001bb8:	1898      	adds	r0, r3, r2
 8001bba:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001bca:	4a86      	ldr	r2, [pc, #536]	; (8001de4 <main_initial+0x5ac>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	2206      	movs	r2, #6
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f009 ff27 	bl	800ba24 <memcpy>
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001bd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001be0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	d9a1      	bls.n	8001b2c <main_initial+0x2f4>

	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001be8:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <main_initial+0x5bc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	e057      	b.n	8001ca0 <main_initial+0x468>

		for 	(n=0;n<18;n++){					// this is ok
 8001bf0:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <main_initial+0x5c0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	e049      	b.n	8001c8c <main_initial+0x454>
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001bf8:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <main_initial+0x5c0>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d114      	bne.n	8001c2a <main_initial+0x3f2>
 8001c00:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <main_initial+0x5bc>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <main_initial+0x5bc>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	460b      	mov	r3, r1
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4b76      	ldr	r3, [pc, #472]	; (8001df8 <main_initial+0x5c0>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	440b      	add	r3, r1
 8001c22:	3a80      	subs	r2, #128	; 0x80
 8001c24:	b2d1      	uxtb	r1, r2
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <main_initial+0x5c4>)
 8001c28:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001c2a:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <main_initial+0x5c0>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d114      	bne.n	8001c5c <main_initial+0x424>
 8001c32:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <main_initial+0x5bc>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <main_initial+0x5bc>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	460b      	mov	r3, r1
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <main_initial+0x5c0>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	440b      	add	r3, r1
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	b2d1      	uxtb	r1, r2
 8001c58:	4a68      	ldr	r2, [pc, #416]	; (8001dfc <main_initial+0x5c4>)
 8001c5a:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <main_initial+0x5c0>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d90d      	bls.n	8001c80 <main_initial+0x448>
 8001c64:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <main_initial+0x5bc>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <main_initial+0x5c0>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a60      	ldr	r2, [pc, #384]	; (8001dfc <main_initial+0x5c4>)
 8001c7c:	21ff      	movs	r1, #255	; 0xff
 8001c7e:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001c80:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <main_initial+0x5c0>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <main_initial+0x5c0>)
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <main_initial+0x5c0>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	2b11      	cmp	r3, #17
 8001c92:	d9b1      	bls.n	8001bf8 <main_initial+0x3c0>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001c94:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <main_initial+0x5bc>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <main_initial+0x5bc>)
 8001c9e:	801a      	strh	r2, [r3, #0]
 8001ca0:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <main_initial+0x5bc>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ca6:	d9a3      	bls.n	8001bf0 <main_initial+0x3b8>

		}

		}
	seq.pos=0;
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <main_initial+0x5c8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001cae:	2301      	movs	r3, #1
 8001cb0:	663b      	str	r3, [r7, #96]	; 0x60


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001cb2:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <main_initial+0x5bc>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	e016      	b.n	8001ce8 <main_initial+0x4b0>
	  		tempo_hold=i;
 8001cba:	4b4e      	ldr	r3, [pc, #312]	; (8001df4 <main_initial+0x5bc>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	663b      	str	r3, [r7, #96]	; 0x60
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <main_initial+0x5cc>)
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60

	  	tempo_lut[i]=tempo_hold;
 8001ccc:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <main_initial+0x5bc>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <main_initial+0x5d0>)
 8001cd8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <main_initial+0x5bc>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <main_initial+0x5bc>)
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <main_initial+0x5bc>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	2bff      	cmp	r3, #255	; 0xff
 8001cee:	d9e4      	bls.n	8001cba <main_initial+0x482>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <main_initial+0x5d4>)
 8001cf2:	2218      	movs	r2, #24
 8001cf4:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <main_initial+0x5bc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
 8001cfc:	e00b      	b.n	8001d16 <main_initial+0x4de>
			spell[i]=67;
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <main_initial+0x5bc>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <main_initial+0x5d8>)
 8001d06:	2143      	movs	r1, #67	; 0x43
 8001d08:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <main_initial+0x5bc>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <main_initial+0x5bc>)
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <main_initial+0x5bc>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d1e:	d3ee      	bcc.n	8001cfe <main_initial+0x4c6>

		}

		gfx_clear();
 8001d20:	f001 fff0 	bl	8003d04 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001d2a:	e006      	b.n	8001d3a <main_initial+0x502>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001d2c:	f7ff f988 	bl	8001040 <menu_parser>
	for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001d30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001d34:	3301      	adds	r3, #1
 8001d36:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001d3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001d3e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d42:	d3f3      	bcc.n	8001d2c <main_initial+0x4f4>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <main_initial+0x5bc>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	e00c      	b.n	8001d66 <main_initial+0x52e>
	RAM[i]=0;
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <main_initial+0x5bc>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <main_initial+0x5dc>)
 8001d54:	2100      	movs	r1, #0
 8001d56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <main_initial+0x5bc>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <main_initial+0x5bc>)
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <main_initial+0x5bc>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d6e:	d3ed      	bcc.n	8001d4c <main_initial+0x514>
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <main_initial+0x5bc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	e005      	b.n	8001d84 <main_initial+0x54c>
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <main_initial+0x5bc>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <main_initial+0x5bc>)
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <main_initial+0x5bc>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8c:	d3f4      	bcc.n	8001d78 <main_initial+0x540>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001d94:	e00c      	b.n	8001db0 <main_initial+0x578>
 8001d96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <main_initial+0x5e0>)
 8001da2:	2140      	movs	r1, #64	; 0x40
 8001da4:	5499      	strb	r1, [r3, r2]
 8001da6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001daa:	3301      	adds	r3, #1
 8001dac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001db0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db8:	d3ed      	bcc.n	8001d96 <main_initial+0x55e>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001dba:	4817      	ldr	r0, [pc, #92]	; (8001e18 <main_initial+0x5e0>)
 8001dbc:	f7fe fa0c 	bl	80001d8 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <main_initial+0x5e4>)
 8001dc6:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <main_initial+0x5e8>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <main_initial+0x5e8>)
 8001dd2:	701a      	strb	r2, [r3, #0]
			display_clear ();
 8001dd4:	f001 ffd8 	bl	8003d88 <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001dde:	e030      	b.n	8001e42 <main_initial+0x60a>
 8001de0:	2000443c 	.word	0x2000443c
 8001de4:	20000628 	.word	0x20000628
 8001de8:	20004720 	.word	0x20004720
 8001dec:	200051dc 	.word	0x200051dc
 8001df0:	200046e4 	.word	0x200046e4
 8001df4:	20000894 	.word	0x20000894
 8001df8:	2000088e 	.word	0x2000088e
 8001dfc:	20003b8c 	.word	0x20003b8c
 8001e00:	200051ac 	.word	0x200051ac
 8001e04:	001d4c00 	.word	0x001d4c00
 8001e08:	20003788 	.word	0x20003788
 8001e0c:	20000424 	.word	0x20000424
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20007bb8 	.word	0x20007bb8
 8001e18:	20010bc4 	.word	0x20010bc4
 8001e1c:	20005982 	.word	0x20005982
 8001e20:	20005371 	.word	0x20005371
 8001e24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <main_initial+0x62c>)
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e32:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <main_initial+0x630>)
 8001e34:	2130      	movs	r1, #48	; 0x30
 8001e36:	54d1      	strb	r1, [r2, r3]
 8001e38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <main_initial+0x634>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3e9      	bcc.n	8001e24 <main_initial+0x5ec>

		menuSelect=0;
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <main_initial+0x638>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <main_initial+0x63c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8001e5c:	bf00      	nop
 8001e5e:	3770      	adds	r7, #112	; 0x70
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdb0      	pop	{r4, r5, r7, pc}
 8001e64:	20005374 	.word	0x20005374
 8001e68:	20010bc4 	.word	0x20010bc4
 8001e6c:	20005371 	.word	0x20005371
 8001e70:	20000888 	.word	0x20000888
 8001e74:	2000088a 	.word	0x2000088a

08001e78 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b0d4      	sub	sp, #336	; 0x150
 8001e7c:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8001e7e:	4b80      	ldr	r3, [pc, #512]	; (8002080 <sampling+0x208>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 8001e84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e88:	2228      	movs	r2, #40	; 0x28
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f009 fdd7 	bl	800ba40 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 8001e92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e96:	2228      	movs	r2, #40	; 0x28
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f009 fdd0 	bl	800ba40 <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8001ea0:	4b78      	ldr	r3, [pc, #480]	; (8002084 <sampling+0x20c>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d104      	bne.n	8001eb2 <sampling+0x3a>
 8001ea8:	4b77      	ldr	r3, [pc, #476]	; (8002088 <sampling+0x210>)
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	801a      	strh	r2, [r3, #0]
 8001eb0:	e002      	b.n	8001eb8 <sampling+0x40>
 8001eb2:	4b75      	ldr	r3, [pc, #468]	; (8002088 <sampling+0x210>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	801a      	strh	r2, [r3, #0]

bank_write=0;
 8001eb8:	4b72      	ldr	r3, [pc, #456]	; (8002084 <sampling+0x20c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	4972      	ldr	r1, [pc, #456]	; (800208c <sampling+0x214>)
 8001ec2:	4873      	ldr	r0, [pc, #460]	; (8002090 <sampling+0x218>)
 8001ec4:	f009 fdae 	bl	800ba24 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 8001ec8:	4b72      	ldr	r3, [pc, #456]	; (8002094 <sampling+0x21c>)
 8001eca:	2210      	movs	r2, #16
 8001ecc:	4972      	ldr	r1, [pc, #456]	; (8002098 <sampling+0x220>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f009 fda8 	bl	800ba24 <memcpy>
sample_pointB=sample_pointD;
 8001ed4:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <sampling+0x210>)
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	4b70      	ldr	r3, [pc, #448]	; (800209c <sampling+0x224>)
 8001eda:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <sampling+0x228>)
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b6e      	ldr	r3, [pc, #440]	; (80020a4 <sampling+0x22c>)
 8001eea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001eee:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001ef2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da00      	bge.n	8001efc <sampling+0x84>
 8001efa:	331f      	adds	r3, #31
 8001efc:	115b      	asrs	r3, r3, #5
 8001efe:	461a      	mov	r2, r3
 8001f00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f04:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f10:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <sampling+0x230>)
 8001f12:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001f16:	4b64      	ldr	r3, [pc, #400]	; (80020a8 <sampling+0x230>)
 8001f18:	ed93 7a00 	vldr	s14, [r3]
 8001f1c:	eddf 6a63 	vldr	s13, [pc, #396]	; 80020ac <sampling+0x234>
 8001f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <sampling+0x230>)
 8001f26:	edc3 7a00 	vstr	s15, [r3]

uint8_t looper_dat[8]={1,3,7,15};
 8001f2a:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <sampling+0x238>)
 8001f2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f34:	6018      	str	r0, [r3, #0]
 8001f36:	3304      	adds	r3, #4
 8001f38:	7019      	strb	r1, [r3, #0]
 8001f3a:	f107 03a5 	add.w	r3, r7, #165	; 0xa5
 8001f3e:	2200      	movs	r2, #0
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 8001f44:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <sampling+0x23c>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d036      	beq.n	8001fbe <sampling+0x146>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note
 8001f50:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001f54:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <sampling+0x240>)
 8001f56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f62:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138


						for (i=0;i<256;i++){								// 128 is 1 note
 8001f66:	4b55      	ldr	r3, [pc, #340]	; (80020bc <sampling+0x244>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	801a      	strh	r2, [r3, #0]
 8001f6c:	e023      	b.n	8001fb6 <sampling+0x13e>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 8001f6e:	4b53      	ldr	r3, [pc, #332]	; (80020bc <sampling+0x244>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7c:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8001f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f84:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80020c0 <sampling+0x248>
 8001f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f90:	ee17 3a90 	vmov	r3, s15
 8001f94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <sampling+0x244>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <sampling+0x24c>)
 8001fa6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8001faa:	4b44      	ldr	r3, [pc, #272]	; (80020bc <sampling+0x244>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b42      	ldr	r3, [pc, #264]	; (80020bc <sampling+0x244>)
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <sampling+0x244>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d9d7      	bls.n	8001f6e <sampling+0xf6>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	; (80020b4 <sampling+0x23c>)
 8001fc0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001fc4:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001fc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fca:	2244      	movs	r2, #68	; 0x44
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f009 fd36 	bl	800ba40 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001fd4:	4b39      	ldr	r3, [pc, #228]	; (80020bc <sampling+0x244>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	e00e      	b.n	8001ffa <sampling+0x182>
 8001fdc:	4b37      	ldr	r3, [pc, #220]	; (80020bc <sampling+0x244>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001fe6:	443b      	add	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f843 2cf4 	str.w	r2, [r3, #-244]
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <sampling+0x244>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <sampling+0x244>)
 8001ff8:	801a      	strh	r2, [r3, #0]
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <sampling+0x244>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	d9ec      	bls.n	8001fdc <sampling+0x164>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <sampling+0x250>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4a31      	ldr	r2, [pc, #196]	; (80020cc <sampling+0x254>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b2db      	uxtb	r3, r3
 8002010:	3330      	adds	r3, #48	; 0x30
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <sampling+0x258>)
 8002016:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <sampling+0x250>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <sampling+0x254>)
 8002020:	fba2 1203 	umull	r1, r2, r2, r3
 8002024:	0952      	lsrs	r2, r2, #5
 8002026:	2164      	movs	r1, #100	; 0x64
 8002028:	fb01 f202 	mul.w	r2, r1, r2
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <sampling+0x25c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	08db      	lsrs	r3, r3, #3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	3330      	adds	r3, #48	; 0x30
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <sampling+0x258>)
 8002040:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_temp%10)+48;
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <sampling+0x250>)
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <sampling+0x25c>)
 800204a:	fba3 1302 	umull	r1, r3, r3, r2
 800204e:	08d9      	lsrs	r1, r3, #3
 8002050:	460b      	mov	r3, r1
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3330      	adds	r3, #48	; 0x30
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <sampling+0x258>)
 8002062:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <sampling+0x260>)
 8002068:	8b1b      	ldrh	r3, [r3, #24]
 800206a:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 800206e:	d302      	bcc.n	8002076 <sampling+0x1fe>
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <sampling+0x260>)
 8002072:	2200      	movs	r2, #0
 8002074:	831a      	strh	r2, [r3, #24]
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002076:	2300      	movs	r3, #0
 8002078:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 800207c:	e12c      	b.n	80022d8 <sampling+0x460>
 800207e:	bf00      	nop
 8002080:	20004438 	.word	0x20004438
 8002084:	2000014e 	.word	0x2000014e
 8002088:	200018a2 	.word	0x200018a2
 800208c:	200051ae 	.word	0x200051ae
 8002090:	20007990 	.word	0x20007990
 8002094:	200079a0 	.word	0x200079a0
 8002098:	200051bf 	.word	0x200051bf
 800209c:	20000892 	.word	0x20000892
 80020a0:	200051ac 	.word	0x200051ac
 80020a4:	20003788 	.word	0x20003788
 80020a8:	20004014 	.word	0x20004014
 80020ac:	42a00000 	.word	0x42a00000
 80020b0:	0800bf88 	.word	0x0800bf88
 80020b4:	20003b88 	.word	0x20003b88
 80020b8:	006487ec 	.word	0x006487ec
 80020bc:	20000894 	.word	0x20000894
 80020c0:	42800000 	.word	0x42800000
 80020c4:	20003988 	.word	0x20003988
 80020c8:	20005986 	.word	0x20005986
 80020cc:	51eb851f 	.word	0x51eb851f
 80020d0:	20000628 	.word	0x20000628
 80020d4:	cccccccd 	.word	0xcccccccd
 80020d8:	20000204 	.word	0x20000204


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 80020dc:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80020e0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80020e4:	49b4      	ldr	r1, [pc, #720]	; (80023b8 <sampling+0x540>)
 80020e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80020f0:	443b      	add	r3, r7
 80020f2:	f843 2c64 	str.w	r2, [r3, #-100]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80020f6:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80020fa:	49b0      	ldr	r1, [pc, #704]	; (80023bc <sampling+0x544>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	440b      	add	r3, r1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <sampling+0x2aa>
 800210c:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002110:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002114:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002118:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800211c:	3114      	adds	r1, #20
 800211e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 8002122:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002126:	49a5      	ldr	r1, [pc, #660]	; (80023bc <sampling+0x544>)
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10d      	bne.n	8002154 <sampling+0x2dc>
 8002138:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800213c:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002140:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4419      	add	r1, r3
 8002148:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800214c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 8002154:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002158:	4998      	ldr	r1, [pc, #608]	; (80023bc <sampling+0x544>)
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d10d      	bne.n	8002186 <sampling+0x30e>
 800216a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800216e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002172:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4419      	add	r1, r3
 800217a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800217e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 8002186:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800218a:	498c      	ldr	r1, [pc, #560]	; (80023bc <sampling+0x544>)
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	440b      	add	r3, r1
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d11c      	bne.n	80021d6 <sampling+0x35e>
 800219c:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80021a0:	3306      	adds	r3, #6
 80021a2:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80021a6:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4419      	add	r1, r3
 80021ae:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80021b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80021ba:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <sampling+0x548>)
 80021bc:	78db      	ldrb	r3, [r3, #3]
 80021be:	b25a      	sxtb	r2, r3
 80021c0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <sampling+0x548>)
 80021d4:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 80021d6:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80021da:	4978      	ldr	r1, [pc, #480]	; (80023bc <sampling+0x544>)
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	440b      	add	r3, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d11e      	bne.n	800222a <sampling+0x3b2>
 80021ec:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80021f0:	3306      	adds	r3, #6
 80021f2:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80021f6:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4419      	add	r1, r3
 80021fe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002202:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800220a:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <sampling+0x548>)
 800220c:	78db      	ldrb	r3, [r3, #3]
 800220e:	b25a      	sxtb	r2, r3
 8002210:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	b25b      	sxtb	r3, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	b25b      	sxtb	r3, r3
 8002220:	4013      	ands	r3, r2
 8002222:	b25b      	sxtb	r3, r3
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <sampling+0x548>)
 8002228:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 800222a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800222e:	4963      	ldr	r1, [pc, #396]	; (80023bc <sampling+0x544>)
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	440b      	add	r3, r1
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d109      	bne.n	8002254 <sampling+0x3dc>
 8002240:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002244:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002248:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800224c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 8002254:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002258:	4958      	ldr	r1, [pc, #352]	; (80023bc <sampling+0x544>)
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	440b      	add	r3, r1
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d109      	bne.n	800227e <sampling+0x406>
 800226a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800226e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002276:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800227a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>6) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800227e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002282:	494e      	ldr	r1, [pc, #312]	; (80023bc <sampling+0x544>)
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	440b      	add	r3, r1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d90a      	bls.n	80022aa <sampling+0x432>
 8002294:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002298:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800229c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022a0:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80022a4:	3114      	adds	r1, #20
 80022a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			tuned_list[pars_counter]=note[pars_counter].tuned;   // this needs to run here as well
 80022aa:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80022ae:	f897 114b 	ldrb.w	r1, [r7, #331]	; 0x14b
 80022b2:	4842      	ldr	r0, [pc, #264]	; (80023bc <sampling+0x544>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4403      	add	r3, r0
 80022be:	330c      	adds	r3, #12
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	004b      	lsls	r3, r1, #1
 80022c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022c8:	443b      	add	r3, r7
 80022ca:	f823 2ca0 	strh.w	r2, [r3, #-160]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80022ce:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80022d2:	3301      	adds	r3, #1
 80022d4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 80022d8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80022dc:	2b03      	cmp	r3, #3
 80022de:	f67f aefd 	bls.w	80020dc <sampling+0x264>

 }

note_holdA=0;
 80022e2:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <sampling+0x54c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 80022e8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80022ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022f0:	2200      	movs	r2, #0
 80022f2:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 80022f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80022f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022fc:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <sampling+0x550>)
 80022fe:	461c      	mov	r4, r3
 8002300:	4615      	mov	r5, r2
 8002302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002306:	682b      	ldr	r3, [r5, #0]
 8002308:	7023      	strb	r3, [r4, #0]
//adc_values[2]= 15; //force for now
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 800230a:	4b30      	ldr	r3, [pc, #192]	; (80023cc <sampling+0x554>)
 800230c:	791b      	ldrb	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d146      	bne.n	80023a0 <sampling+0x528>
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <sampling+0x554>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f9e0 	bl	80006e0 <__aeabi_i2d>
 8002320:	a321      	add	r3, pc, #132	; (adr r3, 80023a8 <sampling+0x530>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fd ff5f 	bl	80001e8 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fa3f 	bl	80007b4 <__aeabi_d2f>
 8002336:	4603      	mov	r3, r0
 8002338:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <sampling+0x558>)
 800233a:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <sampling+0x554>)
 800233e:	785b      	ldrb	r3, [r3, #1]
 8002340:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f9cb 	bl	80006e0 <__aeabi_i2d>
 800234a:	a319      	add	r3, pc, #100	; (adr r3, 80023b0 <sampling+0x538>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fd ff4a 	bl	80001e8 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fa2a 	bl	80007b4 <__aeabi_d2f>
 8002360:	4603      	mov	r3, r0
 8002362:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <sampling+0x554>)
 8002364:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <sampling+0x558>)
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <sampling+0x558>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <sampling+0x558>)
 8002378:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <sampling+0x554>)
 800237e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <sampling+0x554>)
 8002384:	edd3 7a04 	vldr	s15, [r3, #16]
 8002388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <sampling+0x554>)
 800238e:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <sampling+0x554>)
 8002394:	2201      	movs	r2, #1
 8002396:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <sampling+0x554>)
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <sampling+0x55c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	801a      	strh	r2, [r3, #0]
 80023a6:	e0d7      	b.n	8002558 <sampling+0x6e0>
 80023a8:	47ae147b 	.word	0x47ae147b
 80023ac:	3f947ae1 	.word	0x3f947ae1
 80023b0:	47ae147b 	.word	0x47ae147b
 80023b4:	3f847ae1 	.word	0x3f847ae1
 80023b8:	200034ac 	.word	0x200034ac
 80023bc:	20000158 	.word	0x20000158
 80023c0:	20000204 	.word	0x20000204
 80023c4:	200034aa 	.word	0x200034aa
 80023c8:	0800bf90 	.word	0x0800bf90
 80023cc:	20004720 	.word	0x20004720
 80023d0:	20004018 	.word	0x20004018
 80023d4:	20000894 	.word	0x20000894

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 80023d8:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <sampling+0x790>)
 80023da:	edd3 7a02 	vldr	s15, [r3, #8]
 80023de:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800260c <sampling+0x794>
 80023e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	d50e      	bpl.n	800240a <sampling+0x592>
 80023ec:	4b86      	ldr	r3, [pc, #536]	; (8002608 <sampling+0x790>)
 80023ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80023f2:	4b87      	ldr	r3, [pc, #540]	; (8002610 <sampling+0x798>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	4b82      	ldr	r3, [pc, #520]	; (8002608 <sampling+0x790>)
 80023fe:	edc3 7a02 	vstr	s15, [r3, #8]
 8002402:	4b81      	ldr	r3, [pc, #516]	; (8002608 <sampling+0x790>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4a80      	ldr	r2, [pc, #512]	; (8002608 <sampling+0x790>)
 8002408:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 800240a:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <sampling+0x790>)
 800240c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002410:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002614 <sampling+0x79c>
 8002414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	d522      	bpl.n	8002464 <sampling+0x5ec>
 800241e:	4b7a      	ldr	r3, [pc, #488]	; (8002608 <sampling+0x790>)
 8002420:	edd3 7a02 	vldr	s15, [r3, #8]
 8002424:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002618 <sampling+0x7a0>
 8002428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	dd18      	ble.n	8002464 <sampling+0x5ec>
 8002432:	4b75      	ldr	r3, [pc, #468]	; (8002608 <sampling+0x790>)
 8002434:	ed93 7a02 	vldr	s14, [r3, #8]
 8002438:	4b75      	ldr	r3, [pc, #468]	; (8002610 <sampling+0x798>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	4b71      	ldr	r3, [pc, #452]	; (8002608 <sampling+0x790>)
 8002444:	edc3 7a02 	vstr	s15, [r3, #8]
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <sampling+0x790>)
 800244a:	edd3 7a02 	vldr	s15, [r3, #8]
 800244e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800261c <sampling+0x7a4>
 8002452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002456:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002614 <sampling+0x79c>
 800245a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <sampling+0x790>)
 8002460:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <sampling+0x790>)
 8002466:	edd3 7a02 	vldr	s15, [r3, #8]
 800246a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002620 <sampling+0x7a8>
 800246e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	dd17      	ble.n	80024a8 <sampling+0x630>
 8002478:	4b63      	ldr	r3, [pc, #396]	; (8002608 <sampling+0x790>)
 800247a:	edd3 7a02 	vldr	s15, [r3, #8]
 800247e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002624 <sampling+0x7ac>
 8002482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	d50d      	bpl.n	80024a8 <sampling+0x630>
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <sampling+0x790>)
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <sampling+0x7b0>)
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <sampling+0x790>)
 8002494:	ed93 7a02 	vldr	s14, [r3, #8]
 8002498:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <sampling+0x790>)
 800249a:	edd3 7a04 	vldr	s15, [r3, #16]
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	4b59      	ldr	r3, [pc, #356]	; (8002608 <sampling+0x790>)
 80024a4:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 80024a8:	4b57      	ldr	r3, [pc, #348]	; (8002608 <sampling+0x790>)
 80024aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80024ae:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800262c <sampling+0x7b4>
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	dd1e      	ble.n	80024fa <sampling+0x682>
 80024bc:	4b52      	ldr	r3, [pc, #328]	; (8002608 <sampling+0x790>)
 80024be:	edd3 7a02 	vldr	s15, [r3, #8]
 80024c2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002630 <sampling+0x7b8>
 80024c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	d514      	bpl.n	80024fa <sampling+0x682>
 80024d0:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <sampling+0x790>)
 80024d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80024d6:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <sampling+0x790>)
 80024d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80024dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e0:	4b49      	ldr	r3, [pc, #292]	; (8002608 <sampling+0x790>)
 80024e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80024e6:	4b48      	ldr	r3, [pc, #288]	; (8002608 <sampling+0x790>)
 80024e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80024ec:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002630 <sampling+0x7b8>
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	4b44      	ldr	r3, [pc, #272]	; (8002608 <sampling+0x790>)
 80024f6:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <sampling+0x790>)
 80024fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002500:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002634 <sampling+0x7bc>
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	dd06      	ble.n	800251c <sampling+0x6a4>
 800250e:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <sampling+0x790>)
 8002510:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002514:	619a      	str	r2, [r3, #24]
 8002516:	4b3c      	ldr	r3, [pc, #240]	; (8002608 <sampling+0x790>)
 8002518:	4a47      	ldr	r2, [pc, #284]	; (8002638 <sampling+0x7c0>)
 800251a:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <sampling+0x790>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f8ef 	bl	8000704 <__aeabi_f2d>
 8002526:	a336      	add	r3, pc, #216	; (adr r3, 8002600 <sampling+0x788>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fd fe5c 	bl	80001e8 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4941      	ldr	r1, [pc, #260]	; (800263c <sampling+0x7c4>)
 8002536:	8809      	ldrh	r1, [r1, #0]
 8002538:	460c      	mov	r4, r1
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f7fe f939 	bl	80007b4 <__aeabi_d2f>
 8002542:	4602      	mov	r2, r0
 8002544:	493e      	ldr	r1, [pc, #248]	; (8002640 <sampling+0x7c8>)
 8002546:	00a3      	lsls	r3, r4, #2
 8002548:	440b      	add	r3, r1
 800254a:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <sampling+0x7c4>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	4b39      	ldr	r3, [pc, #228]	; (800263c <sampling+0x7c4>)
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <sampling+0x7c4>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	2bff      	cmp	r3, #255	; 0xff
 800255e:	f67f af3b 	bls.w	80023d8 <sampling+0x560>
}

uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002562:	4b38      	ldr	r3, [pc, #224]	; (8002644 <sampling+0x7cc>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	08db      	lsrs	r3, r3, #3
 8002568:	b29b      	uxth	r3, r3
 800256a:	3301      	adds	r3, #1
 800256c:	2201      	movs	r2, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <sampling+0x7c4>)
 800257c:	2200      	movs	r2, #0
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	e1f8      	b.n	8002974 <sampling+0xafc>

	i_total=i+sample_pointB;
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <sampling+0x7c4>)
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <sampling+0x7d0>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	sampling_position=i>>6;   //   0-8 steps
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <sampling+0x7c4>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <sampling+0x7d4>)
 800259c:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <sampling+0x7d4>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3307      	adds	r3, #7
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b28      	ldr	r3, [pc, #160]	; (8002650 <sampling+0x7d8>)
 80025ae:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <sampling+0x7dc>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4a26      	ldr	r2, [pc, #152]	; (8002654 <sampling+0x7dc>)
 80025ba:	4413      	add	r3, r2
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <sampling+0x7c4>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <sampling+0x7e0>)
 80025ca:	5cd2      	ldrb	r2, [r2, r3]
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <sampling+0x7c4>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	0912      	lsrs	r2, r2, #4
 80025d4:	b2d1      	uxtb	r1, r2
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <sampling+0x7e4>)
 80025d8:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <sampling+0x7e8>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d840      	bhi.n	8002668 <sampling+0x7f0>
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <sampling+0x7ec>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <sampling+0x7ec>)
 80025f6:	801a      	strh	r2, [r3, #0]
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <sampling+0x7e8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	e039      	b.n	8002674 <sampling+0x7fc>
 8002600:	d2f1a9fc 	.word	0xd2f1a9fc
 8002604:	3f50624d 	.word	0x3f50624d
 8002608:	20004720 	.word	0x20004720
 800260c:	447a0000 	.word	0x447a0000
 8002610:	20004018 	.word	0x20004018
 8002614:	44bb8000 	.word	0x44bb8000
 8002618:	4479c000 	.word	0x4479c000
 800261c:	43fa0000 	.word	0x43fa0000
 8002620:	44bb6000 	.word	0x44bb6000
 8002624:	44fa0000 	.word	0x44fa0000
 8002628:	43fa0000 	.word	0x43fa0000
 800262c:	44f9e000 	.word	0x44f9e000
 8002630:	451c4000 	.word	0x451c4000
 8002634:	453b8000 	.word	0x453b8000
 8002638:	457a0000 	.word	0x457a0000
 800263c:	20000894 	.word	0x20000894
 8002640:	200030a8 	.word	0x200030a8
 8002644:	20000144 	.word	0x20000144
 8002648:	20000892 	.word	0x20000892
 800264c:	20005988 	.word	0x20005988
 8002650:	20005989 	.word	0x20005989
 8002654:	200051ac 	.word	0x200051ac
 8002658:	20000628 	.word	0x20000628
 800265c:	20000428 	.word	0x20000428
 8002660:	200034d4 	.word	0x200034d4
 8002664:	200034a8 	.word	0x200034a8
 8002668:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <sampling+0x9b0>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b6d      	ldr	r3, [pc, #436]	; (8002828 <sampling+0x9b0>)
 8002672:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002674:	2300      	movs	r3, #0
 8002676:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800267a:	4b6c      	ldr	r3, [pc, #432]	; (800282c <sampling+0x9b4>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	b29a      	uxth	r2, r3
 8002682:	4b6b      	ldr	r3, [pc, #428]	; (8002830 <sampling+0x9b8>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	429a      	cmp	r2, r3
 800268a:	d009      	beq.n	80026a0 <sampling+0x828>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800268c:	4b67      	ldr	r3, [pc, #412]	; (800282c <sampling+0x9b4>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	b29b      	uxth	r3, r3
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b66      	ldr	r3, [pc, #408]	; (8002830 <sampling+0x9b8>)
 8002698:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800269a:	2301      	movs	r3, #1
 800269c:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 80026a0:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8157 	beq.w	8002958 <sampling+0xae0>
	{
		serial_tosend=1;
 80026aa:	4b62      	ldr	r3, [pc, #392]	; (8002834 <sampling+0x9bc>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
		note_reset();
 80026b0:	f7ff f884 	bl	80017bc <note_reset>
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works

	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80026b4:	4b5e      	ldr	r3, [pc, #376]	; (8002830 <sampling+0x9b8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80026c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026c6:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 80026c8:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <sampling+0x9c0>)
 80026ca:	885b      	ldrh	r3, [r3, #2]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80026d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026da:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 80026dc:	4b56      	ldr	r3, [pc, #344]	; (8002838 <sampling+0x9c0>)
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80026ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026ee:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 80026f0:	4b51      	ldr	r3, [pc, #324]	; (8002838 <sampling+0x9c0>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80026fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002702:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 8002704:	4b4d      	ldr	r3, [pc, #308]	; (800283c <sampling+0x9c4>)
 8002706:	799a      	ldrb	r2, [r3, #6]
 8002708:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800270c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	b2da      	uxtb	r2, r3
 8002716:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800271a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	4413      	add	r3, r2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <sampling+0x9b8>)
 800272c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 8002730:	4b42      	ldr	r3, [pc, #264]	; (800283c <sampling+0x9c4>)
 8002732:	7d1a      	ldrb	r2, [r3, #20]
 8002734:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002738:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	b2da      	uxtb	r2, r3
 8002742:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002746:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800274a:	789b      	ldrb	r3, [r3, #2]
 800274c:	4413      	add	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b36      	ldr	r3, [pc, #216]	; (8002830 <sampling+0x9b8>)
 8002758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 800275c:	4b37      	ldr	r3, [pc, #220]	; (800283c <sampling+0x9c4>)
 800275e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002762:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002766:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4413      	add	r3, r2
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <sampling+0x9b8>)
 8002778:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 800277c:	4b2f      	ldr	r3, [pc, #188]	; (800283c <sampling+0x9c4>)
 800277e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002782:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002786:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	4413      	add	r3, r2
 800278e:	b2da      	uxtb	r2, r3
 8002790:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002794:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002798:	78db      	ldrb	r3, [r3, #3]
 800279a:	4413      	add	r3, r2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <sampling+0x9b8>)
 80027a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <sampling+0x9b8>)
 80027ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <sampling+0x9c8>)
 80027b4:	5c9a      	ldrb	r2, [r3, r2]
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <sampling+0x9c4>)
 80027b8:	795b      	ldrb	r3, [r3, #5]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <sampling+0x9c4>)
 80027c0:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <sampling+0x9b8>)
 80027c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <sampling+0x9c8>)
 80027cc:	5c9a      	ldrb	r2, [r3, r2]
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <sampling+0x9c4>)
 80027d0:	7cdb      	ldrb	r3, [r3, #19]
 80027d2:	4413      	add	r3, r2
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <sampling+0x9c4>)
 80027d8:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <sampling+0x9b8>)
 80027dc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <sampling+0x9c8>)
 80027e4:	5c9a      	ldrb	r2, [r3, r2]
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <sampling+0x9c4>)
 80027e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ec:	4413      	add	r3, r2
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <sampling+0x9c4>)
 80027f2:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <sampling+0x9b8>)
 80027f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <sampling+0x9c8>)
 80027fe:	5c9a      	ldrb	r2, [r3, r2]
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <sampling+0x9c4>)
 8002802:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002806:	4413      	add	r3, r2
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <sampling+0x9c4>)
 800280c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

//	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
		patch_target_replace();
 8002810:	f7fe fe3e 	bl	8001490 <patch_target_replace>
		uint8_t detune_temp=0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <sampling+0x9cc>)
 800281c:	2200      	movs	r2, #0
 800281e:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002820:	2300      	movs	r3, #0
 8002822:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8002826:	e092      	b.n	800294e <sampling+0xad6>
 8002828:	200034d4 	.word	0x200034d4
 800282c:	200034a8 	.word	0x200034a8
 8002830:	200051ac 	.word	0x200051ac
 8002834:	20007bb5 	.word	0x20007bb5
 8002838:	20000144 	.word	0x20000144
 800283c:	20000158 	.word	0x20000158
 8002840:	20007990 	.word	0x20007990
 8002844:	200018a4 	.word	0x200018a4

if (note[mask_i].pitch) {
 8002848:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 800284c:	49a6      	ldr	r1, [pc, #664]	; (8002ae8 <sampling+0xc70>)
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	440b      	add	r3, r1
 8002858:	3302      	adds	r3, #2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d071      	beq.n	8002944 <sampling+0xacc>

	//	note[mask_i].pitch=(note[mask_i].pitch ;

		detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
 8002860:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002864:	49a0      	ldr	r1, [pc, #640]	; (8002ae8 <sampling+0xc70>)
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	440b      	add	r3, r1
 8002870:	3302      	adds	r3, #2
 8002872:	7819      	ldrb	r1, [r3, #0]
 8002874:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002878:	489b      	ldr	r0, [pc, #620]	; (8002ae8 <sampling+0xc70>)
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4403      	add	r3, r0
 8002884:	3308      	adds	r3, #8
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	440b      	add	r3, r1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
		if(detune_temp>27) detune_temp=27;
 8002894:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8002898:	2b1b      	cmp	r3, #27
 800289a:	d902      	bls.n	80028a2 <sampling+0xa2a>
 800289c:	231b      	movs	r3, #27
 800289e:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a


		note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]*126)>>7;   // put unit tune here
 80028a2:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80028a6:	4a91      	ldr	r2, [pc, #580]	; (8002aec <sampling+0xc74>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <sampling+0xc78>)
 80028ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028b2:	461a      	mov	r2, r3
 80028b4:	4613      	mov	r3, r2
 80028b6:	019b      	lsls	r3, r3, #6
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	11db      	asrs	r3, r3, #7
 80028be:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 80028c2:	b298      	uxth	r0, r3
 80028c4:	4988      	ldr	r1, [pc, #544]	; (8002ae8 <sampling+0xc70>)
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	330c      	adds	r3, #12
 80028d2:	4602      	mov	r2, r0
 80028d4:	801a      	strh	r2, [r3, #0]
		//tuned_list[mask_i]=note[mask_i].tuned;
		if (note[mask_i].osc>=3)  note[mask_i].tuned=note[mask_i].tuned>>1;
 80028d6:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 80028da:	4983      	ldr	r1, [pc, #524]	; (8002ae8 <sampling+0xc70>)
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	440b      	add	r3, r1
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d916      	bls.n	800291a <sampling+0xaa2>
 80028ec:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 80028f0:	497d      	ldr	r1, [pc, #500]	; (8002ae8 <sampling+0xc70>)
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	440b      	add	r3, r1
 80028fc:	330c      	adds	r3, #12
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	b298      	uxth	r0, r3
 8002908:	4977      	ldr	r1, [pc, #476]	; (8002ae8 <sampling+0xc70>)
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	440b      	add	r3, r1
 8002914:	330c      	adds	r3, #12
 8002916:	4602      	mov	r2, r0
 8002918:	801a      	strh	r2, [r3, #0]
		if (sampler.one_shot &(1<<mask_i))  sine_counter[4+(mask_i*3)]=0;  // clear if one shto enabled
 800291a:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <sampling+0xc7c>)
 800291c:	78db      	ldrb	r3, [r3, #3]
 800291e:	461a      	mov	r2, r3
 8002920:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002924:	fa42 f303 	asr.w	r3, r2, r3
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <sampling+0xacc>
 8002930:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	4a6e      	ldr	r2, [pc, #440]	; (8002af8 <sampling+0xc80>)
 800293e:	2100      	movs	r1, #0
 8002940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002944:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002948:	3301      	adds	r3, #1
 800294a:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 800294e:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002952:	2b04      	cmp	r3, #4
 8002954:	f67f af78 	bls.w	8002848 <sampling+0x9d0>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <sampling+0xc84>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <sampling+0xaf0>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 8002964:	f000 fe70 	bl	8003648 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002968:	4b64      	ldr	r3, [pc, #400]	; (8002afc <sampling+0xc84>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <sampling+0xc84>)
 8002972:	801a      	strh	r2, [r3, #0]
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <sampling+0xc84>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297c:	f4ff ae01 	bcc.w	8002582 <sampling+0x70a>
int32_t  sample_temp4;
int32_t  sample_temp5;


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002980:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <sampling+0xc7c>)
 8002982:	7b9b      	ldrb	r3, [r3, #14]
 8002984:	b29b      	uxth	r3, r3
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b5a      	ldr	r3, [pc, #360]	; (8002af4 <sampling+0xc7c>)
 800298c:	7bdb      	ldrb	r3, [r3, #15]
 800298e:	b29b      	uxth	r3, r3
 8002990:	4413      	add	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <sampling+0xc7c>)
 8002996:	80da      	strh	r2, [r3, #6]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002998:	4b56      	ldr	r3, [pc, #344]	; (8002af4 <sampling+0xc7c>)
 800299a:	7c1b      	ldrb	r3, [r3, #16]
 800299c:	b29b      	uxth	r3, r3
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <sampling+0xc7c>)
 80029a4:	7c5b      	ldrb	r3, [r3, #17]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <sampling+0xc7c>)
 80029ae:	811a      	strh	r2, [r3, #8]

	if ((sampler.one_shot&1) && (sine_counter[4]>(sampler.end-1000)) && (note[0].osc==3))   {note[0].tuned=0; sine_counter[4] =0;} //stop at the end
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <sampling+0xc7c>)
 80029b2:	78db      	ldrb	r3, [r3, #3]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d011      	beq.n	80029e0 <sampling+0xb68>
 80029bc:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <sampling+0xc80>)
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <sampling+0xc7c>)
 80029c2:	8912      	ldrh	r2, [r2, #8]
 80029c4:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d909      	bls.n	80029e0 <sampling+0xb68>
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <sampling+0xc70>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d105      	bne.n	80029e0 <sampling+0xb68>
 80029d4:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <sampling+0xc70>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	819a      	strh	r2, [r3, #12]
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <sampling+0xc80>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))    note[1].tuned=0;
 80029e0:	4b44      	ldr	r3, [pc, #272]	; (8002af4 <sampling+0xc7c>)
 80029e2:	78db      	ldrb	r3, [r3, #3]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <sampling+0xb92>
 80029ec:	4b42      	ldr	r3, [pc, #264]	; (8002af8 <sampling+0xc80>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <sampling+0xc7c>)
 80029f2:	8912      	ldrh	r2, [r2, #8]
 80029f4:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d906      	bls.n	8002a0a <sampling+0xb92>
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <sampling+0xc70>)
 80029fe:	7b9b      	ldrb	r3, [r3, #14]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d102      	bne.n	8002a0a <sampling+0xb92>
 8002a04:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <sampling+0xc70>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	835a      	strh	r2, [r3, #26]
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))    note[2].tuned=0;
 8002a0a:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <sampling+0xc7c>)
 8002a0c:	78db      	ldrb	r3, [r3, #3]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <sampling+0xbbc>
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <sampling+0xc80>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	4a36      	ldr	r2, [pc, #216]	; (8002af4 <sampling+0xc7c>)
 8002a1c:	8912      	ldrh	r2, [r2, #8]
 8002a1e:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d906      	bls.n	8002a34 <sampling+0xbbc>
 8002a26:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <sampling+0xc70>)
 8002a28:	7f1b      	ldrb	r3, [r3, #28]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d102      	bne.n	8002a34 <sampling+0xbbc>
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <sampling+0xc70>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))   note[3].tuned=0;
 8002a34:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <sampling+0xc7c>)
 8002a36:	78db      	ldrb	r3, [r3, #3]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00f      	beq.n	8002a60 <sampling+0xbe8>
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <sampling+0xc80>)
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	4a2b      	ldr	r2, [pc, #172]	; (8002af4 <sampling+0xc7c>)
 8002a46:	8912      	ldrh	r2, [r2, #8]
 8002a48:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d907      	bls.n	8002a60 <sampling+0xbe8>
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <sampling+0xc70>)
 8002a52:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d102      	bne.n	8002a60 <sampling+0xbe8>
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <sampling+0xc70>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	86da      	strh	r2, [r3, #54]	; 0x36

	sine_ptr_temp[0]=&sine_counter[3];
 8002a60:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a64:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a68:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <sampling+0xc88>)
 8002a6a:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002a6c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a74:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <sampling+0xc8c>)
 8002a76:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002a78:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a80:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <sampling+0xc90>)
 8002a82:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002a84:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <sampling+0xc94>)
 8002a8e:	60da      	str	r2, [r3, #12]


	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <sampling+0xc7c>)
 8002a92:	7b9a      	ldrb	r2, [r3, #14]
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <sampling+0xc7c>)
 8002a96:	7c1b      	ldrb	r3, [r3, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d902      	bls.n	8002aa2 <sampling+0xc2a>
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <sampling+0xc7c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	739a      	strb	r2, [r3, #14]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <sampling+0xc7c>)
 8002aa4:	8b1a      	ldrh	r2, [r3, #24]
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <sampling+0xc7c>)
 8002aa8:	88db      	ldrh	r3, [r3, #6]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d203      	bcs.n	8002ab6 <sampling+0xc3e>
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <sampling+0xc7c>)
 8002ab0:	88da      	ldrh	r2, [r3, #6]
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <sampling+0xc7c>)
 8002ab4:	831a      	strh	r2, [r3, #24]
	if ((sampler.ram_seq+512)>sampler.end) sampler.ram_seq=sampler.start;
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <sampling+0xc7c>)
 8002ab8:	8b1b      	ldrh	r3, [r3, #24]
 8002aba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002abe:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <sampling+0xc7c>)
 8002ac0:	8912      	ldrh	r2, [r2, #8]
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	db03      	blt.n	8002ace <sampling+0xc56>
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <sampling+0xc7c>)
 8002ac8:	88da      	ldrh	r2, [r3, #6]
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <sampling+0xc7c>)
 8002acc:	831a      	strh	r2, [r3, #24]

	sampler.length=sampler.end-sampler.start;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <sampling+0xc7c>)
 8002ad0:	891a      	ldrh	r2, [r3, #8]
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <sampling+0xc7c>)
 8002ad4:	88db      	ldrh	r3, [r3, #6]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <sampling+0xc7c>)
 8002adc:	815a      	strh	r2, [r3, #10]
	 if(!note[2].tuned)	sampler_offset=(sampler.offset&15)*1024;
 8002ade:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <sampling+0xc70>)
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	e014      	b.n	8002b10 <sampling+0xc98>
 8002ae6:	bf00      	nop
 8002ae8:	20000158 	.word	0x20000158
 8002aec:	0800bff0 	.word	0x0800bff0
 8002af0:	0800c00c 	.word	0x0800c00c
 8002af4:	20000204 	.word	0x20000204
 8002af8:	20000828 	.word	0x20000828
 8002afc:	20000894 	.word	0x20000894
 8002b00:	20000834 	.word	0x20000834
 8002b04:	20000840 	.word	0x20000840
 8002b08:	2000084c 	.word	0x2000084c
 8002b0c:	20000858 	.word	0x20000858
 8002b10:	d107      	bne.n	8002b22 <sampling+0xcaa>
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <sampling+0xd28>)
 8002b14:	791b      	ldrb	r3, [r3, #4]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <sampling+0xd2c>)
 8002b20:	601a      	str	r2, [r3, #0]

	if(sine_counter[9]<=sampler.start) sine_counter[9]=sampler.start;
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <sampling+0xd30>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <sampling+0xd28>)
 8002b28:	88d2      	ldrh	r2, [r2, #6]
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d804      	bhi.n	8002b38 <sampling+0xcc0>
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <sampling+0xd28>)
 8002b30:	88db      	ldrh	r3, [r3, #6]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <sampling+0xd30>)
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
	 if(note[2].tuned)		sine_counter[9]=sine_counter[9]+512;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <sampling+0xd34>)
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <sampling+0xcd4>
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <sampling+0xd30>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b48:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <sampling+0xd30>)
 8002b4a:	6253      	str	r3, [r2, #36]	; 0x24

	if (sine_counter[9]>((sampler.length+sampler.start+sampler_offset)-512))   {sine_counter[9]=sampler.start+sampler_offset; note[2].tuned=0;}
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <sampling+0xd30>)
 8002b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <sampling+0xd28>)
 8002b52:	895b      	ldrh	r3, [r3, #10]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <sampling+0xd28>)
 8002b58:	88db      	ldrh	r3, [r3, #6]
 8002b5a:	440b      	add	r3, r1
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <sampling+0xd2c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	440b      	add	r3, r1
 8002b64:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d90a      	bls.n	8002b82 <sampling+0xd0a>
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <sampling+0xd28>)
 8002b6e:	88db      	ldrh	r3, [r3, #6]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <sampling+0xd2c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <sampling+0xd30>)
 8002b7a:	6253      	str	r3, [r2, #36]	; 0x24
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <sampling+0xd34>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28

	sampler.start_ptr=&RAM[sine_counter[9]-sampler_offset];
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <sampling+0xd30>)
 8002b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <sampling+0xd2c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <sampling+0xd38>)
 8002b90:	4413      	add	r3, r2
 8002b92:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <sampling+0xd28>)
 8002b94:	6153      	str	r3, [r2, #20]
//	sampler_offset=(sampler.offset&15)*(sampler.length>>4);


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <sampling+0xd3c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e1e1      	b.n	8002f62 <sampling+0x10ea>
 8002b9e:	bf00      	nop
 8002ba0:	20000204 	.word	0x20000204
 8002ba4:	2000fbb8 	.word	0x2000fbb8
 8002ba8:	20000828 	.word	0x20000828
 8002bac:	20000158 	.word	0x20000158
 8002bb0:	20007bb8 	.word	0x20007bb8
 8002bb4:	20000894 	.word	0x20000894
	i_total=i+sample_pointB;
 8002bb8:	4bcf      	ldr	r3, [pc, #828]	; (8002ef8 <sampling+0x1080>)
 8002bba:	881a      	ldrh	r2, [r3, #0]
 8002bbc:	4bcf      	ldr	r3, [pc, #828]	; (8002efc <sampling+0x1084>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	sampling_position=(i>>6);
 8002bc6:	4bcc      	ldr	r3, [pc, #816]	; (8002ef8 <sampling+0x1080>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	4bcb      	ldr	r3, [pc, #812]	; (8002f00 <sampling+0x1088>)
 8002bd2:	701a      	strb	r2, [r3, #0]
	sample_adc=input_holder[i];
 8002bd4:	4bc8      	ldr	r3, [pc, #800]	; (8002ef8 <sampling+0x1080>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4bca      	ldr	r3, [pc, #808]	; (8002f04 <sampling+0x108c>)
 8002bdc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002be0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sample_adc=(sample_adc-2040)<<12;
 8002be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be8:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002bec:	031b      	lsls	r3, r3, #12
 8002bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	ram_temp=((RAM[sampler.ram_seq])); // grab data
 8002bf2:	4bc5      	ldr	r3, [pc, #788]	; (8002f08 <sampling+0x1090>)
 8002bf4:	8b1b      	ldrh	r3, [r3, #24]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4bc4      	ldr	r3, [pc, #784]	; (8002f0c <sampling+0x1094>)
 8002bfa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	ram_temp=(ram_temp-2040)<<12;
 8002c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c06:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002c0a:	031b      	lsls	r3, r3, #12
 8002c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sampler.ram_seq++;
 8002c10:	4bbd      	ldr	r3, [pc, #756]	; (8002f08 <sampling+0x1090>)
 8002c12:	8b1b      	ldrh	r3, [r3, #24]
 8002c14:	3301      	adds	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4bbb      	ldr	r3, [pc, #748]	; (8002f08 <sampling+0x1090>)
 8002c1a:	831a      	strh	r2, [r3, #24]


	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 8002c1c:	4bb6      	ldr	r3, [pc, #728]	; (8002ef8 <sampling+0x1080>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f040 8095 	bne.w	8002d54 <sampling+0xedc>
 8002c2a:	f7fe fc31 	bl	8001490 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002c2e:	4bb8      	ldr	r3, [pc, #736]	; (8002f10 <sampling+0x1098>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fd54 	bl	80006e0 <__aeabi_i2d>
 8002c38:	a3ab      	add	r3, pc, #684	; (adr r3, 8002ee8 <sampling+0x1070>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fad3 	bl	80001e8 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7fd fdb3 	bl	80007b4 <__aeabi_d2f>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	ee00 3a10 	vmov	s0, r3
 8002c54:	f008 fe74 	bl	800b940 <arm_sin_f32>
 8002c58:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002c5c:	4ba8      	ldr	r3, [pc, #672]	; (8002f00 <sampling+0x1088>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c64:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6c:	4aa9      	ldr	r2, [pc, #676]	; (8002f14 <sampling+0x109c>)
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002c76:	4ba6      	ldr	r3, [pc, #664]	; (8002f10 <sampling+0x1098>)
 8002c78:	7a1b      	ldrb	r3, [r3, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fd30 	bl	80006e0 <__aeabi_i2d>
 8002c80:	a39b      	add	r3, pc, #620	; (adr r3, 8002ef0 <sampling+0x1078>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd faaf 	bl	80001e8 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd fd8f 	bl	80007b4 <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	ee00 3a10 	vmov	s0, r3
 8002c9c:	f008 fe50 	bl	800b940 <arm_sin_f32>
 8002ca0:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002ca4:	4b96      	ldr	r3, [pc, #600]	; (8002f00 <sampling+0x1088>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cac:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb4:	4a97      	ldr	r2, [pc, #604]	; (8002f14 <sampling+0x109c>)
 8002cb6:	3309      	adds	r3, #9
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002cc0:	4b93      	ldr	r3, [pc, #588]	; (8002f10 <sampling+0x1098>)
 8002cc2:	7c1b      	ldrb	r3, [r3, #16]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fd0b 	bl	80006e0 <__aeabi_i2d>
 8002cca:	a389      	add	r3, pc, #548	; (adr r3, 8002ef0 <sampling+0x1078>)
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	f7fd fa8a 	bl	80001e8 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd fd6a 	bl	80007b4 <__aeabi_d2f>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	ee00 3a10 	vmov	s0, r3
 8002ce6:	f008 fe2b 	bl	800b940 <arm_sin_f32>
 8002cea:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002cee:	4b84      	ldr	r3, [pc, #528]	; (8002f00 <sampling+0x1088>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cf6:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	4a85      	ldr	r2, [pc, #532]	; (8002f14 <sampling+0x109c>)
 8002d00:	3312      	adds	r3, #18
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002d0a:	4b81      	ldr	r3, [pc, #516]	; (8002f10 <sampling+0x1098>)
 8002d0c:	7e1b      	ldrb	r3, [r3, #24]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fce6 	bl	80006e0 <__aeabi_i2d>
 8002d14:	a376      	add	r3, pc, #472	; (adr r3, 8002ef0 <sampling+0x1078>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fa65 	bl	80001e8 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fd fd45 	bl	80007b4 <__aeabi_d2f>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	ee00 3a10 	vmov	s0, r3
 8002d30:	f008 fe06 	bl	800b940 <arm_sin_f32>
 8002d34:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002d38:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <sampling+0x1088>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d40:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d48:	4a72      	ldr	r2, [pc, #456]	; (8002f14 <sampling+0x109c>)
 8002d4a:	331b      	adds	r3, #27
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + tuned_list[0];  // normal adder full volume
 8002d54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d58:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		sample_accus[1] = sample_accus[1] + tuned_list[1];
 8002d62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002d66:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		sample_accus[2] = sample_accus[2] + tuned_list[2]; // bouncing somewhere
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8002d78:	4413      	add	r3, r2
 8002d7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		sample_accus[3] = sample_accus[3] + tuned_list[3];  // 7 cycles
 8002d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d82:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8002d86:	4413      	add	r3, r2
 8002d88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	if (sample_accus[0]>524287) sample_accus[0] =-1048576+sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002d8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d94:	db05      	blt.n	8002da2 <sampling+0xf2a>
 8002d96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d9a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (sample_accus[1]>524287) sample_accus[1] =-1048576+sample_accus[1] ; // faster >  than &  ,strange
 8002da2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002daa:	db05      	blt.n	8002db8 <sampling+0xf40>
 8002dac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002db0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002db4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	if (sample_accus[2]>524287) sample_accus[2] =-1048576+sample_accus[2] ; //
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dc0:	db05      	blt.n	8002dce <sampling+0xf56>
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002dca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	if (sample_accus[3]>524287) sample_accus[3] =-1048576+sample_accus[3] ; //
 8002dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd6:	db05      	blt.n	8002de4 <sampling+0xf6c>
 8002dd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ddc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002de0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8


	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8002de4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bfb8      	it	lt
 8002dec:	425b      	neglt	r3, r3
 8002dee:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8002df8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bfb8      	it	lt
 8002e00:	425b      	neglt	r3, r3
 8002e02:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bfb8      	it	lt
 8002e14:	425b      	neglt	r3, r3
 8002e16:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8002e20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bfb8      	it	lt
 8002e28:	425b      	neglt	r3, r3
 8002e2a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


					//sample_Accu[6]=sine_count2(0,sine_ptr_temp[0],sine_ptr_temp[0]);  // might unroll later
				//	sample_Accu[6]=sampler_oneshot(0,sine_ptr_temp[0],sine_ptr_temp[0]);  // might unroll later
					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 8002e34:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002e38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <sampling+0x10a0>)
 8002e42:	79d2      	ldrb	r2, [r2, #7]
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp2=(sample_temp1)>>2;
 8002e4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e50:	109b      	asrs	r3, r3, #2
 8002e52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				    //sample_Accu[0] =(sample_accus[0]+sample_accus[1])>>8;
					//sample_Accu[7]=sine_count2(1,sine_ptr_temp[1],sine_ptr_temp[1]);  // might unroll later // might unroll later
				//	sample_Accu[7]=sampler_oneshot(1,sine_ptr_temp[1],sine_ptr_temp[1]);  // might unroll later // might unroll later
					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8002e56:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002e5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <sampling+0x10a0>)
 8002e64:	7d52      	ldrb	r2, [r2, #21]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp3=sample_temp1>>2; // 20+8
 8002e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e72:	109b      	asrs	r3, r3, #2
 8002e74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
					//sample_Accu[1] =sample_accus[2]>>8;

					//sample_Accu[8]=sine_count2(2,sine_ptr_temp[2],sine_ptr_temp[2]);  // might unroll later // might unroll later
			//		sample_Accu[8]=sampler_oneshot(2,sine_ptr_temp[2],sine_ptr_temp[2]);  // might unroll later // might unroll later

					if (note[2].tuned) sample_Accu[8]=(*(sampler.start_ptr+i)-2040)<<11;
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <sampling+0x10a0>)
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <sampling+0x1020>
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <sampling+0x1090>)
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <sampling+0x1080>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002e92:	02db      	lsls	r3, r3, #11
 8002e94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8002e98:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002e9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <sampling+0x10a0>)
 8002ea6:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 8002eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eb6:	109b      	asrs	r3, r3, #2
 8002eb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c


					//sample_Accu[9]=sine_count2(3,sine_ptr_temp[3],sine_ptr_temp[3]);  // might unroll later // might unroll later
				//	sample_Accu[9]=sampler_oneshot(3,sine_ptr_temp[3],sine_ptr_temp[3]);  // might unroll later // might unroll later
					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8002ebc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002ec0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <sampling+0x10a0>)
 8002eca:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp5 =sample_temp1>>2;
 8002ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eda:	109b      	asrs	r3, r3, #2
 8002edc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <sampling+0x1080>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	e019      	b.n	8002f1c <sampling+0x10a4>
 8002ee8:	f9378ee3 	.word	0xf9378ee3
 8002eec:	3f793a2d 	.word	0x3f793a2d
 8002ef0:	bc6a7efa 	.word	0xbc6a7efa
 8002ef4:	3f789374 	.word	0x3f789374
 8002ef8:	20000894 	.word	0x20000894
 8002efc:	20000892 	.word	0x20000892
 8002f00:	20005988 	.word	0x20005988
 8002f04:	20004020 	.word	0x20004020
 8002f08:	20000204 	.word	0x20000204
 8002f0c:	20007bb8 	.word	0x20007bb8
 8002f10:	200001e4 	.word	0x200001e4
 8002f14:	20003564 	.word	0x20003564
 8002f18:	20000158 	.word	0x20000158
 8002f1c:	4a90      	ldr	r2, [pc, #576]	; (8003160 <sampling+0x12e8>)
 8002f1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 8002f26:	4b8f      	ldr	r3, [pc, #572]	; (8003164 <sampling+0x12ec>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4a8e      	ldr	r2, [pc, #568]	; (8003168 <sampling+0x12f0>)
 8002f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 8002f36:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <sampling+0x12ec>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4a8b      	ldr	r2, [pc, #556]	; (800316c <sampling+0x12f4>)
 8002f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 8002f46:	4b87      	ldr	r3, [pc, #540]	; (8003164 <sampling+0x12ec>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4a88      	ldr	r2, [pc, #544]	; (8003170 <sampling+0x12f8>)
 8002f4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002f56:	4b83      	ldr	r3, [pc, #524]	; (8003164 <sampling+0x12ec>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	4b81      	ldr	r3, [pc, #516]	; (8003164 <sampling+0x12ec>)
 8002f60:	801a      	strh	r2, [r3, #0]
 8002f62:	4b80      	ldr	r3, [pc, #512]	; (8003164 <sampling+0x12ec>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6a:	f4ff ae25 	bcc.w	8002bb8 <sampling+0xd40>
	} // end of osc , doing some sound

for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8002f74:	e011      	b.n	8002f9a <sampling+0x1122>

	sample_accus_hold[pars_counter]=sample_accus[pars_counter];
 8002f76:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002f7a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002f84:	443b      	add	r3, r7
 8002f86:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8002f8a:	497a      	ldr	r1, [pc, #488]	; (8003174 <sampling+0x12fc>)
 8002f8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8002f90:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002f94:	3301      	adds	r3, #1
 8002f96:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8002f9a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d9e9      	bls.n	8002f76 <sampling+0x10fe>
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002fa2:	4b70      	ldr	r3, [pc, #448]	; (8003164 <sampling+0x12ec>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	e31e      	b.n	80035e8 <sampling+0x1770>
				i_total=i+sample_pointB;
 8002faa:	4b6e      	ldr	r3, [pc, #440]	; (8003164 <sampling+0x12ec>)
 8002fac:	881a      	ldrh	r2, [r3, #0]
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <sampling+0x1300>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

			sampling_position=(i>>6);
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <sampling+0x12ec>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b6e      	ldr	r3, [pc, #440]	; (800317c <sampling+0x1304>)
 8002fc4:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002fc6:	4b67      	ldr	r3, [pc, #412]	; (8003164 <sampling+0x12ec>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002fd4:	443b      	add	r3, r7
 8002fd6:	f853 3cf4 	ldr.w	r3, [r3, #-244]
 8002fda:	4a62      	ldr	r2, [pc, #392]	; (8003164 <sampling+0x12ec>)
 8002fdc:	8812      	ldrh	r2, [r2, #0]
 8002fde:	f002 021f 	and.w	r2, r2, #31
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10f      	bne.n	800300c <sampling+0x1194>
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <sampling+0x1308>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	711a      	strb	r2, [r3, #4]
 8002ff2:	4b64      	ldr	r3, [pc, #400]	; (8003184 <sampling+0x130c>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	4b62      	ldr	r3, [pc, #392]	; (8003184 <sampling+0x130c>)
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	4b61      	ldr	r3, [pc, #388]	; (8003184 <sampling+0x130c>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b5e      	ldr	r3, [pc, #376]	; (8003184 <sampling+0x130c>)
 800300a:	801a      	strh	r2, [r3, #0]

			sample_Accu[0]=play_holder0[i];
 800300c:	4b55      	ldr	r3, [pc, #340]	; (8003164 <sampling+0x12ec>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b53      	ldr	r3, [pc, #332]	; (8003160 <sampling+0x12e8>)
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			sample_Accu[1]=play_holder1[i] ; // saw
 800301c:	4b51      	ldr	r3, [pc, #324]	; (8003164 <sampling+0x12ec>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <sampling+0x12f0>)
 8003024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003028:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			sample_Accu[2]=play_holder2[i];  // sine input
 800302c:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <sampling+0x12ec>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b4e      	ldr	r3, [pc, #312]	; (800316c <sampling+0x12f4>)
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			sample_Accu[3]=play_holder3[i] ;
 800303c:	4b49      	ldr	r3, [pc, #292]	; (8003164 <sampling+0x12ec>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <sampling+0x12f8>)
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

			// this section is about 100 tmr cycles
			if ((i&63)==0){
 800304c:	4b45      	ldr	r3, [pc, #276]	; (8003164 <sampling+0x12ec>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 811b 	bne.w	8003290 <sampling+0x1418>
			freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 800305a:	4b48      	ldr	r3, [pc, #288]	; (800317c <sampling+0x1304>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	4a4a      	ldr	r2, [pc, #296]	; (8003188 <sampling+0x1310>)
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a49      	ldr	r2, [pc, #292]	; (800318c <sampling+0x1314>)
 8003068:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 800306a:	4b44      	ldr	r3, [pc, #272]	; (800317c <sampling+0x1304>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4a46      	ldr	r2, [pc, #280]	; (8003188 <sampling+0x1310>)
 8003070:	3309      	adds	r3, #9
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a44      	ldr	r2, [pc, #272]	; (800318c <sampling+0x1314>)
 800307a:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 800307c:	4b3f      	ldr	r3, [pc, #252]	; (800317c <sampling+0x1304>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4a41      	ldr	r2, [pc, #260]	; (8003188 <sampling+0x1310>)
 8003082:	3312      	adds	r3, #18
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a40      	ldr	r2, [pc, #256]	; (800318c <sampling+0x1314>)
 800308c:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <sampling+0x1304>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	4a3d      	ldr	r2, [pc, #244]	; (8003188 <sampling+0x1310>)
 8003094:	331b      	adds	r3, #27
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3b      	ldr	r2, [pc, #236]	; (800318c <sampling+0x1314>)
 800309e:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <sampling+0x1314>)
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	dd04      	ble.n	80030be <sampling+0x1246>
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <sampling+0x1314>)
 80030b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e00b      	b.n	80030d6 <sampling+0x125e>
 80030be:	4b33      	ldr	r3, [pc, #204]	; (800318c <sampling+0x1314>)
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d503      	bpl.n	80030d6 <sampling+0x125e>
 80030ce:	4b2f      	ldr	r3, [pc, #188]	; (800318c <sampling+0x1314>)
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <sampling+0x1314>)
 80030d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80030dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	dd04      	ble.n	80030f4 <sampling+0x127c>
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <sampling+0x1314>)
 80030ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030f0:	611a      	str	r2, [r3, #16]
 80030f2:	e00b      	b.n	800310c <sampling+0x1294>
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <sampling+0x1314>)
 80030f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80030fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	d503      	bpl.n	800310c <sampling+0x1294>
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <sampling+0x1314>)
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 800310c:	4b1f      	ldr	r3, [pc, #124]	; (800318c <sampling+0x1314>)
 800310e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	dd04      	ble.n	800312a <sampling+0x12b2>
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <sampling+0x1314>)
 8003122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	e00b      	b.n	8003142 <sampling+0x12ca>
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <sampling+0x1314>)
 800312c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003138:	d503      	bpl.n	8003142 <sampling+0x12ca>
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <sampling+0x1314>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <sampling+0x1314>)
 8003144:	edd3 7a06 	vldr	s15, [r3, #24]
 8003148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	dd1c      	ble.n	8003190 <sampling+0x1318>
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <sampling+0x1314>)
 8003158:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800315c:	619a      	str	r2, [r3, #24]
 800315e:	e023      	b.n	80031a8 <sampling+0x1330>
 8003160:	2000718c 	.word	0x2000718c
 8003164:	20000894 	.word	0x20000894
 8003168:	2000598c 	.word	0x2000598c
 800316c:	2000618c 	.word	0x2000618c
 8003170:	2000698c 	.word	0x2000698c
 8003174:	200034ac 	.word	0x200034ac
 8003178:	20000892 	.word	0x20000892
 800317c:	20005988 	.word	0x20005988
 8003180:	20004720 	.word	0x20004720
 8003184:	200035f4 	.word	0x200035f4
 8003188:	20003564 	.word	0x20003564
 800318c:	20003544 	.word	0x20003544
 8003190:	4bcb      	ldr	r3, [pc, #812]	; (80034c0 <sampling+0x1648>)
 8003192:	edd3 7a06 	vldr	s15, [r3, #24]
 8003196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319e:	d503      	bpl.n	80031a8 <sampling+0x1330>
 80031a0:	4bc7      	ldr	r3, [pc, #796]	; (80034c0 <sampling+0x1648>)
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 80031a8:	4bc5      	ldr	r3, [pc, #788]	; (80034c0 <sampling+0x1648>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b6:	4bc2      	ldr	r3, [pc, #776]	; (80034c0 <sampling+0x1648>)
 80031b8:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 80031bc:	4bc0      	ldr	r3, [pc, #768]	; (80034c0 <sampling+0x1648>)
 80031be:	edd3 7a02 	vldr	s15, [r3, #8]
 80031c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ca:	4bbd      	ldr	r3, [pc, #756]	; (80034c0 <sampling+0x1648>)
 80031cc:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 80031d0:	4bbb      	ldr	r3, [pc, #748]	; (80034c0 <sampling+0x1648>)
 80031d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80031d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031de:	4bb8      	ldr	r3, [pc, #736]	; (80034c0 <sampling+0x1648>)
 80031e0:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 80031e4:	4bb6      	ldr	r3, [pc, #728]	; (80034c0 <sampling+0x1648>)
 80031e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80031ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f2:	4bb3      	ldr	r3, [pc, #716]	; (80034c0 <sampling+0x1648>)
 80031f4:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 80031f8:	4bb1      	ldr	r3, [pc, #708]	; (80034c0 <sampling+0x1648>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd fa81 	bl	8000704 <__aeabi_f2d>
 8003202:	a3ad      	add	r3, pc, #692	; (adr r3, 80034b8 <sampling+0x1640>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fc ffee 	bl	80001e8 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd face 	bl	80007b4 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	4aaa      	ldr	r2, [pc, #680]	; (80034c4 <sampling+0x164c>)
 800321c:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 800321e:	4ba8      	ldr	r3, [pc, #672]	; (80034c0 <sampling+0x1648>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fa6e 	bl	8000704 <__aeabi_f2d>
 8003228:	a3a3      	add	r3, pc, #652	; (adr r3, 80034b8 <sampling+0x1640>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f7fc ffdb 	bl	80001e8 <__aeabi_dmul>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f7fd fabb 	bl	80007b4 <__aeabi_d2f>
 800323e:	4603      	mov	r3, r0
 8003240:	4aa0      	ldr	r2, [pc, #640]	; (80034c4 <sampling+0x164c>)
 8003242:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003244:	4b9e      	ldr	r3, [pc, #632]	; (80034c0 <sampling+0x1648>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fa5b 	bl	8000704 <__aeabi_f2d>
 800324e:	a39a      	add	r3, pc, #616	; (adr r3, 80034b8 <sampling+0x1640>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fc ffc8 	bl	80001e8 <__aeabi_dmul>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	f7fd faa8 	bl	80007b4 <__aeabi_d2f>
 8003264:	4603      	mov	r3, r0
 8003266:	4a97      	ldr	r2, [pc, #604]	; (80034c4 <sampling+0x164c>)
 8003268:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 800326a:	4b95      	ldr	r3, [pc, #596]	; (80034c0 <sampling+0x1648>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd fa48 	bl	8000704 <__aeabi_f2d>
 8003274:	a390      	add	r3, pc, #576	; (adr r3, 80034b8 <sampling+0x1640>)
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f7fc ffb5 	bl	80001e8 <__aeabi_dmul>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f7fd fa95 	bl	80007b4 <__aeabi_d2f>
 800328a:	4603      	mov	r3, r0
 800328c:	4a8d      	ldr	r2, [pc, #564]	; (80034c4 <sampling+0x164c>)
 800328e:	60d3      	str	r3, [r2, #12]
		//freq_point[0]=0.50;

   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329c:	4b8a      	ldr	r3, [pc, #552]	; (80034c8 <sampling+0x1650>)
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <sampling+0x1650>)
 80032a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80032a8:	4b87      	ldr	r3, [pc, #540]	; (80034c8 <sampling+0x1650>)
 80032aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80032ae:	4b85      	ldr	r3, [pc, #532]	; (80034c4 <sampling+0x164c>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032bc:	4b82      	ldr	r3, [pc, #520]	; (80034c8 <sampling+0x1650>)
 80032be:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <sampling+0x1650>)
 80032c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80032c8:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <sampling+0x1648>)
 80032ca:	edd3 7a00 	vldr	s15, [r3]
 80032ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <sampling+0x1650>)
 80032d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80032d8:	4b79      	ldr	r3, [pc, #484]	; (80034c0 <sampling+0x1648>)
 80032da:	edd3 7a01 	vldr	s15, [r3, #4]
 80032de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e6:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <sampling+0x1650>)
 80032e8:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80032ec:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <sampling+0x1650>)
 80032ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80032f2:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <sampling+0x1648>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032fc:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <sampling+0x1650>)
 80032fe:	edd3 6a03 	vldr	s13, [r3, #12]
 8003302:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <sampling+0x1648>)
 8003304:	edd3 7a01 	vldr	s15, [r3, #4]
 8003308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800330c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003310:	4b6d      	ldr	r3, [pc, #436]	; (80034c8 <sampling+0x1650>)
 8003312:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 8003316:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <sampling+0x1650>)
 8003318:	edd3 7a03 	vldr	s15, [r3, #12]
 800331c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003320:	ee17 3a90 	vmov	r3, s15
 8003324:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 8003328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800332c:	ee07 3a90 	vmov	s15, r3
 8003330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003334:	4b64      	ldr	r3, [pc, #400]	; (80034c8 <sampling+0x1650>)
 8003336:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800333a:	4b63      	ldr	r3, [pc, #396]	; (80034c8 <sampling+0x1650>)
 800333c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <sampling+0x1650>)
 8003342:	edd3 6a06 	vldr	s13, [r3, #24]
 8003346:	4b5f      	ldr	r3, [pc, #380]	; (80034c4 <sampling+0x164c>)
 8003348:	edd3 7a01 	vldr	s15, [r3, #4]
 800334c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003354:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <sampling+0x1650>)
 8003356:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800335a:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <sampling+0x1650>)
 800335c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003360:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <sampling+0x1648>)
 8003362:	edd3 7a02 	vldr	s15, [r3, #8]
 8003366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800336a:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <sampling+0x1650>)
 800336c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003370:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <sampling+0x1648>)
 8003372:	edd3 7a03 	vldr	s15, [r3, #12]
 8003376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337e:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <sampling+0x1650>)
 8003380:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <sampling+0x1650>)
 8003386:	ed93 7a05 	vldr	s14, [r3, #20]
 800338a:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <sampling+0x1648>)
 800338c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003394:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <sampling+0x1650>)
 8003396:	edd3 6a06 	vldr	s13, [r3, #24]
 800339a:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <sampling+0x1648>)
 800339c:	edd3 7a03 	vldr	s15, [r3, #12]
 80033a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <sampling+0x1650>)
 80033aa:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 80033ae:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <sampling+0x1650>)
 80033b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80033b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b8:	ee17 3a90 	vmov	r3, s15
 80033bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		filter_accus[7]=sample_Accu[2];
 80033c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033cc:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <sampling+0x1650>)
 80033ce:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <sampling+0x1650>)
 80033d4:	ed93 7a07 	vldr	s14, [r3, #28]
 80033d8:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <sampling+0x1650>)
 80033da:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80033de:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <sampling+0x164c>)
 80033e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <sampling+0x1650>)
 80033ee:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80033f2:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <sampling+0x1650>)
 80033f4:	ed93 7a07 	vldr	s14, [r3, #28]
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <sampling+0x1648>)
 80033fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80033fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <sampling+0x1650>)
 8003404:	edd3 6a08 	vldr	s13, [r3, #32]
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <sampling+0x1648>)
 800340a:	edd3 7a05 	vldr	s15, [r3, #20]
 800340e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003416:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <sampling+0x1650>)
 8003418:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <sampling+0x1650>)
 800341e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <sampling+0x1648>)
 8003424:	edd3 7a04 	vldr	s15, [r3, #16]
 8003428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342c:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <sampling+0x1650>)
 800342e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <sampling+0x1648>)
 8003434:	edd3 7a05 	vldr	s15, [r3, #20]
 8003438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800343c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <sampling+0x1650>)
 8003442:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <sampling+0x1650>)
 8003448:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800344c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003450:	ee17 3a90 	vmov	r3, s15
 8003454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

				filter_accus[10]=sample_Accu[3];
 8003458:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003464:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <sampling+0x1650>)
 8003466:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <sampling+0x1650>)
 800346c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003470:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <sampling+0x1650>)
 8003472:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003476:	4b13      	ldr	r3, [pc, #76]	; (80034c4 <sampling+0x164c>)
 8003478:	edd3 7a03 	vldr	s15, [r3, #12]
 800347c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <sampling+0x1650>)
 8003486:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <sampling+0x1650>)
 800348c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <sampling+0x1648>)
 8003492:	edd3 7a06 	vldr	s15, [r3, #24]
 8003496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <sampling+0x1650>)
 800349c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <sampling+0x1648>)
 80034a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80034a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <sampling+0x1650>)
 80034b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80034b4:	e00a      	b.n	80034cc <sampling+0x1654>
 80034b6:	bf00      	nop
 80034b8:	9999999a 	.word	0x9999999a
 80034bc:	3fc99999 	.word	0x3fc99999
 80034c0:	20003544 	.word	0x20003544
 80034c4:	200034f4 	.word	0x200034f4
 80034c8:	20003508 	.word	0x20003508
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <sampling+0x17a4>)
 80034ce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80034d2:	4b53      	ldr	r3, [pc, #332]	; (8003620 <sampling+0x17a8>)
 80034d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80034d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034dc:	4b4f      	ldr	r3, [pc, #316]	; (800361c <sampling+0x17a4>)
 80034de:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80034e2:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <sampling+0x17a8>)
 80034e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80034e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f0:	4b4a      	ldr	r3, [pc, #296]	; (800361c <sampling+0x17a4>)
 80034f2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80034f6:	4b49      	ldr	r3, [pc, #292]	; (800361c <sampling+0x17a4>)
 80034f8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80034fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003500:	ee17 3a90 	vmov	r3, s15
 8003504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


		filter_Accu=filter_Accu2=0;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800350e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003512:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 8003516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800351a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800351e:	4413      	add	r3, r2
 8003520:	141b      	asrs	r3, r3, #16
 8003522:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 8003526:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800352a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800352e:	4413      	add	r3, r2
 8003530:	141b      	asrs	r3, r3, #16
 8003532:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <sampling+0x17ac>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2bc7      	cmp	r3, #199	; 0xc7
 800353c:	d005      	beq.n	800354a <sampling+0x16d2>
 800353e:	4b39      	ldr	r3, [pc, #228]	; (8003624 <sampling+0x17ac>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b37      	ldr	r3, [pc, #220]	; (8003624 <sampling+0x17ac>)
 8003548:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 800354a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800354e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003552:	db0a      	blt.n	800356a <sampling+0x16f2>
 8003554:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003558:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800355c:	4b32      	ldr	r3, [pc, #200]	; (8003628 <sampling+0x17b0>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b30      	ldr	r3, [pc, #192]	; (8003628 <sampling+0x17b0>)
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e007      	b.n	800357a <sampling+0x1702>
 800356a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800356e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003572:	dc02      	bgt.n	800357a <sampling+0x1702>
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <sampling+0x17b4>)
 8003576:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 800357a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	db0a      	blt.n	800359a <sampling+0x1722>
 8003584:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003588:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800358c:	4b26      	ldr	r3, [pc, #152]	; (8003628 <sampling+0x17b0>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <sampling+0x17b0>)
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	e007      	b.n	80035aa <sampling+0x1732>
 800359a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800359e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80035a2:	dc02      	bgt.n	80035aa <sampling+0x1732>
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <sampling+0x17b4>)
 80035a6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 80035aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80035ba:	b291      	uxth	r1, r2
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <sampling+0x17b8>)
 80035be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80035c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	3301      	adds	r3, #1
 80035d0:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80035d4:	b291      	uxth	r1, r2
 80035d6:	4a16      	ldr	r2, [pc, #88]	; (8003630 <sampling+0x17b8>)
 80035d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <sampling+0x17bc>)
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <sampling+0x17bc>)
 80035e6:	801a      	strh	r2, [r3, #0]
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <sampling+0x17bc>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f0:	f4ff acdb 	bcc.w	8002faa <sampling+0x1132>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80035f4:	4b10      	ldr	r3, [pc, #64]	; (8003638 <sampling+0x17c0>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <sampling+0x1790>
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <sampling+0x17c4>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <sampling+0x17c4>)
 8003606:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <sampling+0x17c8>)
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <sampling+0x17cc>)
 800360e:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 8003610:	bf00      	nop
 8003612:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8003616:	46bd      	mov	sp, r7
 8003618:	bdb0      	pop	{r4, r5, r7, pc}
 800361a:	bf00      	nop
 800361c:	20003508 	.word	0x20003508
 8003620:	20003544 	.word	0x20003544
 8003624:	200034c4 	.word	0x200034c4
 8003628:	2000798c 	.word	0x2000798c
 800362c:	fffffc01 	.word	0xfffffc01
 8003630:	20000898 	.word	0x20000898
 8003634:	20000894 	.word	0x20000894
 8003638:	2000014e 	.word	0x2000014e
 800363c:	2000443a 	.word	0x2000443a
 8003640:	20004438 	.word	0x20004438
 8003644:	20004434 	.word	0x20004434

08003648 <LFO_source>:
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }


void LFO_source(void){     // lfo
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b08d      	sub	sp, #52	; 0x34
 800364c:	af00      	add	r7, sp, #0


float	freq_temp=0;
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
float 	freq2_temp=0;
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t 	freq_saw=0;
 800365a:	2300      	movs	r3, #0
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t lfo_c ;
float offset=0;
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003664:	2300      	movs	r3, #0
 8003666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800366a:	e15a      	b.n	8003922 <LFO_source+0x2da>

	lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
 800366c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003670:	4bb3      	ldr	r3, [pc, #716]	; (8003940 <LFO_source+0x2f8>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	49b3      	ldr	r1, [pc, #716]	; (8003944 <LFO_source+0x2fc>)
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4403      	add	r3, r0
 8003682:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003686:	623b      	str	r3, [r7, #32]

	freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate] ;  // rate. this needs a little log
 8003688:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800368c:	49ae      	ldr	r1, [pc, #696]	; (8003948 <LFO_source+0x300>)
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	4bab      	ldr	r3, [pc, #684]	; (800394c <LFO_source+0x304>)
 800369e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80036a2:	60fb      	str	r3, [r7, #12]
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 reallys
	delay_value=(freq3_temp*8)*(LFO[lfo_c].delay&15);
 80036a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036a8:	49a7      	ldr	r1, [pc, #668]	; (8003948 <LFO_source+0x300>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3304      	adds	r3, #4
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	60bb      	str	r3, [r7, #8]

			freq3_temp=lfo_accu_temp+ freq3_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>(1647099+delay_value)) lfo_accu_temp=0+delay_value ; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f503 13c9 	add.w	r3, r3, #1646592	; 0x192000
 80036d4:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d902      	bls.n	80036e4 <LFO_source+0x9c>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	623b      	str	r3, [r7, #32]
 80036e2:	e001      	b.n	80036e8 <LFO_source+0xa0>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	623b      	str	r3, [r7, #32]


		if((!next_isr) && (!sampling_position))  lfo_accu_temp=20000;   // tempo sync, mediocre
 80036e8:	4b99      	ldr	r3, [pc, #612]	; (8003950 <LFO_source+0x308>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <LFO_source+0xb6>
 80036f0:	4b98      	ldr	r3, [pc, #608]	; (8003954 <LFO_source+0x30c>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <LFO_source+0xb6>
 80036f8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80036fc:	623b      	str	r3, [r7, #32]
		lfo_accu[lfo_c][sampling_position]=lfo_accu_temp;
 80036fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003702:	4b94      	ldr	r3, [pc, #592]	; (8003954 <LFO_source+0x30c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	498e      	ldr	r1, [pc, #568]	; (8003944 <LFO_source+0x2fc>)
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4403      	add	r3, r0
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp-delay_value;
 800371a:	6a3a      	ldr	r2, [r7, #32]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	ee07 3a90 	vmov	s15, r3
 8003724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003728:	edc7 7a05 	vstr	s15, [r7, #20]
		freq2_temp=(freq_temp*0.000003814697);  //0-360  , <<18
 800372c:	6978      	ldr	r0, [r7, #20]
 800372e:	f7fc ffe9 	bl	8000704 <__aeabi_f2d>
 8003732:	a381      	add	r3, pc, #516	; (adr r3, 8003938 <LFO_source+0x2f0>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc fd56 	bl	80001e8 <__aeabi_dmul>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f7fd f836 	bl	80007b4 <__aeabi_d2f>
 8003748:	4603      	mov	r3, r0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
		freq_temp_saw=freq2_temp*10430;
 800374c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003750:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003958 <LFO_source+0x310>
 8003754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375c:	ee17 3a90 	vmov	r3, s15
 8003760:	61bb      	str	r3, [r7, #24]
		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 8003762:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003766:	f008 f8eb 	bl	800b940 <arm_sin_f32>
 800376a:	ed87 0a05 	vstr	s0, [r7, #20]
		freq2_temp=freq_temp*LFO[lfo_c].depth*204;
 800376e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003772:	4975      	ldr	r1, [pc, #468]	; (8003948 <LFO_source+0x300>)
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	3301      	adds	r3, #1
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800378a:	edd7 7a05 	vldr	s15, [r7, #20]
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800395c <LFO_source+0x314>
 8003796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	//	if (!LFO[lfo_c].offset)    LFO[lfo_c].offset=0;   // se
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 800379e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037a2:	4969      	ldr	r1, [pc, #420]	; (8003948 <LFO_source+0x300>)
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3303      	adds	r3, #3
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037bc:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 80037c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80037c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c8:	ee17 3a90 	vmov	r3, s15
 80037cc:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq2_temp+offset);
 80037ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80037d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>32766)  freq2_temp=32767;
 80037de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037e2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003960 <LFO_source+0x318>
 80037e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	dd01      	ble.n	80037f4 <LFO_source+0x1ac>
 80037f0:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <LFO_source+0x31c>)
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000
 80037f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037f8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003968 <LFO_source+0x320>
 80037fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003804:	d501      	bpl.n	800380a <LFO_source+0x1c2>
 8003806:	4b59      	ldr	r3, [pc, #356]	; (800396c <LFO_source+0x324>)
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c

						output_hold=freq2_temp;
 800380a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800380e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003812:	ee17 3a90 	vmov	r3, s15
 8003816:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800381e:	4293      	cmp	r3, r2
 8003820:	d902      	bls.n	8003828 <LFO_source+0x1e0>
 8003822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003826:	61bb      	str	r3, [r7, #24]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003828:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800382c:	4946      	ldr	r1, [pc, #280]	; (8003948 <LFO_source+0x300>)
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3301      	adds	r3, #1
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003852:	4293      	cmp	r3, r2
 8003854:	d902      	bls.n	800385c <LFO_source+0x214>
 8003856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold+32767; // sine out
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003862:	493c      	ldr	r1, [pc, #240]	; (8003954 <LFO_source+0x30c>)
 8003864:	7809      	ldrb	r1, [r1, #0]
 8003866:	460c      	mov	r4, r1
 8003868:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800386c:	337f      	adds	r3, #127	; 0x7f
 800386e:	b298      	uxth	r0, r3
 8003870:	4935      	ldr	r1, [pc, #212]	; (8003948 <LFO_source+0x300>)
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4423      	add	r3, r4
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	440b      	add	r3, r1
 8003880:	4602      	mov	r2, r0
 8003882:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003884:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003888:	4b32      	ldr	r3, [pc, #200]	; (8003954 <LFO_source+0x30c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461c      	mov	r4, r3
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	b298      	uxth	r0, r3
 8003892:	492d      	ldr	r1, [pc, #180]	; (8003948 <LFO_source+0x300>)
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4413      	add	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4423      	add	r3, r4
 800389e:	330c      	adds	r3, #12
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	4602      	mov	r2, r0
 80038a6:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ae:	d202      	bcs.n	80038b6 <LFO_source+0x26e>
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e003      	b.n	80038be <LFO_source+0x276>
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80038bc:	61fb      	str	r3, [r7, #28]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 80038be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038c2:	4921      	ldr	r1, [pc, #132]	; (8003948 <LFO_source+0x300>)
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3301      	adds	r3, #1
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	11db      	asrs	r3, r3, #7
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	61fb      	str	r3, [r7, #28]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038ea:	4293      	cmp	r3, r2
 80038ec:	dd02      	ble.n	80038f4 <LFO_source+0x2ac>
 80038ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038f2:	61fb      	str	r3, [r7, #28]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 80038f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <LFO_source+0x30c>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	461c      	mov	r4, r3
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	b298      	uxth	r0, r3
 8003902:	4911      	ldr	r1, [pc, #68]	; (8003948 <LFO_source+0x300>)
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	4413      	add	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4423      	add	r3, r4
 800390e:	3314      	adds	r3, #20
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	440b      	add	r3, r1
 8003914:	4602      	mov	r2, r0
 8003916:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800391c:	3301      	adds	r3, #1
 800391e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003926:	2b09      	cmp	r3, #9
 8003928:	f67f aea0 	bls.w	800366c <LFO_source+0x24>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3734      	adds	r7, #52	; 0x34
 8003932:	46bd      	mov	sp, r7
 8003934:	bd90      	pop	{r4, r7, pc}
 8003936:	bf00      	nop
 8003938:	da9dd9cd 	.word	0xda9dd9cd
 800393c:	3ecfffff 	.word	0x3ecfffff
 8003940:	20005989 	.word	0x20005989
 8003944:	200035f8 	.word	0x200035f8
 8003948:	2000443c 	.word	0x2000443c
 800394c:	20003988 	.word	0x20003988
 8003950:	200034a8 	.word	0x200034a8
 8003954:	20005988 	.word	0x20005988
 8003958:	4622f800 	.word	0x4622f800
 800395c:	434c0000 	.word	0x434c0000
 8003960:	46fffc00 	.word	0x46fffc00
 8003964:	46fffe00 	.word	0x46fffe00
 8003968:	c6fffc00 	.word	0xc6fffc00
 800396c:	c6fffe00 	.word	0xc6fffe00

08003970 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
		default_menu3[feedback_loc+18]=potSource[380]+48;
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
*/


}   // end o void
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003986:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <displayBuffer2+0x168>)
 8003988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800398c:	461a      	mov	r2, r3
 800398e:	4b57      	ldr	r3, [pc, #348]	; (8003aec <displayBuffer2+0x16c>)
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800399a:	b29b      	uxth	r3, r3
 800399c:	336b      	adds	r3, #107	; 0x6b
 800399e:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 80039a0:	4b51      	ldr	r3, [pc, #324]	; (8003ae8 <displayBuffer2+0x168>)
 80039a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <displayBuffer2+0x16c>)
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	0c1b      	lsrs	r3, r3, #16
 80039b0:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4a4e      	ldr	r2, [pc, #312]	; (8003af0 <displayBuffer2+0x170>)
 80039b8:	4413      	add	r3, r2
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b4d      	ldr	r3, [pc, #308]	; (8003af4 <displayBuffer2+0x174>)
 80039be:	6810      	ldr	r0, [r2, #0]
 80039c0:	6851      	ldr	r1, [r2, #4]
 80039c2:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80039c4:	4a4c      	ldr	r2, [pc, #304]	; (8003af8 <displayBuffer2+0x178>)
 80039c6:	463b      	mov	r3, r7
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4611      	mov	r1, r2
 80039cc:	8019      	strh	r1, [r3, #0]
 80039ce:	3302      	adds	r3, #2
 80039d0:	0c12      	lsrs	r2, r2, #16
 80039d2:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 80039d4:	4b44      	ldr	r3, [pc, #272]	; (8003ae8 <displayBuffer2+0x168>)
 80039d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	461a      	mov	r2, r3
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <displayBuffer2+0x17c>)
 80039e0:	4413      	add	r3, r2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80039e8:	463b      	mov	r3, r7
 80039ea:	4618      	mov	r0, r3
 80039ec:	f007 ffec 	bl	800b9c8 <atoi>
 80039f0:	4603      	mov	r3, r0
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b42      	ldr	r3, [pc, #264]	; (8003b00 <displayBuffer2+0x180>)
 80039f6:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80039f8:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <displayBuffer2+0x180>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	483d      	ldr	r0, [pc, #244]	; (8003af4 <displayBuffer2+0x174>)
 8003a00:	f7fd f8aa 	bl	8000b58 <menu_vars>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a3f      	ldr	r2, [pc, #252]	; (8003b04 <displayBuffer2+0x184>)
 8003a08:	6013      	str	r3, [r2, #0]

//	memcpy(default_menu3+feedback_loc+8,temp_char2,8); // clear line
	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003a0a:	88bb      	ldrh	r3, [r7, #4]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	4a3e      	ldr	r2, [pc, #248]	; (8003b08 <displayBuffer2+0x188>)
 8003a10:	1898      	adds	r0, r3, r2
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4a36      	ldr	r2, [pc, #216]	; (8003af0 <displayBuffer2+0x170>)
 8003a18:	4413      	add	r3, r2
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f008 f800 	bl	800ba24 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);
 8003a24:	88bb      	ldrh	r3, [r7, #4]
 8003a26:	3311      	adds	r3, #17
 8003a28:	4a37      	ldr	r2, [pc, #220]	; (8003b08 <displayBuffer2+0x188>)
 8003a2a:	4413      	add	r3, r2
 8003a2c:	4937      	ldr	r1, [pc, #220]	; (8003b0c <displayBuffer2+0x18c>)
 8003a2e:	2203      	movs	r2, #3
 8003a30:	4618      	mov	r0, r3
 8003a32:	f007 fff7 	bl	800ba24 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003a36:	88bb      	ldrh	r3, [r7, #4]
 8003a38:	3305      	adds	r3, #5
 8003a3a:	4a33      	ldr	r2, [pc, #204]	; (8003b08 <displayBuffer2+0x188>)
 8003a3c:	4413      	add	r3, r2
 8003a3e:	883a      	ldrh	r2, [r7, #0]
 8003a40:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003a42:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <displayBuffer2+0x190>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d102      	bne.n	8003a50 <displayBuffer2+0xd0>
 8003a4a:	4b32      	ldr	r3, [pc, #200]	; (8003b14 <displayBuffer2+0x194>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <displayBuffer2+0x190>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b24      	cmp	r3, #36	; 0x24
 8003a56:	d102      	bne.n	8003a5e <displayBuffer2+0xde>
 8003a58:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <displayBuffer2+0x194>)
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	701a      	strb	r2, [r3, #0]
	     if (target_display)      // write LFO.target display , might use it for other things too
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <displayBuffer2+0x194>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02a      	beq.n	8003abc <displayBuffer2+0x13c>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8003a66:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <displayBuffer2+0x184>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	2b31      	cmp	r3, #49	; 0x31
 8003a72:	d901      	bls.n	8003a78 <displayBuffer2+0xf8>
 8003a74:	2300      	movs	r3, #0
 8003a76:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <displayBuffer2+0x194>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10c      	bne.n	8003a9a <displayBuffer2+0x11a>
 8003a80:	88bb      	ldrh	r3, [r7, #4]
 8003a82:	3308      	adds	r3, #8
 8003a84:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <displayBuffer2+0x188>)
 8003a86:	1898      	adds	r0, r3, r2
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <displayBuffer2+0x170>)
 8003a8e:	4413      	add	r3, r2
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2208      	movs	r2, #8
 8003a94:	4619      	mov	r1, r3
 8003a96:	f007 ffc5 	bl	800ba24 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <displayBuffer2+0x194>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d10c      	bne.n	8003abc <displayBuffer2+0x13c>
 8003aa2:	88bb      	ldrh	r3, [r7, #4]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <displayBuffer2+0x188>)
 8003aa8:	1898      	adds	r0, r3, r2
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <displayBuffer2+0x198>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f007 ffb4 	bl	800ba24 <memcpy>
	     		 		 	}

	     target_display=0;
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <displayBuffer2+0x194>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <displayBuffer2+0x19c>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b11      	cmp	r3, #17
 8003ac8:	d103      	bne.n	8003ad2 <displayBuffer2+0x152>
 8003aca:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <displayBuffer2+0x19c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8003ad0:	e005      	b.n	8003ade <displayBuffer2+0x15e>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <displayBuffer2+0x19c>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <displayBuffer2+0x19c>)
 8003adc:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000220 	.word	0x20000220
 8003aec:	20005374 	.word	0x20005374
 8003af0:	2000022c 	.word	0x2000022c
 8003af4:	20005978 	.word	0x20005978
 8003af8:	0800bfa4 	.word	0x0800bfa4
 8003afc:	20005774 	.word	0x20005774
 8003b00:	20005980 	.word	0x20005980
 8003b04:	20005974 	.word	0x20005974
 8003b08:	20010bc4 	.word	0x20010bc4
 8003b0c:	200007a4 	.word	0x200007a4
 8003b10:	200079b1 	.word	0x200079b1
 8003b14:	20005987 	.word	0x20005987
 8003b18:	200002f4 	.word	0x200002f4
 8003b1c:	20000150 	.word	0x20000150

08003b20 <SPI_command>:

void SPI_command(void){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <SPI_command+0x68>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d128      	bne.n	8003b80 <SPI_command+0x60>
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <SPI_command+0x6c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d124      	bne.n	8003b80 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <SPI_command+0x70>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <SPI_command+0x2a>
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <SPI_command+0x74>)
 8003b44:	22f8      	movs	r2, #248	; 0xf8
 8003b46:	701a      	strb	r2, [r3, #0]
 8003b48:	e002      	b.n	8003b50 <SPI_command+0x30>
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <SPI_command+0x74>)
 8003b4c:	22fa      	movs	r2, #250	; 0xfa
 8003b4e:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <SPI_command+0x74>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <SPI_command+0x70>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <SPI_command+0x70>)
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8003b6e:	4639      	mov	r1, r7
 8003b70:	2303      	movs	r3, #3
 8003b72:	2203      	movs	r2, #3
 8003b74:	4808      	ldr	r0, [pc, #32]	; (8003b98 <SPI_command+0x78>)
 8003b76:	f005 fb36 	bl	80091e6 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8003b7a:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <SPI_command+0x68>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	801a      	strh	r2, [r3, #0]
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	200034d8 	.word	0x200034d8
 8003b8c:	200034de 	.word	0x200034de
 8003b90:	200034dc 	.word	0x200034dc
 8003b94:	200034da 	.word	0x200034da
 8003b98:	20011118 	.word	0x20011118

08003b9c <display_init>:

void display_init(void){
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <display_init+0x90>)
 8003ba4:	1d3c      	adds	r4, r7, #4
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <display_init+0x94>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d132      	bne.n	8003c22 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <display_init+0x98>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b06      	subs	r3, #6
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <display_init+0x9c>)
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	f7ff fed9 	bl	8003980 <displayBuffer2>
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <display_init+0x9c>)
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <display_init+0xa0>)
 8003bd6:	5c9b      	ldrb	r3, [r3, r2]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <display_init+0xa4>)
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <display_init+0x98>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d80b      	bhi.n	8003c00 <display_init+0x64>
 8003be8:	2003      	movs	r0, #3
 8003bea:	f001 ff1f 	bl	8005a2c <HAL_Delay>
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <display_init+0x98>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	3328      	adds	r3, #40	; 0x28
 8003bf6:	443b      	add	r3, r7
 8003bf8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003bfc:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <display_init+0xa4>)
 8003bfe:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <display_init+0x98>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <display_init+0x98>)
 8003c0a:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <display_init+0x94>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	f7ff ff85 	bl	8003b20 <SPI_command>
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <display_init+0x94>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <display_init+0xa8>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8003c22:	bf00      	nop
 8003c24:	3728      	adds	r7, #40	; 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	0800bfa8 	.word	0x0800bfa8
 8003c30:	200034de 	.word	0x200034de
 8003c34:	200034df 	.word	0x200034df
 8003c38:	200034e0 	.word	0x200034e0
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	200034dc 	.word	0x200034dc
 8003c44:	200034d8 	.word	0x200034d8

08003c48 <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 8003c5e:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <gfx_TX_block+0xac>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8003c64:	2300      	movs	r3, #0
 8003c66:	81bb      	strh	r3, [r7, #12]
 8003c68:	e034      	b.n	8003cd4 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <gfx_TX_block+0xac>)
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <gfx_TX_block+0xb0>)
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d902      	bls.n	8003c82 <gfx_TX_block+0x3a>
 8003c7c:	23fa      	movs	r3, #250	; 0xfa
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e001      	b.n	8003c86 <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003c82:	23f8      	movs	r3, #248	; 0xf8
 8003c84:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 8003c8a:	7abb      	ldrb	r3, [r7, #10]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 8003c96:	7abb      	ldrb	r3, [r7, #10]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8003c9e:	89bb      	ldrh	r3, [r7, #12]
 8003ca0:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <gfx_TX_block+0xb4>)
 8003ca2:	4413      	add	r3, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	8819      	ldrh	r1, [r3, #0]
 8003caa:	789b      	ldrb	r3, [r3, #2]
 8003cac:	8011      	strh	r1, [r2, #0]
 8003cae:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8003cb0:	7afb      	ldrb	r3, [r7, #11]
 8003cb2:	2b11      	cmp	r3, #17
 8003cb4:	d102      	bne.n	8003cbc <gfx_TX_block+0x74>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	72fb      	strb	r3, [r7, #11]
 8003cba:	e002      	b.n	8003cc2 <gfx_TX_block+0x7a>
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <gfx_TX_block+0xac>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <gfx_TX_block+0xac>)
 8003ccc:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8003cce:	89bb      	ldrh	r3, [r7, #12]
 8003cd0:	3303      	adds	r3, #3
 8003cd2:	81bb      	strh	r3, [r7, #12]
 8003cd4:	89bb      	ldrh	r3, [r7, #12]
 8003cd6:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 8003cda:	d3c6      	bcc.n	8003c6a <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <gfx_TX_block+0xac>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <gfx_TX_block+0xb8>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]

}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	2000400e 	.word	0x2000400e
 8003cf8:	20003b8c 	.word	0x20003b8c
 8003cfc:	2000fbc0 	.word	0x2000fbc0
 8003d00:	2000401e 	.word	0x2000401e

08003d04 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <gfx_clear+0x6c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	e01c      	b.n	8003d4a <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <gfx_clear+0x70>)
 8003d12:	2202      	movs	r2, #2
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	e00e      	b.n	8003d36 <gfx_clear+0x32>
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <gfx_clear+0x6c>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <gfx_clear+0x70>)
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <gfx_clear+0x74>)
 8003d26:	2100      	movs	r1, #0
 8003d28:	54d1      	strb	r1, [r2, r3]
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <gfx_clear+0x70>)
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <gfx_clear+0x70>)
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <gfx_clear+0x70>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	2b11      	cmp	r3, #17
 8003d3c:	d9ec      	bls.n	8003d18 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <gfx_clear+0x6c>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	3312      	adds	r3, #18
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <gfx_clear+0x6c>)
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <gfx_clear+0x6c>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003d52:	d3dd      	bcc.n	8003d10 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <gfx_clear+0x78>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <gfx_clear+0x7c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <gfx_clear+0x80>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]

}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	2000088e 	.word	0x2000088e
 8003d74:	20000894 	.word	0x20000894
 8003d78:	20003b8c 	.word	0x20003b8c
 8003d7c:	20004010 	.word	0x20004010
 8003d80:	2000400e 	.word	0x2000400e
 8003d84:	2000401e 	.word	0x2000401e

08003d88 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8003d92:	2300      	movs	r3, #0
 8003d94:	80fb      	strh	r3, [r7, #6]
 8003d96:	e006      	b.n	8003da6 <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <display_clear+0x34>)
 8003d9c:	212f      	movs	r1, #47	; 0x2f
 8003d9e:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	3301      	adds	r3, #1
 8003da4:	80fb      	strh	r3, [r7, #6]
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d3f4      	bcc.n	8003d98 <display_clear+0x10>
	}


}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20010bc4 	.word	0x20010bc4

08003dc0 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <display_generate+0x1c>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 8003dca:	f7ff fdd1 	bl	8003970 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8003dce:	f7ff fdd7 	bl	8003980 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8003dd2:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <display_generate+0x20>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	2000598a 	.word	0x2000598a
 8003de0:	2000401e 	.word	0x2000401e

08003de4 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8003de4:	b480      	push	{r7}
 8003de6:	b08b      	sub	sp, #44	; 0x2c
 8003de8:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 8003dea:	4b5c      	ldr	r3, [pc, #368]	; (8003f5c <gfx_line_fill+0x178>)
 8003dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b5b      	ldr	r3, [pc, #364]	; (8003f60 <gfx_line_fill+0x17c>)
 8003df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df8:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8003dfa:	4b5a      	ldr	r3, [pc, #360]	; (8003f64 <gfx_line_fill+0x180>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e08:	09db      	lsrs	r3, r3, #7
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8003e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	00d2      	lsls	r2, r2, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 8003e26:	8c3b      	ldrh	r3, [r7, #32]
 8003e28:	3390      	adds	r3, #144	; 0x90
 8003e2a:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8003e2c:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <gfx_line_fill+0x184>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	f107 0308 	add.w	r3, r7, #8
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8003e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <gfx_line_fill+0x84>
 8003e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	3328      	adds	r3, #40	; 0x28
 8003e60:	443b      	add	r3, r7
 8003e62:	2201      	movs	r2, #1
 8003e64:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8003e68:	4a40      	ldr	r2, [pc, #256]	; (8003f6c <gfx_line_fill+0x188>)
 8003e6a:	8c3b      	ldrh	r3, [r7, #32]
 8003e6c:	8013      	strh	r3, [r2, #0]
 8003e6e:	e068      	b.n	8003f42 <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 8003e70:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <gfx_line_fill+0x18c>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	e055      	b.n	8003f24 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8003e78:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <gfx_line_fill+0x18c>)
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	4413      	add	r3, r2
 8003e84:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <gfx_line_fill+0x190>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	3b2f      	subs	r3, #47	; 0x2f
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 8003e9a:	8b7b      	ldrh	r3, [r7, #26]
 8003e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea0:	4a35      	ldr	r2, [pc, #212]	; (8003f78 <gfx_line_fill+0x194>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 8003ea6:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <gfx_line_fill+0x18c>)
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	3328      	adds	r3, #40	; 0x28
 8003eac:	443b      	add	r3, r7
 8003eae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	01d2      	lsls	r2, r2, #7
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	b25a      	sxtb	r2, r3
 8003ebc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec0:	4053      	eors	r3, r2
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <gfx_line_fill+0x188>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <gfx_line_fill+0x18c>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	4929      	ldr	r1, [pc, #164]	; (8003f7c <gfx_line_fill+0x198>)
 8003ed6:	7f7a      	ldrb	r2, [r7, #29]
 8003ed8:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 8003eda:	23fa      	movs	r3, #250	; 0xfa
 8003edc:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8003ede:	7f7b      	ldrb	r3, [r7, #29]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 8003eea:	7f7b      	ldrb	r3, [r7, #29]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <gfx_line_fill+0x188>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <gfx_line_fill+0x18c>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	441a      	add	r2, r3
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	3306      	adds	r3, #6
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <gfx_line_fill+0x19c>)
 8003f08:	4413      	add	r3, r2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	8819      	ldrh	r1, [r3, #0]
 8003f12:	789b      	ldrb	r3, [r3, #2]
 8003f14:	8011      	strh	r1, [r2, #0]
 8003f16:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <gfx_line_fill+0x18c>)
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <gfx_line_fill+0x18c>)
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <gfx_line_fill+0x18c>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	2b0f      	cmp	r3, #15
 8003f2a:	d9a5      	bls.n	8003e78 <gfx_line_fill+0x94>
		     }
	char_skip++;
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f30:	3301      	adds	r3, #1
 8003f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <gfx_line_fill+0x188>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	3312      	adds	r3, #18
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <gfx_line_fill+0x188>)
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <gfx_line_fill+0x188>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	8bfa      	ldrh	r2, [r7, #30]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d891      	bhi.n	8003e70 <gfx_line_fill+0x8c>
    }
    }
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	372c      	adds	r7, #44	; 0x2c
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000220 	.word	0x20000220
 8003f60:	20005374 	.word	0x20005374
 8003f64:	20000890 	.word	0x20000890
 8003f68:	2000401e 	.word	0x2000401e
 8003f6c:	2000088e 	.word	0x2000088e
 8003f70:	20000894 	.word	0x20000894
 8003f74:	20010bc4 	.word	0x20010bc4
 8003f78:	0800c74c 	.word	0x0800c74c
 8003f7c:	20003b8c 	.word	0x20003b8c
 8003f80:	2000fbc0 	.word	0x2000fbc0

08003f84 <encoder2>:


void encoder2(void){  // encoder pos and data input
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <encoder2+0x184>)
 8003f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b5e      	ldr	r3, [pc, #376]	; (800410c <encoder2+0x188>)
 8003f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4a5b      	ldr	r2, [pc, #364]	; (8004110 <encoder2+0x18c>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <encoder2+0x190>)
 8003fa8:	6810      	ldr	r0, [r2, #0]
 8003faa:	6851      	ldr	r1, [r2, #4]
 8003fac:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8003fae:	4a5a      	ldr	r2, [pc, #360]	; (8004118 <encoder2+0x194>)
 8003fb0:	1d3b      	adds	r3, r7, #4
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	8019      	strh	r1, [r3, #0]
 8003fb8:	3302      	adds	r3, #2
 8003fba:	0c12      	lsrs	r2, r2, #16
 8003fbc:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003fbe:	4b52      	ldr	r3, [pc, #328]	; (8004108 <encoder2+0x184>)
 8003fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b54      	ldr	r3, [pc, #336]	; (800411c <encoder2+0x198>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f007 fcf7 	bl	800b9c8 <atoi>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b50      	ldr	r3, [pc, #320]	; (8004120 <encoder2+0x19c>)
 8003fe0:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003fe2:	4b4f      	ldr	r3, [pc, #316]	; (8004120 <encoder2+0x19c>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	484a      	ldr	r0, [pc, #296]	; (8004114 <encoder2+0x190>)
 8003fea:	f7fc fdb5 	bl	8000b58 <menu_vars>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4a4c      	ldr	r2, [pc, #304]	; (8004124 <encoder2+0x1a0>)
 8003ff2:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8003ff4:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <encoder2+0x1a0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <encoder2+0x1a4>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	4619      	mov	r1, r3
 8004000:	4b4a      	ldr	r3, [pc, #296]	; (800412c <encoder2+0x1a8>)
 8004002:	5c5b      	ldrb	r3, [r3, r1]
 8004004:	429a      	cmp	r2, r3
 8004006:	d907      	bls.n	8004018 <encoder2+0x94>
 8004008:	4b47      	ldr	r3, [pc, #284]	; (8004128 <encoder2+0x1a4>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4619      	mov	r1, r3
 800400e:	4b45      	ldr	r3, [pc, #276]	; (8004124 <encoder2+0x1a0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a46      	ldr	r2, [pc, #280]	; (800412c <encoder2+0x1a8>)
 8004014:	5c52      	ldrb	r2, [r2, r1]
 8004016:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8004018:	4b45      	ldr	r3, [pc, #276]	; (8004130 <encoder2+0x1ac>)
 800401a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800401e:	461a      	mov	r2, r3
 8004020:	4b44      	ldr	r3, [pc, #272]	; (8004134 <encoder2+0x1b0>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d024      	beq.n	8004072 <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 8004028:	4b41      	ldr	r3, [pc, #260]	; (8004130 <encoder2+0x1ac>)
 800402a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800402e:	461a      	mov	r2, r3
 8004030:	4b40      	ldr	r3, [pc, #256]	; (8004134 <encoder2+0x1b0>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	dd07      	ble.n	8004048 <encoder2+0xc4>
 8004038:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <encoder2+0x1a0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	4b39      	ldr	r3, [pc, #228]	; (8004124 <encoder2+0x1a0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3201      	adds	r2, #1
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 8004048:	4b39      	ldr	r3, [pc, #228]	; (8004130 <encoder2+0x1ac>)
 800404a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404e:	461a      	mov	r2, r3
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <encoder2+0x1b0>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	da0c      	bge.n	8004072 <encoder2+0xee>
 8004058:	4b32      	ldr	r3, [pc, #200]	; (8004124 <encoder2+0x1a0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <encoder2+0xee>
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <encoder2+0x1a0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <encoder2+0x1a0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3a01      	subs	r2, #1
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 8004072:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <encoder2+0x1ac>)
 8004074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004078:	b29a      	uxth	r2, r3
 800407a:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <encoder2+0x1b0>)
 800407c:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <encoder2+0x1b4>)
 8004080:	881a      	ldrh	r2, [r3, #0]
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <encoder2+0x1b8>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d01d      	beq.n	80040c6 <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <encoder2+0x1b4>)
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	4b2b      	ldr	r3, [pc, #172]	; (800413c <encoder2+0x1b8>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d908      	bls.n	80040a8 <encoder2+0x124>
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <encoder2+0x184>)
 8004098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409c:	b29b      	uxth	r3, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <encoder2+0x184>)
 80040a6:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 80040a8:	4b23      	ldr	r3, [pc, #140]	; (8004138 <encoder2+0x1b4>)
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	4b23      	ldr	r3, [pc, #140]	; (800413c <encoder2+0x1b8>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d208      	bcs.n	80040c6 <encoder2+0x142>
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <encoder2+0x184>)
 80040b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29b      	uxth	r3, r3
 80040c0:	b21a      	sxth	r2, r3
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <encoder2+0x184>)
 80040c4:	801a      	strh	r2, [r3, #0]

	   	    }
	   	   if (enc_out1>menu_title_count) enc_out1=0;
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <encoder2+0x184>)
 80040c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <encoder2+0x1bc>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	dd02      	ble.n	80040dc <encoder2+0x158>
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <encoder2+0x184>)
 80040d8:	2200      	movs	r2, #0
 80040da:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <encoder2+0x184>)
 80040de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da04      	bge.n	80040f0 <encoder2+0x16c>
 80040e6:	4b16      	ldr	r3, [pc, #88]	; (8004140 <encoder2+0x1bc>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b21a      	sxth	r2, r3
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <encoder2+0x184>)
 80040ee:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <encoder2+0x1b4>)
 80040f2:	881a      	ldrh	r2, [r3, #0]
 80040f4:	4b11      	ldr	r3, [pc, #68]	; (800413c <encoder2+0x1b8>)
 80040f6:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 80040f8:	4b12      	ldr	r3, [pc, #72]	; (8004144 <encoder2+0x1c0>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]

    }
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000220 	.word	0x20000220
 800410c:	20005374 	.word	0x20005374
 8004110:	2000022c 	.word	0x2000022c
 8004114:	20005978 	.word	0x20005978
 8004118:	0800bfa4 	.word	0x0800bfa4
 800411c:	20005774 	.word	0x20005774
 8004120:	20005980 	.word	0x20005980
 8004124:	20005974 	.word	0x20005974
 8004128:	200079b1 	.word	0x200079b1
 800412c:	0800c6e4 	.word	0x0800c6e4
 8004130:	200034d0 	.word	0x200034d0
 8004134:	2000fbbc 	.word	0x2000fbbc
 8004138:	200034ce 	.word	0x200034ce
 800413c:	20005984 	.word	0x20005984
 8004140:	20005371 	.word	0x20005371
 8004144:	200034d2 	.word	0x200034d2

08004148 <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <menu3_fill+0x124>)
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8004154:	4b46      	ldr	r3, [pc, #280]	; (8004270 <menu3_fill+0x128>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	89fa      	ldrh	r2, [r7, #14]
 800415c:	429a      	cmp	r2, r3
 800415e:	d904      	bls.n	800416a <menu3_fill+0x22>
 8004160:	2300      	movs	r3, #0
 8004162:	81fb      	strh	r3, [r7, #14]
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <menu3_fill+0x124>)
 8004166:	2200      	movs	r2, #0
 8004168:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 800416a:	89fb      	ldrh	r3, [r7, #14]
 800416c:	4a41      	ldr	r2, [pc, #260]	; (8004274 <menu3_fill+0x12c>)
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <menu3_fill+0x130>)
 800417c:	4413      	add	r3, r2
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b3e      	ldr	r3, [pc, #248]	; (800427c <menu3_fill+0x134>)
 8004182:	6810      	ldr	r0, [r2, #0]
 8004184:	6851      	ldr	r1, [r2, #4]
 8004186:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8004188:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <menu3_fill+0x138>)
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	4611      	mov	r1, r2
 8004190:	8019      	strh	r1, [r3, #0]
 8004192:	3302      	adds	r3, #2
 8004194:	0c12      	lsrs	r2, r2, #16
 8004196:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 8004198:	89fb      	ldrh	r3, [r7, #14]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	461a      	mov	r2, r3
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <menu3_fill+0x13c>)
 80041a0:	4413      	add	r3, r2
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	4618      	mov	r0, r3
 80041ac:	f007 fc0c 	bl	800b9c8 <atoi>
 80041b0:	4603      	mov	r3, r0
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	4b34      	ldr	r3, [pc, #208]	; (8004288 <menu3_fill+0x140>)
 80041b6:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <menu3_fill+0x140>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	482f      	ldr	r0, [pc, #188]	; (800427c <menu3_fill+0x134>)
 80041c0:	f7fc fcca 	bl	8000b58 <menu_vars>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4a31      	ldr	r2, [pc, #196]	; (800428c <menu3_fill+0x144>)
 80041c8:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 80041ca:	4b30      	ldr	r3, [pc, #192]	; (800428c <menu3_fill+0x144>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <menu3_fill+0x148>)
 80041d4:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;
 80041d6:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <menu3_fill+0x14c>)
 80041d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041dc:	461a      	mov	r2, r3
 80041de:	89fb      	ldrh	r3, [r7, #14]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d104      	bne.n	80041ee <menu3_fill+0xa6>
 80041e4:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <menu3_fill+0x148>)
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <menu3_fill+0x150>)
 80041ec:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3&7;
 80041ee:	4b28      	ldr	r3, [pc, #160]	; (8004290 <menu3_fill+0x148>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b28      	ldr	r3, [pc, #160]	; (800429c <menu3_fill+0x154>)
 80041fc:	701a      	strb	r2, [r3, #0]
			    /*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 80041fe:	89fb      	ldrh	r3, [r7, #14]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <menu3_fill+0x12c>)
 8004202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004206:	817b      	strh	r3, [r7, #10]
				default_menu3[crap8]=div_limit+48;
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <menu3_fill+0x154>)
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	897b      	ldrh	r3, [r7, #10]
 800420e:	3230      	adds	r2, #48	; 0x30
 8004210:	b2d1      	uxtb	r1, r2
 8004212:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <menu3_fill+0x158>)
 8004214:	54d1      	strb	r1, [r2, r3]
				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <menu3_fill+0x15c>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b18      	cmp	r3, #24
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2da      	uxtb	r2, r3
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <menu3_fill+0x15c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b19      	cmp	r3, #25
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <menu3_fill+0x104>
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <menu3_fill+0x148>)
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	4918      	ldr	r1, [pc, #96]	; (80042a8 <menu3_fill+0x160>)
 8004246:	5c89      	ldrb	r1, [r1, r2]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <menu3_fill+0x158>)
 800424a:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 800424c:	4b07      	ldr	r3, [pc, #28]	; (800426c <menu3_fill+0x124>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	3301      	adds	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <menu3_fill+0x124>)
 8004256:	801a      	strh	r2, [r3, #0]
				disp_up_counter=disp_up_counter&255;
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <menu3_fill+0x124>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	b29a      	uxth	r2, r3
 8004260:	4b02      	ldr	r3, [pc, #8]	; (800426c <menu3_fill+0x124>)
 8004262:	801a      	strh	r2, [r3, #0]

    }
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	2000fbbe 	.word	0x2000fbbe
 8004270:	20005371 	.word	0x20005371
 8004274:	20005374 	.word	0x20005374
 8004278:	2000022c 	.word	0x2000022c
 800427c:	20005978 	.word	0x20005978
 8004280:	0800bfa4 	.word	0x0800bfa4
 8004284:	20005774 	.word	0x20005774
 8004288:	20005980 	.word	0x20005980
 800428c:	20005974 	.word	0x20005974
 8004290:	2000401c 	.word	0x2000401c
 8004294:	20000220 	.word	0x20000220
 8004298:	20005986 	.word	0x20005986
 800429c:	200079b2 	.word	0x200079b2
 80042a0:	20010bc4 	.word	0x20010bc4
 80042a4:	200079b1 	.word	0x200079b1
 80042a8:	0800bfcc 	.word	0x0800bfcc

080042ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042ac:	b5b0      	push	{r4, r5, r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042b2:	f001 fb49 	bl	8005948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042b6:	f000 fb05 	bl	80048c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042ba:	f000 fe9d 	bl	8004ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 80042be:	f000 fe65 	bl	8004f8c <MX_DMA_Init>
  MX_ADC1_Init();
 80042c2:	f000 fb69 	bl	8004998 <MX_ADC1_Init>
  MX_SPI2_Init();
 80042c6:	f000 fc61 	bl	8004b8c <MX_SPI2_Init>
  MX_TIM3_Init();
 80042ca:	f000 fce9 	bl	8004ca0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80042ce:	f000 fd69 	bl	8004da4 <MX_TIM4_Init>
  MX_I2C2_Init();
 80042d2:	f000 fbf7 	bl	8004ac4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80042d6:	f000 fc23 	bl	8004b20 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80042da:	f000 fe03 	bl	8004ee4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80042de:	f000 fe2b 	bl	8004f38 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80042e2:	f000 fdb5 	bl	8004e50 <MX_TIM10_Init>
  MX_TIM2_Init();
 80042e6:	f000 fc87 	bl	8004bf8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 80042ea:	f7fd faa5 	bl	8001838 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 80042ee:	4b9c      	ldr	r3, [pc, #624]	; (8004560 <main+0x2b4>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b9a      	ldr	r3, [pc, #616]	; (8004560 <main+0x2b4>)
 80042f8:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 80042fa:	4b9a      	ldr	r3, [pc, #616]	; (8004564 <main+0x2b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3301      	adds	r3, #1
 8004300:	4a98      	ldr	r2, [pc, #608]	; (8004564 <main+0x2b8>)
 8004302:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

			  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8004304:	4b97      	ldr	r3, [pc, #604]	; (8004564 <main+0x2b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	2b06      	cmp	r3, #6
 800430e:	d101      	bne.n	8004314 <main+0x68>
 8004310:	f7fd f9c0 	bl	8001694 <analoginputloopb>


		if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8004314:	4b93      	ldr	r3, [pc, #588]	; (8004564 <main+0x2b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f640 72b8 	movw	r2, #4024	; 0xfb8
 800431c:	4293      	cmp	r3, r2
 800431e:	f040 80da 	bne.w	80044d6 <main+0x22a>
			  if (mem_count>512) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8004322:	4b91      	ldr	r3, [pc, #580]	; (8004568 <main+0x2bc>)
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432a:	d903      	bls.n	8004334 <main+0x88>
 800432c:	4b8e      	ldr	r3, [pc, #568]	; (8004568 <main+0x2bc>)
 800432e:	2200      	movs	r2, #0
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e005      	b.n	8004340 <main+0x94>
 8004334:	4b8c      	ldr	r3, [pc, #560]	; (8004568 <main+0x2bc>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	4b8a      	ldr	r3, [pc, #552]	; (8004568 <main+0x2bc>)
 800433e:	801a      	strh	r2, [r3, #0]
			//  cursor_partial=255;
		//	if (last_pos_hold)   gfx_reverse(last_pos_hold,cursor_partial);
		//	  gfx_reverse(enc_out1&127,cursor_partial);
		//	  last_pos_hold=enc_out1&127;

			  patch_target_parse(); //
 8004340:	f7fc ff6e 	bl	8001220 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 8004344:	2300      	movs	r3, #0
 8004346:	823b      	strh	r3, [r7, #16]


			memcpy(potSource,&seq,46); // about 35
 8004348:	4a88      	ldr	r2, [pc, #544]	; (800456c <main+0x2c0>)
 800434a:	4b89      	ldr	r3, [pc, #548]	; (8004570 <main+0x2c4>)
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004358:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800435c:	c407      	stmia	r4!, {r0, r1, r2}
 800435e:	8023      	strh	r3, [r4, #0]

			for(i=0;i<10;i++){
 8004360:	4b84      	ldr	r3, [pc, #528]	; (8004574 <main+0x2c8>)
 8004362:	2200      	movs	r2, #0
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	e079      	b.n	800445c <main+0x1b0>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 8004368:	4b82      	ldr	r3, [pc, #520]	; (8004574 <main+0x2c8>)
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	339c      	adds	r3, #156	; 0x9c
 8004378:	4a7c      	ldr	r2, [pc, #496]	; (800456c <main+0x2c0>)
 800437a:	1898      	adds	r0, r3, r2
 800437c:	4b7d      	ldr	r3, [pc, #500]	; (8004574 <main+0x2c8>)
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4a7b      	ldr	r2, [pc, #492]	; (8004578 <main+0x2cc>)
 800438c:	4413      	add	r3, r2
 800438e:	220e      	movs	r2, #14
 8004390:	4619      	mov	r1, r3
 8004392:	f007 fb47 	bl	800ba24 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8004396:	4b77      	ldr	r3, [pc, #476]	; (8004574 <main+0x2c8>)
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	4613      	mov	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	332e      	adds	r3, #46	; 0x2e
 80043a6:	4a71      	ldr	r2, [pc, #452]	; (800456c <main+0x2c0>)
 80043a8:	1898      	adds	r0, r3, r2
 80043aa:	4b72      	ldr	r3, [pc, #456]	; (8004574 <main+0x2c8>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4a70      	ldr	r2, [pc, #448]	; (800457c <main+0x2d0>)
 80043ba:	4413      	add	r3, r2
 80043bc:	2206      	movs	r2, #6
 80043be:	4619      	mov	r1, r3
 80043c0:	f007 fb30 	bl	800ba24 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 80043c4:	4b6b      	ldr	r3, [pc, #428]	; (8004574 <main+0x2c8>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	336a      	adds	r3, #106	; 0x6a
 80043d2:	4a66      	ldr	r2, [pc, #408]	; (800456c <main+0x2c0>)
 80043d4:	1898      	adds	r0, r3, r2
 80043d6:	4b67      	ldr	r3, [pc, #412]	; (8004574 <main+0x2c8>)
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80043e0:	fb02 f303 	mul.w	r3, r2, r3
 80043e4:	4a66      	ldr	r2, [pc, #408]	; (8004580 <main+0x2d4>)
 80043e6:	4413      	add	r3, r2
 80043e8:	2205      	movs	r2, #5
 80043ea:	4619      	mov	r1, r3
 80043ec:	f007 fb1a 	bl	800ba24 <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );
 80043f0:	4b60      	ldr	r3, [pc, #384]	; (8004574 <main+0x2c8>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004402:	4a5a      	ldr	r2, [pc, #360]	; (800456c <main+0x2c0>)
 8004404:	1898      	adds	r0, r3, r2
 8004406:	4b5b      	ldr	r3, [pc, #364]	; (8004574 <main+0x2c8>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4a5b      	ldr	r2, [pc, #364]	; (8004584 <main+0x2d8>)
 8004416:	4413      	add	r3, r2
 8004418:	2206      	movs	r2, #6
 800441a:	4619      	mov	r1, r3
 800441c:	f007 fb02 	bl	800ba24 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004420:	4b54      	ldr	r3, [pc, #336]	; (8004574 <main+0x2c8>)
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004432:	4a4e      	ldr	r2, [pc, #312]	; (800456c <main+0x2c0>)
 8004434:	1898      	adds	r0, r3, r2
 8004436:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <main+0x2c8>)
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4a50      	ldr	r2, [pc, #320]	; (8004588 <main+0x2dc>)
 8004446:	4413      	add	r3, r2
 8004448:	2206      	movs	r2, #6
 800444a:	4619      	mov	r1, r3
 800444c:	f007 faea 	bl	800ba24 <memcpy>
			for(i=0;i<10;i++){
 8004450:	4b48      	ldr	r3, [pc, #288]	; (8004574 <main+0x2c8>)
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	4b46      	ldr	r3, [pc, #280]	; (8004574 <main+0x2c8>)
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	4b45      	ldr	r3, [pc, #276]	; (8004574 <main+0x2c8>)
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	2b09      	cmp	r3, #9
 8004462:	d981      	bls.n	8004368 <main+0xbc>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8004464:	2300      	movs	r3, #0
 8004466:	823b      	strh	r3, [r7, #16]
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now

						 mem_buf=potSource[mem_count];
 8004468:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <main+0x2bc>)
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	4b3f      	ldr	r3, [pc, #252]	; (800456c <main+0x2c0>)
 8004470:	5c9a      	ldrb	r2, [r3, r2]
 8004472:	4b46      	ldr	r3, [pc, #280]	; (800458c <main+0x2e0>)
 8004474:	701a      	strb	r2, [r3, #0]
					//	 if (mem_buf>159) mem_buf=159;
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004476:	4b3c      	ldr	r3, [pc, #240]	; (8004568 <main+0x2bc>)
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	099b      	lsrs	r3, r3, #6
 800447c:	b29b      	uxth	r3, r3
 800447e:	3301      	adds	r3, #1
 8004480:	b29b      	uxth	r3, r3
 8004482:	019b      	lsls	r3, r3, #6
 8004484:	b29a      	uxth	r2, r3
 8004486:	4b38      	ldr	r3, [pc, #224]	; (8004568 <main+0x2bc>)
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448e:	b29b      	uxth	r3, r3
 8004490:	4413      	add	r3, r2
 8004492:	823b      	strh	r3, [r7, #16]
						 //mem_count2=mem_count2+2048;   // Relocate mem for patch

						 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 8004494:	8a3a      	ldrh	r2, [r7, #16]
 8004496:	2364      	movs	r3, #100	; 0x64
 8004498:	9302      	str	r3, [sp, #8]
 800449a:	2301      	movs	r3, #1
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	4b3c      	ldr	r3, [pc, #240]	; (8004590 <main+0x2e4>)
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	2302      	movs	r3, #2
 80044a4:	21a0      	movs	r1, #160	; 0xa0
 80044a6:	483b      	ldr	r0, [pc, #236]	; (8004594 <main+0x2e8>)
 80044a8:	f003 fc3a 	bl	8007d20 <HAL_I2C_Mem_Read>
						 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 80044ac:	4b38      	ldr	r3, [pc, #224]	; (8004590 <main+0x2e4>)
 80044ae:	781a      	ldrb	r2, [r3, #0]
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <main+0x2e0>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d00b      	beq.n	80044d0 <main+0x224>
 80044b8:	8a3a      	ldrh	r2, [r7, #16]
 80044ba:	2364      	movs	r3, #100	; 0x64
 80044bc:	9302      	str	r3, [sp, #8]
 80044be:	2301      	movs	r3, #1
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	4b32      	ldr	r3, [pc, #200]	; (800458c <main+0x2e0>)
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2302      	movs	r3, #2
 80044c8:	21a0      	movs	r1, #160	; 0xa0
 80044ca:	4832      	ldr	r0, [pc, #200]	; (8004594 <main+0x2e8>)
 80044cc:	f003 fb2e 	bl	8007b2c <HAL_I2C_Mem_Write>



		//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

		loop_counter2=0; //reset
 80044d0:	4b24      	ldr	r3, [pc, #144]	; (8004564 <main+0x2b8>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 80044d6:	4b30      	ldr	r3, [pc, #192]	; (8004598 <main+0x2ec>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80ad 	beq.w	800463a <main+0x38e>
		uint16_t mem_counter=0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	82fb      	strh	r3, [r7, #22]
		  memcpy(serial_source,&seq,36); // copy bits
 80044e4:	2224      	movs	r2, #36	; 0x24
 80044e6:	4922      	ldr	r1, [pc, #136]	; (8004570 <main+0x2c4>)
 80044e8:	482c      	ldr	r0, [pc, #176]	; (800459c <main+0x2f0>)
 80044ea:	f007 fa9b 	bl	800ba24 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80044ee:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <main+0x2f4>)
 80044f0:	492c      	ldr	r1, [pc, #176]	; (80045a4 <main+0x2f8>)
 80044f2:	2240      	movs	r2, #64	; 0x40
 80044f4:	4618      	mov	r0, r3
 80044f6:	f007 fa95 	bl	800ba24 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80044fa:	2300      	movs	r3, #0
 80044fc:	82fb      	strh	r3, [r7, #22]
 80044fe:	e02b      	b.n	8004558 <main+0x2ac>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8004500:	8afb      	ldrh	r3, [r7, #22]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d812      	bhi.n	800452c <main+0x280>
 8004506:	8afa      	ldrh	r2, [r7, #22]
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	3360      	adds	r3, #96	; 0x60
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <main+0x2f0>)
 8004512:	1898      	adds	r0, r3, r2
 8004514:	8afb      	ldrh	r3, [r7, #22]
 8004516:	1d9a      	adds	r2, r3, #6
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <main+0x2cc>)
 8004522:	4413      	add	r3, r2
 8004524:	2207      	movs	r2, #7
 8004526:	4619      	mov	r1, r3
 8004528:	f007 fa7c 	bl	800ba24 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 800452c:	8afa      	ldrh	r2, [r7, #22]
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	3324      	adds	r3, #36	; 0x24
 8004538:	4a18      	ldr	r2, [pc, #96]	; (800459c <main+0x2f0>)
 800453a:	1898      	adds	r0, r3, r2
 800453c:	8afa      	ldrh	r2, [r7, #22]
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <main+0x2dc>)
 8004548:	4413      	add	r3, r2
 800454a:	2206      	movs	r2, #6
 800454c:	4619      	mov	r1, r3
 800454e:	f007 fa69 	bl	800ba24 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004552:	8afb      	ldrh	r3, [r7, #22]
 8004554:	3301      	adds	r3, #1
 8004556:	82fb      	strh	r3, [r7, #22]
 8004558:	8afb      	ldrh	r3, [r7, #22]
 800455a:	2b09      	cmp	r3, #9
 800455c:	d9d0      	bls.n	8004500 <main+0x254>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 800455e:	e029      	b.n	80045b4 <main+0x308>
 8004560:	20000890 	.word	0x20000890
 8004564:	200034ec 	.word	0x200034ec
 8004568:	200034ea 	.word	0x200034ea
 800456c:	20000628 	.word	0x20000628
 8004570:	200051ac 	.word	0x200051ac
 8004574:	20000894 	.word	0x20000894
 8004578:	20000158 	.word	0x20000158
 800457c:	2000443c 	.word	0x2000443c
 8004580:	20004720 	.word	0x20004720
 8004584:	200051dc 	.word	0x200051dc
 8004588:	200046e4 	.word	0x200046e4
 800458c:	200034f0 	.word	0x200034f0
 8004590:	2000598b 	.word	0x2000598b
 8004594:	2001106c 	.word	0x2001106c
 8004598:	20007bb5 	.word	0x20007bb5
 800459c:	200079b4 	.word	0x200079b4
 80045a0:	20007a14 	.word	0x20007a14
 80045a4:	20000724 	.word	0x20000724
			  serial_up++;
 80045a8:	4b9c      	ldr	r3, [pc, #624]	; (800481c <main+0x570>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	4b9a      	ldr	r3, [pc, #616]	; (800481c <main+0x570>)
 80045b2:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 80045b4:	4b99      	ldr	r3, [pc, #612]	; (800481c <main+0x570>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b99      	ldr	r3, [pc, #612]	; (8004820 <main+0x574>)
 80045bc:	5c9a      	ldrb	r2, [r3, r2]
 80045be:	4b97      	ldr	r3, [pc, #604]	; (800481c <main+0x570>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	4619      	mov	r1, r3
 80045c4:	4b97      	ldr	r3, [pc, #604]	; (8004824 <main+0x578>)
 80045c6:	5c5b      	ldrb	r3, [r3, r1]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d103      	bne.n	80045d4 <main+0x328>
 80045cc:	4b93      	ldr	r3, [pc, #588]	; (800481c <main+0x570>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2ba0      	cmp	r3, #160	; 0xa0
 80045d2:	d9e9      	bls.n	80045a8 <main+0x2fc>
		  }

		  serial_send[6]=0;
 80045d4:	4b94      	ldr	r3, [pc, #592]	; (8004828 <main+0x57c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 80045da:	4b94      	ldr	r3, [pc, #592]	; (800482c <main+0x580>)
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	4b92      	ldr	r3, [pc, #584]	; (8004828 <main+0x57c>)
 80045e0:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 80045e2:	4b8e      	ldr	r3, [pc, #568]	; (800481c <main+0x570>)
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	4b90      	ldr	r3, [pc, #576]	; (8004828 <main+0x57c>)
 80045e8:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 80045ea:	4b8c      	ldr	r3, [pc, #560]	; (800481c <main+0x570>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b8c      	ldr	r3, [pc, #560]	; (8004824 <main+0x578>)
 80045f2:	5c9a      	ldrb	r2, [r3, r2]
 80045f4:	4b8c      	ldr	r3, [pc, #560]	; (8004828 <main+0x57c>)
 80045f6:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 80045f8:	4b88      	ldr	r3, [pc, #544]	; (800481c <main+0x570>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	4b87      	ldr	r3, [pc, #540]	; (800481c <main+0x570>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	4b87      	ldr	r3, [pc, #540]	; (8004824 <main+0x578>)
 8004606:	5c59      	ldrb	r1, [r3, r1]
 8004608:	4b85      	ldr	r3, [pc, #532]	; (8004820 <main+0x574>)
 800460a:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 800460c:	4b83      	ldr	r3, [pc, #524]	; (800481c <main+0x570>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2ba1      	cmp	r3, #161	; 0xa1
 8004612:	d903      	bls.n	800461c <main+0x370>
 8004614:	4b81      	ldr	r3, [pc, #516]	; (800481c <main+0x570>)
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	e005      	b.n	8004628 <main+0x37c>
 800461c:	4b7f      	ldr	r3, [pc, #508]	; (800481c <main+0x570>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	4b7d      	ldr	r3, [pc, #500]	; (800481c <main+0x570>)
 8004626:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8004628:	2364      	movs	r3, #100	; 0x64
 800462a:	2208      	movs	r2, #8
 800462c:	497e      	ldr	r1, [pc, #504]	; (8004828 <main+0x57c>)
 800462e:	4880      	ldr	r0, [pc, #512]	; (8004830 <main+0x584>)
 8004630:	f006 fe11 	bl	800b256 <HAL_UART_Transmit>
		  serial_tosend=0;
 8004634:	4b7f      	ldr	r3, [pc, #508]	; (8004834 <main+0x588>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 800463a:	4b7f      	ldr	r3, [pc, #508]	; (8004838 <main+0x58c>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <main+0x39a>
 8004642:	f7ff fbbd 	bl	8003dc0 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8004646:	4b7d      	ldr	r3, [pc, #500]	; (800483c <main+0x590>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b05      	cmp	r3, #5
 800464c:	d81b      	bhi.n	8004686 <main+0x3da>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 800464e:	4b7c      	ldr	r3, [pc, #496]	; (8004840 <main+0x594>)
 8004650:	2200      	movs	r2, #0
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	e007      	b.n	8004666 <main+0x3ba>
 8004656:	f7ff faa1 	bl	8003b9c <display_init>
 800465a:	4b79      	ldr	r3, [pc, #484]	; (8004840 <main+0x594>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	4b77      	ldr	r3, [pc, #476]	; (8004840 <main+0x594>)
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	4b76      	ldr	r3, [pc, #472]	; (8004840 <main+0x594>)
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	2b05      	cmp	r3, #5
 800466c:	d9f3      	bls.n	8004656 <main+0x3aa>

		if (init==5)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 					}
 800466e:	4b73      	ldr	r3, [pc, #460]	; (800483c <main+0x590>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d107      	bne.n	8004686 <main+0x3da>
 8004676:	4873      	ldr	r0, [pc, #460]	; (8004844 <main+0x598>)
 8004678:	f005 fcca 	bl	800a010 <HAL_TIM_Base_Start_IT>
 800467c:	4871      	ldr	r0, [pc, #452]	; (8004844 <main+0x598>)
 800467e:	f005 fc6d 	bl	8009f5c <HAL_TIM_Base_Start>
 8004682:	f7ff fae1 	bl	8003c48 <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <main+0x590>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b05      	cmp	r3, #5
 800468c:	d903      	bls.n	8004696 <main+0x3ea>


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 800468e:	f7ff fd5b 	bl	8004148 <menu3_fill>
 8004692:	f7ff fc77 	bl	8003f84 <encoder2>
		}


		if (loop_counter2==2024){ // grab adc readings + 3ms , 32 step  // no freeze
 8004696:	4b6c      	ldr	r3, [pc, #432]	; (8004848 <main+0x59c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 800469e:	d13d      	bne.n	800471c <main+0x470>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80046a0:	486a      	ldr	r0, [pc, #424]	; (800484c <main+0x5a0>)
 80046a2:	f001 ff6f 	bl	8006584 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 80046ae:	2101      	movs	r1, #1
 80046b0:	4866      	ldr	r0, [pc, #408]	; (800484c <main+0x5a0>)
 80046b2:	f001 fad7 	bl	8005c64 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80046b6:	2101      	movs	r1, #1
 80046b8:	4864      	ldr	r0, [pc, #400]	; (800484c <main+0x5a0>)
 80046ba:	f002 f879 	bl	80067b0 <HAL_ADCEx_InjectedGetValue>
 80046be:	4603      	mov	r3, r0
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	80bb      	strh	r3, [r7, #4]
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80046c4:	2102      	movs	r1, #2
 80046c6:	4861      	ldr	r0, [pc, #388]	; (800484c <main+0x5a0>)
 80046c8:	f002 f872 	bl	80067b0 <HAL_ADCEx_InjectedGetValue>
 80046cc:	4603      	mov	r3, r0
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	80fb      	strh	r3, [r7, #6]
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80046d2:	2103      	movs	r1, #3
 80046d4:	485d      	ldr	r0, [pc, #372]	; (800484c <main+0x5a0>)
 80046d6:	f002 f86b 	bl	80067b0 <HAL_ADCEx_InjectedGetValue>
 80046da:	4603      	mov	r3, r0
 80046dc:	b29b      	uxth	r3, r3
 80046de:	813b      	strh	r3, [r7, #8]
			HAL_ADCEx_InjectedStop(&hadc1) ;
 80046e0:	485a      	ldr	r0, [pc, #360]	; (800484c <main+0x5a0>)
 80046e2:	f002 f819 	bl	8006718 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	31- ( adc_temp1[0]>>7);
 80046e6:	88bb      	ldrh	r3, [r7, #4]
 80046e8:	09db      	lsrs	r3, r3, #7
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f1c3 031f 	rsb	r3, r3, #31
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	4b57      	ldr	r3, [pc, #348]	; (8004850 <main+0x5a4>)
 80046f4:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 31-( adc_temp1[1]>>7);
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	09db      	lsrs	r3, r3, #7
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f1c3 031f 	rsb	r3, r3, #31
 8004700:	b29a      	uxth	r2, r3
 8004702:	4b53      	ldr	r3, [pc, #332]	; (8004850 <main+0x5a4>)
 8004704:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 31-( adc_temp1[2]>>7);
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	09db      	lsrs	r3, r3, #7
 800470a:	b29b      	uxth	r3, r3
 800470c:	f1c3 031f 	rsb	r3, r3, #31
 8004710:	b29a      	uxth	r2, r3
 8004712:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <main+0x5a4>)
 8004714:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8004716:	4b4f      	ldr	r3, [pc, #316]	; (8004854 <main+0x5a8>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 800471c:	4b43      	ldr	r3, [pc, #268]	; (800482c <main+0x580>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b07      	cmp	r3, #7
 8004722:	d106      	bne.n	8004732 <main+0x486>
 8004724:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <main+0x5ac>)
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <main+0x486>
 800472c:	4b4a      	ldr	r3, [pc, #296]	; (8004858 <main+0x5ac>)
 800472e:	2201      	movs	r2, #1
 8004730:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8004732:	4b3e      	ldr	r3, [pc, #248]	; (800482c <main+0x580>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004742:	4846      	ldr	r0, [pc, #280]	; (800485c <main+0x5b0>)
 8004744:	f003 f87c 	bl	8007840 <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8004748:	4b45      	ldr	r3, [pc, #276]	; (8004860 <main+0x5b4>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d056      	beq.n	80047fe <main+0x552>


			uint16_t    adc_page=0; ;
 8004750:	2300      	movs	r3, #0
 8004752:	82bb      	strh	r3, [r7, #20]
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8004754:	4b42      	ldr	r3, [pc, #264]	; (8004860 <main+0x5b4>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <main+0x4b4>
 800475c:	2300      	movs	r3, #0
 800475e:	82bb      	strh	r3, [r7, #20]
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 8004760:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <main+0x5b4>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d102      	bne.n	800476e <main+0x4c2>
 8004768:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800476c:	82bb      	strh	r3, [r7, #20]


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 800476e:	4b34      	ldr	r3, [pc, #208]	; (8004840 <main+0x594>)
 8004770:	2200      	movs	r2, #0
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	e02c      	b.n	80047d0 <main+0x524>
				adc_convert_count=(i*3)+adc_page;
 8004776:	4b32      	ldr	r3, [pc, #200]	; (8004840 <main+0x594>)
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	0052      	lsls	r2, r2, #1
 800477e:	4413      	add	r3, r2
 8004780:	b29a      	uxth	r2, r3
 8004782:	8abb      	ldrh	r3, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	81fb      	strh	r3, [r7, #14]

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2];
 8004788:	89fb      	ldrh	r3, [r7, #14]
 800478a:	4a36      	ldr	r2, [pc, #216]	; (8004864 <main+0x5b8>)
 800478c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	3301      	adds	r3, #1
 8004794:	4933      	ldr	r1, [pc, #204]	; (8004864 <main+0x5b8>)
 8004796:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800479a:	4413      	add	r3, r2
 800479c:	b29a      	uxth	r2, r3
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	3302      	adds	r3, #2
 80047a2:	4930      	ldr	r1, [pc, #192]	; (8004864 <main+0x5b8>)
 80047a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047a8:	4413      	add	r3, r2
 80047aa:	81bb      	strh	r3, [r7, #12]
				input_holder[i]=adc_convert_temp/3;
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <main+0x594>)
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	89bb      	ldrh	r3, [r7, #12]
 80047b4:	4a2c      	ldr	r2, [pc, #176]	; (8004868 <main+0x5bc>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	4b2b      	ldr	r3, [pc, #172]	; (800486c <main+0x5c0>)
 80047c0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			for (i=0;i<512;i++){
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <main+0x594>)
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <main+0x594>)
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <main+0x594>)
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d8:	d3cd      	bcc.n	8004776 <main+0x4ca>
				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}
 80047da:	4b25      	ldr	r3, [pc, #148]	; (8004870 <main+0x5c4>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <main+0x54c>
 80047e2:	f7fc fc05 	bl	8000ff0 <sampler_ram_record>
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <main+0x5c4>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	739a      	strb	r2, [r3, #14]
 80047ec:	4b20      	ldr	r3, [pc, #128]	; (8004870 <main+0x5c4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	73da      	strb	r2, [r3, #15]
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <main+0x5c4>)
 80047f4:	223f      	movs	r2, #63	; 0x3f
 80047f6:	741a      	strb	r2, [r3, #16]

			adc_flag=0;
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <main+0x5b4>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <main+0x5c8>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004808:	d951      	bls.n	80048ae <main+0x602>
 800480a:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <main+0x5cc>)
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004812:	d14c      	bne.n	80048ae <main+0x602>
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <main+0x5d0>)
 8004816:	2201      	movs	r2, #1
 8004818:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 800481a:	e048      	b.n	80048ae <main+0x602>
 800481c:	20007bb4 	.word	0x20007bb4
 8004820:	20007ab4 	.word	0x20007ab4
 8004824:	200079b4 	.word	0x200079b4
 8004828:	20000224 	.word	0x20000224
 800482c:	200051ac 	.word	0x200051ac
 8004830:	200112f0 	.word	0x200112f0
 8004834:	20007bb5 	.word	0x20007bb5
 8004838:	2000401e 	.word	0x2000401e
 800483c:	200034df 	.word	0x200034df
 8004840:	20000894 	.word	0x20000894
 8004844:	200112a8 	.word	0x200112a8
 8004848:	200034ec 	.word	0x200034ec
 800484c:	20010fc4 	.word	0x20010fc4
 8004850:	20000144 	.word	0x20000144
 8004854:	20000890 	.word	0x20000890
 8004858:	200034d6 	.word	0x200034d6
 800485c:	40020800 	.word	0x40020800
 8004860:	20004420 	.word	0x20004420
 8004864:	200018a8 	.word	0x200018a8
 8004868:	aaaaaaab 	.word	0xaaaaaaab
 800486c:	20004020 	.word	0x20004020
 8004870:	20000204 	.word	0x20000204
 8004874:	2000189c 	.word	0x2000189c
 8004878:	200018a2 	.word	0x200018a2
 800487c:	2000014e 	.word	0x2000014e

			sampling();
 8004880:	f7fd fafa 	bl	8001e78 <sampling>

			uint8_t up_counter2=0;
 8004884:	2300      	movs	r3, #0
 8004886:	74fb      	strb	r3, [r7, #19]
			while ((up_counter2<8) && (init > 5) )								{
 8004888:	e00a      	b.n	80048a0 <main+0x5f4>

			gfx_line_fill();   // just run 8 times between sampling , dont need more
 800488a:	f7ff faab 	bl	8003de4 <gfx_line_fill>
			up_counter2++;
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	3301      	adds	r3, #1
 8004892:	74fb      	strb	r3, [r7, #19]
			loop_counter++;
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <main+0x60c>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <main+0x60c>)
 800489e:	701a      	strb	r2, [r3, #0]
			while ((up_counter2<8) && (init > 5) )								{
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	2b07      	cmp	r3, #7
 80048a4:	d803      	bhi.n	80048ae <main+0x602>
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <main+0x610>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d8ed      	bhi.n	800488a <main+0x5de>
		while  (bank_write)                         {							// wait for adc , priority
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <main+0x614>)
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e4      	bne.n	8004880 <main+0x5d4>
	  loop_counter++ ;
 80048b6:	e51a      	b.n	80042ee <main+0x42>
 80048b8:	20000890 	.word	0x20000890
 80048bc:	200034df 	.word	0x200034df
 80048c0:	2000014e 	.word	0x2000014e

080048c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b094      	sub	sp, #80	; 0x50
 80048c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048ca:	f107 0320 	add.w	r3, r7, #32
 80048ce:	2230      	movs	r2, #48	; 0x30
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f007 f8b4 	bl	800ba40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048d8:	f107 030c 	add.w	r3, r7, #12
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <SystemClock_Config+0xcc>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <SystemClock_Config+0xcc>)
 80048f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f6:	6413      	str	r3, [r2, #64]	; 0x40
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <SystemClock_Config+0xcc>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004904:	2300      	movs	r3, #0
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	4b22      	ldr	r3, [pc, #136]	; (8004994 <SystemClock_Config+0xd0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a21      	ldr	r2, [pc, #132]	; (8004994 <SystemClock_Config+0xd0>)
 800490e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <SystemClock_Config+0xd0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004920:	2302      	movs	r3, #2
 8004922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004924:	2301      	movs	r3, #1
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004928:	2310      	movs	r3, #16
 800492a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800492c:	2302      	movs	r3, #2
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004930:	2300      	movs	r3, #0
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004934:	2308      	movs	r3, #8
 8004936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004938:	2364      	movs	r3, #100	; 0x64
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800493c:	2302      	movs	r3, #2
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004940:	2304      	movs	r3, #4
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004944:	f107 0320 	add.w	r3, r7, #32
 8004948:	4618      	mov	r0, r3
 800494a:	f003 ff6b 	bl	8008824 <HAL_RCC_OscConfig>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004954:	f000 fc18 	bl	8005188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004958:	230f      	movs	r3, #15
 800495a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800495c:	2302      	movs	r3, #2
 800495e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800496a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800496e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004970:	f107 030c 	add.w	r3, r7, #12
 8004974:	2103      	movs	r1, #3
 8004976:	4618      	mov	r0, r3
 8004978:	f004 f9cc 	bl	8008d14 <HAL_RCC_ClockConfig>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004982:	f000 fc01 	bl	8005188 <Error_Handler>
  }
}
 8004986:	bf00      	nop
 8004988:	3750      	adds	r7, #80	; 0x50
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	40007000 	.word	0x40007000

08004998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	; 0x30
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800499e:	f107 0320 	add.w	r3, r7, #32
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80049ac:	463b      	mov	r3, r7
 80049ae:	2220      	movs	r2, #32
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f007 f844 	bl	800ba40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80049b8:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049ba:	4a3f      	ldr	r2, [pc, #252]	; (8004ab8 <MX_ADC1_Init+0x120>)
 80049bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80049c6:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80049cc:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80049d2:	4b38      	ldr	r3, [pc, #224]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80049d8:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049e0:	4b34      	ldr	r3, [pc, #208]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049e6:	4b33      	ldr	r3, [pc, #204]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049e8:	4a34      	ldr	r2, [pc, #208]	; (8004abc <MX_ADC1_Init+0x124>)
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049ec:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80049f8:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004a00:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a06:	482b      	ldr	r0, [pc, #172]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 8004a08:	f001 f834 	bl	8005a74 <HAL_ADC_Init>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8004a12:	f000 fbb9 	bl	8005188 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004a16:	2309      	movs	r3, #9
 8004a18:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8004a1e:	2305      	movs	r3, #5
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004a22:	f107 0320 	add.w	r3, r7, #32
 8004a26:	4619      	mov	r1, r3
 8004a28:	4822      	ldr	r0, [pc, #136]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 8004a2a:	f001 fafb 	bl	8006024 <HAL_ADC_ConfigChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004a34:	f000 fba8 	bl	8005188 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004a40:	2303      	movs	r3, #3
 8004a42:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004a44:	2303      	movs	r3, #3
 8004a46:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <MX_ADC1_Init+0x128>)
 8004a4e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4814      	ldr	r0, [pc, #80]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 8004a62:	f001 fedd 	bl	8006820 <HAL_ADCEx_InjectedConfigChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004a6c:	f000 fb8c 	bl	8005188 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8004a70:	2302      	movs	r3, #2
 8004a72:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8004a74:	2302      	movs	r3, #2
 8004a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	480d      	ldr	r0, [pc, #52]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 8004a7e:	f001 fecf 	bl	8006820 <HAL_ADCEx_InjectedConfigChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8004a88:	f000 fb7e 	bl	8005188 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8004a90:	2303      	movs	r3, #3
 8004a92:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004a98:	463b      	mov	r3, r7
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4805      	ldr	r0, [pc, #20]	; (8004ab4 <MX_ADC1_Init+0x11c>)
 8004a9e:	f001 febf 	bl	8006820 <HAL_ADCEx_InjectedConfigChannel>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8004aa8:	f000 fb6e 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004aac:	bf00      	nop
 8004aae:	3730      	adds	r7, #48	; 0x30
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20010fc4 	.word	0x20010fc4
 8004ab8:	40012000 	.word	0x40012000
 8004abc:	0f000001 	.word	0x0f000001
 8004ac0:	000f0001 	.word	0x000f0001

08004ac4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004aca:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <MX_I2C2_Init+0x54>)
 8004acc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004ad0:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <MX_I2C2_Init+0x58>)
 8004ad2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ae6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b00:	4804      	ldr	r0, [pc, #16]	; (8004b14 <MX_I2C2_Init+0x50>)
 8004b02:	f002 fecf 	bl	80078a4 <HAL_I2C_Init>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004b0c:	f000 fb3c 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004b10:	bf00      	nop
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	2001106c 	.word	0x2001106c
 8004b18:	40005800 	.word	0x40005800
 8004b1c:	000186a0 	.word	0x000186a0

08004b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b26:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <MX_SPI1_Init+0x68>)
 8004b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b32:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3e:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b54:	2208      	movs	r2, #8
 8004b56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b6c:	220a      	movs	r2, #10
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b70:	4804      	ldr	r0, [pc, #16]	; (8004b84 <MX_SPI1_Init+0x64>)
 8004b72:	f004 faaf 	bl	80090d4 <HAL_SPI_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004b7c:	f000 fb04 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200110c0 	.word	0x200110c0
 8004b88:	40013000 	.word	0x40013000

08004b8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004b90:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <MX_SPI2_Init+0x68>)
 8004b94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004b96:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004b9e:	4b14      	ldr	r3, [pc, #80]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004baa:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bc0:	2230      	movs	r2, #48	; 0x30
 8004bc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bd8:	220a      	movs	r2, #10
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004bdc:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <MX_SPI2_Init+0x64>)
 8004bde:	f004 fa79 	bl	80090d4 <HAL_SPI_Init>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004be8:	f000 face 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004bec:	bf00      	nop
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20011118 	.word	0x20011118
 8004bf4:	40003800 	.word	0x40003800

08004bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	; 0x30
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004bfe:	f107 030c 	add.w	r3, r7, #12
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f006 ff1a 	bl	800ba40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c0c:	1d3b      	adds	r3, r7, #4
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004c1c:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c22:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004c28:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004c30:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c38:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004c42:	2302      	movs	r3, #2
 8004c44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c46:	2301      	movs	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004c52:	2302      	movs	r3, #2
 8004c54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c56:	2301      	movs	r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004c62:	f107 030c 	add.w	r3, r7, #12
 8004c66:	4619      	mov	r1, r3
 8004c68:	480c      	ldr	r0, [pc, #48]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c6a:	f005 fb95 	bl	800a398 <HAL_TIM_Encoder_Init>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004c74:	f000 fa88 	bl	8005188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c80:	1d3b      	adds	r3, r7, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	4805      	ldr	r0, [pc, #20]	; (8004c9c <MX_TIM2_Init+0xa4>)
 8004c86:	f006 fa0f 	bl	800b0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004c90:	f000 fa7a 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c94:	bf00      	nop
 8004c96:	3730      	adds	r7, #48	; 0x30
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	200111d0 	.word	0x200111d0

08004ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08e      	sub	sp, #56	; 0x38
 8004ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	609a      	str	r2, [r3, #8]
 8004cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cb4:	f107 0320 	add.w	r3, r7, #32
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cbe:	1d3b      	adds	r3, r7, #4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	611a      	str	r2, [r3, #16]
 8004ccc:	615a      	str	r2, [r3, #20]
 8004cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004cd0:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004cd2:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <MX_TIM3_Init+0x100>)
 8004cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3124;
 8004ce2:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004ce4:	f640 4234 	movw	r2, #3124	; 0xc34
 8004ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004cf2:	2280      	movs	r2, #128	; 0x80
 8004cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004cf6:	4829      	ldr	r0, [pc, #164]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004cf8:	f005 f8e0 	bl	8009ebc <HAL_TIM_Base_Init>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004d02:	f000 fa41 	bl	8005188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d10:	4619      	mov	r1, r3
 8004d12:	4822      	ldr	r0, [pc, #136]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004d14:	f005 fe0c 	bl	800a930 <HAL_TIM_ConfigClockSource>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004d1e:	f000 fa33 	bl	8005188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d22:	481e      	ldr	r0, [pc, #120]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004d24:	f005 fa2f 	bl	800a186 <HAL_TIM_PWM_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004d2e:	f000 fa2b 	bl	8005188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d3a:	f107 0320 	add.w	r3, r7, #32
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4816      	ldr	r0, [pc, #88]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004d42:	f006 f9b1 	bl	800b0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004d4c:	f000 fa1c 	bl	8005188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d50:	2360      	movs	r3, #96	; 0x60
 8004d52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	2200      	movs	r2, #0
 8004d64:	4619      	mov	r1, r3
 8004d66:	480d      	ldr	r0, [pc, #52]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004d68:	f005 fd20 	bl	800a7ac <HAL_TIM_PWM_ConfigChannel>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004d72:	f000 fa09 	bl	8005188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	2204      	movs	r2, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4807      	ldr	r0, [pc, #28]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004d7e:	f005 fd15 	bl	800a7ac <HAL_TIM_PWM_ConfigChannel>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004d88:	f000 f9fe 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d8c:	4803      	ldr	r0, [pc, #12]	; (8004d9c <MX_TIM3_Init+0xfc>)
 8004d8e:	f000 fc89 	bl	80056a4 <HAL_TIM_MspPostInit>

}
 8004d92:	bf00      	nop
 8004d94:	3738      	adds	r7, #56	; 0x38
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20011218 	.word	0x20011218
 8004da0:	40000400 	.word	0x40000400

08004da4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08c      	sub	sp, #48	; 0x30
 8004da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	2224      	movs	r2, #36	; 0x24
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f006 fe44 	bl	800ba40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004db8:	1d3b      	adds	r3, r7, #4
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004dc0:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004dc2:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <MX_TIM4_Init+0xa8>)
 8004dc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004dc6:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dcc:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8004de8:	2302      	movs	r3, #2
 8004dea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004dec:	2302      	movs	r3, #2
 8004dee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004df0:	2301      	movs	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8004df8:	2304      	movs	r3, #4
 8004dfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e00:	2301      	movs	r3, #1
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8004e08:	2304      	movs	r3, #4
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004e0c:	f107 030c 	add.w	r3, r7, #12
 8004e10:	4619      	mov	r1, r3
 8004e12:	480d      	ldr	r0, [pc, #52]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004e14:	f005 fac0 	bl	800a398 <HAL_TIM_Encoder_Init>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004e1e:	f000 f9b3 	bl	8005188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4806      	ldr	r0, [pc, #24]	; (8004e48 <MX_TIM4_Init+0xa4>)
 8004e30:	f006 f93a 	bl	800b0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004e3a:	f000 f9a5 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004e3e:	bf00      	nop
 8004e40:	3730      	adds	r7, #48	; 0x30
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20011260 	.word	0x20011260
 8004e4c:	40000800 	.word	0x40000800

08004e50 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	611a      	str	r2, [r3, #16]
 8004e64:	615a      	str	r2, [r3, #20]
 8004e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004e6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <MX_TIM10_Init+0x90>)
 8004e6c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004e70:	2204      	movs	r2, #4
 8004e72:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004e7c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004e80:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e88:	4b14      	ldr	r3, [pc, #80]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004e8e:	4813      	ldr	r0, [pc, #76]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004e90:	f005 f814 	bl	8009ebc <HAL_TIM_Base_Init>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004e9a:	f000 f975 	bl	8005188 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8004e9e:	480f      	ldr	r0, [pc, #60]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004ea0:	f005 f918 	bl	800a0d4 <HAL_TIM_OC_Init>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004eaa:	f000 f96d 	bl	8005188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4805      	ldr	r0, [pc, #20]	; (8004edc <MX_TIM10_Init+0x8c>)
 8004ec6:	f005 fc15 	bl	800a6f4 <HAL_TIM_OC_ConfigChannel>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004ed0:	f000 f95a 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004ed4:	bf00      	nop
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	200112a8 	.word	0x200112a8
 8004ee0:	40014400 	.word	0x40014400

08004ee4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004eea:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <MX_USART1_UART_Init+0x50>)
 8004eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ef6:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f02:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f0e:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004f1a:	4805      	ldr	r0, [pc, #20]	; (8004f30 <MX_USART1_UART_Init+0x4c>)
 8004f1c:	f006 f946 	bl	800b1ac <HAL_HalfDuplex_Init>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004f26:	f000 f92f 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	200112f0 	.word	0x200112f0
 8004f34:	40011000 	.word	0x40011000

08004f38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004f3c:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f3e:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <MX_USART6_UART_Init+0x50>)
 8004f40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f5e:	220c      	movs	r2, #12
 8004f60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8004f6e:	4805      	ldr	r0, [pc, #20]	; (8004f84 <MX_USART6_UART_Init+0x4c>)
 8004f70:	f006 f91c 	bl	800b1ac <HAL_HalfDuplex_Init>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004f7a:	f000 f905 	bl	8005188 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20011334 	.word	0x20011334
 8004f88:	40011400 	.word	0x40011400

08004f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <MX_DMA_Init+0x68>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <MX_DMA_Init+0x68>)
 8004f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <MX_DMA_Init+0x68>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <MX_DMA_Init+0x68>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <MX_DMA_Init+0x68>)
 8004fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <MX_DMA_Init+0x68>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	200f      	movs	r0, #15
 8004fd0:	f001 fe9b 	bl	8006d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004fd4:	200f      	movs	r0, #15
 8004fd6:	f001 feb4 	bl	8006d42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	203c      	movs	r0, #60	; 0x3c
 8004fe0:	f001 fe93 	bl	8006d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004fe4:	203c      	movs	r0, #60	; 0x3c
 8004fe6:	f001 feac 	bl	8006d42 <HAL_NVIC_EnableIRQ>

}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800

08004ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffe:	f107 030c 	add.w	r3, r7, #12
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <MX_GPIO_Init+0xf0>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	4a34      	ldr	r2, [pc, #208]	; (80050e8 <MX_GPIO_Init+0xf0>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
 800501e:	4b32      	ldr	r3, [pc, #200]	; (80050e8 <MX_GPIO_Init+0xf0>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <MX_GPIO_Init+0xf0>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <MX_GPIO_Init+0xf0>)
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	6313      	str	r3, [r2, #48]	; 0x30
 800503a:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <MX_GPIO_Init+0xf0>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005046:	2300      	movs	r3, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4b27      	ldr	r3, [pc, #156]	; (80050e8 <MX_GPIO_Init+0xf0>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <MX_GPIO_Init+0xf0>)
 8005050:	f043 0304 	orr.w	r3, r3, #4
 8005054:	6313      	str	r3, [r2, #48]	; 0x30
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <MX_GPIO_Init+0xf0>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005062:	2200      	movs	r2, #0
 8005064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005068:	4820      	ldr	r0, [pc, #128]	; (80050ec <MX_GPIO_Init+0xf4>)
 800506a:	f002 fbe9 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800506e:	2201      	movs	r2, #1
 8005070:	2110      	movs	r1, #16
 8005072:	481f      	ldr	r0, [pc, #124]	; (80050f0 <MX_GPIO_Init+0xf8>)
 8005074:	f002 fbe4 	bl	8007840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800507c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800507e:	2301      	movs	r3, #1
 8005080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800508a:	f107 030c 	add.w	r3, r7, #12
 800508e:	4619      	mov	r1, r3
 8005090:	4816      	ldr	r0, [pc, #88]	; (80050ec <MX_GPIO_Init+0xf4>)
 8005092:	f002 fa51 	bl	8007538 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 8005096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800509a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800509c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80050a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050a2:	2301      	movs	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 80050a6:	f107 030c 	add.w	r3, r7, #12
 80050aa:	4619      	mov	r1, r3
 80050ac:	4811      	ldr	r0, [pc, #68]	; (80050f4 <MX_GPIO_Init+0xfc>)
 80050ae:	f002 fa43 	bl	8007538 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80050b2:	2310      	movs	r3, #16
 80050b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050b6:	2301      	movs	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050be:	2303      	movs	r3, #3
 80050c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80050c2:	f107 030c 	add.w	r3, r7, #12
 80050c6:	4619      	mov	r1, r3
 80050c8:	4809      	ldr	r0, [pc, #36]	; (80050f0 <MX_GPIO_Init+0xf8>)
 80050ca:	f002 fa35 	bl	8007538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80050ce:	2200      	movs	r2, #0
 80050d0:	2104      	movs	r1, #4
 80050d2:	2028      	movs	r0, #40	; 0x28
 80050d4:	f001 fe19 	bl	8006d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050d8:	2028      	movs	r0, #40	; 0x28
 80050da:	f001 fe32 	bl	8006d42 <HAL_NVIC_EnableIRQ>

}
 80050de:	bf00      	nop
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40020800 	.word	0x40020800
 80050f0:	40020000 	.word	0x40020000
 80050f4:	40020400 	.word	0x40020400

080050f8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]

	}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20004420 	.word	0x20004420

08005118 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_ADC_ConvCpltCallback+0x28>)
 8005122:	2202      	movs	r2, #2
 8005124:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);
 8005126:	4807      	ldr	r0, [pc, #28]	; (8005144 <HAL_ADC_ConvCpltCallback+0x2c>)
 8005128:	f000 ff18 	bl	8005f5c <HAL_ADC_Stop_DMA>
 800512c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005130:	4905      	ldr	r1, [pc, #20]	; (8005148 <HAL_ADC_ConvCpltCallback+0x30>)
 8005132:	4804      	ldr	r0, [pc, #16]	; (8005144 <HAL_ADC_ConvCpltCallback+0x2c>)
 8005134:	f000 fe22 	bl	8005d7c <HAL_ADC_Start_DMA>

	}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20004420 	.word	0x20004420
 8005144:	20010fc4 	.word	0x20010fc4
 8005148:	200018a8 	.word	0x200018a8

0800514c <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d102      	bne.n	8005178 <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_GPIO_EXTI_Callback+0x24>)
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]
  }
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	20000204 	.word	0x20000204

08005188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800518c:	b672      	cpsid	i
}
 800518e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005190:	e7fe      	b.n	8005190 <Error_Handler+0x8>
	...

08005194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <HAL_MspInit+0x4c>)
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	4a0f      	ldr	r2, [pc, #60]	; (80051e0 <HAL_MspInit+0x4c>)
 80051a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051a8:	6453      	str	r3, [r2, #68]	; 0x44
 80051aa:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <HAL_MspInit+0x4c>)
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <HAL_MspInit+0x4c>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <HAL_MspInit+0x4c>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <HAL_MspInit+0x4c>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800

080051e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a3c      	ldr	r2, [pc, #240]	; (80052f4 <HAL_ADC_MspInit+0x110>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d171      	bne.n	80052ea <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 800520c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520e:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 8005210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005214:	6453      	str	r3, [r2, #68]	; 0x44
 8005216:	4b38      	ldr	r3, [pc, #224]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b34      	ldr	r3, [pc, #208]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	4a33      	ldr	r2, [pc, #204]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6313      	str	r3, [r2, #48]	; 0x30
 8005232:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 8005248:	f043 0302 	orr.w	r3, r3, #2
 800524c:	6313      	str	r3, [r2, #48]	; 0x30
 800524e:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <HAL_ADC_MspInit+0x114>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 800525a:	2305      	movs	r3, #5
 800525c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800525e:	2303      	movs	r3, #3
 8005260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005266:	f107 0314 	add.w	r3, r7, #20
 800526a:	4619      	mov	r1, r3
 800526c:	4823      	ldr	r0, [pc, #140]	; (80052fc <HAL_ADC_MspInit+0x118>)
 800526e:	f002 f963 	bl	8007538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8005272:	2303      	movs	r3, #3
 8005274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005276:	2303      	movs	r3, #3
 8005278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527e:	f107 0314 	add.w	r3, r7, #20
 8005282:	4619      	mov	r1, r3
 8005284:	481e      	ldr	r0, [pc, #120]	; (8005300 <HAL_ADC_MspInit+0x11c>)
 8005286:	f002 f957 	bl	8007538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800528a:	4b1e      	ldr	r3, [pc, #120]	; (8005304 <HAL_ADC_MspInit+0x120>)
 800528c:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <HAL_ADC_MspInit+0x124>)
 800528e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005290:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <HAL_ADC_MspInit+0x120>)
 8005292:	2200      	movs	r2, #0
 8005294:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_ADC_MspInit+0x120>)
 8005298:	2200      	movs	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800529c:	4b19      	ldr	r3, [pc, #100]	; (8005304 <HAL_ADC_MspInit+0x120>)
 800529e:	2200      	movs	r2, #0
 80052a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052aa:	4b16      	ldr	r3, [pc, #88]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052c8:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80052ce:	480d      	ldr	r0, [pc, #52]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052d0:	f001 fd52 	bl	8006d78 <HAL_DMA_Init>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80052da:	f7ff ff55 	bl	8005188 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a08      	ldr	r2, [pc, #32]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
 80052e4:	4a07      	ldr	r2, [pc, #28]	; (8005304 <HAL_ADC_MspInit+0x120>)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80052ea:	bf00      	nop
 80052ec:	3728      	adds	r7, #40	; 0x28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40012000 	.word	0x40012000
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40020000 	.word	0x40020000
 8005300:	40020400 	.word	0x40020400
 8005304:	2001100c 	.word	0x2001100c
 8005308:	40026470 	.word	0x40026470

0800530c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005314:	f107 0314 	add.w	r3, r7, #20
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <HAL_I2C_MspInit+0xa8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d13d      	bne.n	80053aa <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	4b21      	ldr	r3, [pc, #132]	; (80053b8 <HAL_I2C_MspInit+0xac>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	4a20      	ldr	r2, [pc, #128]	; (80053b8 <HAL_I2C_MspInit+0xac>)
 8005338:	f043 0302 	orr.w	r3, r3, #2
 800533c:	6313      	str	r3, [r2, #48]	; 0x30
 800533e:	4b1e      	ldr	r3, [pc, #120]	; (80053b8 <HAL_I2C_MspInit+0xac>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800534a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800534e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005350:	2312      	movs	r3, #18
 8005352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005358:	2303      	movs	r3, #3
 800535a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800535c:	2309      	movs	r3, #9
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005360:	f107 0314 	add.w	r3, r7, #20
 8005364:	4619      	mov	r1, r3
 8005366:	4815      	ldr	r0, [pc, #84]	; (80053bc <HAL_I2C_MspInit+0xb0>)
 8005368:	f002 f8e6 	bl	8007538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800536c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005372:	2312      	movs	r3, #18
 8005374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537a:	2303      	movs	r3, #3
 800537c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800537e:	2304      	movs	r3, #4
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	4619      	mov	r1, r3
 8005388:	480c      	ldr	r0, [pc, #48]	; (80053bc <HAL_I2C_MspInit+0xb0>)
 800538a:	f002 f8d5 	bl	8007538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <HAL_I2C_MspInit+0xac>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <HAL_I2C_MspInit+0xac>)
 8005398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800539c:	6413      	str	r3, [r2, #64]	; 0x40
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_I2C_MspInit+0xac>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80053aa:	bf00      	nop
 80053ac:	3728      	adds	r7, #40	; 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40005800 	.word	0x40005800
 80053b8:	40023800 	.word	0x40023800
 80053bc:	40020400 	.word	0x40020400

080053c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c8:	f107 031c 	add.w	r3, r7, #28
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a49      	ldr	r2, [pc, #292]	; (8005504 <HAL_SPI_MspInit+0x144>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d12c      	bne.n	800543c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	4b48      	ldr	r3, [pc, #288]	; (8005508 <HAL_SPI_MspInit+0x148>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	4a47      	ldr	r2, [pc, #284]	; (8005508 <HAL_SPI_MspInit+0x148>)
 80053ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053f0:	6453      	str	r3, [r2, #68]	; 0x44
 80053f2:	4b45      	ldr	r3, [pc, #276]	; (8005508 <HAL_SPI_MspInit+0x148>)
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	4b41      	ldr	r3, [pc, #260]	; (8005508 <HAL_SPI_MspInit+0x148>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	4a40      	ldr	r2, [pc, #256]	; (8005508 <HAL_SPI_MspInit+0x148>)
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	6313      	str	r3, [r2, #48]	; 0x30
 800540e:	4b3e      	ldr	r3, [pc, #248]	; (8005508 <HAL_SPI_MspInit+0x148>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800541a:	23e0      	movs	r3, #224	; 0xe0
 800541c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541e:	2302      	movs	r3, #2
 8005420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005426:	2303      	movs	r3, #3
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800542a:	2305      	movs	r3, #5
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542e:	f107 031c 	add.w	r3, r7, #28
 8005432:	4619      	mov	r1, r3
 8005434:	4835      	ldr	r0, [pc, #212]	; (800550c <HAL_SPI_MspInit+0x14c>)
 8005436:	f002 f87f 	bl	8007538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800543a:	e05e      	b.n	80054fa <HAL_SPI_MspInit+0x13a>
  else if(hspi->Instance==SPI2)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a33      	ldr	r2, [pc, #204]	; (8005510 <HAL_SPI_MspInit+0x150>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d159      	bne.n	80054fa <HAL_SPI_MspInit+0x13a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <HAL_SPI_MspInit+0x148>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <HAL_SPI_MspInit+0x148>)
 8005450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005454:	6413      	str	r3, [r2, #64]	; 0x40
 8005456:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <HAL_SPI_MspInit+0x148>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	4b28      	ldr	r3, [pc, #160]	; (8005508 <HAL_SPI_MspInit+0x148>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	4a27      	ldr	r2, [pc, #156]	; (8005508 <HAL_SPI_MspInit+0x148>)
 800546c:	f043 0302 	orr.w	r3, r3, #2
 8005470:	6313      	str	r3, [r2, #48]	; 0x30
 8005472:	4b25      	ldr	r3, [pc, #148]	; (8005508 <HAL_SPI_MspInit+0x148>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800547e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005484:	2302      	movs	r3, #2
 8005486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	2300      	movs	r3, #0
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800548c:	2303      	movs	r3, #3
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005490:	2305      	movs	r3, #5
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005494:	f107 031c 	add.w	r3, r7, #28
 8005498:	4619      	mov	r1, r3
 800549a:	481e      	ldr	r0, [pc, #120]	; (8005514 <HAL_SPI_MspInit+0x154>)
 800549c:	f002 f84c 	bl	8007538 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80054a0:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <HAL_SPI_MspInit+0x15c>)
 80054a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80054a6:	4b1c      	ldr	r3, [pc, #112]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054ac:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054ae:	2240      	movs	r2, #64	; 0x40
 80054b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054b8:	4b17      	ldr	r3, [pc, #92]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054be:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054c0:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80054cc:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054d2:	4b11      	ldr	r3, [pc, #68]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054da:	2200      	movs	r2, #0
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80054de:	480e      	ldr	r0, [pc, #56]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054e0:	f001 fc4a 	bl	8006d78 <HAL_DMA_Init>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80054ea:	f7ff fe4d 	bl	8005188 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a09      	ldr	r2, [pc, #36]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054f2:	649a      	str	r2, [r3, #72]	; 0x48
 80054f4:	4a08      	ldr	r2, [pc, #32]	; (8005518 <HAL_SPI_MspInit+0x158>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80054fa:	bf00      	nop
 80054fc:	3730      	adds	r7, #48	; 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40013000 	.word	0x40013000
 8005508:	40023800 	.word	0x40023800
 800550c:	40020000 	.word	0x40020000
 8005510:	40003800 	.word	0x40003800
 8005514:	40020400 	.word	0x40020400
 8005518:	20011170 	.word	0x20011170
 800551c:	40026070 	.word	0x40026070

08005520 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005528:	f107 031c 	add.w	r3, r7, #28
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d12d      	bne.n	800559e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 800554c:	f043 0301 	orr.w	r3, r3, #1
 8005550:	6413      	str	r3, [r2, #64]	; 0x40
 8005552:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	4b29      	ldr	r3, [pc, #164]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	4a28      	ldr	r2, [pc, #160]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6313      	str	r3, [r2, #48]	; 0x30
 800556e:	4b26      	ldr	r3, [pc, #152]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800557a:	f248 0302 	movw	r3, #32770	; 0x8002
 800557e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005584:	2301      	movs	r3, #1
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005588:	2300      	movs	r3, #0
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800558c:	2301      	movs	r3, #1
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005590:	f107 031c 	add.w	r3, r7, #28
 8005594:	4619      	mov	r1, r3
 8005596:	481d      	ldr	r0, [pc, #116]	; (800560c <HAL_TIM_Encoder_MspInit+0xec>)
 8005598:	f001 ffce 	bl	8007538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800559c:	e030      	b.n	8005600 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIM_Encoder_MspInit+0xf0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d12b      	bne.n	8005600 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	4b16      	ldr	r3, [pc, #88]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	4a15      	ldr	r2, [pc, #84]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80055b2:	f043 0304 	orr.w	r3, r3, #4
 80055b6:	6413      	str	r3, [r2, #64]	; 0x40
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	6313      	str	r3, [r2, #48]	; 0x30
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe8>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055e0:	23c0      	movs	r3, #192	; 0xc0
 80055e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e4:	2302      	movs	r3, #2
 80055e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055e8:	2301      	movs	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055f0:	2302      	movs	r3, #2
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f4:	f107 031c 	add.w	r3, r7, #28
 80055f8:	4619      	mov	r1, r3
 80055fa:	4806      	ldr	r0, [pc, #24]	; (8005614 <HAL_TIM_Encoder_MspInit+0xf4>)
 80055fc:	f001 ff9c 	bl	8007538 <HAL_GPIO_Init>
}
 8005600:	bf00      	nop
 8005602:	3730      	adds	r7, #48	; 0x30
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	40020000 	.word	0x40020000
 8005610:	40000800 	.word	0x40000800
 8005614:	40020400 	.word	0x40020400

08005618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <HAL_TIM_Base_MspInit+0x80>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d116      	bne.n	8005658 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	4b1b      	ldr	r3, [pc, #108]	; (800569c <HAL_TIM_Base_MspInit+0x84>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	4a1a      	ldr	r2, [pc, #104]	; (800569c <HAL_TIM_Base_MspInit+0x84>)
 8005634:	f043 0302 	orr.w	r3, r3, #2
 8005638:	6413      	str	r3, [r2, #64]	; 0x40
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <HAL_TIM_Base_MspInit+0x84>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005646:	2200      	movs	r2, #0
 8005648:	2101      	movs	r1, #1
 800564a:	201d      	movs	r0, #29
 800564c:	f001 fb5d 	bl	8006d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005650:	201d      	movs	r0, #29
 8005652:	f001 fb76 	bl	8006d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005656:	e01a      	b.n	800568e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_TIM_Base_MspInit+0x88>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d115      	bne.n	800568e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	4b0d      	ldr	r3, [pc, #52]	; (800569c <HAL_TIM_Base_MspInit+0x84>)
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	4a0c      	ldr	r2, [pc, #48]	; (800569c <HAL_TIM_Base_MspInit+0x84>)
 800566c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005670:	6453      	str	r3, [r2, #68]	; 0x44
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <HAL_TIM_Base_MspInit+0x84>)
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	60bb      	str	r3, [r7, #8]
 800567c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800567e:	2200      	movs	r2, #0
 8005680:	2102      	movs	r1, #2
 8005682:	2019      	movs	r0, #25
 8005684:	f001 fb41 	bl	8006d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005688:	2019      	movs	r0, #25
 800568a:	f001 fb5a 	bl	8006d42 <HAL_NVIC_EnableIRQ>
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40000400 	.word	0x40000400
 800569c:	40023800 	.word	0x40023800
 80056a0:	40014400 	.word	0x40014400

080056a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ac:	f107 030c 	add.w	r3, r7, #12
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a12      	ldr	r2, [pc, #72]	; (800570c <HAL_TIM_MspPostInit+0x68>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d11d      	bne.n	8005702 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	4b11      	ldr	r3, [pc, #68]	; (8005710 <HAL_TIM_MspPostInit+0x6c>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	4a10      	ldr	r2, [pc, #64]	; (8005710 <HAL_TIM_MspPostInit+0x6c>)
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	6313      	str	r3, [r2, #48]	; 0x30
 80056d6:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <HAL_TIM_MspPostInit+0x6c>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80056e2:	2330      	movs	r3, #48	; 0x30
 80056e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e6:	2302      	movs	r3, #2
 80056e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056f2:	2302      	movs	r3, #2
 80056f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f6:	f107 030c 	add.w	r3, r7, #12
 80056fa:	4619      	mov	r1, r3
 80056fc:	4805      	ldr	r0, [pc, #20]	; (8005714 <HAL_TIM_MspPostInit+0x70>)
 80056fe:	f001 ff1b 	bl	8007538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40000400 	.word	0x40000400
 8005710:	40023800 	.word	0x40023800
 8005714:	40020400 	.word	0x40020400

08005718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08c      	sub	sp, #48	; 0x30
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005720:	f107 031c 	add.w	r3, r7, #28
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a33      	ldr	r2, [pc, #204]	; (8005804 <HAL_UART_MspInit+0xec>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d12d      	bne.n	8005796 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	4b32      	ldr	r3, [pc, #200]	; (8005808 <HAL_UART_MspInit+0xf0>)
 8005740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005742:	4a31      	ldr	r2, [pc, #196]	; (8005808 <HAL_UART_MspInit+0xf0>)
 8005744:	f043 0310 	orr.w	r3, r3, #16
 8005748:	6453      	str	r3, [r2, #68]	; 0x44
 800574a:	4b2f      	ldr	r3, [pc, #188]	; (8005808 <HAL_UART_MspInit+0xf0>)
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_UART_MspInit+0xf0>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <HAL_UART_MspInit+0xf0>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6313      	str	r3, [r2, #48]	; 0x30
 8005766:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_UART_MspInit+0xf0>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005778:	2302      	movs	r3, #2
 800577a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577c:	2300      	movs	r3, #0
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005780:	2300      	movs	r3, #0
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005784:	2307      	movs	r3, #7
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005788:	f107 031c 	add.w	r3, r7, #28
 800578c:	4619      	mov	r1, r3
 800578e:	481f      	ldr	r0, [pc, #124]	; (800580c <HAL_UART_MspInit+0xf4>)
 8005790:	f001 fed2 	bl	8007538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005794:	e031      	b.n	80057fa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_UART_MspInit+0xf8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d12c      	bne.n	80057fa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80057a0:	2300      	movs	r3, #0
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	4b18      	ldr	r3, [pc, #96]	; (8005808 <HAL_UART_MspInit+0xf0>)
 80057a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a8:	4a17      	ldr	r2, [pc, #92]	; (8005808 <HAL_UART_MspInit+0xf0>)
 80057aa:	f043 0320 	orr.w	r3, r3, #32
 80057ae:	6453      	str	r3, [r2, #68]	; 0x44
 80057b0:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_UART_MspInit+0xf0>)
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <HAL_UART_MspInit+0xf0>)
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	4a10      	ldr	r2, [pc, #64]	; (8005808 <HAL_UART_MspInit+0xf0>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	6313      	str	r3, [r2, #48]	; 0x30
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <HAL_UART_MspInit+0xf0>)
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80057d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057de:	2302      	movs	r3, #2
 80057e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057e2:	2301      	movs	r3, #1
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057e6:	2300      	movs	r3, #0
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80057ea:	2308      	movs	r3, #8
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ee:	f107 031c 	add.w	r3, r7, #28
 80057f2:	4619      	mov	r1, r3
 80057f4:	4805      	ldr	r0, [pc, #20]	; (800580c <HAL_UART_MspInit+0xf4>)
 80057f6:	f001 fe9f 	bl	8007538 <HAL_GPIO_Init>
}
 80057fa:	bf00      	nop
 80057fc:	3730      	adds	r7, #48	; 0x30
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40011000 	.word	0x40011000
 8005808:	40023800 	.word	0x40023800
 800580c:	40020000 	.word	0x40020000
 8005810:	40011400 	.word	0x40011400

08005814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005818:	e7fe      	b.n	8005818 <NMI_Handler+0x4>

0800581a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800581e:	e7fe      	b.n	800581e <HardFault_Handler+0x4>

08005820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <MemManage_Handler+0x4>

08005826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800582a:	e7fe      	b.n	800582a <BusFault_Handler+0x4>

0800582c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005830:	e7fe      	b.n	8005830 <UsageFault_Handler+0x4>

08005832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005832:	b480      	push	{r7}
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800584e:	b480      	push	{r7}
 8005850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005860:	f000 f8c4 	bl	80059ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	bd80      	pop	{r7, pc}

08005868 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <DMA1_Stream4_IRQHandler+0x10>)
 800586e:	f001 fbf9 	bl	8007064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20011170 	.word	0x20011170

0800587c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005882:	f004 fe2f 	bl	800a4e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200112a8 	.word	0x200112a8

08005890 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005894:	4802      	ldr	r0, [pc, #8]	; (80058a0 <TIM3_IRQHandler+0x10>)
 8005896:	f004 fe25 	bl	800a4e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20011218 	.word	0x20011218

080058a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 80058a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80058ac:	f001 ffe2 	bl	8007874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80058b0:	bf00      	nop
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80058b8:	4802      	ldr	r0, [pc, #8]	; (80058c4 <DMA2_Stream4_IRQHandler+0x10>)
 80058ba:	f001 fbd3 	bl	8007064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80058be:	bf00      	nop
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	2001100c 	.word	0x2001100c

080058c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <SystemInit+0x28>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <SystemInit+0x28>)
 80058d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <SystemInit+0x28>)
 80058de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058e2:	609a      	str	r2, [r3, #8]
#endif
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	e000ed00 	.word	0xe000ed00

080058f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80058f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800592c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80058f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80058fa:	e003      	b.n	8005904 <LoopCopyDataInit>

080058fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005900:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005902:	3104      	adds	r1, #4

08005904 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005904:	480b      	ldr	r0, [pc, #44]	; (8005934 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005908:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800590a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800590c:	d3f6      	bcc.n	80058fc <CopyDataInit>
  ldr  r2, =_sbss
 800590e:	4a0b      	ldr	r2, [pc, #44]	; (800593c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005910:	e002      	b.n	8005918 <LoopFillZerobss>

08005912 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005912:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005914:	f842 3b04 	str.w	r3, [r2], #4

08005918 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800591a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800591c:	d3f9      	bcc.n	8005912 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800591e:	f7ff ffd3 	bl	80058c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005922:	f006 f85b 	bl	800b9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005926:	f7fe fcc1 	bl	80042ac <main>
  bx  lr    
 800592a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800592c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005930:	0800d484 	.word	0x0800d484
  ldr  r0, =_sdata
 8005934:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005938:	20000408 	.word	0x20000408
  ldr  r2, =_sbss
 800593c:	20000408 	.word	0x20000408
  ldr  r3, = _ebss
 8005940:	2001137c 	.word	0x2001137c

08005944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005944:	e7fe      	b.n	8005944 <ADC_IRQHandler>
	...

08005948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <HAL_Init+0x40>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a0d      	ldr	r2, [pc, #52]	; (8005988 <HAL_Init+0x40>)
 8005952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <HAL_Init+0x40>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <HAL_Init+0x40>)
 800595e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <HAL_Init+0x40>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a07      	ldr	r2, [pc, #28]	; (8005988 <HAL_Init+0x40>)
 800596a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005970:	2003      	movs	r0, #3
 8005972:	f001 f9bf 	bl	8006cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005976:	2000      	movs	r0, #0
 8005978:	f000 f808 	bl	800598c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800597c:	f7ff fc0a 	bl	8005194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40023c00 	.word	0x40023c00

0800598c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005994:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <HAL_InitTick+0x54>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <HAL_InitTick+0x58>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	4619      	mov	r1, r3
 800599e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 f9d7 	bl	8006d5e <HAL_SYSTICK_Config>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e00e      	b.n	80059d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b0f      	cmp	r3, #15
 80059be:	d80a      	bhi.n	80059d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059c0:	2200      	movs	r2, #0
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	f001 f99f 	bl	8006d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059cc:	4a06      	ldr	r2, [pc, #24]	; (80059e8 <HAL_InitTick+0x5c>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000398 	.word	0x20000398
 80059e4:	200003a0 	.word	0x200003a0
 80059e8:	2000039c 	.word	0x2000039c

080059ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_IncTick+0x20>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_IncTick+0x24>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4413      	add	r3, r2
 80059fc:	4a04      	ldr	r2, [pc, #16]	; (8005a10 <HAL_IncTick+0x24>)
 80059fe:	6013      	str	r3, [r2, #0]
}
 8005a00:	bf00      	nop
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	200003a0 	.word	0x200003a0
 8005a10:	20011378 	.word	0x20011378

08005a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  return uwTick;
 8005a18:	4b03      	ldr	r3, [pc, #12]	; (8005a28 <HAL_GetTick+0x14>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	20011378 	.word	0x20011378

08005a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a34:	f7ff ffee 	bl	8005a14 <HAL_GetTick>
 8005a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d005      	beq.n	8005a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <HAL_Delay+0x44>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a52:	bf00      	nop
 8005a54:	f7ff ffde 	bl	8005a14 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d8f7      	bhi.n	8005a54 <HAL_Delay+0x28>
  {
  }
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200003a0 	.word	0x200003a0

08005a74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e033      	b.n	8005af2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fba6 	bl	80051e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d118      	bne.n	8005ae4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005aba:	f023 0302 	bic.w	r3, r3, #2
 8005abe:	f043 0202 	orr.w	r2, r3, #2
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fbde 	bl	8006288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	f043 0201 	orr.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ae2:	e001      	b.n	8005ae8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_ADC_Start+0x1a>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e097      	b.n	8005c46 <HAL_ADC_Start+0x14a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d018      	beq.n	8005b5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b3c:	4b45      	ldr	r3, [pc, #276]	; (8005c54 <HAL_ADC_Start+0x158>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a45      	ldr	r2, [pc, #276]	; (8005c58 <HAL_ADC_Start+0x15c>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	0c9a      	lsrs	r2, r3, #18
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b50:	e002      	b.n	8005b58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f9      	bne.n	8005b52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d15f      	bne.n	8005c2c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d106      	bne.n	8005bba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	f023 0206 	bic.w	r2, r3, #6
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44
 8005bb8:	e002      	b.n	8005bc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bc8:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <HAL_ADC_Start+0x160>)
 8005bca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005bd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d129      	bne.n	8005c44 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bfe:	609a      	str	r2, [r3, #8]
 8005c00:	e020      	b.n	8005c44 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_ADC_Start+0x164>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d11b      	bne.n	8005c44 <HAL_ADC_Start+0x148>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d114      	bne.n	8005c44 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	e00b      	b.n	8005c44 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	f043 0210 	orr.w	r2, r3, #16
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3c:	f043 0201 	orr.w	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000398 	.word	0x20000398
 8005c58:	431bde83 	.word	0x431bde83
 8005c5c:	40012300 	.word	0x40012300
 8005c60:	40012000 	.word	0x40012000

08005c64 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c80:	d113      	bne.n	8005caa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c90:	d10b      	bne.n	8005caa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e063      	b.n	8005d72 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005caa:	f7ff feb3 	bl	8005a14 <HAL_GetTick>
 8005cae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005cb0:	e021      	b.n	8005cf6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d01d      	beq.n	8005cf6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <HAL_ADC_PollForConversion+0x6c>
 8005cc0:	f7ff fea8 	bl	8005a14 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d212      	bcs.n	8005cf6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0204 	orr.w	r2, r3, #4
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e03d      	b.n	8005d72 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d1d6      	bne.n	8005cb2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0212 	mvn.w	r2, #18
 8005d0c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d123      	bne.n	8005d70 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11f      	bne.n	8005d70 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d006      	beq.n	8005d4c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d111      	bne.n	8005d70 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f043 0201 	orr.w	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_ADC_Start_DMA+0x1e>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0ce      	b.n	8005f38 <HAL_ADC_Start_DMA+0x1bc>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d018      	beq.n	8005de2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005dc0:	4b5f      	ldr	r3, [pc, #380]	; (8005f40 <HAL_ADC_Start_DMA+0x1c4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a5f      	ldr	r2, [pc, #380]	; (8005f44 <HAL_ADC_Start_DMA+0x1c8>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0c9a      	lsrs	r2, r3, #18
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005dd4:	e002      	b.n	8005ddc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f9      	bne.n	8005dd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df0:	d107      	bne.n	8005e02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e00:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	f040 8086 	bne.w	8005f1e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e50:	d106      	bne.n	8005e60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f023 0206 	bic.w	r2, r3, #6
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	645a      	str	r2, [r3, #68]	; 0x44
 8005e5e:	e002      	b.n	8005e66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e6e:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <HAL_ADC_Start_DMA+0x1cc>)
 8005e70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <HAL_ADC_Start_DMA+0x1d0>)
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <HAL_ADC_Start_DMA+0x1d4>)
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	4a33      	ldr	r2, [pc, #204]	; (8005f54 <HAL_ADC_Start_DMA+0x1d8>)
 8005e88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005ea2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	334c      	adds	r3, #76	; 0x4c
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f001 f806 	bl	8006ed4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10f      	bne.n	8005ef4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d129      	bne.n	8005f36 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ef0:	609a      	str	r2, [r3, #8]
 8005ef2:	e020      	b.n	8005f36 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <HAL_ADC_Start_DMA+0x1dc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d11b      	bne.n	8005f36 <HAL_ADC_Start_DMA+0x1ba>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d114      	bne.n	8005f36 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	e00b      	b.n	8005f36 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f043 0210 	orr.w	r2, r3, #16
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f043 0201 	orr.w	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000398 	.word	0x20000398
 8005f44:	431bde83 	.word	0x431bde83
 8005f48:	40012300 	.word	0x40012300
 8005f4c:	08006481 	.word	0x08006481
 8005f50:	0800653b 	.word	0x0800653b
 8005f54:	08006557 	.word	0x08006557
 8005f58:	40012000 	.word	0x40012000

08005f5c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_ADC_Stop_DMA+0x1a>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e048      	b.n	8006008 <HAL_ADC_Stop_DMA+0xac>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d130      	bne.n	8005ffe <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005faa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d10f      	bne.n	8005fda <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 ffe0 	bl	8006f84 <HAL_DMA_Abort>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005fe8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	f043 0201 	orr.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x1c>
 800603c:	2302      	movs	r3, #2
 800603e:	e113      	b.n	8006268 <HAL_ADC_ConfigChannel+0x244>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b09      	cmp	r3, #9
 800604e:	d925      	bls.n	800609c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68d9      	ldr	r1, [r3, #12]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	3b1e      	subs	r3, #30
 8006066:	2207      	movs	r2, #7
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43da      	mvns	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	400a      	ands	r2, r1
 8006074:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68d9      	ldr	r1, [r3, #12]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	4618      	mov	r0, r3
 8006088:	4603      	mov	r3, r0
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4403      	add	r3, r0
 800608e:	3b1e      	subs	r3, #30
 8006090:	409a      	lsls	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	60da      	str	r2, [r3, #12]
 800609a:	e022      	b.n	80060e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6919      	ldr	r1, [r3, #16]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	4613      	mov	r3, r2
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	4413      	add	r3, r2
 80060b0:	2207      	movs	r2, #7
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43da      	mvns	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	400a      	ands	r2, r1
 80060be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6919      	ldr	r1, [r3, #16]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4618      	mov	r0, r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	4403      	add	r3, r0
 80060d8:	409a      	lsls	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b06      	cmp	r3, #6
 80060e8:	d824      	bhi.n	8006134 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	3b05      	subs	r3, #5
 80060fc:	221f      	movs	r2, #31
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	43da      	mvns	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	400a      	ands	r2, r1
 800610a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	4618      	mov	r0, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	3b05      	subs	r3, #5
 8006126:	fa00 f203 	lsl.w	r2, r0, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	635a      	str	r2, [r3, #52]	; 0x34
 8006132:	e04c      	b.n	80061ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d824      	bhi.n	8006186 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	3b23      	subs	r3, #35	; 0x23
 800614e:	221f      	movs	r2, #31
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43da      	mvns	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	400a      	ands	r2, r1
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	4618      	mov	r0, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	3b23      	subs	r3, #35	; 0x23
 8006178:	fa00 f203 	lsl.w	r2, r0, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
 8006184:	e023      	b.n	80061ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	3b41      	subs	r3, #65	; 0x41
 8006198:	221f      	movs	r2, #31
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43da      	mvns	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	400a      	ands	r2, r1
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	4618      	mov	r0, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	3b41      	subs	r3, #65	; 0x41
 80061c2:	fa00 f203 	lsl.w	r2, r0, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061ce:	4b29      	ldr	r3, [pc, #164]	; (8006274 <HAL_ADC_ConfigChannel+0x250>)
 80061d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a28      	ldr	r2, [pc, #160]	; (8006278 <HAL_ADC_ConfigChannel+0x254>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d10f      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x1d8>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b12      	cmp	r3, #18
 80061e2:	d10b      	bne.n	80061fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <HAL_ADC_ConfigChannel+0x254>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d12b      	bne.n	800625e <HAL_ADC_ConfigChannel+0x23a>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1c      	ldr	r2, [pc, #112]	; (800627c <HAL_ADC_ConfigChannel+0x258>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <HAL_ADC_ConfigChannel+0x1f4>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b11      	cmp	r3, #17
 8006216:	d122      	bne.n	800625e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a11      	ldr	r2, [pc, #68]	; (800627c <HAL_ADC_ConfigChannel+0x258>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d111      	bne.n	800625e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <HAL_ADC_ConfigChannel+0x25c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a11      	ldr	r2, [pc, #68]	; (8006284 <HAL_ADC_ConfigChannel+0x260>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	0c9a      	lsrs	r2, r3, #18
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006250:	e002      	b.n	8006258 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	3b01      	subs	r3, #1
 8006256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1f9      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40012300 	.word	0x40012300
 8006278:	40012000 	.word	0x40012000
 800627c:	10000012 	.word	0x10000012
 8006280:	20000398 	.word	0x20000398
 8006284:	431bde83 	.word	0x431bde83

08006288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006290:	4b79      	ldr	r3, [pc, #484]	; (8006478 <ADC_Init+0x1f0>)
 8006292:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	021a      	lsls	r2, r3, #8
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80062e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6899      	ldr	r1, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	4a58      	ldr	r2, [pc, #352]	; (800647c <ADC_Init+0x1f4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d022      	beq.n	8006366 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800632e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6899      	ldr	r1, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6899      	ldr	r1, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]
 8006364:	e00f      	b.n	8006386 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0202 	bic.w	r2, r2, #2
 8006394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6899      	ldr	r1, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7e1b      	ldrb	r3, [r3, #24]
 80063a0:	005a      	lsls	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01b      	beq.n	80063ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6859      	ldr	r1, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	3b01      	subs	r3, #1
 80063e0:	035a      	lsls	r2, r3, #13
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	e007      	b.n	80063fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800640a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	3b01      	subs	r3, #1
 8006418:	051a      	lsls	r2, r3, #20
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6899      	ldr	r1, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800643e:	025a      	lsls	r2, r3, #9
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6899      	ldr	r1, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	029a      	lsls	r2, r3, #10
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	609a      	str	r2, [r3, #8]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	40012300 	.word	0x40012300
 800647c:	0f000001 	.word	0x0f000001

08006480 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006496:	2b00      	cmp	r3, #0
 8006498:	d13c      	bne.n	8006514 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d12b      	bne.n	800650c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d127      	bne.n	800650c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d119      	bne.n	800650c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0220 	bic.w	r2, r2, #32
 80064e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	f043 0201 	orr.w	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f7fe fe03 	bl	8005118 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006512:	e00e      	b.n	8006532 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff fd75 	bl	8006010 <HAL_ADC_ErrorCallback>
}
 8006526:	e004      	b.n	8006532 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	4798      	blx	r3
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7fe fdd5 	bl	80050f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2240      	movs	r2, #64	; 0x40
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	f043 0204 	orr.w	r2, r3, #4
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f7ff fd4a 	bl	8006010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	2300      	movs	r3, #0
 8006596:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_ADCEx_InjectedStart+0x22>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e0aa      	b.n	80066fc <HAL_ADCEx_InjectedStart+0x178>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d018      	beq.n	80065ee <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065cc:	4b4e      	ldr	r3, [pc, #312]	; (8006708 <HAL_ADCEx_InjectedStart+0x184>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a4e      	ldr	r2, [pc, #312]	; (800670c <HAL_ADCEx_InjectedStart+0x188>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	0c9a      	lsrs	r2, r3, #18
 80065d8:	4613      	mov	r3, r2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4413      	add	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80065e0:	e002      	b.n	80065e8 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f9      	bne.n	80065e2 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d172      	bne.n	80066e2 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006604:	f023 0301 	bic.w	r3, r3, #1
 8006608:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f06f 0204 	mvn.w	r2, #4
 8006632:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <HAL_ADCEx_InjectedStart+0x18c>)
 8006636:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f003 031f 	and.w	r3, r3, #31
 8006640:	2b00      	cmp	r3, #0
 8006642:	d124      	bne.n	800668e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800664e:	2b00      	cmp	r3, #0
 8006650:	bf0c      	ite	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	2300      	movne	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d041      	beq.n	80066fa <HAL_ADCEx_InjectedStart+0x176>
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d03e      	beq.n	80066fa <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	e035      	b.n	80066fa <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	bf0c      	ite	eq
 80066b2:	2301      	moveq	r3, #1
 80066b4:	2300      	movne	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a15      	ldr	r2, [pc, #84]	; (8006714 <HAL_ADCEx_InjectedStart+0x190>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d11a      	bne.n	80066fa <HAL_ADCEx_InjectedStart+0x176>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d017      	beq.n	80066fa <HAL_ADCEx_InjectedStart+0x176>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d014      	beq.n	80066fa <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	e00b      	b.n	80066fa <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f043 0210 	orr.w	r2, r3, #16
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f2:	f043 0201 	orr.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20000398 	.word	0x20000398
 800670c:	431bde83 	.word	0x431bde83
 8006710:	40012300 	.word	0x40012300
 8006714:	40012000 	.word	0x40012000

08006718 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_ADCEx_InjectedStop+0x1a>
 800672e:	2302      	movs	r3, #2
 8006730:	e037      	b.n	80067a2 <HAL_ADCEx_InjectedStop+0x8a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d120      	bne.n	8006788 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006750:	2b00      	cmp	r3, #0
 8006752:	d119      	bne.n	8006788 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d112      	bne.n	8006798 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	f043 0201 	orr.w	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006786:	e007      	b.n	8006798 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	f043 0220 	orr.w	r2, r3, #32
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f06f 0204 	mvn.w	r2, #4
 80067c6:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d81f      	bhi.n	8006810 <HAL_ADCEx_InjectedGetValue+0x60>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <HAL_ADCEx_InjectedGetValue+0x28>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	08006807 	.word	0x08006807
 80067dc:	080067fd 	.word	0x080067fd
 80067e0:	080067f3 	.word	0x080067f3
 80067e4:	080067e9 	.word	0x080067e9
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ee:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80067f0:	e00f      	b.n	8006812 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80067fa:	e00a      	b.n	8006812 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	60fb      	str	r3, [r7, #12]
    }
    break;
 8006804:	e005      	b.n	8006812 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	60fb      	str	r3, [r7, #12]
    }
    break;
 800680e:	e000      	b.n	8006812 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8006810:	bf00      	nop
  }
  return tmp;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006834:	2302      	movs	r3, #2
 8006836:	e17e      	b.n	8006b36 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b09      	cmp	r3, #9
 8006846:	d925      	bls.n	8006894 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68d9      	ldr	r1, [r3, #12]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	4613      	mov	r3, r2
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	4413      	add	r3, r2
 800685c:	3b1e      	subs	r3, #30
 800685e:	2207      	movs	r2, #7
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	43da      	mvns	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	400a      	ands	r2, r1
 800686c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68d9      	ldr	r1, [r3, #12]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	4618      	mov	r0, r3
 8006880:	4603      	mov	r3, r0
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4403      	add	r3, r0
 8006886:	3b1e      	subs	r3, #30
 8006888:	409a      	lsls	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	e022      	b.n	80068da <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6919      	ldr	r1, [r3, #16]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	4613      	mov	r3, r2
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4413      	add	r3, r2
 80068a8:	2207      	movs	r2, #7
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	43da      	mvns	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	400a      	ands	r2, r1
 80068b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6919      	ldr	r1, [r3, #16]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4618      	mov	r0, r3
 80068ca:	4603      	mov	r3, r0
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4403      	add	r3, r0
 80068d0:	409a      	lsls	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	051a      	lsls	r2, r3, #20
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	b2db      	uxtb	r3, r3
 8006916:	3303      	adds	r3, #3
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	221f      	movs	r2, #31
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	43da      	mvns	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	400a      	ands	r2, r1
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	4618      	mov	r0, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	b2db      	uxtb	r3, r3
 8006950:	3303      	adds	r3, #3
 8006952:	b2db      	uxtb	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	fa00 f203 	lsl.w	r2, r0, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	4a75      	ldr	r2, [pc, #468]	; (8006b44 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d022      	beq.n	80069b8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6899      	ldr	r1, [r3, #8]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80069a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6899      	ldr	r1, [r3, #8]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	69da      	ldr	r2, [r3, #28]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]
 80069b6:	e00f      	b.n	80069d8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80069c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80069d6:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	7d5b      	ldrb	r3, [r3, #21]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069ee:	605a      	str	r2, [r3, #4]
 80069f0:	e007      	b.n	8006a02 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a00:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	7d1b      	ldrb	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a18:	605a      	str	r2, [r3, #4]
 8006a1a:	e007      	b.n	8006a2c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a2a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d02e      	beq.n	8006a92 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d840      	bhi.n	8006aba <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d002      	beq.n	8006a42 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d014      	beq.n	8006a6a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006a40:	e03b      	b.n	8006aba <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a50:	f023 030f 	bic.w	r3, r3, #15
 8006a54:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6959      	ldr	r1, [r3, #20]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	615a      	str	r2, [r3, #20]
      break;
 8006a68:	e03b      	b.n	8006ae2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6812      	ldr	r2, [r2, #0]
 8006a74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a78:	f023 030f 	bic.w	r3, r3, #15
 8006a7c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6999      	ldr	r1, [r3, #24]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	619a      	str	r2, [r3, #24]
      break;
 8006a90:	e027      	b.n	8006ae2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6812      	ldr	r2, [r2, #0]
 8006a9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006aa0:	f023 030f 	bic.w	r3, r3, #15
 8006aa4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69d9      	ldr	r1, [r3, #28]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	61da      	str	r2, [r3, #28]
      break;
 8006ab8:	e013      	b.n	8006ae2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006ac8:	f023 030f 	bic.w	r3, r3, #15
 8006acc:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a19      	ldr	r1, [r3, #32]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	621a      	str	r2, [r3, #32]
      break;
 8006ae0:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ae2:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a18      	ldr	r2, [pc, #96]	; (8006b4c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d109      	bne.n	8006b04 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b12      	cmp	r3, #18
 8006af6:	d105      	bne.n	8006b04 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a10      	ldr	r2, [pc, #64]	; (8006b4c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d10e      	bne.n	8006b2c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b11      	cmp	r3, #17
 8006b1e:	d105      	bne.n	8006b2c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	000f0001 	.word	0x000f0001
 8006b48:	40012300 	.word	0x40012300
 8006b4c:	40012000 	.word	0x40012000
 8006b50:	10000012 	.word	0x10000012

08006b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <__NVIC_SetPriorityGrouping+0x44>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b70:	4013      	ands	r3, r2
 8006b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b86:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <__NVIC_SetPriorityGrouping+0x44>)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	60d3      	str	r3, [r2, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	e000ed00 	.word	0xe000ed00

08006b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	f003 0307 	and.w	r3, r3, #7
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	e000ed00 	.word	0xe000ed00

08006bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	db0b      	blt.n	8006be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	f003 021f 	and.w	r2, r3, #31
 8006bd0:	4907      	ldr	r1, [pc, #28]	; (8006bf0 <__NVIC_EnableIRQ+0x38>)
 8006bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2001      	movs	r0, #1
 8006bda:	fa00 f202 	lsl.w	r2, r0, r2
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	e000e100 	.word	0xe000e100

08006bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	6039      	str	r1, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	db0a      	blt.n	8006c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	490c      	ldr	r1, [pc, #48]	; (8006c40 <__NVIC_SetPriority+0x4c>)
 8006c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c12:	0112      	lsls	r2, r2, #4
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	440b      	add	r3, r1
 8006c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c1c:	e00a      	b.n	8006c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	4908      	ldr	r1, [pc, #32]	; (8006c44 <__NVIC_SetPriority+0x50>)
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	3b04      	subs	r3, #4
 8006c2c:	0112      	lsls	r2, r2, #4
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	440b      	add	r3, r1
 8006c32:	761a      	strb	r2, [r3, #24]
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	e000e100 	.word	0xe000e100
 8006c44:	e000ed00 	.word	0xe000ed00

08006c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b089      	sub	sp, #36	; 0x24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f1c3 0307 	rsb	r3, r3, #7
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	bf28      	it	cs
 8006c66:	2304      	movcs	r3, #4
 8006c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	2b06      	cmp	r3, #6
 8006c70:	d902      	bls.n	8006c78 <NVIC_EncodePriority+0x30>
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	3b03      	subs	r3, #3
 8006c76:	e000      	b.n	8006c7a <NVIC_EncodePriority+0x32>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	fa02 f303 	lsl.w	r3, r2, r3
 8006c86:	43da      	mvns	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c90:	f04f 31ff 	mov.w	r1, #4294967295
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	43d9      	mvns	r1, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca0:	4313      	orrs	r3, r2
         );
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3724      	adds	r7, #36	; 0x24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cc0:	d301      	bcc.n	8006cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e00f      	b.n	8006ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cc6:	4a0a      	ldr	r2, [pc, #40]	; (8006cf0 <SysTick_Config+0x40>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cce:	210f      	movs	r1, #15
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	f7ff ff8e 	bl	8006bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <SysTick_Config+0x40>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cde:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <SysTick_Config+0x40>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010

08006cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ff29 	bl	8006b54 <__NVIC_SetPriorityGrouping>
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	4603      	mov	r3, r0
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d1c:	f7ff ff3e 	bl	8006b9c <__NVIC_GetPriorityGrouping>
 8006d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	6978      	ldr	r0, [r7, #20]
 8006d28:	f7ff ff8e 	bl	8006c48 <NVIC_EncodePriority>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d32:	4611      	mov	r1, r2
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff ff5d 	bl	8006bf4 <__NVIC_SetPriority>
}
 8006d3a:	bf00      	nop
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	4603      	mov	r3, r0
 8006d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff ff31 	bl	8006bb8 <__NVIC_EnableIRQ>
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff ffa2 	bl	8006cb0 <SysTick_Config>
 8006d6c:	4603      	mov	r3, r0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d84:	f7fe fe46 	bl	8005a14 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e099      	b.n	8006ec8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006db4:	e00f      	b.n	8006dd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006db6:	f7fe fe2d 	bl	8005a14 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b05      	cmp	r3, #5
 8006dc2:	d908      	bls.n	8006dd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e078      	b.n	8006ec8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e8      	bne.n	8006db6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4b38      	ldr	r3, [pc, #224]	; (8006ed0 <HAL_DMA_Init+0x158>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d107      	bne.n	8006e40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0307 	bic.w	r3, r3, #7
 8006e56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d117      	bne.n	8006e9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00e      	beq.n	8006e9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fadf 	bl	8007440 <DMA_CheckFifoParam>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2240      	movs	r2, #64	; 0x40
 8006e8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006e96:	2301      	movs	r3, #1
 8006e98:	e016      	b.n	8006ec8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa96 	bl	80073d4 <DMA_CalcBaseAndBitshift>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb0:	223f      	movs	r2, #63	; 0x3f
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	f010803f 	.word	0xf010803f

08006ed4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_DMA_Start_IT+0x26>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e040      	b.n	8006f7c <HAL_DMA_Start_IT+0xa8>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d12f      	bne.n	8006f6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 fa28 	bl	8007378 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2c:	223f      	movs	r2, #63	; 0x3f
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0216 	orr.w	r2, r2, #22
 8006f42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0208 	orr.w	r2, r2, #8
 8006f5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e005      	b.n	8006f7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006f76:	2302      	movs	r3, #2
 8006f78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f92:	f7fe fd3f 	bl	8005a14 <HAL_GetTick>
 8006f96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d008      	beq.n	8006fb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2280      	movs	r2, #128	; 0x80
 8006fa8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e052      	b.n	800705c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0216 	bic.w	r2, r2, #22
 8006fc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695a      	ldr	r2, [r3, #20]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <HAL_DMA_Abort+0x62>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0208 	bic.w	r2, r2, #8
 8006ff4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007006:	e013      	b.n	8007030 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007008:	f7fe fd04 	bl	8005a14 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b05      	cmp	r3, #5
 8007014:	d90c      	bls.n	8007030 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2203      	movs	r2, #3
 8007020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e015      	b.n	800705c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e4      	bne.n	8007008 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	223f      	movs	r2, #63	; 0x3f
 8007044:	409a      	lsls	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007070:	4b8e      	ldr	r3, [pc, #568]	; (80072ac <HAL_DMA_IRQHandler+0x248>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a8e      	ldr	r2, [pc, #568]	; (80072b0 <HAL_DMA_IRQHandler+0x24c>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	0a9b      	lsrs	r3, r3, #10
 800707c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708e:	2208      	movs	r2, #8
 8007090:	409a      	lsls	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01a      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d013      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0204 	bic.w	r2, r2, #4
 80070b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070bc:	2208      	movs	r2, #8
 80070be:	409a      	lsls	r2, r3
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c8:	f043 0201 	orr.w	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d4:	2201      	movs	r2, #1
 80070d6:	409a      	lsls	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d012      	beq.n	8007106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f2:	2201      	movs	r2, #1
 80070f4:	409a      	lsls	r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	f043 0202 	orr.w	r2, r3, #2
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710a:	2204      	movs	r2, #4
 800710c:	409a      	lsls	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d012      	beq.n	800713c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007128:	2204      	movs	r2, #4
 800712a:	409a      	lsls	r2, r3
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007134:	f043 0204 	orr.w	r2, r3, #4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007140:	2210      	movs	r2, #16
 8007142:	409a      	lsls	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d043      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d03c      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715e:	2210      	movs	r2, #16
 8007160:	409a      	lsls	r2, r3
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d018      	beq.n	80071a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d108      	bne.n	8007194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d024      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	e01f      	b.n	80071d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01b      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	4798      	blx	r3
 80071a4:	e016      	b.n	80071d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d107      	bne.n	80071c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0208 	bic.w	r2, r2, #8
 80071c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d8:	2220      	movs	r2, #32
 80071da:	409a      	lsls	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 808f 	beq.w	8007304 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8087 	beq.w	8007304 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fa:	2220      	movs	r2, #32
 80071fc:	409a      	lsls	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b05      	cmp	r3, #5
 800720c:	d136      	bne.n	800727c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0216 	bic.w	r2, r2, #22
 800721c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695a      	ldr	r2, [r3, #20]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800722c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <HAL_DMA_IRQHandler+0x1da>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0208 	bic.w	r2, r2, #8
 800724c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	223f      	movs	r2, #63	; 0x3f
 8007254:	409a      	lsls	r2, r3
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726e:	2b00      	cmp	r3, #0
 8007270:	d07e      	beq.n	8007370 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
        }
        return;
 800727a:	e079      	b.n	8007370 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01d      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10d      	bne.n	80072b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729c:	2b00      	cmp	r3, #0
 800729e:	d031      	beq.n	8007304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
 80072a8:	e02c      	b.n	8007304 <HAL_DMA_IRQHandler+0x2a0>
 80072aa:	bf00      	nop
 80072ac:	20000398 	.word	0x20000398
 80072b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d023      	beq.n	8007304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
 80072c4:	e01e      	b.n	8007304 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10f      	bne.n	80072f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0210 	bic.w	r2, r2, #16
 80072e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007308:	2b00      	cmp	r3, #0
 800730a:	d032      	beq.n	8007372 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d022      	beq.n	800735e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2205      	movs	r2, #5
 800731c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0201 	bic.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	3301      	adds	r3, #1
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	429a      	cmp	r2, r3
 800733a:	d307      	bcc.n	800734c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f2      	bne.n	8007330 <HAL_DMA_IRQHandler+0x2cc>
 800734a:	e000      	b.n	800734e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800734c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
 800736e:	e000      	b.n	8007372 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007370:	bf00      	nop
    }
  }
}
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007394:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d108      	bne.n	80073b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073b6:	e007      	b.n	80073c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	60da      	str	r2, [r3, #12]
}
 80073c8:	bf00      	nop
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3b10      	subs	r3, #16
 80073e4:	4a14      	ldr	r2, [pc, #80]	; (8007438 <DMA_CalcBaseAndBitshift+0x64>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	091b      	lsrs	r3, r3, #4
 80073ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80073ee:	4a13      	ldr	r2, [pc, #76]	; (800743c <DMA_CalcBaseAndBitshift+0x68>)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d909      	bls.n	8007416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	1d1a      	adds	r2, r3, #4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	659a      	str	r2, [r3, #88]	; 0x58
 8007414:	e007      	b.n	8007426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	aaaaaaab 	.word	0xaaaaaaab
 800743c:	0800cb64 	.word	0x0800cb64

08007440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11f      	bne.n	800749a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d856      	bhi.n	800750e <DMA_CheckFifoParam+0xce>
 8007460:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <DMA_CheckFifoParam+0x28>)
 8007462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007466:	bf00      	nop
 8007468:	08007479 	.word	0x08007479
 800746c:	0800748b 	.word	0x0800748b
 8007470:	08007479 	.word	0x08007479
 8007474:	0800750f 	.word	0x0800750f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d046      	beq.n	8007512 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007488:	e043      	b.n	8007512 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007492:	d140      	bne.n	8007516 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007498:	e03d      	b.n	8007516 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a2:	d121      	bne.n	80074e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d837      	bhi.n	800751a <DMA_CheckFifoParam+0xda>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <DMA_CheckFifoParam+0x70>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074c7 	.word	0x080074c7
 80074b8:	080074c1 	.word	0x080074c1
 80074bc:	080074d9 	.word	0x080074d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
      break;
 80074c4:	e030      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d025      	beq.n	800751e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074d6:	e022      	b.n	800751e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074e0:	d11f      	bne.n	8007522 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80074e6:	e01c      	b.n	8007522 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d903      	bls.n	80074f6 <DMA_CheckFifoParam+0xb6>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d003      	beq.n	80074fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80074f4:	e018      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	73fb      	strb	r3, [r7, #15]
      break;
 80074fa:	e015      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00e      	beq.n	8007526 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
      break;
 800750c:	e00b      	b.n	8007526 <DMA_CheckFifoParam+0xe6>
      break;
 800750e:	bf00      	nop
 8007510:	e00a      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      break;
 8007512:	bf00      	nop
 8007514:	e008      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      break;
 8007516:	bf00      	nop
 8007518:	e006      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      break;
 800751a:	bf00      	nop
 800751c:	e004      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      break;
 800751e:	bf00      	nop
 8007520:	e002      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      break;   
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <DMA_CheckFifoParam+0xe8>
      break;
 8007526:	bf00      	nop
    }
  } 
  
  return status; 
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007538:	b480      	push	{r7}
 800753a:	b089      	sub	sp, #36	; 0x24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	e159      	b.n	8007808 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007554:	2201      	movs	r2, #1
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4013      	ands	r3, r2
 8007566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	429a      	cmp	r2, r3
 800756e:	f040 8148 	bne.w	8007802 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b01      	cmp	r3, #1
 800757c:	d005      	beq.n	800758a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007586:	2b02      	cmp	r3, #2
 8007588:	d130      	bne.n	80075ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	2203      	movs	r2, #3
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	43db      	mvns	r3, r3
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4013      	ands	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075c0:	2201      	movs	r2, #1
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4013      	ands	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	091b      	lsrs	r3, r3, #4
 80075d6:	f003 0201 	and.w	r2, r3, #1
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d017      	beq.n	8007628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	2203      	movs	r2, #3
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4013      	ands	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4313      	orrs	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d123      	bne.n	800767c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	08da      	lsrs	r2, r3, #3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3208      	adds	r2, #8
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	220f      	movs	r2, #15
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	43db      	mvns	r3, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4013      	ands	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	08da      	lsrs	r2, r3, #3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3208      	adds	r2, #8
 8007676:	69b9      	ldr	r1, [r7, #24]
 8007678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	2203      	movs	r2, #3
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	43db      	mvns	r3, r3
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	4013      	ands	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f003 0203 	and.w	r2, r3, #3
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80a2 	beq.w	8007802 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	4b57      	ldr	r3, [pc, #348]	; (8007820 <HAL_GPIO_Init+0x2e8>)
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	4a56      	ldr	r2, [pc, #344]	; (8007820 <HAL_GPIO_Init+0x2e8>)
 80076c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076cc:	6453      	str	r3, [r2, #68]	; 0x44
 80076ce:	4b54      	ldr	r3, [pc, #336]	; (8007820 <HAL_GPIO_Init+0x2e8>)
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076da:	4a52      	ldr	r2, [pc, #328]	; (8007824 <HAL_GPIO_Init+0x2ec>)
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	089b      	lsrs	r3, r3, #2
 80076e0:	3302      	adds	r3, #2
 80076e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	220f      	movs	r2, #15
 80076f2:	fa02 f303 	lsl.w	r3, r2, r3
 80076f6:	43db      	mvns	r3, r3
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	4013      	ands	r3, r2
 80076fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a49      	ldr	r2, [pc, #292]	; (8007828 <HAL_GPIO_Init+0x2f0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d019      	beq.n	800773a <HAL_GPIO_Init+0x202>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a48      	ldr	r2, [pc, #288]	; (800782c <HAL_GPIO_Init+0x2f4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d013      	beq.n	8007736 <HAL_GPIO_Init+0x1fe>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a47      	ldr	r2, [pc, #284]	; (8007830 <HAL_GPIO_Init+0x2f8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00d      	beq.n	8007732 <HAL_GPIO_Init+0x1fa>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a46      	ldr	r2, [pc, #280]	; (8007834 <HAL_GPIO_Init+0x2fc>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d007      	beq.n	800772e <HAL_GPIO_Init+0x1f6>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a45      	ldr	r2, [pc, #276]	; (8007838 <HAL_GPIO_Init+0x300>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d101      	bne.n	800772a <HAL_GPIO_Init+0x1f2>
 8007726:	2304      	movs	r3, #4
 8007728:	e008      	b.n	800773c <HAL_GPIO_Init+0x204>
 800772a:	2307      	movs	r3, #7
 800772c:	e006      	b.n	800773c <HAL_GPIO_Init+0x204>
 800772e:	2303      	movs	r3, #3
 8007730:	e004      	b.n	800773c <HAL_GPIO_Init+0x204>
 8007732:	2302      	movs	r3, #2
 8007734:	e002      	b.n	800773c <HAL_GPIO_Init+0x204>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <HAL_GPIO_Init+0x204>
 800773a:	2300      	movs	r3, #0
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	f002 0203 	and.w	r2, r2, #3
 8007742:	0092      	lsls	r2, r2, #2
 8007744:	4093      	lsls	r3, r2
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	4313      	orrs	r3, r2
 800774a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800774c:	4935      	ldr	r1, [pc, #212]	; (8007824 <HAL_GPIO_Init+0x2ec>)
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	089b      	lsrs	r3, r3, #2
 8007752:	3302      	adds	r3, #2
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800775a:	4b38      	ldr	r3, [pc, #224]	; (800783c <HAL_GPIO_Init+0x304>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	43db      	mvns	r3, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4013      	ands	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800777e:	4a2f      	ldr	r2, [pc, #188]	; (800783c <HAL_GPIO_Init+0x304>)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007784:	4b2d      	ldr	r3, [pc, #180]	; (800783c <HAL_GPIO_Init+0x304>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	43db      	mvns	r3, r3
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	4013      	ands	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80077a8:	4a24      	ldr	r2, [pc, #144]	; (800783c <HAL_GPIO_Init+0x304>)
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80077ae:	4b23      	ldr	r3, [pc, #140]	; (800783c <HAL_GPIO_Init+0x304>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	43db      	mvns	r3, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4013      	ands	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077d2:	4a1a      	ldr	r2, [pc, #104]	; (800783c <HAL_GPIO_Init+0x304>)
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077d8:	4b18      	ldr	r3, [pc, #96]	; (800783c <HAL_GPIO_Init+0x304>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	43db      	mvns	r3, r3
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	4013      	ands	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077fc:	4a0f      	ldr	r2, [pc, #60]	; (800783c <HAL_GPIO_Init+0x304>)
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	3301      	adds	r3, #1
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b0f      	cmp	r3, #15
 800780c:	f67f aea2 	bls.w	8007554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	3724      	adds	r7, #36	; 0x24
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40023800 	.word	0x40023800
 8007824:	40013800 	.word	0x40013800
 8007828:	40020000 	.word	0x40020000
 800782c:	40020400 	.word	0x40020400
 8007830:	40020800 	.word	0x40020800
 8007834:	40020c00 	.word	0x40020c00
 8007838:	40021000 	.word	0x40021000
 800783c:	40013c00 	.word	0x40013c00

08007840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
 800784c:	4613      	mov	r3, r2
 800784e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007850:	787b      	ldrb	r3, [r7, #1]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007856:	887a      	ldrh	r2, [r7, #2]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800785c:	e003      	b.n	8007866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800785e:	887b      	ldrh	r3, [r7, #2]
 8007860:	041a      	lsls	r2, r3, #16
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	619a      	str	r2, [r3, #24]
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
	...

08007874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800787e:	4b08      	ldr	r3, [pc, #32]	; (80078a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	4013      	ands	r3, r2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d006      	beq.n	8007898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800788a:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	4618      	mov	r0, r3
 8007894:	f7fd fc64 	bl	8005160 <HAL_GPIO_EXTI_Callback>
  }
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	40013c00 	.word	0x40013c00

080078a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e12b      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fd fd1e 	bl	800530c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2224      	movs	r2, #36	; 0x24
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007908:	f001 fbbc 	bl	8009084 <HAL_RCC_GetPCLK1Freq>
 800790c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a81      	ldr	r2, [pc, #516]	; (8007b18 <HAL_I2C_Init+0x274>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d807      	bhi.n	8007928 <HAL_I2C_Init+0x84>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a80      	ldr	r2, [pc, #512]	; (8007b1c <HAL_I2C_Init+0x278>)
 800791c:	4293      	cmp	r3, r2
 800791e:	bf94      	ite	ls
 8007920:	2301      	movls	r3, #1
 8007922:	2300      	movhi	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e006      	b.n	8007936 <HAL_I2C_Init+0x92>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a7d      	ldr	r2, [pc, #500]	; (8007b20 <HAL_I2C_Init+0x27c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	bf94      	ite	ls
 8007930:	2301      	movls	r3, #1
 8007932:	2300      	movhi	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e0e7      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a78      	ldr	r2, [pc, #480]	; (8007b24 <HAL_I2C_Init+0x280>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	0c9b      	lsrs	r3, r3, #18
 8007948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4a6a      	ldr	r2, [pc, #424]	; (8007b18 <HAL_I2C_Init+0x274>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d802      	bhi.n	8007978 <HAL_I2C_Init+0xd4>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3301      	adds	r3, #1
 8007976:	e009      	b.n	800798c <HAL_I2C_Init+0xe8>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	4a69      	ldr	r2, [pc, #420]	; (8007b28 <HAL_I2C_Init+0x284>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	099b      	lsrs	r3, r3, #6
 800798a:	3301      	adds	r3, #1
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	430b      	orrs	r3, r1
 8007992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800799e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	495c      	ldr	r1, [pc, #368]	; (8007b18 <HAL_I2C_Init+0x274>)
 80079a8:	428b      	cmp	r3, r1
 80079aa:	d819      	bhi.n	80079e0 <HAL_I2C_Init+0x13c>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	1e59      	subs	r1, r3, #1
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ba:	1c59      	adds	r1, r3, #1
 80079bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079c0:	400b      	ands	r3, r1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_I2C_Init+0x138>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1e59      	subs	r1, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80079d4:	3301      	adds	r3, #1
 80079d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079da:	e051      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079dc:	2304      	movs	r3, #4
 80079de:	e04f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d111      	bne.n	8007a0c <HAL_I2C_Init+0x168>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1e58      	subs	r0, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	440b      	add	r3, r1
 80079f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80079fa:	3301      	adds	r3, #1
 80079fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e012      	b.n	8007a32 <HAL_I2C_Init+0x18e>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1e58      	subs	r0, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	0099      	lsls	r1, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a22:	3301      	adds	r3, #1
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_I2C_Init+0x196>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e022      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10e      	bne.n	8007a60 <HAL_I2C_Init+0x1bc>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1e58      	subs	r0, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	440b      	add	r3, r1
 8007a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a54:	3301      	adds	r3, #1
 8007a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5e:	e00f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	1e58      	subs	r0, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6859      	ldr	r1, [r3, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	0099      	lsls	r1, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a76:	3301      	adds	r3, #1
 8007a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	6809      	ldr	r1, [r1, #0]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69da      	ldr	r2, [r3, #28]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6911      	ldr	r1, [r2, #16]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68d2      	ldr	r2, [r2, #12]
 8007aba:	4311      	orrs	r1, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	000186a0 	.word	0x000186a0
 8007b1c:	001e847f 	.word	0x001e847f
 8007b20:	003d08ff 	.word	0x003d08ff
 8007b24:	431bde83 	.word	0x431bde83
 8007b28:	10624dd3 	.word	0x10624dd3

08007b2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	817b      	strh	r3, [r7, #10]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	813b      	strh	r3, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b46:	f7fd ff65 	bl	8005a14 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	f040 80d9 	bne.w	8007d0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2319      	movs	r3, #25
 8007b60:	2201      	movs	r2, #1
 8007b62:	496d      	ldr	r1, [pc, #436]	; (8007d18 <HAL_I2C_Mem_Write+0x1ec>)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fc7f 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
 8007b72:	e0cc      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_I2C_Mem_Write+0x56>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e0c5      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d007      	beq.n	8007ba8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2221      	movs	r2, #33	; 0x21
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a3a      	ldr	r2, [r7, #32]
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a4d      	ldr	r2, [pc, #308]	; (8007d1c <HAL_I2C_Mem_Write+0x1f0>)
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bea:	88f8      	ldrh	r0, [r7, #6]
 8007bec:	893a      	ldrh	r2, [r7, #8]
 8007bee:	8979      	ldrh	r1, [r7, #10]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fab6 	bl	800816c <I2C_RequestMemoryWrite>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d052      	beq.n	8007cac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e081      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fd00 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00d      	beq.n	8007c36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d107      	bne.n	8007c32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e06b      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d11b      	bne.n	8007cac <HAL_I2C_Mem_Write+0x180>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	781a      	ldrb	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1aa      	bne.n	8007c0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fcec 	bl	8008696 <I2C_WaitOnBTFFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00d      	beq.n	8007ce0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d107      	bne.n	8007cdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e016      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e000      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	00100002 	.word	0x00100002
 8007d1c:	ffff0000 	.word	0xffff0000

08007d20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	; 0x30
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	817b      	strh	r3, [r7, #10]
 8007d32:	460b      	mov	r3, r1
 8007d34:	813b      	strh	r3, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d3a:	f7fd fe6b 	bl	8005a14 <HAL_GetTick>
 8007d3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	f040 8208 	bne.w	800815e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2319      	movs	r3, #25
 8007d54:	2201      	movs	r2, #1
 8007d56:	497b      	ldr	r1, [pc, #492]	; (8007f44 <HAL_I2C_Mem_Read+0x224>)
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 fb85 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e1fb      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_I2C_Mem_Read+0x56>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e1f4      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d007      	beq.n	8007d9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2222      	movs	r2, #34	; 0x22
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2240      	movs	r2, #64	; 0x40
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a5b      	ldr	r2, [pc, #364]	; (8007f48 <HAL_I2C_Mem_Read+0x228>)
 8007ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dde:	88f8      	ldrh	r0, [r7, #6]
 8007de0:	893a      	ldrh	r2, [r7, #8]
 8007de2:	8979      	ldrh	r1, [r7, #10]
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4603      	mov	r3, r0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fa52 	bl	8008298 <I2C_RequestMemoryRead>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e1b0      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d113      	bne.n	8007e2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e06:	2300      	movs	r3, #0
 8007e08:	623b      	str	r3, [r7, #32]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	623b      	str	r3, [r7, #32]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	623b      	str	r3, [r7, #32]
 8007e1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e184      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d11b      	bne.n	8007e6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e164      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d11b      	bne.n	8007eae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e96:	2300      	movs	r3, #0
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	e144      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ec4:	e138      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	f200 80f1 	bhi.w	80080b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d123      	bne.n	8007f20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fc1b 	bl	8008718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e139      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f1e:	e10b      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d14e      	bne.n	8007fc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4906      	ldr	r1, [pc, #24]	; (8007f4c <HAL_I2C_Mem_Read+0x22c>)
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 fa98 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e10e      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
 8007f42:	bf00      	nop
 8007f44:	00100002 	.word	0x00100002
 8007f48:	ffff0000 	.word	0xffff0000
 8007f4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fc4:	e0b8      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4966      	ldr	r1, [pc, #408]	; (8008168 <HAL_I2C_Mem_Read+0x448>)
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fa49 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0bf      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691a      	ldr	r2, [r3, #16]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	2200      	movs	r2, #0
 800802a:	494f      	ldr	r1, [pc, #316]	; (8008168 <HAL_I2C_Mem_Read+0x448>)
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 fa1b 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e091      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800804a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008074:	b29b      	uxth	r3, r3
 8008076:	3b01      	subs	r3, #1
 8008078:	b29a      	uxth	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809a:	3b01      	subs	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080b0:	e042      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fb2e 	bl	8008718 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e04c      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b04      	cmp	r3, #4
 8008104:	d118      	bne.n	8008138 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691a      	ldr	r2, [r3, #16]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812e:	b29b      	uxth	r3, r3
 8008130:	3b01      	subs	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813c:	2b00      	cmp	r3, #0
 800813e:	f47f aec2 	bne.w	8007ec6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e000      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800815e:	2302      	movs	r3, #2
  }
}
 8008160:	4618      	mov	r0, r3
 8008162:	3728      	adds	r7, #40	; 0x28
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	00010004 	.word	0x00010004

0800816c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	4608      	mov	r0, r1
 8008176:	4611      	mov	r1, r2
 8008178:	461a      	mov	r2, r3
 800817a:	4603      	mov	r3, r0
 800817c:	817b      	strh	r3, [r7, #10]
 800817e:	460b      	mov	r3, r1
 8008180:	813b      	strh	r3, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	2200      	movs	r2, #0
 800819e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f960 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081bc:	d103      	bne.n	80081c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e05f      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081ca:	897b      	ldrh	r3, [r7, #10]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	492d      	ldr	r1, [pc, #180]	; (8008294 <I2C_RequestMemoryWrite+0x128>)
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f998 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e04c      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008208:	6a39      	ldr	r1, [r7, #32]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa02 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	2b04      	cmp	r3, #4
 800821c:	d107      	bne.n	800822e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800822c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e02b      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d105      	bne.n	8008244 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008238:	893b      	ldrh	r3, [r7, #8]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	611a      	str	r2, [r3, #16]
 8008242:	e021      	b.n	8008288 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008244:	893b      	ldrh	r3, [r7, #8]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	b2da      	uxtb	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008254:	6a39      	ldr	r1, [r7, #32]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f9dc 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	2b04      	cmp	r3, #4
 8008268:	d107      	bne.n	800827a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e005      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800827e:	893b      	ldrh	r3, [r7, #8]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	00010002 	.word	0x00010002

08008298 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	4603      	mov	r3, r0
 80082a8:	817b      	strh	r3, [r7, #10]
 80082aa:	460b      	mov	r3, r1
 80082ac:	813b      	strh	r3, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	2200      	movs	r2, #0
 80082da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 f8c2 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00d      	beq.n	8008306 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f8:	d103      	bne.n	8008302 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e0aa      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008306:	897b      	ldrh	r3, [r7, #10]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	6a3a      	ldr	r2, [r7, #32]
 800831a:	4952      	ldr	r1, [pc, #328]	; (8008464 <I2C_RequestMemoryRead+0x1cc>)
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f8fa 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e097      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008344:	6a39      	ldr	r1, [r7, #32]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f964 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00d      	beq.n	800836e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	2b04      	cmp	r3, #4
 8008358:	d107      	bne.n	800836a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e076      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d105      	bne.n	8008380 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008374:	893b      	ldrh	r3, [r7, #8]
 8008376:	b2da      	uxtb	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	611a      	str	r2, [r3, #16]
 800837e:	e021      	b.n	80083c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008380:	893b      	ldrh	r3, [r7, #8]
 8008382:	0a1b      	lsrs	r3, r3, #8
 8008384:	b29b      	uxth	r3, r3
 8008386:	b2da      	uxtb	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800838e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008390:	6a39      	ldr	r1, [r7, #32]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f93e 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00d      	beq.n	80083ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d107      	bne.n	80083b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e050      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083ba:	893b      	ldrh	r3, [r7, #8]
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	6a39      	ldr	r1, [r7, #32]
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f923 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00d      	beq.n	80083f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d107      	bne.n	80083ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e035      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2200      	movs	r2, #0
 8008408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f82b 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00d      	beq.n	8008434 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008426:	d103      	bne.n	8008430 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e013      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008434:	897b      	ldrh	r3, [r7, #10]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	4906      	ldr	r1, [pc, #24]	; (8008464 <I2C_RequestMemoryRead+0x1cc>)
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f863 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	00010002 	.word	0x00010002

08008468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008478:	e025      	b.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d021      	beq.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008482:	f7fd fac7 	bl	8005a14 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d302      	bcc.n	8008498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d116      	bne.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f043 0220 	orr.w	r2, r3, #32
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e023      	b.n	800850e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d10d      	bne.n	80084ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	43da      	mvns	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4013      	ands	r3, r2
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bf0c      	ite	eq
 80084e2:	2301      	moveq	r3, #1
 80084e4:	2300      	movne	r3, #0
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	e00c      	b.n	8008506 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	43da      	mvns	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4013      	ands	r3, r2
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf0c      	ite	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	2300      	movne	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	429a      	cmp	r2, r3
 800850a:	d0b6      	beq.n	800847a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008524:	e051      	b.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d123      	bne.n	800857e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008544:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800854e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	f043 0204 	orr.w	r2, r3, #4
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e046      	b.n	800860c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d021      	beq.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008586:	f7fd fa45 	bl	8005a14 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d116      	bne.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f043 0220 	orr.w	r2, r3, #32
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e020      	b.n	800860c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10c      	bne.n	80085ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	43da      	mvns	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4013      	ands	r3, r2
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bf14      	ite	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	2300      	moveq	r3, #0
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	e00b      	b.n	8008606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	43da      	mvns	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4013      	ands	r3, r2
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bf14      	ite	ne
 8008600:	2301      	movne	r3, #1
 8008602:	2300      	moveq	r3, #0
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d18d      	bne.n	8008526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008620:	e02d      	b.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f8ce 	bl	80087c4 <I2C_IsAcknowledgeFailed>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e02d      	b.n	800868e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008638:	d021      	beq.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863a:	f7fd f9eb 	bl	8005a14 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d116      	bne.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e007      	b.n	800868e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008688:	2b80      	cmp	r3, #128	; 0x80
 800868a:	d1ca      	bne.n	8008622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086a2:	e02d      	b.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f88d 	bl	80087c4 <I2C_IsAcknowledgeFailed>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e02d      	b.n	8008710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ba:	d021      	beq.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086bc:	f7fd f9aa 	bl	8005a14 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d302      	bcc.n	80086d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d116      	bne.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	f043 0220 	orr.w	r2, r3, #32
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e007      	b.n	8008710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b04      	cmp	r3, #4
 800870c:	d1ca      	bne.n	80086a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008724:	e042      	b.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b10      	cmp	r3, #16
 8008732:	d119      	bne.n	8008768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0210 	mvn.w	r2, #16
 800873c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e029      	b.n	80087bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008768:	f7fd f954 	bl	8005a14 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	429a      	cmp	r2, r3
 8008776:	d302      	bcc.n	800877e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d116      	bne.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e007      	b.n	80087bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d1b5      	bne.n	8008726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087da:	d11b      	bne.n	8008814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	f043 0204 	orr.w	r2, r3, #4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e000      	b.n	8008816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e267      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d075      	beq.n	800892e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008842:	4b88      	ldr	r3, [pc, #544]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f003 030c 	and.w	r3, r3, #12
 800884a:	2b04      	cmp	r3, #4
 800884c:	d00c      	beq.n	8008868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800884e:	4b85      	ldr	r3, [pc, #532]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008856:	2b08      	cmp	r3, #8
 8008858:	d112      	bne.n	8008880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800885a:	4b82      	ldr	r3, [pc, #520]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008866:	d10b      	bne.n	8008880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008868:	4b7e      	ldr	r3, [pc, #504]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d05b      	beq.n	800892c <HAL_RCC_OscConfig+0x108>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d157      	bne.n	800892c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e242      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008888:	d106      	bne.n	8008898 <HAL_RCC_OscConfig+0x74>
 800888a:	4b76      	ldr	r3, [pc, #472]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a75      	ldr	r2, [pc, #468]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	e01d      	b.n	80088d4 <HAL_RCC_OscConfig+0xb0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088a0:	d10c      	bne.n	80088bc <HAL_RCC_OscConfig+0x98>
 80088a2:	4b70      	ldr	r3, [pc, #448]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a6f      	ldr	r2, [pc, #444]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	4b6d      	ldr	r3, [pc, #436]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a6c      	ldr	r2, [pc, #432]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	e00b      	b.n	80088d4 <HAL_RCC_OscConfig+0xb0>
 80088bc:	4b69      	ldr	r3, [pc, #420]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a68      	ldr	r2, [pc, #416]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4b66      	ldr	r3, [pc, #408]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a65      	ldr	r2, [pc, #404]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d013      	beq.n	8008904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088dc:	f7fd f89a 	bl	8005a14 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088e4:	f7fd f896 	bl	8005a14 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b64      	cmp	r3, #100	; 0x64
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e207      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f6:	4b5b      	ldr	r3, [pc, #364]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0xc0>
 8008902:	e014      	b.n	800892e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008904:	f7fd f886 	bl	8005a14 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800890c:	f7fd f882 	bl	8005a14 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b64      	cmp	r3, #100	; 0x64
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e1f3      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800891e:	4b51      	ldr	r3, [pc, #324]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f0      	bne.n	800890c <HAL_RCC_OscConfig+0xe8>
 800892a:	e000      	b.n	800892e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800892c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d063      	beq.n	8008a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800893a:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 030c 	and.w	r3, r3, #12
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008946:	4b47      	ldr	r3, [pc, #284]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800894e:	2b08      	cmp	r3, #8
 8008950:	d11c      	bne.n	800898c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008952:	4b44      	ldr	r3, [pc, #272]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d116      	bne.n	800898c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_RCC_OscConfig+0x152>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d001      	beq.n	8008976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e1c7      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008976:	4b3b      	ldr	r3, [pc, #236]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	4937      	ldr	r1, [pc, #220]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008986:	4313      	orrs	r3, r2
 8008988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800898a:	e03a      	b.n	8008a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d020      	beq.n	80089d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008994:	4b34      	ldr	r3, [pc, #208]	; (8008a68 <HAL_RCC_OscConfig+0x244>)
 8008996:	2201      	movs	r2, #1
 8008998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899a:	f7fd f83b 	bl	8005a14 <HAL_GetTick>
 800899e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089a0:	e008      	b.n	80089b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089a2:	f7fd f837 	bl	8005a14 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d901      	bls.n	80089b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e1a8      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b4:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d0f0      	beq.n	80089a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089c0:	4b28      	ldr	r3, [pc, #160]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	4925      	ldr	r1, [pc, #148]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	600b      	str	r3, [r1, #0]
 80089d4:	e015      	b.n	8008a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089d6:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <HAL_RCC_OscConfig+0x244>)
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089dc:	f7fd f81a 	bl	8005a14 <HAL_GetTick>
 80089e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089e2:	e008      	b.n	80089f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089e4:	f7fd f816 	bl	8005a14 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e187      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089f6:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f0      	bne.n	80089e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d036      	beq.n	8008a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d016      	beq.n	8008a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a16:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <HAL_RCC_OscConfig+0x248>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1c:	f7fc fffa 	bl	8005a14 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a24:	f7fc fff6 	bl	8005a14 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e167      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <HAL_RCC_OscConfig+0x240>)
 8008a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0f0      	beq.n	8008a24 <HAL_RCC_OscConfig+0x200>
 8008a42:	e01b      	b.n	8008a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <HAL_RCC_OscConfig+0x248>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a4a:	f7fc ffe3 	bl	8005a14 <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a50:	e00e      	b.n	8008a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a52:	f7fc ffdf 	bl	8005a14 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d907      	bls.n	8008a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e150      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
 8008a64:	40023800 	.word	0x40023800
 8008a68:	42470000 	.word	0x42470000
 8008a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a70:	4b88      	ldr	r3, [pc, #544]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1ea      	bne.n	8008a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8097 	beq.w	8008bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a8e:	4b81      	ldr	r3, [pc, #516]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10f      	bne.n	8008aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	4b7d      	ldr	r3, [pc, #500]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	4a7c      	ldr	r2, [pc, #496]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8008aaa:	4b7a      	ldr	r3, [pc, #488]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ab2:	60bb      	str	r3, [r7, #8]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aba:	4b77      	ldr	r3, [pc, #476]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d118      	bne.n	8008af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ac6:	4b74      	ldr	r3, [pc, #464]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a73      	ldr	r2, [pc, #460]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ad2:	f7fc ff9f 	bl	8005a14 <HAL_GetTick>
 8008ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ada:	f7fc ff9b 	bl	8005a14 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e10c      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008aec:	4b6a      	ldr	r3, [pc, #424]	; (8008c98 <HAL_RCC_OscConfig+0x474>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d106      	bne.n	8008b0e <HAL_RCC_OscConfig+0x2ea>
 8008b00:	4b64      	ldr	r3, [pc, #400]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b04:	4a63      	ldr	r2, [pc, #396]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b06:	f043 0301 	orr.w	r3, r3, #1
 8008b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b0c:	e01c      	b.n	8008b48 <HAL_RCC_OscConfig+0x324>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	d10c      	bne.n	8008b30 <HAL_RCC_OscConfig+0x30c>
 8008b16:	4b5f      	ldr	r3, [pc, #380]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	4a5e      	ldr	r2, [pc, #376]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b1c:	f043 0304 	orr.w	r3, r3, #4
 8008b20:	6713      	str	r3, [r2, #112]	; 0x70
 8008b22:	4b5c      	ldr	r3, [pc, #368]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b26:	4a5b      	ldr	r2, [pc, #364]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b2e:	e00b      	b.n	8008b48 <HAL_RCC_OscConfig+0x324>
 8008b30:	4b58      	ldr	r3, [pc, #352]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b34:	4a57      	ldr	r2, [pc, #348]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b3c:	4b55      	ldr	r3, [pc, #340]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b40:	4a54      	ldr	r2, [pc, #336]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b42:	f023 0304 	bic.w	r3, r3, #4
 8008b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d015      	beq.n	8008b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b50:	f7fc ff60 	bl	8005a14 <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b56:	e00a      	b.n	8008b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b58:	f7fc ff5c 	bl	8005a14 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e0cb      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b6e:	4b49      	ldr	r3, [pc, #292]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0ee      	beq.n	8008b58 <HAL_RCC_OscConfig+0x334>
 8008b7a:	e014      	b.n	8008ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b7c:	f7fc ff4a 	bl	8005a14 <HAL_GetTick>
 8008b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b82:	e00a      	b.n	8008b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b84:	f7fc ff46 	bl	8005a14 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e0b5      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b9a:	4b3e      	ldr	r3, [pc, #248]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1ee      	bne.n	8008b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d105      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bac:	4b39      	ldr	r3, [pc, #228]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	4a38      	ldr	r2, [pc, #224]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80a1 	beq.w	8008d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008bc2:	4b34      	ldr	r3, [pc, #208]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 030c 	and.w	r3, r3, #12
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d05c      	beq.n	8008c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d141      	bne.n	8008c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd6:	4b31      	ldr	r3, [pc, #196]	; (8008c9c <HAL_RCC_OscConfig+0x478>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bdc:	f7fc ff1a 	bl	8005a14 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be4:	f7fc ff16 	bl	8005a14 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e087      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bf6:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69da      	ldr	r2, [r3, #28]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	019b      	lsls	r3, r3, #6
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	041b      	lsls	r3, r3, #16
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	061b      	lsls	r3, r3, #24
 8008c26:	491b      	ldr	r1, [pc, #108]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c2c:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <HAL_RCC_OscConfig+0x478>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c32:	f7fc feef 	bl	8005a14 <HAL_GetTick>
 8008c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c38:	e008      	b.n	8008c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c3a:	f7fc feeb 	bl	8005a14 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d901      	bls.n	8008c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e05c      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c4c:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0f0      	beq.n	8008c3a <HAL_RCC_OscConfig+0x416>
 8008c58:	e054      	b.n	8008d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <HAL_RCC_OscConfig+0x478>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c60:	f7fc fed8 	bl	8005a14 <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c68:	f7fc fed4 	bl	8005a14 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e045      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c7a:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <HAL_RCC_OscConfig+0x470>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f0      	bne.n	8008c68 <HAL_RCC_OscConfig+0x444>
 8008c86:	e03d      	b.n	8008d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d107      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e038      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
 8008c94:	40023800 	.word	0x40023800
 8008c98:	40007000 	.word	0x40007000
 8008c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ca0:	4b1b      	ldr	r3, [pc, #108]	; (8008d10 <HAL_RCC_OscConfig+0x4ec>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d028      	beq.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d121      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d11a      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d111      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d107      	bne.n	8008d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d001      	beq.n	8008d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40023800 	.word	0x40023800

08008d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0cc      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d28:	4b68      	ldr	r3, [pc, #416]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d90c      	bls.n	8008d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d36:	4b65      	ldr	r3, [pc, #404]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d3e:	4b63      	ldr	r3, [pc, #396]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d001      	beq.n	8008d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0b8      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d020      	beq.n	8008d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d68:	4b59      	ldr	r3, [pc, #356]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	4a58      	ldr	r2, [pc, #352]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d80:	4b53      	ldr	r3, [pc, #332]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	4a52      	ldr	r2, [pc, #328]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d8c:	4b50      	ldr	r3, [pc, #320]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	494d      	ldr	r1, [pc, #308]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d044      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d107      	bne.n	8008dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008db2:	4b47      	ldr	r3, [pc, #284]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d119      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e07f      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d003      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d107      	bne.n	8008de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dd2:	4b3f      	ldr	r3, [pc, #252]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d109      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e06f      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008de2:	4b3b      	ldr	r3, [pc, #236]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e067      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008df2:	4b37      	ldr	r3, [pc, #220]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f023 0203 	bic.w	r2, r3, #3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	4934      	ldr	r1, [pc, #208]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e04:	f7fc fe06 	bl	8005a14 <HAL_GetTick>
 8008e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0c:	f7fc fe02 	bl	8005a14 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e04f      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e22:	4b2b      	ldr	r3, [pc, #172]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 020c 	and.w	r2, r3, #12
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d1eb      	bne.n	8008e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e34:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d20c      	bcs.n	8008e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e42:	4b22      	ldr	r3, [pc, #136]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e4a:	4b20      	ldr	r3, [pc, #128]	; (8008ecc <HAL_RCC_ClockConfig+0x1b8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d001      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e032      	b.n	8008ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d008      	beq.n	8008e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e68:	4b19      	ldr	r3, [pc, #100]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	4916      	ldr	r1, [pc, #88]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d009      	beq.n	8008e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	490e      	ldr	r1, [pc, #56]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e9a:	f000 f821 	bl	8008ee0 <HAL_RCC_GetSysClockFreq>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	091b      	lsrs	r3, r3, #4
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	490a      	ldr	r1, [pc, #40]	; (8008ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8008eac:	5ccb      	ldrb	r3, [r1, r3]
 8008eae:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb2:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8008eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <HAL_RCC_ClockConfig+0x1c8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fc fd66 	bl	800598c <HAL_InitTick>

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40023c00 	.word	0x40023c00
 8008ed0:	40023800 	.word	0x40023800
 8008ed4:	0800cb4c 	.word	0x0800cb4c
 8008ed8:	20000398 	.word	0x20000398
 8008edc:	2000039c 	.word	0x2000039c

08008ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee4:	b090      	sub	sp, #64	; 0x40
 8008ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
 8008eec:	2300      	movs	r3, #0
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ef8:	4b59      	ldr	r3, [pc, #356]	; (8009060 <HAL_RCC_GetSysClockFreq+0x180>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 030c 	and.w	r3, r3, #12
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d00d      	beq.n	8008f20 <HAL_RCC_GetSysClockFreq+0x40>
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	f200 80a1 	bhi.w	800904c <HAL_RCC_GetSysClockFreq+0x16c>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_RCC_GetSysClockFreq+0x34>
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d003      	beq.n	8008f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8008f12:	e09b      	b.n	800904c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f14:	4b53      	ldr	r3, [pc, #332]	; (8009064 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008f18:	e09b      	b.n	8009052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f1a:	4b53      	ldr	r3, [pc, #332]	; (8009068 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f1e:	e098      	b.n	8009052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f20:	4b4f      	ldr	r3, [pc, #316]	; (8009060 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f2a:	4b4d      	ldr	r3, [pc, #308]	; (8009060 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d028      	beq.n	8008f88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f36:	4b4a      	ldr	r3, [pc, #296]	; (8009060 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	099b      	lsrs	r3, r3, #6
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	623b      	str	r3, [r7, #32]
 8008f40:	627a      	str	r2, [r7, #36]	; 0x24
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008f48:	2100      	movs	r1, #0
 8008f4a:	4b47      	ldr	r3, [pc, #284]	; (8009068 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f4c:	fb03 f201 	mul.w	r2, r3, r1
 8008f50:	2300      	movs	r3, #0
 8008f52:	fb00 f303 	mul.w	r3, r0, r3
 8008f56:	4413      	add	r3, r2
 8008f58:	4a43      	ldr	r2, [pc, #268]	; (8009068 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f5a:	fba0 1202 	umull	r1, r2, r0, r2
 8008f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f60:	460a      	mov	r2, r1
 8008f62:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f66:	4413      	add	r3, r2
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	61bb      	str	r3, [r7, #24]
 8008f70:	61fa      	str	r2, [r7, #28]
 8008f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008f7a:	f7f7 fc6b 	bl	8000854 <__aeabi_uldivmod>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4613      	mov	r3, r2
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f86:	e053      	b.n	8009030 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f88:	4b35      	ldr	r3, [pc, #212]	; (8009060 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	099b      	lsrs	r3, r3, #6
 8008f8e:	2200      	movs	r2, #0
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	617a      	str	r2, [r7, #20]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008f9a:	f04f 0b00 	mov.w	fp, #0
 8008f9e:	4652      	mov	r2, sl
 8008fa0:	465b      	mov	r3, fp
 8008fa2:	f04f 0000 	mov.w	r0, #0
 8008fa6:	f04f 0100 	mov.w	r1, #0
 8008faa:	0159      	lsls	r1, r3, #5
 8008fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fb0:	0150      	lsls	r0, r2, #5
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	ebb2 080a 	subs.w	r8, r2, sl
 8008fba:	eb63 090b 	sbc.w	r9, r3, fp
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008fca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008fce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008fd2:	ebb2 0408 	subs.w	r4, r2, r8
 8008fd6:	eb63 0509 	sbc.w	r5, r3, r9
 8008fda:	f04f 0200 	mov.w	r2, #0
 8008fde:	f04f 0300 	mov.w	r3, #0
 8008fe2:	00eb      	lsls	r3, r5, #3
 8008fe4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fe8:	00e2      	lsls	r2, r4, #3
 8008fea:	4614      	mov	r4, r2
 8008fec:	461d      	mov	r5, r3
 8008fee:	eb14 030a 	adds.w	r3, r4, sl
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	eb45 030b 	adc.w	r3, r5, fp
 8008ff8:	607b      	str	r3, [r7, #4]
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009006:	4629      	mov	r1, r5
 8009008:	028b      	lsls	r3, r1, #10
 800900a:	4621      	mov	r1, r4
 800900c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009010:	4621      	mov	r1, r4
 8009012:	028a      	lsls	r2, r1, #10
 8009014:	4610      	mov	r0, r2
 8009016:	4619      	mov	r1, r3
 8009018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901a:	2200      	movs	r2, #0
 800901c:	60bb      	str	r3, [r7, #8]
 800901e:	60fa      	str	r2, [r7, #12]
 8009020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009024:	f7f7 fc16 	bl	8000854 <__aeabi_uldivmod>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4613      	mov	r3, r2
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <HAL_RCC_GetSysClockFreq+0x180>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	0c1b      	lsrs	r3, r3, #16
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	3301      	adds	r3, #1
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	fbb2 f3f3 	udiv	r3, r2, r3
 8009048:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800904a:	e002      	b.n	8009052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <HAL_RCC_GetSysClockFreq+0x184>)
 800904e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009054:	4618      	mov	r0, r3
 8009056:	3740      	adds	r7, #64	; 0x40
 8009058:	46bd      	mov	sp, r7
 800905a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800905e:	bf00      	nop
 8009060:	40023800 	.word	0x40023800
 8009064:	00f42400 	.word	0x00f42400
 8009068:	017d7840 	.word	0x017d7840

0800906c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009070:	4b03      	ldr	r3, [pc, #12]	; (8009080 <HAL_RCC_GetHCLKFreq+0x14>)
 8009072:	681b      	ldr	r3, [r3, #0]
}
 8009074:	4618      	mov	r0, r3
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20000398 	.word	0x20000398

08009084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009088:	f7ff fff0 	bl	800906c <HAL_RCC_GetHCLKFreq>
 800908c:	4602      	mov	r2, r0
 800908e:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	0a9b      	lsrs	r3, r3, #10
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	4903      	ldr	r1, [pc, #12]	; (80090a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800909a:	5ccb      	ldrb	r3, [r1, r3]
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40023800 	.word	0x40023800
 80090a8:	0800cb5c 	.word	0x0800cb5c

080090ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090b0:	f7ff ffdc 	bl	800906c <HAL_RCC_GetHCLKFreq>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	0b5b      	lsrs	r3, r3, #13
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	4903      	ldr	r1, [pc, #12]	; (80090d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090c2:	5ccb      	ldrb	r3, [r1, r3]
 80090c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40023800 	.word	0x40023800
 80090d0:	0800cb5c 	.word	0x0800cb5c

080090d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e07b      	b.n	80091de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d108      	bne.n	8009100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090f6:	d009      	beq.n	800910c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	61da      	str	r2, [r3, #28]
 80090fe:	e005      	b.n	800910c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fc f94a 	bl	80053c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009154:	431a      	orrs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	431a      	orrs	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800917c:	431a      	orrs	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009190:	ea42 0103 	orr.w	r1, r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	0c1b      	lsrs	r3, r3, #16
 80091aa:	f003 0104 	and.w	r1, r3, #4
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	f003 0210 	and.w	r2, r3, #16
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b088      	sub	sp, #32
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_SPI_Transmit+0x22>
 8009204:	2302      	movs	r3, #2
 8009206:	e126      	b.n	8009456 <HAL_SPI_Transmit+0x270>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009210:	f7fc fc00 	bl	8005a14 <HAL_GetTick>
 8009214:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009216:	88fb      	ldrh	r3, [r7, #6]
 8009218:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b01      	cmp	r3, #1
 8009224:	d002      	beq.n	800922c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009226:	2302      	movs	r3, #2
 8009228:	77fb      	strb	r3, [r7, #31]
    goto error;
 800922a:	e10b      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <HAL_SPI_Transmit+0x52>
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800923c:	e102      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2203      	movs	r2, #3
 8009242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	88fa      	ldrh	r2, [r7, #6]
 8009256:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	88fa      	ldrh	r2, [r7, #6]
 800925c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009284:	d10f      	bne.n	80092a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009294:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b40      	cmp	r3, #64	; 0x40
 80092b2:	d007      	beq.n	80092c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092cc:	d14b      	bne.n	8009366 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <HAL_SPI_Transmit+0xf6>
 80092d6:	8afb      	ldrh	r3, [r7, #22]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d13e      	bne.n	800935a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e0:	881a      	ldrh	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ec:	1c9a      	adds	r2, r3, #2
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009300:	e02b      	b.n	800935a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b02      	cmp	r3, #2
 800930e:	d112      	bne.n	8009336 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	881a      	ldrh	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	1c9a      	adds	r2, r3, #2
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	86da      	strh	r2, [r3, #54]	; 0x36
 8009334:	e011      	b.n	800935a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009336:	f7fc fb6d 	bl	8005a14 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d803      	bhi.n	800934e <HAL_SPI_Transmit+0x168>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d102      	bne.n	8009354 <HAL_SPI_Transmit+0x16e>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009358:	e074      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1ce      	bne.n	8009302 <HAL_SPI_Transmit+0x11c>
 8009364:	e04c      	b.n	8009400 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_SPI_Transmit+0x18e>
 800936e:	8afb      	ldrh	r3, [r7, #22]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d140      	bne.n	80093f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800939a:	e02c      	b.n	80093f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d113      	bne.n	80093d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	330c      	adds	r3, #12
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80093d0:	e011      	b.n	80093f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093d2:	f7fc fb1f 	bl	8005a14 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d803      	bhi.n	80093ea <HAL_SPI_Transmit+0x204>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d102      	bne.n	80093f0 <HAL_SPI_Transmit+0x20a>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093f4:	e026      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1cd      	bne.n	800939c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fd17 	bl	8009e38 <SPI_EndRxTxTransaction>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2220      	movs	r2, #32
 8009414:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	77fb      	strb	r3, [r7, #31]
 8009440:	e000      	b.n	8009444 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009454:	7ffb      	ldrb	r3, [r7, #31]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b088      	sub	sp, #32
 8009462:	af02      	add	r7, sp, #8
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	4613      	mov	r3, r2
 800946c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800947a:	d112      	bne.n	80094a2 <HAL_SPI_Receive+0x44>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10e      	bne.n	80094a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2204      	movs	r2, #4
 8009488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800948c:	88fa      	ldrh	r2, [r7, #6]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	4613      	mov	r3, r2
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	68b9      	ldr	r1, [r7, #8]
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f8f1 	bl	8009680 <HAL_SPI_TransmitReceive>
 800949e:	4603      	mov	r3, r0
 80094a0:	e0ea      	b.n	8009678 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_SPI_Receive+0x52>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e0e3      	b.n	8009678 <HAL_SPI_Receive+0x21a>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094b8:	f7fc faac 	bl	8005a14 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d002      	beq.n	80094d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80094ca:	2302      	movs	r3, #2
 80094cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094ce:	e0ca      	b.n	8009666 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <HAL_SPI_Receive+0x7e>
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094e0:	e0c1      	b.n	8009666 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2204      	movs	r2, #4
 80094e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	88fa      	ldrh	r2, [r7, #6]
 8009500:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009528:	d10f      	bne.n	800954a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009538:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009548:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009554:	2b40      	cmp	r3, #64	; 0x40
 8009556:	d007      	beq.n	8009568 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009566:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d162      	bne.n	8009636 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009570:	e02e      	b.n	80095d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b01      	cmp	r3, #1
 800957e:	d115      	bne.n	80095ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f103 020c 	add.w	r2, r3, #12
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	b2d2      	uxtb	r2, r2
 8009590:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095aa:	e011      	b.n	80095d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095ac:	f7fc fa32 	bl	8005a14 <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d803      	bhi.n	80095c4 <HAL_SPI_Receive+0x166>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c2:	d102      	bne.n	80095ca <HAL_SPI_Receive+0x16c>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095ce:	e04a      	b.n	8009666 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1cb      	bne.n	8009572 <HAL_SPI_Receive+0x114>
 80095da:	e031      	b.n	8009640 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d113      	bne.n	8009612 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	b292      	uxth	r2, r2
 80095f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	1c9a      	adds	r2, r3, #2
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009610:	e011      	b.n	8009636 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009612:	f7fc f9ff 	bl	8005a14 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d803      	bhi.n	800962a <HAL_SPI_Receive+0x1cc>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d102      	bne.n	8009630 <HAL_SPI_Receive+0x1d2>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009634:	e017      	b.n	8009666 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1cd      	bne.n	80095dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fb91 	bl	8009d6c <SPI_EndRxTransaction>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2220      	movs	r2, #32
 8009654:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	75fb      	strb	r3, [r7, #23]
 8009662:	e000      	b.n	8009666 <HAL_SPI_Receive+0x208>
  }

error :
 8009664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08c      	sub	sp, #48	; 0x30
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800968e:	2301      	movs	r3, #1
 8009690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d101      	bne.n	80096a6 <HAL_SPI_TransmitReceive+0x26>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e18a      	b.n	80099bc <HAL_SPI_TransmitReceive+0x33c>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096ae:	f7fc f9b1 	bl	8005a14 <HAL_GetTick>
 80096b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80096c4:	887b      	ldrh	r3, [r7, #2]
 80096c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d00f      	beq.n	80096f0 <HAL_SPI_TransmitReceive+0x70>
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d6:	d107      	bne.n	80096e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d103      	bne.n	80096e8 <HAL_SPI_TransmitReceive+0x68>
 80096e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d003      	beq.n	80096f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80096e8:	2302      	movs	r3, #2
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80096ee:	e15b      	b.n	80099a8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d005      	beq.n	8009702 <HAL_SPI_TransmitReceive+0x82>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <HAL_SPI_TransmitReceive+0x82>
 80096fc:	887b      	ldrh	r3, [r7, #2]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009708:	e14e      	b.n	80099a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b04      	cmp	r3, #4
 8009714:	d003      	beq.n	800971e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2205      	movs	r2, #5
 800971a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	887a      	ldrh	r2, [r7, #2]
 800972e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	887a      	ldrh	r2, [r7, #2]
 8009734:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	887a      	ldrh	r2, [r7, #2]
 8009740:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	887a      	ldrh	r2, [r7, #2]
 8009746:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975e:	2b40      	cmp	r3, #64	; 0x40
 8009760:	d007      	beq.n	8009772 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800977a:	d178      	bne.n	800986e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <HAL_SPI_TransmitReceive+0x10a>
 8009784:	8b7b      	ldrh	r3, [r7, #26]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d166      	bne.n	8009858 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	881a      	ldrh	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	1c9a      	adds	r2, r3, #2
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	3b01      	subs	r3, #1
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097ae:	e053      	b.n	8009858 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d11b      	bne.n	80097f6 <HAL_SPI_TransmitReceive+0x176>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d016      	beq.n	80097f6 <HAL_SPI_TransmitReceive+0x176>
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d113      	bne.n	80097f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d2:	881a      	ldrh	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	1c9a      	adds	r2, r3, #2
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b01      	cmp	r3, #1
 8009802:	d119      	bne.n	8009838 <HAL_SPI_TransmitReceive+0x1b8>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009808:	b29b      	uxth	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d014      	beq.n	8009838 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68da      	ldr	r2, [r3, #12]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	b292      	uxth	r2, r2
 800981a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	1c9a      	adds	r2, r3, #2
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800982a:	b29b      	uxth	r3, r3
 800982c:	3b01      	subs	r3, #1
 800982e:	b29a      	uxth	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009834:	2301      	movs	r3, #1
 8009836:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009838:	f7fc f8ec 	bl	8005a14 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009844:	429a      	cmp	r2, r3
 8009846:	d807      	bhi.n	8009858 <HAL_SPI_TransmitReceive+0x1d8>
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d003      	beq.n	8009858 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009856:	e0a7      	b.n	80099a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1a6      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x130>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009866:	b29b      	uxth	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1a1      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x130>
 800986c:	e07c      	b.n	8009968 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <HAL_SPI_TransmitReceive+0x1fc>
 8009876:	8b7b      	ldrh	r3, [r7, #26]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d16b      	bne.n	8009954 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	330c      	adds	r3, #12
 8009886:	7812      	ldrb	r2, [r2, #0]
 8009888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098a2:	e057      	b.n	8009954 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d11c      	bne.n	80098ec <HAL_SPI_TransmitReceive+0x26c>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d017      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x26c>
 80098bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d114      	bne.n	80098ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	330c      	adds	r3, #12
 80098cc:	7812      	ldrb	r2, [r2, #0]
 80098ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d119      	bne.n	800992e <HAL_SPI_TransmitReceive+0x2ae>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098fe:	b29b      	uxth	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d014      	beq.n	800992e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009920:	b29b      	uxth	r3, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	b29a      	uxth	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800992a:	2301      	movs	r3, #1
 800992c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800992e:	f7fc f871 	bl	8005a14 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800993a:	429a      	cmp	r2, r3
 800993c:	d803      	bhi.n	8009946 <HAL_SPI_TransmitReceive+0x2c6>
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d102      	bne.n	800994c <HAL_SPI_TransmitReceive+0x2cc>
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d103      	bne.n	8009954 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009952:	e029      	b.n	80099a8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009958:	b29b      	uxth	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1a2      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x224>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d19d      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fa63 	bl	8009e38 <SPI_EndRxTxTransaction>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d006      	beq.n	8009986 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2220      	movs	r2, #32
 8009982:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009984:	e010      	b.n	80099a8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10b      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	617b      	str	r3, [r7, #20]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	e000      	b.n	80099a8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80099a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3730      	adds	r7, #48	; 0x30
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_SPI_Transmit_DMA+0x20>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e09b      	b.n	8009b1c <HAL_SPI_Transmit_DMA+0x158>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d002      	beq.n	80099fe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80099f8:	2302      	movs	r3, #2
 80099fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80099fc:	e089      	b.n	8009b12 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <HAL_SPI_Transmit_DMA+0x46>
 8009a04:	88fb      	ldrh	r3, [r7, #6]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d102      	bne.n	8009a10 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009a0e:	e080      	b.n	8009b12 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2203      	movs	r2, #3
 8009a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	88fa      	ldrh	r2, [r7, #6]
 8009a28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	88fa      	ldrh	r2, [r7, #6]
 8009a2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a56:	d10f      	bne.n	8009a78 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a7c:	4a29      	ldr	r2, [pc, #164]	; (8009b24 <HAL_SPI_Transmit_DMA+0x160>)
 8009a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a84:	4a28      	ldr	r2, [pc, #160]	; (8009b28 <HAL_SPI_Transmit_DMA+0x164>)
 8009a86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a8c:	4a27      	ldr	r2, [pc, #156]	; (8009b2c <HAL_SPI_Transmit_DMA+0x168>)
 8009a8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a94:	2200      	movs	r2, #0
 8009a96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	330c      	adds	r3, #12
 8009aa8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009ab0:	f7fd fa10 	bl	8006ed4 <HAL_DMA_Start_IT>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00c      	beq.n	8009ad4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009abe:	f043 0210 	orr.w	r2, r3, #16
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009ad2:	e01e      	b.n	8009b12 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ade:	2b40      	cmp	r3, #64	; 0x40
 8009ae0:	d007      	beq.n	8009af2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009af0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f042 0220 	orr.w	r2, r2, #32
 8009b00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f042 0202 	orr.w	r2, r2, #2
 8009b10:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	08009c01 	.word	0x08009c01
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009c1d 	.word	0x08009c1d

08009b30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b66:	f7fb ff55 	bl	8005a14 <HAL_GetTick>
 8009b6a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b7a:	d03b      	beq.n	8009bf4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0220 	bic.w	r2, r2, #32
 8009b8a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0202 	bic.w	r2, r2, #2
 8009b9a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	2164      	movs	r1, #100	; 0x64
 8009ba0:	6978      	ldr	r0, [r7, #20]
 8009ba2:	f000 f949 	bl	8009e38 <SPI_EndRxTxTransaction>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d005      	beq.n	8009bb8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb0:	f043 0220 	orr.w	r2, r3, #32
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009bec:	6978      	ldr	r0, [r7, #20]
 8009bee:	f7ff ffa9 	bl	8009b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009bf2:	e002      	b.n	8009bfa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009bf4:	6978      	ldr	r0, [r7, #20]
 8009bf6:	f7fb faa9 	bl	800514c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff ff8e 	bl	8009b30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c14:	bf00      	nop
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 0203 	bic.w	r2, r2, #3
 8009c38:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3e:	f043 0210 	orr.w	r2, r3, #16
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff ff78 	bl	8009b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009c6c:	f7fb fed2 	bl	8005a14 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4413      	add	r3, r2
 8009c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009c7c:	f7fb feca 	bl	8005a14 <HAL_GetTick>
 8009c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009c82:	4b39      	ldr	r3, [pc, #228]	; (8009d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	015b      	lsls	r3, r3, #5
 8009c88:	0d1b      	lsrs	r3, r3, #20
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	fb02 f303 	mul.w	r3, r2, r3
 8009c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c92:	e054      	b.n	8009d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d050      	beq.n	8009d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c9c:	f7fb feba 	bl	8005a14 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d902      	bls.n	8009cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d13d      	bne.n	8009d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cca:	d111      	bne.n	8009cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd4:	d004      	beq.n	8009ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cde:	d107      	bne.n	8009cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf8:	d10f      	bne.n	8009d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e017      	b.n	8009d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4013      	ands	r3, r2
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	bf0c      	ite	eq
 8009d4e:	2301      	moveq	r3, #1
 8009d50:	2300      	movne	r3, #0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	461a      	mov	r2, r3
 8009d56:	79fb      	ldrb	r3, [r7, #7]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d19b      	bne.n	8009c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000398 	.word	0x20000398

08009d6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d80:	d111      	bne.n	8009da6 <SPI_EndRxTransaction+0x3a>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d8a:	d004      	beq.n	8009d96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d94:	d107      	bne.n	8009da6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009da4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dae:	d12a      	bne.n	8009e06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009db8:	d012      	beq.n	8009de0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2180      	movs	r1, #128	; 0x80
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff ff49 	bl	8009c5c <SPI_WaitFlagStateUntilTimeout>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d02d      	beq.n	8009e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd4:	f043 0220 	orr.w	r2, r3, #32
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e026      	b.n	8009e2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	2101      	movs	r1, #1
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff ff36 	bl	8009c5c <SPI_WaitFlagStateUntilTimeout>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d01a      	beq.n	8009e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfa:	f043 0220 	orr.w	r2, r3, #32
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e013      	b.n	8009e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2101      	movs	r1, #1
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f7ff ff23 	bl	8009c5c <SPI_WaitFlagStateUntilTimeout>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e20:	f043 0220 	orr.w	r2, r3, #32
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e000      	b.n	8009e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009e44:	4b1b      	ldr	r3, [pc, #108]	; (8009eb4 <SPI_EndRxTxTransaction+0x7c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a1b      	ldr	r2, [pc, #108]	; (8009eb8 <SPI_EndRxTxTransaction+0x80>)
 8009e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4e:	0d5b      	lsrs	r3, r3, #21
 8009e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e54:	fb02 f303 	mul.w	r3, r2, r3
 8009e58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e62:	d112      	bne.n	8009e8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2180      	movs	r1, #128	; 0x80
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fef4 	bl	8009c5c <SPI_WaitFlagStateUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d016      	beq.n	8009ea8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7e:	f043 0220 	orr.w	r2, r3, #32
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e00f      	b.n	8009eaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ea0:	2b80      	cmp	r3, #128	; 0x80
 8009ea2:	d0f2      	beq.n	8009e8a <SPI_EndRxTxTransaction+0x52>
 8009ea4:	e000      	b.n	8009ea8 <SPI_EndRxTxTransaction+0x70>
        break;
 8009ea6:	bf00      	nop
  }

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000398 	.word	0x20000398
 8009eb8:	165e9f81 	.word	0x165e9f81

08009ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e041      	b.n	8009f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fb fb98 	bl	8005618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4610      	mov	r0, r2
 8009efc:	f000 fe08 	bl	800ab10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d001      	beq.n	8009f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e03c      	b.n	8009fee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <HAL_TIM_Base_Start+0xa0>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d018      	beq.n	8009fb8 <HAL_TIM_Base_Start+0x5c>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f8e:	d013      	beq.n	8009fb8 <HAL_TIM_Base_Start+0x5c>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1a      	ldr	r2, [pc, #104]	; (800a000 <HAL_TIM_Base_Start+0xa4>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d00e      	beq.n	8009fb8 <HAL_TIM_Base_Start+0x5c>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a19      	ldr	r2, [pc, #100]	; (800a004 <HAL_TIM_Base_Start+0xa8>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d009      	beq.n	8009fb8 <HAL_TIM_Base_Start+0x5c>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a17      	ldr	r2, [pc, #92]	; (800a008 <HAL_TIM_Base_Start+0xac>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d004      	beq.n	8009fb8 <HAL_TIM_Base_Start+0x5c>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a16      	ldr	r2, [pc, #88]	; (800a00c <HAL_TIM_Base_Start+0xb0>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d111      	bne.n	8009fdc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b06      	cmp	r3, #6
 8009fc8:	d010      	beq.n	8009fec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f042 0201 	orr.w	r2, r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fda:	e007      	b.n	8009fec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f042 0201 	orr.w	r2, r2, #1
 8009fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	40010000 	.word	0x40010000
 800a000:	40000400 	.word	0x40000400
 800a004:	40000800 	.word	0x40000800
 800a008:	40000c00 	.word	0x40000c00
 800a00c:	40014000 	.word	0x40014000

0800a010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b01      	cmp	r3, #1
 800a022:	d001      	beq.n	800a028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e044      	b.n	800a0b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f042 0201 	orr.w	r2, r2, #1
 800a03e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1e      	ldr	r2, [pc, #120]	; (800a0c0 <HAL_TIM_Base_Start_IT+0xb0>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d018      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x6c>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a052:	d013      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x6c>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1a      	ldr	r2, [pc, #104]	; (800a0c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00e      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x6c>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a19      	ldr	r2, [pc, #100]	; (800a0c8 <HAL_TIM_Base_Start_IT+0xb8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d009      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x6c>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a17      	ldr	r2, [pc, #92]	; (800a0cc <HAL_TIM_Base_Start_IT+0xbc>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d004      	beq.n	800a07c <HAL_TIM_Base_Start_IT+0x6c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a16      	ldr	r2, [pc, #88]	; (800a0d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d111      	bne.n	800a0a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b06      	cmp	r3, #6
 800a08c:	d010      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f042 0201 	orr.w	r2, r2, #1
 800a09c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09e:	e007      	b.n	800a0b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0201 	orr.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	40000400 	.word	0x40000400
 800a0c8:	40000800 	.word	0x40000800
 800a0cc:	40000c00 	.word	0x40000c00
 800a0d0:	40014000 	.word	0x40014000

0800a0d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e041      	b.n	800a16a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f839 	bl	800a172 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3304      	adds	r3, #4
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f000 fcfc 	bl	800ab10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a172:	b480      	push	{r7}
 800a174:	b083      	sub	sp, #12
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e041      	b.n	800a21c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d106      	bne.n	800a1b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f839 	bl	800a224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f000 fca3 	bl	800ab10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d109      	bne.n	800a25c <HAL_TIM_PWM_Start+0x24>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	2b01      	cmp	r3, #1
 800a252:	bf14      	ite	ne
 800a254:	2301      	movne	r3, #1
 800a256:	2300      	moveq	r3, #0
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	e022      	b.n	800a2a2 <HAL_TIM_PWM_Start+0x6a>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d109      	bne.n	800a276 <HAL_TIM_PWM_Start+0x3e>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	bf14      	ite	ne
 800a26e:	2301      	movne	r3, #1
 800a270:	2300      	moveq	r3, #0
 800a272:	b2db      	uxtb	r3, r3
 800a274:	e015      	b.n	800a2a2 <HAL_TIM_PWM_Start+0x6a>
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d109      	bne.n	800a290 <HAL_TIM_PWM_Start+0x58>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b01      	cmp	r3, #1
 800a286:	bf14      	ite	ne
 800a288:	2301      	movne	r3, #1
 800a28a:	2300      	moveq	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	e008      	b.n	800a2a2 <HAL_TIM_PWM_Start+0x6a>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b01      	cmp	r3, #1
 800a29a:	bf14      	ite	ne
 800a29c:	2301      	movne	r3, #1
 800a29e:	2300      	moveq	r3, #0
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e068      	b.n	800a37c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d104      	bne.n	800a2ba <HAL_TIM_PWM_Start+0x82>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b8:	e013      	b.n	800a2e2 <HAL_TIM_PWM_Start+0xaa>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b04      	cmp	r3, #4
 800a2be:	d104      	bne.n	800a2ca <HAL_TIM_PWM_Start+0x92>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2c8:	e00b      	b.n	800a2e2 <HAL_TIM_PWM_Start+0xaa>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d104      	bne.n	800a2da <HAL_TIM_PWM_Start+0xa2>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2d8:	e003      	b.n	800a2e2 <HAL_TIM_PWM_Start+0xaa>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 feb6 	bl	800b05c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a23      	ldr	r2, [pc, #140]	; (800a384 <HAL_TIM_PWM_Start+0x14c>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d107      	bne.n	800a30a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a308:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a1d      	ldr	r2, [pc, #116]	; (800a384 <HAL_TIM_PWM_Start+0x14c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d018      	beq.n	800a346 <HAL_TIM_PWM_Start+0x10e>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a31c:	d013      	beq.n	800a346 <HAL_TIM_PWM_Start+0x10e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a19      	ldr	r2, [pc, #100]	; (800a388 <HAL_TIM_PWM_Start+0x150>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d00e      	beq.n	800a346 <HAL_TIM_PWM_Start+0x10e>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a17      	ldr	r2, [pc, #92]	; (800a38c <HAL_TIM_PWM_Start+0x154>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d009      	beq.n	800a346 <HAL_TIM_PWM_Start+0x10e>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a16      	ldr	r2, [pc, #88]	; (800a390 <HAL_TIM_PWM_Start+0x158>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d004      	beq.n	800a346 <HAL_TIM_PWM_Start+0x10e>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a14      	ldr	r2, [pc, #80]	; (800a394 <HAL_TIM_PWM_Start+0x15c>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d111      	bne.n	800a36a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f003 0307 	and.w	r3, r3, #7
 800a350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b06      	cmp	r3, #6
 800a356:	d010      	beq.n	800a37a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0201 	orr.w	r2, r2, #1
 800a366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a368:	e007      	b.n	800a37a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f042 0201 	orr.w	r2, r2, #1
 800a378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	40010000 	.word	0x40010000
 800a388:	40000400 	.word	0x40000400
 800a38c:	40000800 	.word	0x40000800
 800a390:	40000c00 	.word	0x40000c00
 800a394:	40014000 	.word	0x40014000

0800a398 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e097      	b.n	800a4dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7fb f8ad 	bl	8005520 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	6812      	ldr	r2, [r2, #0]
 800a3d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	f000 fb8f 	bl	800ab10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4313      	orrs	r3, r2
 800a412:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a41a:	f023 0303 	bic.w	r3, r3, #3
 800a41e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	021b      	lsls	r3, r3, #8
 800a42a:	4313      	orrs	r3, r2
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a438:	f023 030c 	bic.w	r3, r3, #12
 800a43c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	4313      	orrs	r3, r2
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	4313      	orrs	r3, r2
 800a45a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	011a      	lsls	r2, r3, #4
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	031b      	lsls	r3, r3, #12
 800a468:	4313      	orrs	r3, r2
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a476:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a47e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	011b      	lsls	r3, r3, #4
 800a48a:	4313      	orrs	r3, r2
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	4313      	orrs	r3, r2
 800a490:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d122      	bne.n	800a540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b02      	cmp	r3, #2
 800a506:	d11b      	bne.n	800a540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f06f 0202 	mvn.w	r2, #2
 800a510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	f003 0303 	and.w	r3, r3, #3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fad3 	bl	800aad2 <HAL_TIM_IC_CaptureCallback>
 800a52c:	e005      	b.n	800a53a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fac5 	bl	800aabe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fad6 	bl	800aae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d122      	bne.n	800a594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b04      	cmp	r3, #4
 800a55a:	d11b      	bne.n	800a594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f06f 0204 	mvn.w	r2, #4
 800a564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2202      	movs	r2, #2
 800a56a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 faa9 	bl	800aad2 <HAL_TIM_IC_CaptureCallback>
 800a580:	e005      	b.n	800a58e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa9b 	bl	800aabe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 faac 	bl	800aae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f003 0308 	and.w	r3, r3, #8
 800a59e:	2b08      	cmp	r3, #8
 800a5a0:	d122      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f003 0308 	and.w	r3, r3, #8
 800a5ac:	2b08      	cmp	r3, #8
 800a5ae:	d11b      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f06f 0208 	mvn.w	r2, #8
 800a5b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2204      	movs	r2, #4
 800a5be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d003      	beq.n	800a5d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa7f 	bl	800aad2 <HAL_TIM_IC_CaptureCallback>
 800a5d4:	e005      	b.n	800a5e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa71 	bl	800aabe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fa82 	bl	800aae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	f003 0310 	and.w	r3, r3, #16
 800a5f2:	2b10      	cmp	r3, #16
 800a5f4:	d122      	bne.n	800a63c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	f003 0310 	and.w	r3, r3, #16
 800a600:	2b10      	cmp	r3, #16
 800a602:	d11b      	bne.n	800a63c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f06f 0210 	mvn.w	r2, #16
 800a60c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2208      	movs	r2, #8
 800a612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fa55 	bl	800aad2 <HAL_TIM_IC_CaptureCallback>
 800a628:	e005      	b.n	800a636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fa47 	bl	800aabe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fa58 	bl	800aae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b01      	cmp	r3, #1
 800a648:	d10e      	bne.n	800a668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	2b01      	cmp	r3, #1
 800a656:	d107      	bne.n	800a668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f06f 0201 	mvn.w	r2, #1
 800a660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7f6 ff9c 	bl	80015a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a672:	2b80      	cmp	r3, #128	; 0x80
 800a674:	d10e      	bne.n	800a694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a680:	2b80      	cmp	r3, #128	; 0x80
 800a682:	d107      	bne.n	800a694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a68c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fd82 	bl	800b198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69e:	2b40      	cmp	r3, #64	; 0x40
 800a6a0:	d10e      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	d107      	bne.n	800a6c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fa1d 	bl	800aafa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b20      	cmp	r3, #32
 800a6cc:	d10e      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f003 0320 	and.w	r3, r3, #32
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	d107      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f06f 0220 	mvn.w	r2, #32
 800a6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fd4c 	bl	800b184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d101      	bne.n	800a712 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a70e:	2302      	movs	r3, #2
 800a710:	e048      	b.n	800a7a4 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b0c      	cmp	r3, #12
 800a71e:	d839      	bhi.n	800a794 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a75d 	.word	0x0800a75d
 800a72c:	0800a795 	.word	0x0800a795
 800a730:	0800a795 	.word	0x0800a795
 800a734:	0800a795 	.word	0x0800a795
 800a738:	0800a76b 	.word	0x0800a76b
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a795 	.word	0x0800a795
 800a744:	0800a795 	.word	0x0800a795
 800a748:	0800a779 	.word	0x0800a779
 800a74c:	0800a795 	.word	0x0800a795
 800a750:	0800a795 	.word	0x0800a795
 800a754:	0800a795 	.word	0x0800a795
 800a758:	0800a787 	.word	0x0800a787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	4618      	mov	r0, r3
 800a764:	f000 fa54 	bl	800ac10 <TIM_OC1_SetConfig>
      break;
 800a768:	e017      	b.n	800a79a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fab3 	bl	800acdc <TIM_OC2_SetConfig>
      break;
 800a776:	e010      	b.n	800a79a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fb18 	bl	800adb4 <TIM_OC3_SetConfig>
      break;
 800a784:	e009      	b.n	800a79a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68b9      	ldr	r1, [r7, #8]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 fb7b 	bl	800ae88 <TIM_OC4_SetConfig>
      break;
 800a792:	e002      	b.n	800a79a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	75fb      	strb	r3, [r7, #23]
      break;
 800a798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d101      	bne.n	800a7ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	e0ae      	b.n	800a928 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b0c      	cmp	r3, #12
 800a7d6:	f200 809f 	bhi.w	800a918 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a7da:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a815 	.word	0x0800a815
 800a7e4:	0800a919 	.word	0x0800a919
 800a7e8:	0800a919 	.word	0x0800a919
 800a7ec:	0800a919 	.word	0x0800a919
 800a7f0:	0800a855 	.word	0x0800a855
 800a7f4:	0800a919 	.word	0x0800a919
 800a7f8:	0800a919 	.word	0x0800a919
 800a7fc:	0800a919 	.word	0x0800a919
 800a800:	0800a897 	.word	0x0800a897
 800a804:	0800a919 	.word	0x0800a919
 800a808:	0800a919 	.word	0x0800a919
 800a80c:	0800a919 	.word	0x0800a919
 800a810:	0800a8d7 	.word	0x0800a8d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 f9f8 	bl	800ac10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	699a      	ldr	r2, [r3, #24]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f042 0208 	orr.w	r2, r2, #8
 800a82e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	699a      	ldr	r2, [r3, #24]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0204 	bic.w	r2, r2, #4
 800a83e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6999      	ldr	r1, [r3, #24]
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	691a      	ldr	r2, [r3, #16]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	619a      	str	r2, [r3, #24]
      break;
 800a852:	e064      	b.n	800a91e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fa3e 	bl	800acdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	699a      	ldr	r2, [r3, #24]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a86e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	699a      	ldr	r2, [r3, #24]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a87e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6999      	ldr	r1, [r3, #24]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	021a      	lsls	r2, r3, #8
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	430a      	orrs	r2, r1
 800a892:	619a      	str	r2, [r3, #24]
      break;
 800a894:	e043      	b.n	800a91e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f000 fa89 	bl	800adb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	69da      	ldr	r2, [r3, #28]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f042 0208 	orr.w	r2, r2, #8
 800a8b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69da      	ldr	r2, [r3, #28]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 0204 	bic.w	r2, r2, #4
 800a8c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	69d9      	ldr	r1, [r3, #28]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	691a      	ldr	r2, [r3, #16]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	61da      	str	r2, [r3, #28]
      break;
 800a8d4:	e023      	b.n	800a91e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fad3 	bl	800ae88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	69da      	ldr	r2, [r3, #28]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	69da      	ldr	r2, [r3, #28]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	69d9      	ldr	r1, [r3, #28]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	021a      	lsls	r2, r3, #8
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	61da      	str	r2, [r3, #28]
      break;
 800a916:	e002      	b.n	800a91e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	75fb      	strb	r3, [r7, #23]
      break;
 800a91c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a926:	7dfb      	ldrb	r3, [r7, #23]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d101      	bne.n	800a94c <HAL_TIM_ConfigClockSource+0x1c>
 800a948:	2302      	movs	r3, #2
 800a94a:	e0b4      	b.n	800aab6 <HAL_TIM_ConfigClockSource+0x186>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2202      	movs	r2, #2
 800a958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a96a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a984:	d03e      	beq.n	800aa04 <HAL_TIM_ConfigClockSource+0xd4>
 800a986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a98a:	f200 8087 	bhi.w	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a98e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a992:	f000 8086 	beq.w	800aaa2 <HAL_TIM_ConfigClockSource+0x172>
 800a996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99a:	d87f      	bhi.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a99c:	2b70      	cmp	r3, #112	; 0x70
 800a99e:	d01a      	beq.n	800a9d6 <HAL_TIM_ConfigClockSource+0xa6>
 800a9a0:	2b70      	cmp	r3, #112	; 0x70
 800a9a2:	d87b      	bhi.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a9a4:	2b60      	cmp	r3, #96	; 0x60
 800a9a6:	d050      	beq.n	800aa4a <HAL_TIM_ConfigClockSource+0x11a>
 800a9a8:	2b60      	cmp	r3, #96	; 0x60
 800a9aa:	d877      	bhi.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a9ac:	2b50      	cmp	r3, #80	; 0x50
 800a9ae:	d03c      	beq.n	800aa2a <HAL_TIM_ConfigClockSource+0xfa>
 800a9b0:	2b50      	cmp	r3, #80	; 0x50
 800a9b2:	d873      	bhi.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a9b4:	2b40      	cmp	r3, #64	; 0x40
 800a9b6:	d058      	beq.n	800aa6a <HAL_TIM_ConfigClockSource+0x13a>
 800a9b8:	2b40      	cmp	r3, #64	; 0x40
 800a9ba:	d86f      	bhi.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a9bc:	2b30      	cmp	r3, #48	; 0x30
 800a9be:	d064      	beq.n	800aa8a <HAL_TIM_ConfigClockSource+0x15a>
 800a9c0:	2b30      	cmp	r3, #48	; 0x30
 800a9c2:	d86b      	bhi.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a9c4:	2b20      	cmp	r3, #32
 800a9c6:	d060      	beq.n	800aa8a <HAL_TIM_ConfigClockSource+0x15a>
 800a9c8:	2b20      	cmp	r3, #32
 800a9ca:	d867      	bhi.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d05c      	beq.n	800aa8a <HAL_TIM_ConfigClockSource+0x15a>
 800a9d0:	2b10      	cmp	r3, #16
 800a9d2:	d05a      	beq.n	800aa8a <HAL_TIM_ConfigClockSource+0x15a>
 800a9d4:	e062      	b.n	800aa9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	6899      	ldr	r1, [r3, #8]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	f000 fb19 	bl	800b01c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	609a      	str	r2, [r3, #8]
      break;
 800aa02:	e04f      	b.n	800aaa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6818      	ldr	r0, [r3, #0]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	6899      	ldr	r1, [r3, #8]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f000 fb02 	bl	800b01c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689a      	ldr	r2, [r3, #8]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa26:	609a      	str	r2, [r3, #8]
      break;
 800aa28:	e03c      	b.n	800aaa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	6859      	ldr	r1, [r3, #4]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f000 fa76 	bl	800af28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2150      	movs	r1, #80	; 0x50
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 facf 	bl	800afe6 <TIM_ITRx_SetConfig>
      break;
 800aa48:	e02c      	b.n	800aaa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6818      	ldr	r0, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	6859      	ldr	r1, [r3, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	461a      	mov	r2, r3
 800aa58:	f000 fa95 	bl	800af86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2160      	movs	r1, #96	; 0x60
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 fabf 	bl	800afe6 <TIM_ITRx_SetConfig>
      break;
 800aa68:	e01c      	b.n	800aaa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	6859      	ldr	r1, [r3, #4]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f000 fa56 	bl	800af28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2140      	movs	r1, #64	; 0x40
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 faaf 	bl	800afe6 <TIM_ITRx_SetConfig>
      break;
 800aa88:	e00c      	b.n	800aaa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4619      	mov	r1, r3
 800aa94:	4610      	mov	r0, r2
 800aa96:	f000 faa6 	bl	800afe6 <TIM_ITRx_SetConfig>
      break;
 800aa9a:	e003      	b.n	800aaa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa0:	e000      	b.n	800aaa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aaa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aada:	bf00      	nop
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaee:	bf00      	nop
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
	...

0800ab10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a34      	ldr	r2, [pc, #208]	; (800abf4 <TIM_Base_SetConfig+0xe4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d00f      	beq.n	800ab48 <TIM_Base_SetConfig+0x38>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2e:	d00b      	beq.n	800ab48 <TIM_Base_SetConfig+0x38>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a31      	ldr	r2, [pc, #196]	; (800abf8 <TIM_Base_SetConfig+0xe8>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d007      	beq.n	800ab48 <TIM_Base_SetConfig+0x38>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a30      	ldr	r2, [pc, #192]	; (800abfc <TIM_Base_SetConfig+0xec>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_Base_SetConfig+0x38>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a2f      	ldr	r2, [pc, #188]	; (800ac00 <TIM_Base_SetConfig+0xf0>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d108      	bne.n	800ab5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a25      	ldr	r2, [pc, #148]	; (800abf4 <TIM_Base_SetConfig+0xe4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d01b      	beq.n	800ab9a <TIM_Base_SetConfig+0x8a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab68:	d017      	beq.n	800ab9a <TIM_Base_SetConfig+0x8a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a22      	ldr	r2, [pc, #136]	; (800abf8 <TIM_Base_SetConfig+0xe8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d013      	beq.n	800ab9a <TIM_Base_SetConfig+0x8a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a21      	ldr	r2, [pc, #132]	; (800abfc <TIM_Base_SetConfig+0xec>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00f      	beq.n	800ab9a <TIM_Base_SetConfig+0x8a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a20      	ldr	r2, [pc, #128]	; (800ac00 <TIM_Base_SetConfig+0xf0>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d00b      	beq.n	800ab9a <TIM_Base_SetConfig+0x8a>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a1f      	ldr	r2, [pc, #124]	; (800ac04 <TIM_Base_SetConfig+0xf4>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d007      	beq.n	800ab9a <TIM_Base_SetConfig+0x8a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <TIM_Base_SetConfig+0xf8>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d003      	beq.n	800ab9a <TIM_Base_SetConfig+0x8a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1d      	ldr	r2, [pc, #116]	; (800ac0c <TIM_Base_SetConfig+0xfc>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d108      	bne.n	800abac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	4313      	orrs	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a08      	ldr	r2, [pc, #32]	; (800abf4 <TIM_Base_SetConfig+0xe4>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d103      	bne.n	800abe0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	691a      	ldr	r2, [r3, #16]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	615a      	str	r2, [r3, #20]
}
 800abe6:	bf00      	nop
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	40010000 	.word	0x40010000
 800abf8:	40000400 	.word	0x40000400
 800abfc:	40000800 	.word	0x40000800
 800ac00:	40000c00 	.word	0x40000c00
 800ac04:	40014000 	.word	0x40014000
 800ac08:	40014400 	.word	0x40014400
 800ac0c:	40014800 	.word	0x40014800

0800ac10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b087      	sub	sp, #28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	f023 0201 	bic.w	r2, r3, #1
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	699b      	ldr	r3, [r3, #24]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 0303 	bic.w	r3, r3, #3
 800ac46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f023 0302 	bic.w	r3, r3, #2
 800ac58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a1c      	ldr	r2, [pc, #112]	; (800acd8 <TIM_OC1_SetConfig+0xc8>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d10c      	bne.n	800ac86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f023 0308 	bic.w	r3, r3, #8
 800ac72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f023 0304 	bic.w	r3, r3, #4
 800ac84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a13      	ldr	r2, [pc, #76]	; (800acd8 <TIM_OC1_SetConfig+0xc8>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d111      	bne.n	800acb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	4313      	orrs	r3, r2
 800acb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	621a      	str	r2, [r3, #32]
}
 800accc:	bf00      	nop
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	40010000 	.word	0x40010000

0800acdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	f023 0210 	bic.w	r2, r3, #16
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	021b      	lsls	r3, r3, #8
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f023 0320 	bic.w	r3, r3, #32
 800ad26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1e      	ldr	r2, [pc, #120]	; (800adb0 <TIM_OC2_SetConfig+0xd4>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d10d      	bne.n	800ad58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a15      	ldr	r2, [pc, #84]	; (800adb0 <TIM_OC2_SetConfig+0xd4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d113      	bne.n	800ad88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	621a      	str	r2, [r3, #32]
}
 800ada2:	bf00      	nop
 800ada4:	371c      	adds	r7, #28
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	40010000 	.word	0x40010000

0800adb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ade2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0303 	bic.w	r3, r3, #3
 800adea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a1d      	ldr	r2, [pc, #116]	; (800ae84 <TIM_OC3_SetConfig+0xd0>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d10d      	bne.n	800ae2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a14      	ldr	r2, [pc, #80]	; (800ae84 <TIM_OC3_SetConfig+0xd0>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d113      	bne.n	800ae5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	011b      	lsls	r3, r3, #4
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	011b      	lsls	r3, r3, #4
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	621a      	str	r2, [r3, #32]
}
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	40010000 	.word	0x40010000

0800ae88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	021b      	lsls	r3, r3, #8
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	031b      	lsls	r3, r3, #12
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	4313      	orrs	r3, r2
 800aede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a10      	ldr	r2, [pc, #64]	; (800af24 <TIM_OC4_SetConfig+0x9c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d109      	bne.n	800aefc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	019b      	lsls	r3, r3, #6
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	621a      	str	r2, [r3, #32]
}
 800af16:	bf00      	nop
 800af18:	371c      	adds	r7, #28
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40010000 	.word	0x40010000

0800af28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af28:	b480      	push	{r7}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	f023 0201 	bic.w	r2, r3, #1
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f023 030a 	bic.w	r3, r3, #10
 800af64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	621a      	str	r2, [r3, #32]
}
 800af7a:	bf00      	nop
 800af7c:	371c      	adds	r7, #28
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af86:	b480      	push	{r7}
 800af88:	b087      	sub	sp, #28
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f023 0210 	bic.w	r2, r3, #16
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	031b      	lsls	r3, r3, #12
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	4313      	orrs	r3, r2
 800afba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	4313      	orrs	r3, r2
 800afcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	621a      	str	r2, [r3, #32]
}
 800afda:	bf00      	nop
 800afdc:	371c      	adds	r7, #28
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b085      	sub	sp, #20
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800affc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4313      	orrs	r3, r2
 800b004:	f043 0307 	orr.w	r3, r3, #7
 800b008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	609a      	str	r2, [r3, #8]
}
 800b010:	bf00      	nop
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	021a      	lsls	r2, r3, #8
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	431a      	orrs	r2, r3
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	4313      	orrs	r3, r2
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	4313      	orrs	r3, r2
 800b048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	609a      	str	r2, [r3, #8]
}
 800b050:	bf00      	nop
 800b052:	371c      	adds	r7, #28
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f003 031f 	and.w	r3, r3, #31
 800b06e:	2201      	movs	r2, #1
 800b070:	fa02 f303 	lsl.w	r3, r2, r3
 800b074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6a1a      	ldr	r2, [r3, #32]
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	43db      	mvns	r3, r3
 800b07e:	401a      	ands	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6a1a      	ldr	r2, [r3, #32]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f003 031f 	and.w	r3, r3, #31
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	fa01 f303 	lsl.w	r3, r1, r3
 800b094:	431a      	orrs	r2, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	621a      	str	r2, [r3, #32]
}
 800b09a:	bf00      	nop
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
	...

0800b0a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e050      	b.n	800b162 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a1c      	ldr	r2, [pc, #112]	; (800b170 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d018      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b10c:	d013      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a18      	ldr	r2, [pc, #96]	; (800b174 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d00e      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a16      	ldr	r2, [pc, #88]	; (800b178 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d009      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a15      	ldr	r2, [pc, #84]	; (800b17c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d004      	beq.n	800b136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a13      	ldr	r2, [pc, #76]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d10c      	bne.n	800b150 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b13c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	4313      	orrs	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	40010000 	.word	0x40010000
 800b174:	40000400 	.word	0x40000400
 800b178:	40000800 	.word	0x40000800
 800b17c:	40000c00 	.word	0x40000c00
 800b180:	40014000 	.word	0x40014000

0800b184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e047      	b.n	800b24e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d106      	bne.n	800b1d8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7fa faa0 	bl	8005718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2224      	movs	r2, #36	; 0x24
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68da      	ldr	r2, [r3, #12]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f931 	bl	800b458 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	695a      	ldr	r2, [r3, #20]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800b214:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	695a      	ldr	r2, [r3, #20]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0208 	orr.w	r2, r2, #8
 800b224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68da      	ldr	r2, [r3, #12]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2220      	movs	r2, #32
 800b240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2220      	movs	r2, #32
 800b248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b08a      	sub	sp, #40	; 0x28
 800b25a:	af02      	add	r7, sp, #8
 800b25c:	60f8      	str	r0, [r7, #12]
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	603b      	str	r3, [r7, #0]
 800b262:	4613      	mov	r3, r2
 800b264:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b20      	cmp	r3, #32
 800b274:	d17c      	bne.n	800b370 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <HAL_UART_Transmit+0x2c>
 800b27c:	88fb      	ldrh	r3, [r7, #6]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e075      	b.n	800b372 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d101      	bne.n	800b294 <HAL_UART_Transmit+0x3e>
 800b290:	2302      	movs	r3, #2
 800b292:	e06e      	b.n	800b372 <HAL_UART_Transmit+0x11c>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2221      	movs	r2, #33	; 0x21
 800b2a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2aa:	f7fa fbb3 	bl	8005a14 <HAL_GetTick>
 800b2ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	88fa      	ldrh	r2, [r7, #6]
 800b2b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	88fa      	ldrh	r2, [r7, #6]
 800b2ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2c4:	d108      	bne.n	800b2d8 <HAL_UART_Transmit+0x82>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d104      	bne.n	800b2d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	61bb      	str	r3, [r7, #24]
 800b2d6:	e003      	b.n	800b2e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b2e8:	e02a      	b.n	800b340 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2180      	movs	r1, #128	; 0x80
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f840 	bl	800b37a <UART_WaitOnFlagUntilTimeout>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b300:	2303      	movs	r3, #3
 800b302:	e036      	b.n	800b372 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10b      	bne.n	800b322 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b318:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	3302      	adds	r3, #2
 800b31e:	61bb      	str	r3, [r7, #24]
 800b320:	e007      	b.n	800b332 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	3301      	adds	r3, #1
 800b330:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b336:	b29b      	uxth	r3, r3
 800b338:	3b01      	subs	r3, #1
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b344:	b29b      	uxth	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1cf      	bne.n	800b2ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2200      	movs	r2, #0
 800b352:	2140      	movs	r1, #64	; 0x40
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 f810 	bl	800b37a <UART_WaitOnFlagUntilTimeout>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b360:	2303      	movs	r3, #3
 800b362:	e006      	b.n	800b372 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2220      	movs	r2, #32
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e000      	b.n	800b372 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b370:	2302      	movs	r3, #2
  }
}
 800b372:	4618      	mov	r0, r3
 800b374:	3720      	adds	r7, #32
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b090      	sub	sp, #64	; 0x40
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	603b      	str	r3, [r7, #0]
 800b386:	4613      	mov	r3, r2
 800b388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b38a:	e050      	b.n	800b42e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b392:	d04c      	beq.n	800b42e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b396:	2b00      	cmp	r3, #0
 800b398:	d007      	beq.n	800b3aa <UART_WaitOnFlagUntilTimeout+0x30>
 800b39a:	f7fa fb3b 	bl	8005a14 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d241      	bcs.n	800b42e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	330c      	adds	r3, #12
 800b3b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	330c      	adds	r3, #12
 800b3c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3ca:	637a      	str	r2, [r7, #52]	; 0x34
 800b3cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e5      	bne.n	800b3aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3314      	adds	r3, #20
 800b3e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f023 0301 	bic.w	r3, r3, #1
 800b3f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3314      	adds	r3, #20
 800b3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3fe:	623a      	str	r2, [r7, #32]
 800b400:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	69f9      	ldr	r1, [r7, #28]
 800b404:	6a3a      	ldr	r2, [r7, #32]
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e5      	bne.n	800b3de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2220      	movs	r2, #32
 800b416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2220      	movs	r2, #32
 800b41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e00f      	b.n	800b44e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	4013      	ands	r3, r2
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	bf0c      	ite	eq
 800b43e:	2301      	moveq	r3, #1
 800b440:	2300      	movne	r3, #0
 800b442:	b2db      	uxtb	r3, r3
 800b444:	461a      	mov	r2, r3
 800b446:	79fb      	ldrb	r3, [r7, #7]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d09f      	beq.n	800b38c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3740      	adds	r7, #64	; 0x40
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b45c:	b0c0      	sub	sp, #256	; 0x100
 800b45e:	af00      	add	r7, sp, #0
 800b460:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b474:	68d9      	ldr	r1, [r3, #12]
 800b476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	ea40 0301 	orr.w	r3, r0, r1
 800b480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	431a      	orrs	r2, r3
 800b490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	431a      	orrs	r2, r3
 800b498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b4b0:	f021 010c 	bic.w	r1, r1, #12
 800b4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b4be:	430b      	orrs	r3, r1
 800b4c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d2:	6999      	ldr	r1, [r3, #24]
 800b4d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	ea40 0301 	orr.w	r3, r0, r1
 800b4de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	4b8f      	ldr	r3, [pc, #572]	; (800b724 <UART_SetConfig+0x2cc>)
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d005      	beq.n	800b4f8 <UART_SetConfig+0xa0>
 800b4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4b8d      	ldr	r3, [pc, #564]	; (800b728 <UART_SetConfig+0x2d0>)
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d104      	bne.n	800b502 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4f8:	f7fd fdd8 	bl	80090ac <HAL_RCC_GetPCLK2Freq>
 800b4fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b500:	e003      	b.n	800b50a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b502:	f7fd fdbf 	bl	8009084 <HAL_RCC_GetPCLK1Freq>
 800b506:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b50a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b50e:	69db      	ldr	r3, [r3, #28]
 800b510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b514:	f040 810c 	bne.w	800b730 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b51c:	2200      	movs	r2, #0
 800b51e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b522:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b526:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b52a:	4622      	mov	r2, r4
 800b52c:	462b      	mov	r3, r5
 800b52e:	1891      	adds	r1, r2, r2
 800b530:	65b9      	str	r1, [r7, #88]	; 0x58
 800b532:	415b      	adcs	r3, r3
 800b534:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b536:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b53a:	4621      	mov	r1, r4
 800b53c:	eb12 0801 	adds.w	r8, r2, r1
 800b540:	4629      	mov	r1, r5
 800b542:	eb43 0901 	adc.w	r9, r3, r1
 800b546:	f04f 0200 	mov.w	r2, #0
 800b54a:	f04f 0300 	mov.w	r3, #0
 800b54e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b55a:	4690      	mov	r8, r2
 800b55c:	4699      	mov	r9, r3
 800b55e:	4623      	mov	r3, r4
 800b560:	eb18 0303 	adds.w	r3, r8, r3
 800b564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b568:	462b      	mov	r3, r5
 800b56a:	eb49 0303 	adc.w	r3, r9, r3
 800b56e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b57e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b582:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b586:	460b      	mov	r3, r1
 800b588:	18db      	adds	r3, r3, r3
 800b58a:	653b      	str	r3, [r7, #80]	; 0x50
 800b58c:	4613      	mov	r3, r2
 800b58e:	eb42 0303 	adc.w	r3, r2, r3
 800b592:	657b      	str	r3, [r7, #84]	; 0x54
 800b594:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b598:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b59c:	f7f5 f95a 	bl	8000854 <__aeabi_uldivmod>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4b61      	ldr	r3, [pc, #388]	; (800b72c <UART_SetConfig+0x2d4>)
 800b5a6:	fba3 2302 	umull	r2, r3, r3, r2
 800b5aa:	095b      	lsrs	r3, r3, #5
 800b5ac:	011c      	lsls	r4, r3, #4
 800b5ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b5bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	464b      	mov	r3, r9
 800b5c4:	1891      	adds	r1, r2, r2
 800b5c6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b5c8:	415b      	adcs	r3, r3
 800b5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b5d0:	4641      	mov	r1, r8
 800b5d2:	eb12 0a01 	adds.w	sl, r2, r1
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	eb43 0b01 	adc.w	fp, r3, r1
 800b5dc:	f04f 0200 	mov.w	r2, #0
 800b5e0:	f04f 0300 	mov.w	r3, #0
 800b5e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b5e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b5ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5f0:	4692      	mov	sl, r2
 800b5f2:	469b      	mov	fp, r3
 800b5f4:	4643      	mov	r3, r8
 800b5f6:	eb1a 0303 	adds.w	r3, sl, r3
 800b5fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5fe:	464b      	mov	r3, r9
 800b600:	eb4b 0303 	adc.w	r3, fp, r3
 800b604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b614:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b618:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b61c:	460b      	mov	r3, r1
 800b61e:	18db      	adds	r3, r3, r3
 800b620:	643b      	str	r3, [r7, #64]	; 0x40
 800b622:	4613      	mov	r3, r2
 800b624:	eb42 0303 	adc.w	r3, r2, r3
 800b628:	647b      	str	r3, [r7, #68]	; 0x44
 800b62a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b62e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b632:	f7f5 f90f 	bl	8000854 <__aeabi_uldivmod>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	4611      	mov	r1, r2
 800b63c:	4b3b      	ldr	r3, [pc, #236]	; (800b72c <UART_SetConfig+0x2d4>)
 800b63e:	fba3 2301 	umull	r2, r3, r3, r1
 800b642:	095b      	lsrs	r3, r3, #5
 800b644:	2264      	movs	r2, #100	; 0x64
 800b646:	fb02 f303 	mul.w	r3, r2, r3
 800b64a:	1acb      	subs	r3, r1, r3
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b652:	4b36      	ldr	r3, [pc, #216]	; (800b72c <UART_SetConfig+0x2d4>)
 800b654:	fba3 2302 	umull	r2, r3, r3, r2
 800b658:	095b      	lsrs	r3, r3, #5
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b660:	441c      	add	r4, r3
 800b662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b666:	2200      	movs	r2, #0
 800b668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b66c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b670:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b674:	4642      	mov	r2, r8
 800b676:	464b      	mov	r3, r9
 800b678:	1891      	adds	r1, r2, r2
 800b67a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b67c:	415b      	adcs	r3, r3
 800b67e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b684:	4641      	mov	r1, r8
 800b686:	1851      	adds	r1, r2, r1
 800b688:	6339      	str	r1, [r7, #48]	; 0x30
 800b68a:	4649      	mov	r1, r9
 800b68c:	414b      	adcs	r3, r1
 800b68e:	637b      	str	r3, [r7, #52]	; 0x34
 800b690:	f04f 0200 	mov.w	r2, #0
 800b694:	f04f 0300 	mov.w	r3, #0
 800b698:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b69c:	4659      	mov	r1, fp
 800b69e:	00cb      	lsls	r3, r1, #3
 800b6a0:	4651      	mov	r1, sl
 800b6a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6a6:	4651      	mov	r1, sl
 800b6a8:	00ca      	lsls	r2, r1, #3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4642      	mov	r2, r8
 800b6b2:	189b      	adds	r3, r3, r2
 800b6b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6b8:	464b      	mov	r3, r9
 800b6ba:	460a      	mov	r2, r1
 800b6bc:	eb42 0303 	adc.w	r3, r2, r3
 800b6c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b6d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b6d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b6d8:	460b      	mov	r3, r1
 800b6da:	18db      	adds	r3, r3, r3
 800b6dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6de:	4613      	mov	r3, r2
 800b6e0:	eb42 0303 	adc.w	r3, r2, r3
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b6ee:	f7f5 f8b1 	bl	8000854 <__aeabi_uldivmod>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	; (800b72c <UART_SetConfig+0x2d4>)
 800b6f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6fc:	095b      	lsrs	r3, r3, #5
 800b6fe:	2164      	movs	r1, #100	; 0x64
 800b700:	fb01 f303 	mul.w	r3, r1, r3
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	3332      	adds	r3, #50	; 0x32
 800b70a:	4a08      	ldr	r2, [pc, #32]	; (800b72c <UART_SetConfig+0x2d4>)
 800b70c:	fba2 2303 	umull	r2, r3, r2, r3
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	f003 0207 	and.w	r2, r3, #7
 800b716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4422      	add	r2, r4
 800b71e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b720:	e105      	b.n	800b92e <UART_SetConfig+0x4d6>
 800b722:	bf00      	nop
 800b724:	40011000 	.word	0x40011000
 800b728:	40011400 	.word	0x40011400
 800b72c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b734:	2200      	movs	r2, #0
 800b736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b73a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b73e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b742:	4642      	mov	r2, r8
 800b744:	464b      	mov	r3, r9
 800b746:	1891      	adds	r1, r2, r2
 800b748:	6239      	str	r1, [r7, #32]
 800b74a:	415b      	adcs	r3, r3
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
 800b74e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b752:	4641      	mov	r1, r8
 800b754:	1854      	adds	r4, r2, r1
 800b756:	4649      	mov	r1, r9
 800b758:	eb43 0501 	adc.w	r5, r3, r1
 800b75c:	f04f 0200 	mov.w	r2, #0
 800b760:	f04f 0300 	mov.w	r3, #0
 800b764:	00eb      	lsls	r3, r5, #3
 800b766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b76a:	00e2      	lsls	r2, r4, #3
 800b76c:	4614      	mov	r4, r2
 800b76e:	461d      	mov	r5, r3
 800b770:	4643      	mov	r3, r8
 800b772:	18e3      	adds	r3, r4, r3
 800b774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b778:	464b      	mov	r3, r9
 800b77a:	eb45 0303 	adc.w	r3, r5, r3
 800b77e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b78e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b792:	f04f 0200 	mov.w	r2, #0
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b79e:	4629      	mov	r1, r5
 800b7a0:	008b      	lsls	r3, r1, #2
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	008a      	lsls	r2, r1, #2
 800b7ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b7b0:	f7f5 f850 	bl	8000854 <__aeabi_uldivmod>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4b60      	ldr	r3, [pc, #384]	; (800b93c <UART_SetConfig+0x4e4>)
 800b7ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b7be:	095b      	lsrs	r3, r3, #5
 800b7c0:	011c      	lsls	r4, r3, #4
 800b7c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b7cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b7d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	1891      	adds	r1, r2, r2
 800b7da:	61b9      	str	r1, [r7, #24]
 800b7dc:	415b      	adcs	r3, r3
 800b7de:	61fb      	str	r3, [r7, #28]
 800b7e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7e4:	4641      	mov	r1, r8
 800b7e6:	1851      	adds	r1, r2, r1
 800b7e8:	6139      	str	r1, [r7, #16]
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	414b      	adcs	r3, r1
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	00cb      	lsls	r3, r1, #3
 800b800:	4651      	mov	r1, sl
 800b802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b806:	4651      	mov	r1, sl
 800b808:	00ca      	lsls	r2, r1, #3
 800b80a:	4610      	mov	r0, r2
 800b80c:	4619      	mov	r1, r3
 800b80e:	4603      	mov	r3, r0
 800b810:	4642      	mov	r2, r8
 800b812:	189b      	adds	r3, r3, r2
 800b814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b818:	464b      	mov	r3, r9
 800b81a:	460a      	mov	r2, r1
 800b81c:	eb42 0303 	adc.w	r3, r2, r3
 800b820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b82e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b830:	f04f 0200 	mov.w	r2, #0
 800b834:	f04f 0300 	mov.w	r3, #0
 800b838:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b83c:	4649      	mov	r1, r9
 800b83e:	008b      	lsls	r3, r1, #2
 800b840:	4641      	mov	r1, r8
 800b842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b846:	4641      	mov	r1, r8
 800b848:	008a      	lsls	r2, r1, #2
 800b84a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b84e:	f7f5 f801 	bl	8000854 <__aeabi_uldivmod>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	4b39      	ldr	r3, [pc, #228]	; (800b93c <UART_SetConfig+0x4e4>)
 800b858:	fba3 1302 	umull	r1, r3, r3, r2
 800b85c:	095b      	lsrs	r3, r3, #5
 800b85e:	2164      	movs	r1, #100	; 0x64
 800b860:	fb01 f303 	mul.w	r3, r1, r3
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	011b      	lsls	r3, r3, #4
 800b868:	3332      	adds	r3, #50	; 0x32
 800b86a:	4a34      	ldr	r2, [pc, #208]	; (800b93c <UART_SetConfig+0x4e4>)
 800b86c:	fba2 2303 	umull	r2, r3, r2, r3
 800b870:	095b      	lsrs	r3, r3, #5
 800b872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b876:	441c      	add	r4, r3
 800b878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b87c:	2200      	movs	r2, #0
 800b87e:	673b      	str	r3, [r7, #112]	; 0x70
 800b880:	677a      	str	r2, [r7, #116]	; 0x74
 800b882:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b886:	4642      	mov	r2, r8
 800b888:	464b      	mov	r3, r9
 800b88a:	1891      	adds	r1, r2, r2
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	415b      	adcs	r3, r3
 800b890:	60fb      	str	r3, [r7, #12]
 800b892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b896:	4641      	mov	r1, r8
 800b898:	1851      	adds	r1, r2, r1
 800b89a:	6039      	str	r1, [r7, #0]
 800b89c:	4649      	mov	r1, r9
 800b89e:	414b      	adcs	r3, r1
 800b8a0:	607b      	str	r3, [r7, #4]
 800b8a2:	f04f 0200 	mov.w	r2, #0
 800b8a6:	f04f 0300 	mov.w	r3, #0
 800b8aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8ae:	4659      	mov	r1, fp
 800b8b0:	00cb      	lsls	r3, r1, #3
 800b8b2:	4651      	mov	r1, sl
 800b8b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8b8:	4651      	mov	r1, sl
 800b8ba:	00ca      	lsls	r2, r1, #3
 800b8bc:	4610      	mov	r0, r2
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	4642      	mov	r2, r8
 800b8c4:	189b      	adds	r3, r3, r2
 800b8c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8c8:	464b      	mov	r3, r9
 800b8ca:	460a      	mov	r2, r1
 800b8cc:	eb42 0303 	adc.w	r3, r2, r3
 800b8d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	663b      	str	r3, [r7, #96]	; 0x60
 800b8dc:	667a      	str	r2, [r7, #100]	; 0x64
 800b8de:	f04f 0200 	mov.w	r2, #0
 800b8e2:	f04f 0300 	mov.w	r3, #0
 800b8e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	008b      	lsls	r3, r1, #2
 800b8ee:	4641      	mov	r1, r8
 800b8f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8f4:	4641      	mov	r1, r8
 800b8f6:	008a      	lsls	r2, r1, #2
 800b8f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b8fc:	f7f4 ffaa 	bl	8000854 <__aeabi_uldivmod>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4b0d      	ldr	r3, [pc, #52]	; (800b93c <UART_SetConfig+0x4e4>)
 800b906:	fba3 1302 	umull	r1, r3, r3, r2
 800b90a:	095b      	lsrs	r3, r3, #5
 800b90c:	2164      	movs	r1, #100	; 0x64
 800b90e:	fb01 f303 	mul.w	r3, r1, r3
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	011b      	lsls	r3, r3, #4
 800b916:	3332      	adds	r3, #50	; 0x32
 800b918:	4a08      	ldr	r2, [pc, #32]	; (800b93c <UART_SetConfig+0x4e4>)
 800b91a:	fba2 2303 	umull	r2, r3, r2, r3
 800b91e:	095b      	lsrs	r3, r3, #5
 800b920:	f003 020f 	and.w	r2, r3, #15
 800b924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4422      	add	r2, r4
 800b92c:	609a      	str	r2, [r3, #8]
}
 800b92e:	bf00      	nop
 800b930:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b934:	46bd      	mov	sp, r7
 800b936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b93a:	bf00      	nop
 800b93c:	51eb851f 	.word	0x51eb851f

0800b940 <arm_sin_f32>:
 800b940:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b9bc <arm_sin_f32+0x7c>
 800b944:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b948:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b950:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800b954:	d42c      	bmi.n	800b9b0 <arm_sin_f32+0x70>
 800b956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b95a:	eddf 6a19 	vldr	s13, [pc, #100]	; 800b9c0 <arm_sin_f32+0x80>
 800b95e:	4a19      	ldr	r2, [pc, #100]	; (800b9c4 <arm_sin_f32+0x84>)
 800b960:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b964:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b968:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b96c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b974:	bfa8      	it	ge
 800b976:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800b97a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800b97e:	ee17 3a10 	vmov	r3, s14
 800b982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b986:	ee07 3a10 	vmov	s14, r3
 800b98a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b98e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b996:	edd1 6a01 	vldr	s13, [r1, #4]
 800b99a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b99e:	ed91 0a00 	vldr	s0, [r1]
 800b9a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b9a6:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b9aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b9ae:	4770      	bx	lr
 800b9b0:	ee17 3a90 	vmov	r3, s15
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	ee07 3a90 	vmov	s15, r3
 800b9ba:	e7cc      	b.n	800b956 <arm_sin_f32+0x16>
 800b9bc:	3e22f983 	.word	0x3e22f983
 800b9c0:	44000000 	.word	0x44000000
 800b9c4:	0800cb6c 	.word	0x0800cb6c

0800b9c8 <atoi>:
 800b9c8:	220a      	movs	r2, #10
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	f000 b8d6 	b.w	800bb7c <strtol>

0800b9d0 <__errno>:
 800b9d0:	4b01      	ldr	r3, [pc, #4]	; (800b9d8 <__errno+0x8>)
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	200003a4 	.word	0x200003a4

0800b9dc <__libc_init_array>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4d0d      	ldr	r5, [pc, #52]	; (800ba14 <__libc_init_array+0x38>)
 800b9e0:	4c0d      	ldr	r4, [pc, #52]	; (800ba18 <__libc_init_array+0x3c>)
 800b9e2:	1b64      	subs	r4, r4, r5
 800b9e4:	10a4      	asrs	r4, r4, #2
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	42a6      	cmp	r6, r4
 800b9ea:	d109      	bne.n	800ba00 <__libc_init_array+0x24>
 800b9ec:	4d0b      	ldr	r5, [pc, #44]	; (800ba1c <__libc_init_array+0x40>)
 800b9ee:	4c0c      	ldr	r4, [pc, #48]	; (800ba20 <__libc_init_array+0x44>)
 800b9f0:	f000 f8ce 	bl	800bb90 <_init>
 800b9f4:	1b64      	subs	r4, r4, r5
 800b9f6:	10a4      	asrs	r4, r4, #2
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	42a6      	cmp	r6, r4
 800b9fc:	d105      	bne.n	800ba0a <__libc_init_array+0x2e>
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba04:	4798      	blx	r3
 800ba06:	3601      	adds	r6, #1
 800ba08:	e7ee      	b.n	800b9e8 <__libc_init_array+0xc>
 800ba0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba0e:	4798      	blx	r3
 800ba10:	3601      	adds	r6, #1
 800ba12:	e7f2      	b.n	800b9fa <__libc_init_array+0x1e>
 800ba14:	0800d47c 	.word	0x0800d47c
 800ba18:	0800d47c 	.word	0x0800d47c
 800ba1c:	0800d47c 	.word	0x0800d47c
 800ba20:	0800d480 	.word	0x0800d480

0800ba24 <memcpy>:
 800ba24:	440a      	add	r2, r1
 800ba26:	4291      	cmp	r1, r2
 800ba28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba2c:	d100      	bne.n	800ba30 <memcpy+0xc>
 800ba2e:	4770      	bx	lr
 800ba30:	b510      	push	{r4, lr}
 800ba32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba3a:	4291      	cmp	r1, r2
 800ba3c:	d1f9      	bne.n	800ba32 <memcpy+0xe>
 800ba3e:	bd10      	pop	{r4, pc}

0800ba40 <memset>:
 800ba40:	4402      	add	r2, r0
 800ba42:	4603      	mov	r3, r0
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d100      	bne.n	800ba4a <memset+0xa>
 800ba48:	4770      	bx	lr
 800ba4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba4e:	e7f9      	b.n	800ba44 <memset+0x4>

0800ba50 <strncmp>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	b17a      	cbz	r2, 800ba74 <strncmp+0x24>
 800ba54:	4603      	mov	r3, r0
 800ba56:	3901      	subs	r1, #1
 800ba58:	1884      	adds	r4, r0, r2
 800ba5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba62:	4290      	cmp	r0, r2
 800ba64:	d101      	bne.n	800ba6a <strncmp+0x1a>
 800ba66:	42a3      	cmp	r3, r4
 800ba68:	d101      	bne.n	800ba6e <strncmp+0x1e>
 800ba6a:	1a80      	subs	r0, r0, r2
 800ba6c:	bd10      	pop	{r4, pc}
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d1f3      	bne.n	800ba5a <strncmp+0xa>
 800ba72:	e7fa      	b.n	800ba6a <strncmp+0x1a>
 800ba74:	4610      	mov	r0, r2
 800ba76:	e7f9      	b.n	800ba6c <strncmp+0x1c>

0800ba78 <_strtol_l.constprop.0>:
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7e:	d001      	beq.n	800ba84 <_strtol_l.constprop.0+0xc>
 800ba80:	2b24      	cmp	r3, #36	; 0x24
 800ba82:	d906      	bls.n	800ba92 <_strtol_l.constprop.0+0x1a>
 800ba84:	f7ff ffa4 	bl	800b9d0 <__errno>
 800ba88:	2316      	movs	r3, #22
 800ba8a:	6003      	str	r3, [r0, #0]
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb78 <_strtol_l.constprop.0+0x100>
 800ba96:	460d      	mov	r5, r1
 800ba98:	462e      	mov	r6, r5
 800ba9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800baa2:	f017 0708 	ands.w	r7, r7, #8
 800baa6:	d1f7      	bne.n	800ba98 <_strtol_l.constprop.0+0x20>
 800baa8:	2c2d      	cmp	r4, #45	; 0x2d
 800baaa:	d132      	bne.n	800bb12 <_strtol_l.constprop.0+0x9a>
 800baac:	782c      	ldrb	r4, [r5, #0]
 800baae:	2701      	movs	r7, #1
 800bab0:	1cb5      	adds	r5, r6, #2
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d05b      	beq.n	800bb6e <_strtol_l.constprop.0+0xf6>
 800bab6:	2b10      	cmp	r3, #16
 800bab8:	d109      	bne.n	800bace <_strtol_l.constprop.0+0x56>
 800baba:	2c30      	cmp	r4, #48	; 0x30
 800babc:	d107      	bne.n	800bace <_strtol_l.constprop.0+0x56>
 800babe:	782c      	ldrb	r4, [r5, #0]
 800bac0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bac4:	2c58      	cmp	r4, #88	; 0x58
 800bac6:	d14d      	bne.n	800bb64 <_strtol_l.constprop.0+0xec>
 800bac8:	786c      	ldrb	r4, [r5, #1]
 800baca:	2310      	movs	r3, #16
 800bacc:	3502      	adds	r5, #2
 800bace:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bad2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bad6:	f04f 0c00 	mov.w	ip, #0
 800bada:	fbb8 f9f3 	udiv	r9, r8, r3
 800bade:	4666      	mov	r6, ip
 800bae0:	fb03 8a19 	mls	sl, r3, r9, r8
 800bae4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bae8:	f1be 0f09 	cmp.w	lr, #9
 800baec:	d816      	bhi.n	800bb1c <_strtol_l.constprop.0+0xa4>
 800baee:	4674      	mov	r4, lr
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	dd24      	ble.n	800bb3e <_strtol_l.constprop.0+0xc6>
 800baf4:	f1bc 0f00 	cmp.w	ip, #0
 800baf8:	db1e      	blt.n	800bb38 <_strtol_l.constprop.0+0xc0>
 800bafa:	45b1      	cmp	r9, r6
 800bafc:	d31c      	bcc.n	800bb38 <_strtol_l.constprop.0+0xc0>
 800bafe:	d101      	bne.n	800bb04 <_strtol_l.constprop.0+0x8c>
 800bb00:	45a2      	cmp	sl, r4
 800bb02:	db19      	blt.n	800bb38 <_strtol_l.constprop.0+0xc0>
 800bb04:	fb06 4603 	mla	r6, r6, r3, r4
 800bb08:	f04f 0c01 	mov.w	ip, #1
 800bb0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb10:	e7e8      	b.n	800bae4 <_strtol_l.constprop.0+0x6c>
 800bb12:	2c2b      	cmp	r4, #43	; 0x2b
 800bb14:	bf04      	itt	eq
 800bb16:	782c      	ldrbeq	r4, [r5, #0]
 800bb18:	1cb5      	addeq	r5, r6, #2
 800bb1a:	e7ca      	b.n	800bab2 <_strtol_l.constprop.0+0x3a>
 800bb1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bb20:	f1be 0f19 	cmp.w	lr, #25
 800bb24:	d801      	bhi.n	800bb2a <_strtol_l.constprop.0+0xb2>
 800bb26:	3c37      	subs	r4, #55	; 0x37
 800bb28:	e7e2      	b.n	800baf0 <_strtol_l.constprop.0+0x78>
 800bb2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bb2e:	f1be 0f19 	cmp.w	lr, #25
 800bb32:	d804      	bhi.n	800bb3e <_strtol_l.constprop.0+0xc6>
 800bb34:	3c57      	subs	r4, #87	; 0x57
 800bb36:	e7db      	b.n	800baf0 <_strtol_l.constprop.0+0x78>
 800bb38:	f04f 3cff 	mov.w	ip, #4294967295
 800bb3c:	e7e6      	b.n	800bb0c <_strtol_l.constprop.0+0x94>
 800bb3e:	f1bc 0f00 	cmp.w	ip, #0
 800bb42:	da05      	bge.n	800bb50 <_strtol_l.constprop.0+0xd8>
 800bb44:	2322      	movs	r3, #34	; 0x22
 800bb46:	6003      	str	r3, [r0, #0]
 800bb48:	4646      	mov	r6, r8
 800bb4a:	b942      	cbnz	r2, 800bb5e <_strtol_l.constprop.0+0xe6>
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	e79e      	b.n	800ba8e <_strtol_l.constprop.0+0x16>
 800bb50:	b107      	cbz	r7, 800bb54 <_strtol_l.constprop.0+0xdc>
 800bb52:	4276      	negs	r6, r6
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	d0f9      	beq.n	800bb4c <_strtol_l.constprop.0+0xd4>
 800bb58:	f1bc 0f00 	cmp.w	ip, #0
 800bb5c:	d000      	beq.n	800bb60 <_strtol_l.constprop.0+0xe8>
 800bb5e:	1e69      	subs	r1, r5, #1
 800bb60:	6011      	str	r1, [r2, #0]
 800bb62:	e7f3      	b.n	800bb4c <_strtol_l.constprop.0+0xd4>
 800bb64:	2430      	movs	r4, #48	; 0x30
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1b1      	bne.n	800bace <_strtol_l.constprop.0+0x56>
 800bb6a:	2308      	movs	r3, #8
 800bb6c:	e7af      	b.n	800bace <_strtol_l.constprop.0+0x56>
 800bb6e:	2c30      	cmp	r4, #48	; 0x30
 800bb70:	d0a5      	beq.n	800babe <_strtol_l.constprop.0+0x46>
 800bb72:	230a      	movs	r3, #10
 800bb74:	e7ab      	b.n	800bace <_strtol_l.constprop.0+0x56>
 800bb76:	bf00      	nop
 800bb78:	0800d371 	.word	0x0800d371

0800bb7c <strtol>:
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	460a      	mov	r2, r1
 800bb80:	4601      	mov	r1, r0
 800bb82:	4802      	ldr	r0, [pc, #8]	; (800bb8c <strtol+0x10>)
 800bb84:	6800      	ldr	r0, [r0, #0]
 800bb86:	f7ff bf77 	b.w	800ba78 <_strtol_l.constprop.0>
 800bb8a:	bf00      	nop
 800bb8c:	200003a4 	.word	0x200003a4

0800bb90 <_init>:
 800bb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb92:	bf00      	nop
 800bb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb96:	bc08      	pop	{r3}
 800bb98:	469e      	mov	lr, r3
 800bb9a:	4770      	bx	lr

0800bb9c <_fini>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	bf00      	nop
 800bba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba2:	bc08      	pop	{r3}
 800bba4:	469e      	mov	lr, r3
 800bba6:	4770      	bx	lr
