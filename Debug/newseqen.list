
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009930  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001030  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaf8  0800aaf8  00020a18  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaf8  0800aaf8  0001aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab00  0800ab00  00020a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab00  0800ab00  0001ab00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a18  20000000  0800ab08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003554  20000a18  0800b520  00020a18  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f6c  0800b520  00023f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132f4  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a2  00000000  00000000  00033d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000361e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018813  00000000  00000000  00038338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a55  00000000  00000000  00050b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9cb  00000000  00000000  000655a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00103f6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b64  00000000  00000000  0010402c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00108b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000a18 	.word	0x20000a18
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009ab0 	.word	0x08009ab0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000a1c 	.word	0x20000a1c
 80001d4:	08009ab0 	.word	0x08009ab0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 28; i++) {      // find menu location
 8000b64:	4b96      	ldr	r3, [pc, #600]	; (8000dc0 <menu_vars+0x278>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	801a      	strh	r2, [r3, #0]
 8000b6a:	e01d      	b.n	8000ba8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b6c:	4b94      	ldr	r3, [pc, #592]	; (8000dc0 <menu_vars+0x278>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b94      	ldr	r3, [pc, #592]	; (8000dc4 <menu_vars+0x27c>)
 8000b74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	6810      	ldr	r0, [r2, #0]
 8000b7e:	6851      	ldr	r1, [r2, #4]
 8000b80:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	2208      	movs	r2, #8
 8000b88:	4619      	mov	r1, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f008 fef0 	bl	8009970 <strncmp>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <menu_vars+0x54>
			menu_countr = i;
 8000b96:	4b8a      	ldr	r3, [pc, #552]	; (8000dc0 <menu_vars+0x278>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < 28; i++) {      // find menu location
 8000b9c:	4b88      	ldr	r3, [pc, #544]	; (8000dc0 <menu_vars+0x278>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b86      	ldr	r3, [pc, #536]	; (8000dc0 <menu_vars+0x278>)
 8000ba6:	801a      	strh	r2, [r3, #0]
 8000ba8:	4b85      	ldr	r3, [pc, #532]	; (8000dc0 <menu_vars+0x278>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	2b1b      	cmp	r3, #27
 8000bae:	d9dd      	bls.n	8000b6c <menu_vars+0x24>

		}
	}

	if (menu_vars_index_limit[menu_countr]<var_index) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	4a85      	ldr	r2, [pc, #532]	; (8000dc8 <menu_vars+0x280>)
 8000bb4:	5cd3      	ldrb	r3, [r2, r3]
 8000bb6:	78fa      	ldrb	r2, [r7, #3]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d903      	bls.n	8000bc4 <menu_vars+0x7c>
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	4a82      	ldr	r2, [pc, #520]	; (8000dc8 <menu_vars+0x280>)
 8000bc0:	5cd3      	ldrb	r3, [r2, r3]
 8000bc2:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b1b      	cmp	r3, #27
 8000bc8:	f200 80f1 	bhi.w	8000dae <menu_vars+0x266>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <menu_vars+0x8c>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000c45 	.word	0x08000c45
 8000bd8:	08000c4b 	.word	0x08000c4b
 8000bdc:	08000c57 	.word	0x08000c57
 8000be0:	08000c65 	.word	0x08000c65
 8000be4:	08000c73 	.word	0x08000c73
 8000be8:	08000c81 	.word	0x08000c81
 8000bec:	08000c8f 	.word	0x08000c8f
 8000bf0:	08000c95 	.word	0x08000c95
 8000bf4:	08000ca7 	.word	0x08000ca7
 8000bf8:	08000cbb 	.word	0x08000cbb
 8000bfc:	08000ccf 	.word	0x08000ccf
 8000c00:	08000ce3 	.word	0x08000ce3
 8000c04:	08000ce9 	.word	0x08000ce9
 8000c08:	08000cf5 	.word	0x08000cf5
 8000c0c:	08000d03 	.word	0x08000d03
 8000c10:	08000d11 	.word	0x08000d11
 8000c14:	08000d1f 	.word	0x08000d1f
 8000c18:	08000d2d 	.word	0x08000d2d
 8000c1c:	08000d3b 	.word	0x08000d3b
 8000c20:	08000d49 	.word	0x08000d49
 8000c24:	08000d57 	.word	0x08000d57
 8000c28:	08000d67 	.word	0x08000d67
 8000c2c:	08000d6d 	.word	0x08000d6d
 8000c30:	08000d73 	.word	0x08000d73
 8000c34:	08000d79 	.word	0x08000d79
 8000c38:	08000d85 	.word	0x08000d85
 8000c3c:	08000d93 	.word	0x08000d93
 8000c40:	08000da1 	.word	0x08000da1
	case 0:     menu_vars_var1= NULL; break;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	e0b4      	b.n	8000db4 <menu_vars+0x26c>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c4a:	78fb      	ldrb	r3, [r7, #3]
 8000c4c:	015b      	lsls	r3, r3, #5
 8000c4e:	4a5f      	ldr	r2, [pc, #380]	; (8000dcc <menu_vars+0x284>)
 8000c50:	4413      	add	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	e0ae      	b.n	8000db4 <menu_vars+0x26c>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	015b      	lsls	r3, r3, #5
 8000c5a:	4a5c      	ldr	r2, [pc, #368]	; (8000dcc <menu_vars+0x284>)
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3301      	adds	r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	e0a7      	b.n	8000db4 <menu_vars+0x26c>
	case 3:     menu_vars_var1= &LFO[var_index].gain    ; break;
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	015b      	lsls	r3, r3, #5
 8000c68:	4a58      	ldr	r2, [pc, #352]	; (8000dcc <menu_vars+0x284>)
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	e0a0      	b.n	8000db4 <menu_vars+0x26c>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	4a55      	ldr	r2, [pc, #340]	; (8000dcc <menu_vars+0x284>)
 8000c78:	4413      	add	r3, r2
 8000c7a:	3303      	adds	r3, #3
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	e099      	b.n	8000db4 <menu_vars+0x26c>
	case 5:     menu_vars_var1= &LFO[var_index].target    ; break;
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	015b      	lsls	r3, r3, #5
 8000c84:	4a51      	ldr	r2, [pc, #324]	; (8000dcc <menu_vars+0x284>)
 8000c86:	4413      	add	r3, r2
 8000c88:	3304      	adds	r3, #4
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	e092      	b.n	8000db4 <menu_vars+0x26c>
	case 6:     menu_vars_var1= NULL   ; break;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	e08f      	b.n	8000db4 <menu_vars+0x26c>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <menu_vars+0x288>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	e086      	b.n	8000db4 <menu_vars+0x26c>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	4a47      	ldr	r2, [pc, #284]	; (8000dd0 <menu_vars+0x288>)
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	e07c      	b.n	8000db4 <menu_vars+0x26c>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	4a42      	ldr	r2, [pc, #264]	; (8000dd0 <menu_vars+0x288>)
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3302      	adds	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	e072      	b.n	8000db4 <menu_vars+0x26c>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	4a3d      	ldr	r2, [pc, #244]	; (8000dd0 <menu_vars+0x288>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	3303      	adds	r3, #3
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	e068      	b.n	8000db4 <menu_vars+0x26c>
	case 11:     menu_vars_var1= NULL  ; break;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e065      	b.n	8000db4 <menu_vars+0x26c>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	4a39      	ldr	r2, [pc, #228]	; (8000dd4 <menu_vars+0x28c>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	e05f      	b.n	8000db4 <menu_vars+0x26c>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <menu_vars+0x28c>)
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	e058      	b.n	8000db4 <menu_vars+0x26c>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d02:	78fb      	ldrb	r3, [r7, #3]
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	4a33      	ldr	r2, [pc, #204]	; (8000dd4 <menu_vars+0x28c>)
 8000d08:	4413      	add	r3, r2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	e051      	b.n	8000db4 <menu_vars+0x26c>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <menu_vars+0x28c>)
 8000d16:	4413      	add	r3, r2
 8000d18:	3303      	adds	r3, #3
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	e04a      	b.n	8000db4 <menu_vars+0x26c>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <menu_vars+0x28c>)
 8000d24:	4413      	add	r3, r2
 8000d26:	3304      	adds	r3, #4
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e043      	b.n	8000db4 <menu_vars+0x26c>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <menu_vars+0x28c>)
 8000d32:	4413      	add	r3, r2
 8000d34:	3305      	adds	r3, #5
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	e03c      	b.n	8000db4 <menu_vars+0x26c>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4a25      	ldr	r2, [pc, #148]	; (8000dd4 <menu_vars+0x28c>)
 8000d40:	4413      	add	r3, r2
 8000d42:	3306      	adds	r3, #6
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	e035      	b.n	8000db4 <menu_vars+0x26c>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	3308      	adds	r3, #8
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <menu_vars+0x28c>)
 8000d50:	4413      	add	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	e02e      	b.n	8000db4 <menu_vars+0x26c>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <menu_vars+0x28c>)
 8000d5e:	4413      	add	r3, r2
 8000d60:	3302      	adds	r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	e026      	b.n	8000db4 <menu_vars+0x26c>
	case 21:     menu_vars_var1= NULL   ; break;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e023      	b.n	8000db4 <menu_vars+0x26c>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <menu_vars+0x290>)
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	e020      	b.n	8000db4 <menu_vars+0x26c>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <menu_vars+0x294>)
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e01d      	b.n	8000db4 <menu_vars+0x26c>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <menu_vars+0x290>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e017      	b.n	8000db4 <menu_vars+0x26c>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	3310      	adds	r3, #16
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <menu_vars+0x290>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	e010      	b.n	8000db4 <menu_vars+0x26c>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000d92:	78fb      	ldrb	r3, [r7, #3]
 8000d94:	3320      	adds	r3, #32
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <menu_vars+0x290>)
 8000d98:	4413      	add	r3, r2
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	e009      	b.n	8000db4 <menu_vars+0x26c>
	case 27:     menu_vars_var1= &LFO[var_index].target_index    ; break;
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <menu_vars+0x284>)
 8000da6:	4413      	add	r3, r2
 8000da8:	3305      	adds	r3, #5
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	e002      	b.n	8000db4 <menu_vars+0x26c>
	default :		menu_vars_var1= NULL   ; break;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	bf00      	nop

	}
    // copy back address  ,ok

	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000db4:	693b      	ldr	r3, [r7, #16]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000d74 	.word	0x20000d74
 8000dc4:	20000538 	.word	0x20000538
 8000dc8:	08009d00 	.word	0x08009d00
 8000dcc:	20002f58 	.word	0x20002f58
 8000dd0:	20003098 	.word	0x20003098
 8000dd4:	20003b24 	.word	0x20003b24
 8000dd8:	20003b94 	.word	0x20003b94
 8000ddc:	20003b95 	.word	0x20003b95

08000de0 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000de6:	4a47      	ldr	r2, [pc, #284]	; (8000f04 <menu_parser+0x124>)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df0:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000df4:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <menu_parser+0x128>)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dfc:	e883 0003 	stmia.w	r3, {r0, r1}


	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000e00:	f44f 731d 	mov.w	r3, #628	; 0x274
 8000e04:	82fb      	strh	r3, [r7, #22]


	if (string_search>menu_searchsize) {                    //this is ok
 8000e06:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <menu_parser+0x12c>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	8afa      	ldrh	r2, [r7, #22]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d374      	bcc.n	8000efa <menu_parser+0x11a>
		return;    }    // check if bigger than search area

	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000e10:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <menu_parser+0x12c>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <menu_parser+0x130>)
 8000e18:	441a      	add	r2, r3
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	6851      	ldr	r1, [r2, #4]
 8000e22:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (i=0;i<28;i++){    	// test a single menu entry  , for now only the first record
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <menu_parser+0x134>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	801a      	strh	r2, [r3, #0]
 8000e2a:	e04b      	b.n	8000ec4 <menu_parser+0xe4>

		memcpy(menu_string2,menu_titles_final[i],8);
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <menu_parser+0x134>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <menu_parser+0x138>)
 8000e34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	6851      	ldr	r1, [r2, #4]
 8000e3e:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8000e40:	1d39      	adds	r1, r7, #4
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2208      	movs	r2, #8
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 fd91 	bl	8009970 <strncmp>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d131      	bne.n	8000eb8 <menu_parser+0xd8>
		{
			menu_title_lut[menu_title_count]=(i<<8)+menu_counter;   // search result  and disp lcd position counter
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <menu_parser+0x134>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <menu_parser+0x13c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	492f      	ldr	r1, [pc, #188]	; (8000f20 <menu_parser+0x140>)
 8000e64:	7809      	ldrb	r1, [r1, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <menu_parser+0x144>)
 8000e6c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <menu_parser+0x140>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <menu_parser+0x148>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <menu_parser+0x12c>)
 8000e7e:	8812      	ldrh	r2, [r2, #0]
 8000e80:	3a02      	subs	r2, #2
 8000e82:	4923      	ldr	r1, [pc, #140]	; (8000f10 <menu_parser+0x130>)
 8000e84:	440a      	add	r2, r1
 8000e86:	8812      	ldrh	r2, [r2, #0]
 8000e88:	b292      	uxth	r2, r2
 8000e8a:	801a      	strh	r2, [r3, #0]


			menu_title_count++;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <menu_parser+0x140>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <menu_parser+0x140>)
 8000e96:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <menu_parser+0x13c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <menu_parser+0x13c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
			space_check=0;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <menu_parser+0x14c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <menu_parser+0x12c>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	3308      	adds	r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <menu_parser+0x12c>)
 8000eb4:	801a      	strh	r2, [r3, #0]

			return;}
 8000eb6:	e021      	b.n	8000efc <menu_parser+0x11c>
	for (i=0;i<28;i++){    	// test a single menu entry  , for now only the first record
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <menu_parser+0x134>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <menu_parser+0x134>)
 8000ec2:	801a      	strh	r2, [r3, #0]
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <menu_parser+0x134>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b1b      	cmp	r3, #27
 8000eca:	d9af      	bls.n	8000e2c <menu_parser+0x4c>
	}

	//string_value=255;    // no result use 255 for now
	//menu_title_lut[menu_title_count]=255;   // record for feedback line
	//menu_title_count++;
	if (space_check>1)  menu_counter++;   //this is ok
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <menu_parser+0x14c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d905      	bls.n	8000ee0 <menu_parser+0x100>
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <menu_parser+0x13c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <menu_parser+0x13c>)
 8000ede:	701a      	strb	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <menu_parser+0x14c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <menu_parser+0x14c>)
 8000eea:	701a      	strb	r2, [r3, #0]
	string_search++;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <menu_parser+0x12c>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <menu_parser+0x12c>)
 8000ef6:	801a      	strh	r2, [r3, #0]
	return;
 8000ef8:	e000      	b.n	8000efc <menu_parser+0x11c>
		return;    }    // check if bigger than search area
 8000efa:	bf00      	nop


}
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08009c18 	.word	0x08009c18
 8000f08:	08009c20 	.word	0x08009c20
 8000f0c:	20003bc2 	.word	0x20003bc2
 8000f10:	200001bc 	.word	0x200001bc
 8000f14:	20000d74 	.word	0x20000d74
 8000f18:	20000538 	.word	0x20000538
 8000f1c:	20003bc4 	.word	0x20003bc4
 8000f20:	20003c4a 	.word	0x20003c4a
 8000f24:	20003bc8 	.word	0x20003bc8
 8000f28:	20003c5c 	.word	0x20003c5c
 8000f2c:	20003bc5 	.word	0x20003bc5

08000f30 <lfo_target_parse>:
void lfo_target_parse(void){    // records ptr for target options , works ok
 8000f30:	b598      	push	{r3, r4, r7, lr}
 8000f32:	af00      	add	r7, sp, #0

		for (n=0;n<10;n++){
 8000f34:	4b40      	ldr	r3, [pc, #256]	; (8001038 <lfo_target_parse+0x108>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	801a      	strh	r2, [r3, #0]
 8000f3a:	e075      	b.n	8001028 <lfo_target_parse+0xf8>

			if (LFO[n].target) {  // test if above zero
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <lfo_target_parse+0x108>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	4a3e      	ldr	r2, [pc, #248]	; (800103c <lfo_target_parse+0x10c>)
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	4413      	add	r3, r2
 8000f46:	3304      	adds	r3, #4
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d066      	beq.n	800101c <lfo_target_parse+0xec>
			if (LFO[n].target>27)    LFO[n].target=27;   // test  limit and block self
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <lfo_target_parse+0x108>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	4a3a      	ldr	r2, [pc, #232]	; (800103c <lfo_target_parse+0x10c>)
 8000f54:	015b      	lsls	r3, r3, #5
 8000f56:	4413      	add	r3, r2
 8000f58:	3304      	adds	r3, #4
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b1b      	cmp	r3, #27
 8000f5e:	d907      	bls.n	8000f70 <lfo_target_parse+0x40>
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <lfo_target_parse+0x108>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	4a35      	ldr	r2, [pc, #212]	; (800103c <lfo_target_parse+0x10c>)
 8000f66:	015b      	lsls	r3, r3, #5
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	221b      	movs	r2, #27
 8000f6e:	701a      	strb	r2, [r3, #0]
			if (LFO[n].target==5) 	LFO[n].target=6;  // skip up so it doesnt self
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <lfo_target_parse+0x108>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	4a31      	ldr	r2, [pc, #196]	; (800103c <lfo_target_parse+0x10c>)
 8000f76:	015b      	lsls	r3, r3, #5
 8000f78:	4413      	add	r3, r2
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	d107      	bne.n	8000f92 <lfo_target_parse+0x62>
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <lfo_target_parse+0x108>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	4a2d      	ldr	r2, [pc, #180]	; (800103c <lfo_target_parse+0x10c>)
 8000f88:	015b      	lsls	r3, r3, #5
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2206      	movs	r2, #6
 8000f90:	701a      	strb	r2, [r3, #0]


			if (LFO[n].target_index>menu_vars_index_limit[LFO[n].target_index]  )   // test limit
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <lfo_target_parse+0x108>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	4a29      	ldr	r2, [pc, #164]	; (800103c <lfo_target_parse+0x10c>)
 8000f98:	015b      	lsls	r3, r3, #5
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3305      	adds	r3, #5
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <lfo_target_parse+0x108>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	4925      	ldr	r1, [pc, #148]	; (800103c <lfo_target_parse+0x10c>)
 8000fa6:	015b      	lsls	r3, r3, #5
 8000fa8:	440b      	add	r3, r1
 8000faa:	3305      	adds	r3, #5
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <lfo_target_parse+0x110>)
 8000fb2:	5c5b      	ldrb	r3, [r3, r1]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d912      	bls.n	8000fde <lfo_target_parse+0xae>
			{	LFO[n].target_index=menu_vars_index_limit[LFO[n].target_index]; }
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <lfo_target_parse+0x108>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	; (800103c <lfo_target_parse+0x10c>)
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3305      	adds	r3, #5
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <lfo_target_parse+0x108>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <lfo_target_parse+0x110>)
 8000fd0:	5c99      	ldrb	r1, [r3, r2]
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	; (800103c <lfo_target_parse+0x10c>)
 8000fd4:	0143      	lsls	r3, r0, #5
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3305      	adds	r3, #5
 8000fda:	460a      	mov	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]

			LFO[n].out_ptr= menu_vars(menu_titles_final[LFO[n].target] , LFO[n].target_index    );     // write ptr
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <lfo_target_parse+0x108>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <lfo_target_parse+0x10c>)
 8000fe4:	015b      	lsls	r3, r3, #5
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3304      	adds	r3, #4
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <lfo_target_parse+0x114>)
 8000ff0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <lfo_target_parse+0x108>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	4910      	ldr	r1, [pc, #64]	; (800103c <lfo_target_parse+0x10c>)
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3305      	adds	r3, #5
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <lfo_target_parse+0x108>)
 8001004:	8809      	ldrh	r1, [r1, #0]
 8001006:	460c      	mov	r4, r1
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f7ff fd9c 	bl	8000b48 <menu_vars>
 8001010:	4602      	mov	r2, r0
 8001012:	490a      	ldr	r1, [pc, #40]	; (800103c <lfo_target_parse+0x10c>)
 8001014:	0163      	lsls	r3, r4, #5
 8001016:	440b      	add	r3, r1
 8001018:	331c      	adds	r3, #28
 800101a:	601a      	str	r2, [r3, #0]
		for (n=0;n<10;n++){
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <lfo_target_parse+0x108>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <lfo_target_parse+0x108>)
 8001026:	801a      	strh	r2, [r3, #0]
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <lfo_target_parse+0x108>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2b09      	cmp	r3, #9
 800102e:	d985      	bls.n	8000f3c <lfo_target_parse+0xc>

			}
		}

	}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	bd98      	pop	{r3, r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	20000d52 	.word	0x20000d52
 800103c:	20002f58 	.word	0x20002f58
 8001040:	08009d00 	.word	0x08009d00
 8001044:	20000538 	.word	0x20000538

08001048 <SPI_command>:


void SPI_command(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <SPI_command+0x68>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d128      	bne.n	80010a8 <SPI_command+0x60>
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <SPI_command+0x6c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d124      	bne.n	80010a8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <SPI_command+0x70>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <SPI_command+0x2a>
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <SPI_command+0x74>)
 800106c:	22f8      	movs	r2, #248	; 0xf8
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e002      	b.n	8001078 <SPI_command+0x30>
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <SPI_command+0x74>)
 8001074:	22fa      	movs	r2, #250	; 0xfa
 8001076:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <SPI_command+0x74>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <SPI_command+0x70>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	b29b      	uxth	r3, r3
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	b2db      	uxtb	r3, r3
 800108a:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <SPI_command+0x70>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	b2db      	uxtb	r3, r3
 8001094:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8001096:	4639      	mov	r1, r7
 8001098:	2303      	movs	r3, #3
 800109a:	2203      	movs	r2, #3
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <SPI_command+0x78>)
 800109e:	f006 fdfc 	bl	8007c9a <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 80010a2:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <SPI_command+0x68>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	801a      	strh	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200021ce 	.word	0x200021ce
 80010b4:	200021d4 	.word	0x200021d4
 80010b8:	200021d2 	.word	0x200021d2
 80010bc:	200021d0 	.word	0x200021d0
 80010c0:	20003e38 	.word	0x20003e38

080010c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
		time_proc++;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010d6:	801a      	strh	r2, [r3, #0]
		//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d105      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	801a      	strh	r2, [r3, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	801a      	strh	r2, [r3, #0]
		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d106      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001102:	2201      	movs	r2, #1
 8001104:	801a      	strh	r2, [r3, #0]
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110c:	801a      	strh	r2, [r3, #0]
		sample_point=sample_point & 1023;// this is 1
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800111c:	801a      	strh	r2, [r3, #0]
		play_hold=play_sample[sample_point]; // this is 2
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001128:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800112e:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10b      	bne.n	8001152 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{


	TIM3->CCR3=play_hold ;  // keep readin sample storage
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c


	sample_point++; //this needs to be here or too fast and wrong sample rate
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	3301      	adds	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001150:	801a      	strh	r2, [r3, #0]

	}

	}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20002f54 	.word	0x20002f54
 8001164:	2000157a 	.word	0x2000157a
 8001168:	200001b2 	.word	0x200001b2
 800116c:	2000157e 	.word	0x2000157e
 8001170:	20000d78 	.word	0x20000d78
 8001174:	2000157c 	.word	0x2000157c
 8001178:	40000400 	.word	0x40000400

0800117c <analoginputloopb>:



void analoginputloopb(void){  //works fine still
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
uint16_t menu_holder;



	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <analoginputloopb+0x160>)
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	b29b      	uxth	r3, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <analoginputloopb+0x164>)
 800118e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <analoginputloopb+0x160>)
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <analoginputloopb+0x168>)
 800119e:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 80011a0:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <analoginputloopb+0x160>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 80011a6:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <analoginputloopb+0x16c>)
 80011a8:	881a      	ldrh	r2, [r3, #0]
 80011aa:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <analoginputloopb+0x160>)
 80011ac:	809a      	strh	r2, [r3, #4]
		//if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later

		//enc_dir=potSource[counterVarB];


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 80011ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	085b      	lsrs	r3, r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <analoginputloopb+0x170>)
 80011ba:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 80011bc:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <analoginputloopb+0x174>)
 80011be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011c0:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <analoginputloopb+0x178>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	b2c9      	uxtb	r1, r1
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <analoginputloopb+0x17c>)
 80011ca:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <analoginputloopb+0x178>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d103      	bne.n	80011e4 <analoginputloopb+0x68>
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <analoginputloopb+0x178>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e005      	b.n	80011f0 <analoginputloopb+0x74>
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <analoginputloopb+0x178>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <analoginputloopb+0x178>)
 80011ee:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <analoginputloopb+0x17c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <analoginputloopb+0x17c>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <analoginputloopb+0x17c>)
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <analoginputloopb+0x17c>)
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 800121a:	4a38      	ldr	r2, [pc, #224]	; (80012fc <analoginputloopb+0x180>)
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	8013      	strh	r3, [r2, #0]
	//enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip


	//if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
	//if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier setting
	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <analoginputloopb+0x170>)
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <analoginputloopb+0x184>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d908      	bls.n	800123e <analoginputloopb+0xc2>
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <analoginputloopb+0x188>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	b29b      	uxth	r3, r3
 8001234:	3b01      	subs	r3, #1
 8001236:	b29b      	uxth	r3, r3
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b32      	ldr	r3, [pc, #200]	; (8001304 <analoginputloopb+0x188>)
 800123c:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <analoginputloopb+0x170>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <analoginputloopb+0x184>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d208      	bcs.n	800125c <analoginputloopb+0xe0>
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <analoginputloopb+0x188>)
 800124c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001250:	b29b      	uxth	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b29b      	uxth	r3, r3
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <analoginputloopb+0x188>)
 800125a:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <analoginputloopb+0x180>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001264:	d303      	bcc.n	800126e <analoginputloopb+0xf2>
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <analoginputloopb+0x180>)
 8001268:	f240 127f 	movw	r2, #383	; 0x17f
 800126c:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <analoginputloopb+0x188>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	2ba0      	cmp	r3, #160	; 0xa0
 8001276:	dd02      	ble.n	800127e <analoginputloopb+0x102>
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <analoginputloopb+0x188>)
 800127a:	22a0      	movs	r2, #160	; 0xa0
 800127c:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <analoginputloopb+0x188>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da02      	bge.n	800128e <analoginputloopb+0x112>
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <analoginputloopb+0x188>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			//potSource[counterVarB]=enc_dir;       // enter data into potsource
				//	enc_dir=0;
			enc_tempB=enc_temp;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <analoginputloopb+0x170>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <analoginputloopb+0x184>)
 8001294:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;
		//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <analoginputloopb+0x180>)
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <analoginputloopb+0x16c>)
 800129c:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;  // single  for now
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <analoginputloopb+0x16c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <analoginputloopb+0x18c>)
 80012aa:	805a      	strh	r2, [r3, #2]
			menu_page[1]=0; // force a single page for now
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <analoginputloopb+0x18c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	805a      	strh	r2, [r3, #2]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <analoginputloopb+0x180>)
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <analoginputloopb+0x190>)
 80012b8:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <analoginputloopb+0x194>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <analoginputloopb+0x198>)
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <analoginputloopb+0x194>)
 80012c6:	8812      	ldrh	r2, [r2, #0]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <analoginputloopb+0x19c>)
 80012ce:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	200021d8 	.word	0x200021d8
 80012e0:	20000d42 	.word	0x20000d42
 80012e4:	20000d43 	.word	0x20000d43
 80012e8:	200021c6 	.word	0x200021c6
 80012ec:	200021be 	.word	0x200021be
 80012f0:	40000800 	.word	0x40000800
 80012f4:	20003ce1 	.word	0x20003ce1
 80012f8:	20003cdc 	.word	0x20003cdc
 80012fc:	200021c2 	.word	0x200021c2
 8001300:	200021c0 	.word	0x200021c0
 8001304:	200021c8 	.word	0x200021c8
 8001308:	200021e8 	.word	0x200021e8
 800130c:	200021c4 	.word	0x200021c4
 8001310:	20000d48 	.word	0x20000d48
 8001314:	20000bb8 	.word	0x20000bb8
 8001318:	20000a38 	.word	0x20000a38

0800131c <display_init>:
void display_init(void){
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <display_init+0x90>)
 8001324:	1d3c      	adds	r4, r7, #4
 8001326:	461d      	mov	r5, r3
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <display_init+0x94>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d132      	bne.n	80013a2 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <display_init+0x98>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	3b06      	subs	r3, #6
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <display_init+0x9c>)
 8001348:	801a      	strh	r2, [r3, #0]
 800134a:	f000 fa9f 	bl	800188c <displayBuffer2>
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <display_init+0x9c>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <display_init+0xa0>)
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <display_init+0xa4>)
 800135c:	801a      	strh	r2, [r3, #0]
 800135e:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <display_init+0x98>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d80b      	bhi.n	8001380 <display_init+0x64>
 8001368:	2003      	movs	r0, #3
 800136a:	f003 f8db 	bl	8004524 <HAL_Delay>
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <display_init+0x98>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	3328      	adds	r3, #40	; 0x28
 8001376:	443b      	add	r3, r7
 8001378:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <display_init+0xa4>)
 800137e:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <display_init+0x98>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <display_init+0x98>)
 800138a:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <display_init+0x94>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	f7ff fe59 	bl	8001048 <SPI_command>
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <display_init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <display_init+0xa8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08009c28 	.word	0x08009c28
 80013b0:	200021d4 	.word	0x200021d4
 80013b4:	200021d5 	.word	0x200021d5
 80013b8:	200021d6 	.word	0x200021d6
 80013bc:	20000000 	.word	0x20000000
 80013c0:	200021d2 	.word	0x200021d2
 80013c4:	200021ce 	.word	0x200021ce

080013c8 <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <gfx_send+0x9c>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <gfx_send+0xa0>)
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <gfx_send+0xa4>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d902      	bls.n	80013ec <gfx_send+0x24>
 80013e6:	23fa      	movs	r3, #250	; 0xfa
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	e001      	b.n	80013f0 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80013ec:	23f8      	movs	r3, #248	; 0xf8
 80013ee:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	b2db      	uxtb	r3, r3
 8001406:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 8001408:	4639      	mov	r1, r7
 800140a:	2303      	movs	r3, #3
 800140c:	2203      	movs	r2, #3
 800140e:	4818      	ldr	r0, [pc, #96]	; (8001470 <gfx_send+0xa8>)
 8001410:	f006 fc43 	bl	8007c9a <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <gfx_send+0xa4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b11      	cmp	r3, #17
 800141a:	d103      	bne.n	8001424 <gfx_send+0x5c>
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <gfx_send+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	e005      	b.n	8001430 <gfx_send+0x68>
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <gfx_send+0xa4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <gfx_send+0xa4>)
 800142e:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <gfx_send+0x9c>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	f240 427f 	movw	r2, #1151	; 0x47f
 8001438:	4293      	cmp	r3, r2
 800143a:	d109      	bne.n	8001450 <gfx_send+0x88>
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <gfx_send+0x9c>)
 800143e:	2200      	movs	r2, #0
 8001440:	801a      	strh	r2, [r3, #0]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <gfx_send+0xac>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <gfx_send+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]

		}
 800144e:	e005      	b.n	800145c <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <gfx_send+0x9c>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <gfx_send+0x9c>)
 800145a:	801a      	strh	r2, [r3, #0]
		}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20002b02 	.word	0x20002b02
 8001468:	20002680 	.word	0x20002680
 800146c:	20002b04 	.word	0x20002b04
 8001470:	20003e38 	.word	0x20003e38
 8001474:	20002b3a 	.word	0x20002b3a

08001478 <gfx_clear>:
void gfx_clear(void){     // simple gfx ram clear ,beside feedback
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

	 for (n=0;n<1152 ;n=n+18)    {
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <gfx_clear+0x5c>)
 800147e:	2200      	movs	r2, #0
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	e01c      	b.n	80014be <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <gfx_clear+0x60>)
 8001486:	2202      	movs	r2, #2
 8001488:	801a      	strh	r2, [r3, #0]
 800148a:	e00e      	b.n	80014aa <gfx_clear+0x32>
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <gfx_clear+0x5c>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <gfx_clear+0x60>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a10      	ldr	r2, [pc, #64]	; (80014dc <gfx_clear+0x64>)
 800149a:	2100      	movs	r1, #0
 800149c:	54d1      	strb	r1, [r2, r3]
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <gfx_clear+0x60>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <gfx_clear+0x60>)
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <gfx_clear+0x60>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	2b11      	cmp	r3, #17
 80014b0:	d9ec      	bls.n	800148c <gfx_clear+0x14>
	 for (n=0;n<1152 ;n=n+18)    {
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <gfx_clear+0x5c>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	3312      	adds	r3, #18
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <gfx_clear+0x5c>)
 80014bc:	801a      	strh	r2, [r3, #0]
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <gfx_clear+0x5c>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80014c6:	d3dd      	bcc.n	8001484 <gfx_clear+0xc>
				}

                }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000d52 	.word	0x20000d52
 80014d8:	20000d74 	.word	0x20000d74
 80014dc:	20002680 	.word	0x20002680

080014e0 <display_process>:





void display_process(void){							// keep data processing here
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0


	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 80014e6:	4b63      	ldr	r3, [pc, #396]	; (8001674 <display_process+0x194>)
 80014e8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b62      	ldr	r3, [pc, #392]	; (8001678 <display_process+0x198>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d112      	bne.n	800151c <display_process+0x3c>
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <display_process+0x19c>)
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10d      	bne.n	800151c <display_process+0x3c>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001500:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <display_process+0x1a0>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d109      	bne.n	800151c <display_process+0x3c>
 8001508:	4b5e      	ldr	r3, [pc, #376]	; (8001684 <display_process+0x1a4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <display_process+0x3c>
 8001510:	4b5a      	ldr	r3, [pc, #360]	; (800167c <display_process+0x19c>)
 8001512:	2202      	movs	r2, #2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <display_process+0x1a0>)
 8001518:	2211      	movs	r2, #17
 800151a:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=123+(disp_stepper);  // write lcd3
 800151c:	4b58      	ldr	r3, [pc, #352]	; (8001680 <display_process+0x1a0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d906      	bls.n	8001532 <display_process+0x52>
 8001524:	4b56      	ldr	r3, [pc, #344]	; (8001680 <display_process+0x1a0>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	337b      	adds	r3, #123	; 0x7b
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b56      	ldr	r3, [pc, #344]	; (8001688 <display_process+0x1a8>)
 8001530:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=107+(disp_stepper);  // write feedback line
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <display_process+0x1a0>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d906      	bls.n	8001548 <display_process+0x68>
 800153a:	4b51      	ldr	r3, [pc, #324]	; (8001680 <display_process+0x1a0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	336b      	adds	r3, #107	; 0x6b
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b50      	ldr	r3, [pc, #320]	; (8001688 <display_process+0x1a8>)
 8001546:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <display_process+0x1ac>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b50      	ldr	r3, [pc, #320]	; (8001690 <display_process+0x1b0>)
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001554:	429a      	cmp	r2, r3
 8001556:	d014      	beq.n	8001582 <display_process+0xa2>
 8001558:	4b46      	ldr	r3, [pc, #280]	; (8001674 <display_process+0x194>)
 800155a:	f993 3000 	ldrsb.w	r3, [r3]
 800155e:	461a      	mov	r2, r3
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <display_process+0x198>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d10c      	bne.n	8001582 <display_process+0xa2>
 8001568:	4b49      	ldr	r3, [pc, #292]	; (8001690 <display_process+0x1b0>)
 800156a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <display_process+0x1b4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <display_process+0x1b0>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <display_process+0x1ac>)
 8001580:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <display_process+0x1a0>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d159      	bne.n	800163e <display_process+0x15e>
 800158a:	4b3a      	ldr	r3, [pc, #232]	; (8001674 <display_process+0x194>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	461a      	mov	r2, r3
 8001592:	4b39      	ldr	r3, [pc, #228]	; (8001678 <display_process+0x198>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d051      	beq.n	800163e <display_process+0x15e>
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <display_process+0x19c>)
 800159c:	f993 3000 	ldrsb.w	r3, [r3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d14c      	bne.n	800163e <display_process+0x15e>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <display_process+0x194>)
 80015a6:	f993 3000 	ldrsb.w	r3, [r3]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <display_process+0x198>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	da02      	bge.n	80015ba <display_process+0xda>
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <display_process+0x19c>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <display_process+0x194>)
 80015bc:	f993 3000 	ldrsb.w	r3, [r3]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <display_process+0x198>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dd02      	ble.n	80015d0 <display_process+0xf0>
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <display_process+0x19c>)
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	701a      	strb	r2, [r3, #0]
		//if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips

		//if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);


		enc2_tempC=enc2_dir;	   // loop back until change
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <display_process+0x198>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b25a      	sxtb	r2, r3
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <display_process+0x194>)
 80015d8:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <display_process+0x1b8>)
 80015dc:	f993 3000 	ldrsb.w	r3, [r3]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db14      	blt.n	800160e <display_process+0x12e>
 80015e4:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <display_process+0x1b8>)
 80015e6:	f993 3000 	ldrsb.w	r3, [r3]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <display_process+0x1bc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dc0c      	bgt.n	800160e <display_process+0x12e>
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <display_process+0x1b8>)
 80015f6:	f993 3000 	ldrsb.w	r3, [r3]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <display_process+0x19c>)
 80015fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b2db      	uxtb	r3, r3
 8001608:	b25a      	sxtb	r2, r3
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <display_process+0x1b8>)
 800160c:	701a      	strb	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=0; }
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <display_process+0x1b8>)
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da02      	bge.n	800161e <display_process+0x13e>
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <display_process+0x1b8>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=menu_title_count;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <display_process+0x1b8>)
 8001620:	f993 3000 	ldrsb.w	r3, [r3]
 8001624:	461a      	mov	r2, r3
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <display_process+0x1bc>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	dd04      	ble.n	8001638 <display_process+0x158>
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <display_process+0x1bc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b25a      	sxtb	r2, r3
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <display_process+0x1b8>)
 8001636:	701a      	strb	r2, [r3, #0]
		enc2_add=2;
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <display_process+0x19c>)
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <display_process+0x1a0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d167      	bne.n	8001716 <display_process+0x236>
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <display_process+0x19c>)
 8001648:	f993 3000 	ldrsb.w	r3, [r3]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d162      	bne.n	8001716 <display_process+0x236>
	{



	uint8_t crap_hold9=menu_title_lut[enc_out1]>>8;   // look up up menu_titles_final
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <display_process+0x1b8>)
 8001652:	f993 3000 	ldrsb.w	r3, [r3]
 8001656:	461a      	mov	r2, r3
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <display_process+0x1c0>)
 800165a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b29b      	uxth	r3, r3
 8001662:	71bb      	strb	r3, [r7, #6]
	if (crap_hold9==5) target_display=1;
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d11c      	bne.n	80016a4 <display_process+0x1c4>
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <display_process+0x1a4>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e01b      	b.n	80016aa <display_process+0x1ca>
 8001672:	bf00      	nop
 8001674:	200001b4 	.word	0x200001b4
 8001678:	200021c6 	.word	0x200021c6
 800167c:	200001b5 	.word	0x200001b5
 8001680:	200001b6 	.word	0x200001b6
 8001684:	20003ce3 	.word	0x20003ce3
 8001688:	200021d6 	.word	0x200021d6
 800168c:	20003ce2 	.word	0x20003ce2
 8001690:	200021c8 	.word	0x200021c8
 8001694:	20003c4c 	.word	0x20003c4c
 8001698:	200001ba 	.word	0x200001ba
 800169c:	20003c4a 	.word	0x20003c4a
 80016a0:	20003bc8 	.word	0x20003bc8
	else target_display=0;
 80016a4:	4b66      	ldr	r3, [pc, #408]	; (8001840 <display_process+0x360>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+112, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80016aa:	4866      	ldr	r0, [pc, #408]	; (8001844 <display_process+0x364>)
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4a65      	ldr	r2, [pc, #404]	; (8001848 <display_process+0x368>)
 80016b2:	4413      	add	r3, r2
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2208      	movs	r2, #8
 80016b8:	4619      	mov	r1, r3
 80016ba:	f008 f943 	bl	8009944 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4a61      	ldr	r2, [pc, #388]	; (8001848 <display_process+0x368>)
 80016c4:	4413      	add	r3, r2
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b60      	ldr	r3, [pc, #384]	; (800184c <display_process+0x36c>)
 80016ca:	6810      	ldr	r0, [r2, #0]
 80016cc:	6851      	ldr	r1, [r2, #4]
 80016ce:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 80016d0:	4a5f      	ldr	r2, [pc, #380]	; (8001850 <display_process+0x370>)
 80016d2:	463b      	mov	r3, r7
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	4611      	mov	r1, r2
 80016d8:	8019      	strh	r1, [r3, #0]
 80016da:	3302      	adds	r3, #2
 80016dc:	0c12      	lsrs	r2, r2, #16
 80016de:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <display_process+0x374>)
 80016e2:	f993 3000 	ldrsb.w	r3, [r3]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b5b      	ldr	r3, [pc, #364]	; (8001858 <display_process+0x378>)
 80016ec:	4413      	add	r3, r2
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	803b      	strh	r3, [r7, #0]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80016f4:	463b      	mov	r3, r7
 80016f6:	4618      	mov	r0, r3
 80016f8:	f008 f8f6 	bl	80098e8 <atoi>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b56      	ldr	r3, [pc, #344]	; (800185c <display_process+0x37c>)
 8001702:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001704:	4b55      	ldr	r3, [pc, #340]	; (800185c <display_process+0x37c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	4850      	ldr	r0, [pc, #320]	; (800184c <display_process+0x36c>)
 800170c:	f7ff fa1c 	bl	8000b48 <menu_vars>
 8001710:	4603      	mov	r3, r0
 8001712:	4a53      	ldr	r2, [pc, #332]	; (8001860 <display_process+0x380>)
 8001714:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <display_process+0x384>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <display_process+0x246>
 800171e:	4b51      	ldr	r3, [pc, #324]	; (8001864 <display_process+0x384>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d12b      	bne.n	800177e <display_process+0x29e>
	{ init_b= menu_title_lut[enc_out1]&127;    // max 127 for now , max is two pages
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <display_process+0x374>)
 8001728:	f993 3000 	ldrsb.w	r3, [r3]
 800172c:	461a      	mov	r2, r3
 800172e:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <display_process+0x388>)
 8001730:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <display_process+0x38c>)
 800173c:	801a      	strh	r2, [r3, #0]

	lcd_out3=*menu_vars_var;
 800173e:	4b48      	ldr	r3, [pc, #288]	; (8001860 <display_process+0x380>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <display_process+0x390>)
 8001748:	801a      	strh	r2, [r3, #0]
	default_menu3[init_b]=((lcd_out3&255)>>4)+48; lcd_temp=lcd_out3&127; enc_dir=lcd_temp;       } // force enc_dir
 800174a:	4b49      	ldr	r3, [pc, #292]	; (8001870 <display_process+0x390>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	111b      	asrs	r3, r3, #4
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4a44      	ldr	r2, [pc, #272]	; (800186c <display_process+0x38c>)
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	3330      	adds	r3, #48	; 0x30
 800175e:	b2d9      	uxtb	r1, r3
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <display_process+0x394>)
 8001762:	5499      	strb	r1, [r3, r2]
 8001764:	4b42      	ldr	r3, [pc, #264]	; (8001870 <display_process+0x390>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b41      	ldr	r3, [pc, #260]	; (8001878 <display_process+0x398>)
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	4b40      	ldr	r3, [pc, #256]	; (8001878 <display_process+0x398>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b21a      	sxth	r2, r3
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <display_process+0x39c>)
 800177c:	801a      	strh	r2, [r3, #0]

	if (disp_stepper==11) {default_menu3[120]=menu_index_list[enc_out1<<1];   	default_menu3[121]=menu_index_list[(enc_out1<<1)+1];}
 800177e:	4b39      	ldr	r3, [pc, #228]	; (8001864 <display_process+0x384>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b0b      	cmp	r3, #11
 8001784:	d112      	bne.n	80017ac <display_process+0x2cc>
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <display_process+0x374>)
 8001788:	f993 3000 	ldrsb.w	r3, [r3]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4a32      	ldr	r2, [pc, #200]	; (8001858 <display_process+0x378>)
 8001790:	5cd2      	ldrb	r2, [r2, r3]
 8001792:	4b38      	ldr	r3, [pc, #224]	; (8001874 <display_process+0x394>)
 8001794:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <display_process+0x374>)
 800179a:	f993 3000 	ldrsb.w	r3, [r3]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a2d      	ldr	r2, [pc, #180]	; (8001858 <display_process+0x378>)
 80017a4:	5cd2      	ldrb	r2, [r2, r3]
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <display_process+0x394>)
 80017a8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	if ((target_display) &&   (disp_stepper==11))      // write LFO.target display
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <display_process+0x360>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d016      	beq.n	80017e2 <display_process+0x302>
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <display_process+0x384>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b0b      	cmp	r3, #11
 80017ba:	d112      	bne.n	80017e2 <display_process+0x302>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <display_process+0x380>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
		if (target_tmp1>26) target_tmp1=26;    // check in case
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b1a      	cmp	r3, #26
 80017c8:	d901      	bls.n	80017ce <display_process+0x2ee>
 80017ca:	231a      	movs	r3, #26
 80017cc:	71fb      	strb	r3, [r7, #7]
		memcpy(default_menu3+119, *(menu_titles_final+target_tmp1),7);
 80017ce:	482c      	ldr	r0, [pc, #176]	; (8001880 <display_process+0x3a0>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <display_process+0x368>)
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2207      	movs	r2, #7
 80017dc:	4619      	mov	r1, r3
 80017de:	f008 f8b1 	bl	8009944 <memcpy>

		 		 	}



	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <display_process+0x384>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d109      	bne.n	80017fe <display_process+0x31e>
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <display_process+0x38c>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <display_process+0x3a4>)
 80017fc:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <display_process+0x384>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d117      	bne.n	8001836 <display_process+0x356>

		default_menu3[125]=potSource[380]+48;
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <display_process+0x3a8>)
 8001808:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800180c:	3330      	adds	r3, #48	; 0x30
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <display_process+0x394>)
 8001812:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		default_menu3[126]=potSource[381]+48; default_menu3[127]=potSource[382]+48; }  // write this straight after start ,ok
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <display_process+0x3a8>)
 8001818:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800181c:	3330      	adds	r3, #48	; 0x30
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <display_process+0x394>)
 8001822:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <display_process+0x3a8>)
 8001828:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800182c:	3330      	adds	r3, #48	; 0x30
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <display_process+0x394>)
 8001832:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f


}   // end o void
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20003ce3 	.word	0x20003ce3
 8001844:	200004a8 	.word	0x200004a8
 8001848:	20000538 	.word	0x20000538
 800184c:	20003c50 	.word	0x20003c50
 8001850:	08009c4c 	.word	0x08009c4c
 8001854:	200001ba 	.word	0x200001ba
 8001858:	20003c5c 	.word	0x20003c5c
 800185c:	20003c58 	.word	0x20003c58
 8001860:	20003c4c 	.word	0x20003c4c
 8001864:	200001b6 	.word	0x200001b6
 8001868:	20003bc8 	.word	0x20003bc8
 800186c:	200021d6 	.word	0x200021d6
 8001870:	20002b38 	.word	0x20002b38
 8001874:	20000438 	.word	0x20000438
 8001878:	20003ce2 	.word	0x20003ce2
 800187c:	200021c8 	.word	0x200021c8
 8001880:	200004af 	.word	0x200004af
 8001884:	20002b05 	.word	0x20002b05
 8001888:	20000bb8 	.word	0x20000bb8

0800188c <displayBuffer2>:





void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters
init_b=init_b&127;
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <displayBuffer2+0x104>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <displayBuffer2+0x104>)
 800189e:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint8_t init_x=(init_b & 15)+2 ;    // +2 important  2-17 hor char pos
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <displayBuffer2+0x104>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3302      	adds	r3, #2
 80018ae:	71bb      	strb	r3, [r7, #6]
uint8_t init_x2=(init_b>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <displayBuffer2+0x104>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	717b      	strb	r3, [r7, #5]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 80018be:	797b      	ldrb	r3, [r7, #5]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	00d2      	lsls	r2, r2, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	807b      	strh	r3, [r7, #2]
uint16_t store_x;


store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 80018d4:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <displayBuffer2+0x104>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <displayBuffer2+0x108>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b2f      	subs	r3, #47	; 0x2f
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <displayBuffer2+0x10c>)
 80018ec:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <displayBuffer2+0x10c>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <displayBuffer2+0x110>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d11a      	bne.n	8001934 <displayBuffer2+0xa8>
			for (d_count=0;d_count<8;d_count++){
 80018fe:	2300      	movs	r3, #0
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	e013      	b.n	800192c <displayBuffer2+0xa0>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	883b      	ldrh	r3, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <displayBuffer2+0x114>)
 800190c:	5cd1      	ldrb	r1, [r2, r3]
 800190e:	8878      	ldrh	r0, [r7, #2]
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4403      	add	r3, r0
 800191c:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <displayBuffer2+0x118>)
 8001924:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	3301      	adds	r3, #1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b07      	cmp	r3, #7
 8001930:	d9e8      	bls.n	8001904 <displayBuffer2+0x78>
 8001932:	e016      	b.n	8001962 <displayBuffer2+0xd6>
			}

		else for (d_count=0;d_count<8;d_count++){
 8001934:	2300      	movs	r3, #0
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	e010      	b.n	800195c <displayBuffer2+0xd0>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	883b      	ldrh	r3, [r7, #0]
 800193e:	18d1      	adds	r1, r2, r3
 8001940:	8878      	ldrh	r0, [r7, #2]
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4403      	add	r3, r0
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <displayBuffer2+0x114>)
 8001950:	5c51      	ldrb	r1, [r2, r1]
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <displayBuffer2+0x118>)
 8001954:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	3301      	adds	r3, #1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d9eb      	bls.n	800193a <displayBuffer2+0xae>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <displayBuffer2+0x110>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b11      	cmp	r3, #17
 8001968:	d106      	bne.n	8001978 <displayBuffer2+0xec>
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <displayBuffer2+0x110>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <displayBuffer2+0x11c>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8001976:	e005      	b.n	8001984 <displayBuffer2+0xf8>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <displayBuffer2+0x110>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <displayBuffer2+0x110>)
 8001982:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	200021d6 	.word	0x200021d6
 8001994:	20000438 	.word	0x20000438
 8001998:	20000d50 	.word	0x20000d50
 800199c:	200001b6 	.word	0x200001b6
 80019a0:	200005a8 	.word	0x200005a8
 80019a4:	20002680 	.word	0x20002680
 80019a8:	200001b5 	.word	0x200001b5
 80019ac:	00000000 	.word	0x00000000

080019b0 <sampling>:

void sampling(void){						// 330 atm or 8.5ms
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 80019b6:	af00      	add	r7, sp, #0


uint8_t mask_i;


bank_write=0;
 80019b8:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <sampling+0x258>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80019be:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <sampling+0x25c>)
 80019c0:	881a      	ldrh	r2, [r3, #0]
 80019c2:	4b93      	ldr	r3, [pc, #588]	; (8001c10 <sampling+0x260>)
 80019c4:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80019cc:	f102 021c 	add.w	r2, r2, #28
 80019d0:	8013      	strh	r3, [r2, #0]

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80019d2:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <sampling+0x264>)
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <sampling+0x268>)
 80019da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80019de:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80019e2:	f102 020c 	add.w	r2, r2, #12
 80019e6:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;

float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80019e8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80019ec:	f103 030c 	add.w	r3, r3, #12
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da00      	bge.n	80019f8 <sampling+0x48>
 80019f6:	331f      	adds	r3, #31
 80019f8:	115b      	asrs	r3, r3, #5
 80019fa:	461a      	mov	r2, r3
 80019fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a00:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001a10:	f103 0308 	add.w	r3, r3, #8
 8001a14:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001a18:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001a1c:	f103 0308 	add.w	r3, r3, #8
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8001c1c <sampling+0x26c>
 8001a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001a30:	f103 0308 	add.w	r3, r3, #8
 8001a34:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001a38:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a3c:	f103 0318 	add.w	r3, r3, #24
 8001a40:	2244      	movs	r2, #68	; 0x44
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f007 ff8b 	bl	8009960 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001a4a:	4b75      	ldr	r3, [pc, #468]	; (8001c20 <sampling+0x270>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
 8001a50:	e00e      	b.n	8001a70 <sampling+0xc0>
 8001a52:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <sampling+0x270>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001a5c:	443b      	add	r3, r7
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f843 2c68 	str.w	r2, [r3, #-104]
 8001a64:	4b6e      	ldr	r3, [pc, #440]	; (8001c20 <sampling+0x270>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <sampling+0x270>)
 8001a6e:	801a      	strh	r2, [r3, #0]
 8001a70:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <sampling+0x270>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d9ec      	bls.n	8001a52 <sampling+0xa2>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <sampling+0x274>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <sampling+0x278>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <sampling+0x27c>)
 8001a8a:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8001a8e:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <sampling+0x274>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <sampling+0x278>)
 8001a94:	fba2 1203 	umull	r1, r2, r2, r3
 8001a98:	0952      	lsrs	r2, r2, #5
 8001a9a:	2164      	movs	r1, #100	; 0x64
 8001a9c:	fb01 f202 	mul.w	r2, r1, r2
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4a62      	ldr	r2, [pc, #392]	; (8001c30 <sampling+0x280>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	08db      	lsrs	r3, r3, #3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b5e      	ldr	r3, [pc, #376]	; (8001c2c <sampling+0x27c>)
 8001ab2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <sampling+0x274>)
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <sampling+0x280>)
 8001abc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac0:	08d9      	lsrs	r1, r3, #3
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b56      	ldr	r3, [pc, #344]	; (8001c2c <sampling+0x27c>)
 8001ad2:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <sampling+0x284>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]

//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001adc:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <sampling+0x288>)
 8001ade:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <sampling+0x28c>)
 8001aee:	220f      	movs	r2, #15
 8001af0:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <sampling+0x28c>)
 8001af4:	889b      	ldrh	r3, [r3, #4]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d017      	beq.n	8001b2e <sampling+0x17e>
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <sampling+0x28c>)
 8001b00:	889b      	ldrh	r3, [r3, #4]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001b0a:	443b      	add	r3, r7
 8001b0c:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001b10:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b1a:	f102 0215 	add.w	r2, r2, #21
 8001b1e:	7013      	strb	r3, [r2, #0]
 8001b20:	237f      	movs	r3, #127	; 0x7f
 8001b22:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b26:	f102 0216 	add.w	r2, r2, #22
 8001b2a:	7013      	strb	r3, [r2, #0]
 8001b2c:	e013      	b.n	8001b56 <sampling+0x1a6>
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <sampling+0x28c>)
 8001b30:	889b      	ldrh	r3, [r3, #4]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001b3a:	443b      	add	r3, r7
 8001b3c:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001b40:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b44:	f102 0216 	add.w	r2, r2, #22
 8001b48:	7013      	strb	r3, [r2, #0]
 8001b4a:	237f      	movs	r3, #127	; 0x7f
 8001b4c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b50:	f102 0215 	add.w	r2, r2, #21
 8001b54:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <sampling+0x290>)
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d146      	bne.n	8001bec <sampling+0x23c>
 8001b5e:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <sampling+0x290>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fdb2 	bl	80006d0 <__aeabi_i2d>
 8001b6c:	a322      	add	r3, pc, #136	; (adr r3, 8001bf8 <sampling+0x248>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fb31 	bl	80001d8 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe fe11 	bl	80007a4 <__aeabi_d2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a2f      	ldr	r2, [pc, #188]	; (8001c44 <sampling+0x294>)
 8001b86:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <sampling+0x290>)
 8001b8a:	785b      	ldrb	r3, [r3, #1]
 8001b8c:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fd9d 	bl	80006d0 <__aeabi_i2d>
 8001b96:	a31a      	add	r3, pc, #104	; (adr r3, 8001c00 <sampling+0x250>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fb1c 	bl	80001d8 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe fdfc 	bl	80007a4 <__aeabi_d2f>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <sampling+0x290>)
 8001bb0:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <sampling+0x294>)
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <sampling+0x294>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <sampling+0x294>)
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <sampling+0x290>)
 8001bca:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <sampling+0x290>)
 8001bd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <sampling+0x290>)
 8001bda:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <sampling+0x290>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <sampling+0x290>)
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <sampling+0x270>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	e0e9      	b.n	8001dc8 <sampling+0x418>
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	47ae147b 	.word	0x47ae147b
 8001bfc:	3f947ae1 	.word	0x3f947ae1
 8001c00:	47ae147b 	.word	0x47ae147b
 8001c04:	3f847ae1 	.word	0x3f847ae1
 8001c08:	200001b2 	.word	0x200001b2
 8001c0c:	2000157e 	.word	0x2000157e
 8001c10:	20000d72 	.word	0x20000d72
 8001c14:	20003b94 	.word	0x20003b94
 8001c18:	2000253c 	.word	0x2000253c
 8001c1c:	42a00000 	.word	0x42a00000
 8001c20:	20000d74 	.word	0x20000d74
 8001c24:	20002b38 	.word	0x20002b38
 8001c28:	51eb851f 	.word	0x51eb851f
 8001c2c:	20000bb8 	.word	0x20000bb8
 8001c30:	cccccccd 	.word	0xcccccccd
 8001c34:	200021a0 	.word	0x200021a0
 8001c38:	08009c50 	.word	0x08009c50
 8001c3c:	200001a8 	.word	0x200001a8
 8001c40:	20003098 	.word	0x20003098
 8001c44:	20002b34 	.word	0x20002b34

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8001c48:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <sampling+0x4b0>)
 8001c4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c4e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001e64 <sampling+0x4b4>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d50e      	bpl.n	8001c7a <sampling+0x2ca>
 8001c5c:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <sampling+0x4b0>)
 8001c5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c62:	4b81      	ldr	r3, [pc, #516]	; (8001e68 <sampling+0x4b8>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <sampling+0x4b0>)
 8001c6e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001c72:	4b7b      	ldr	r3, [pc, #492]	; (8001e60 <sampling+0x4b0>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4a7a      	ldr	r2, [pc, #488]	; (8001e60 <sampling+0x4b0>)
 8001c78:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 8001c7a:	4b79      	ldr	r3, [pc, #484]	; (8001e60 <sampling+0x4b0>)
 8001c7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c80:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001e6c <sampling+0x4bc>
 8001c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d522      	bpl.n	8001cd4 <sampling+0x324>
 8001c8e:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <sampling+0x4b0>)
 8001c90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c94:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001e70 <sampling+0x4c0>
 8001c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	dd18      	ble.n	8001cd4 <sampling+0x324>
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <sampling+0x4b0>)
 8001ca4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ca8:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <sampling+0x4b8>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb2:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <sampling+0x4b0>)
 8001cb4:	edc3 7a02 	vstr	s15, [r3, #8]
 8001cb8:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <sampling+0x4b0>)
 8001cba:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cbe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001e74 <sampling+0x4c4>
 8001cc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cc6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001e6c <sampling+0x4bc>
 8001cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cce:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <sampling+0x4b0>)
 8001cd0:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8001cd4:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <sampling+0x4b0>)
 8001cd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cda:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001e78 <sampling+0x4c8>
 8001cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	dd17      	ble.n	8001d18 <sampling+0x368>
 8001ce8:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <sampling+0x4b0>)
 8001cea:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cee:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001e7c <sampling+0x4cc>
 8001cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	d50d      	bpl.n	8001d18 <sampling+0x368>
 8001cfc:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <sampling+0x4b0>)
 8001cfe:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <sampling+0x4d0>)
 8001d00:	619a      	str	r2, [r3, #24]
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <sampling+0x4b0>)
 8001d04:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d08:	4b55      	ldr	r3, [pc, #340]	; (8001e60 <sampling+0x4b0>)
 8001d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d12:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <sampling+0x4b0>)
 8001d14:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8001d18:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <sampling+0x4b0>)
 8001d1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d1e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001e84 <sampling+0x4d4>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	dd1e      	ble.n	8001d6a <sampling+0x3ba>
 8001d2c:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <sampling+0x4b0>)
 8001d2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d32:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001e88 <sampling+0x4d8>
 8001d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d514      	bpl.n	8001d6a <sampling+0x3ba>
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <sampling+0x4b0>)
 8001d42:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <sampling+0x4b0>)
 8001d48:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <sampling+0x4b0>)
 8001d52:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d56:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <sampling+0x4b0>)
 8001d58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001e88 <sampling+0x4d8>
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <sampling+0x4b0>)
 8001d66:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <sampling+0x4b0>)
 8001d6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d70:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001e8c <sampling+0x4dc>
 8001d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	dd06      	ble.n	8001d8c <sampling+0x3dc>
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <sampling+0x4b0>)
 8001d80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <sampling+0x4b0>)
 8001d88:	4a41      	ldr	r2, [pc, #260]	; (8001e90 <sampling+0x4e0>)
 8001d8a:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 8001d8c:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <sampling+0x4b0>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fcaf 	bl	80006f4 <__aeabi_f2d>
 8001d96:	a330      	add	r3, pc, #192	; (adr r3, 8001e58 <sampling+0x4a8>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fa1c 	bl	80001d8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	493b      	ldr	r1, [pc, #236]	; (8001e94 <sampling+0x4e4>)
 8001da6:	8809      	ldrh	r1, [r1, #0]
 8001da8:	460c      	mov	r4, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe fcf9 	bl	80007a4 <__aeabi_d2f>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4938      	ldr	r1, [pc, #224]	; (8001e98 <sampling+0x4e8>)
 8001db6:	00a3      	lsls	r3, r4, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <sampling+0x4e4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <sampling+0x4e4>)
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <sampling+0x4e4>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	2bff      	cmp	r3, #255	; 0xff
 8001dce:	f67f af3b 	bls.w	8001c48 <sampling+0x298>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <sampling+0x4e4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]
 8001dd8:	e394      	b.n	8002504 <sampling+0xb54>

	i_total=i+sample_pointB;
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <sampling+0x4e4>)
 8001ddc:	881a      	ldrh	r2, [r3, #0]
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <sampling+0x4ec>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001de8:	f102 0202 	add.w	r2, r2, #2
 8001dec:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;   //   0-8 steps
 8001dee:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <sampling+0x4e4>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <sampling+0x4f0>)
 8001dfa:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <sampling+0x4f4>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <sampling+0x4f4>)
 8001e06:	4413      	add	r3, r2
 8001e08:	789b      	ldrb	r3, [r3, #2]
 8001e0a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001e0e:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <sampling+0x4e4>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <sampling+0x4f8>)
 8001e18:	5cd2      	ldrb	r2, [r2, r3]
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <sampling+0x4e4>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	0912      	lsrs	r2, r2, #4
 8001e22:	b2d1      	uxtb	r1, r2
 8001e24:	4a21      	ldr	r2, [pc, #132]	; (8001eac <sampling+0x4fc>)
 8001e26:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <sampling+0x500>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001e30:	f102 020c 	add.w	r2, r2, #12
 8001e34:	8812      	ldrh	r2, [r2, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d83e      	bhi.n	8001eb8 <sampling+0x508>
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <sampling+0x504>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <sampling+0x504>)
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <sampling+0x500>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	801a      	strh	r2, [r3, #0]
 8001e52:	e037      	b.n	8001ec4 <sampling+0x514>
 8001e54:	f3af 8000 	nop.w
 8001e58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e5c:	3f50624d 	.word	0x3f50624d
 8001e60:	20003098 	.word	0x20003098
 8001e64:	447a0000 	.word	0x447a0000
 8001e68:	20002b34 	.word	0x20002b34
 8001e6c:	44bb8000 	.word	0x44bb8000
 8001e70:	4479c000 	.word	0x4479c000
 8001e74:	43fa0000 	.word	0x43fa0000
 8001e78:	44bb6000 	.word	0x44bb6000
 8001e7c:	44fa0000 	.word	0x44fa0000
 8001e80:	43fa0000 	.word	0x43fa0000
 8001e84:	44f9e000 	.word	0x44f9e000
 8001e88:	451c4000 	.word	0x451c4000
 8001e8c:	453b8000 	.word	0x453b8000
 8001e90:	457a0000 	.word	0x457a0000
 8001e94:	20000d74 	.word	0x20000d74
 8001e98:	20001d88 	.word	0x20001d88
 8001e9c:	20000d72 	.word	0x20000d72
 8001ea0:	200022e0 	.word	0x200022e0
 8001ea4:	20003b94 	.word	0x20003b94
 8001ea8:	20000bb8 	.word	0x20000bb8
 8001eac:	20000a38 	.word	0x20000a38
 8001eb0:	200021ca 	.word	0x200021ca
 8001eb4:	2000219e 	.word	0x2000219e
 8001eb8:	4ba4      	ldr	r3, [pc, #656]	; (800214c <sampling+0x79c>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4ba2      	ldr	r3, [pc, #648]	; (800214c <sampling+0x79c>)
 8001ec2:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001eca:	f102 021c 	add.w	r2, r2, #28
 8001ece:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq.pos)) { 					// next note step 140ms
 8001ed0:	4b9f      	ldr	r3, [pc, #636]	; (8002150 <sampling+0x7a0>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b9e      	ldr	r3, [pc, #632]	; (8002154 <sampling+0x7a4>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d00c      	beq.n	8001efc <sampling+0x54c>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001ee2:	4b9b      	ldr	r3, [pc, #620]	; (8002150 <sampling+0x7a0>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b99      	ldr	r3, [pc, #612]	; (8002154 <sampling+0x7a4>)
 8001eee:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001ef6:	f102 021c 	add.w	r2, r2, #28
 8001efa:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos
 8001efc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f00:	f103 031c 	add.w	r3, r3, #28
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8104 	beq.w	8002114 <sampling+0x764>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note[].pitch[10]);


		note[2].timeshift=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001f0c:	4b92      	ldr	r3, [pc, #584]	; (8002158 <sampling+0x7a8>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b8f      	ldr	r3, [pc, #572]	; (800215c <sampling+0x7ac>)
 8001f1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		note[3].timeshift=(adc_values[1]>>2)&15;
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <sampling+0x7a8>)
 8001f24:	885b      	ldrh	r3, [r3, #2]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b8a      	ldr	r3, [pc, #552]	; (800215c <sampling+0x7ac>)
 8001f34:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36


		seq.loop[2]=((note[2].timeshift+(seq.pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001f38:	4b88      	ldr	r3, [pc, #544]	; (800215c <sampling+0x7ac>)
 8001f3a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001f3e:	4b85      	ldr	r3, [pc, #532]	; (8002154 <sampling+0x7a4>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b80      	ldr	r3, [pc, #512]	; (8002154 <sampling+0x7a4>)
 8001f54:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

		//seq.loop[3]=(note[3].timeshift+(( seq.pos&31 ) >>2)) & 15;  // quater speed
			seq.loop[3]=((note[3].timeshift+(seq.pos&15))&15); //sets looping point in sequence this is full 16 note
 8001f58:	4b80      	ldr	r3, [pc, #512]	; (800215c <sampling+0x7ac>)
 8001f5a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8001f5e:	4b7d      	ldr	r3, [pc, #500]	; (8002154 <sampling+0x7a4>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <sampling+0x7a4>)
 8001f6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			seq.loop[4]=((note[2].timeshift+(seq.pos&7))&15);
 8001f72:	4b7a      	ldr	r3, [pc, #488]	; (800215c <sampling+0x7ac>)
 8001f74:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001f78:	4b76      	ldr	r3, [pc, #472]	; (8002154 <sampling+0x7a4>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b71      	ldr	r3, [pc, #452]	; (8002154 <sampling+0x7a4>)
 8001f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		//seq.loop[4]=((note[2].timeshift+((seq.pos&15)>>1))&15); // half speed

		note[2].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[2].transpose>>4);  //loop 8 notes from pos and x times
 8001f92:	4b70      	ldr	r3, [pc, #448]	; (8002154 <sampling+0x7a4>)
 8001f94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <sampling+0x7a4>)
 8001f9c:	4413      	add	r3, r2
 8001f9e:	7cdb      	ldrb	r3, [r3, #19]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	; (800215c <sampling+0x7ac>)
 8001fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	; (800215c <sampling+0x7ac>)
 8001fb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		note[3].pitch=(seq.notes1[seq.loop[3]]>>4);  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <sampling+0x7a4>)
 8001fba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b64      	ldr	r3, [pc, #400]	; (8002154 <sampling+0x7a4>)
 8001fc2:	4413      	add	r3, r2
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <sampling+0x7ac>)
 8001fcc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001fd0:	4b62      	ldr	r3, [pc, #392]	; (800215c <sampling+0x7ac>)
 8001fd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01f      	beq.n	800201a <sampling+0x66a>
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <sampling+0x7ac>)
 8001fdc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <sampling+0x7ac>)
 8001fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b5b      	ldr	r3, [pc, #364]	; (800215c <sampling+0x7ac>)
 8001ff0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <sampling+0x7b0>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	80da      	strh	r2, [r3, #6]
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <sampling+0x7b4>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	4b57      	ldr	r3, [pc, #348]	; (8002164 <sampling+0x7b4>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	b29b      	uxth	r3, r3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8002014:	443b      	add	r3, r7
 8002016:	f843 2c68 	str.w	r2, [r3, #-104]


	//if ((note[5].pitch) && (adsr_toggle[5]==2)) {note[5].pitch=note[5].pitch; one_shot=0;}  // grab note when on ,one shot also , also delete


	note[5].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[5].transpose>>4);  //
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <sampling+0x7a4>)
 800201c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002020:	461a      	mov	r2, r3
 8002022:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <sampling+0x7a4>)
 8002024:	4413      	add	r3, r2
 8002026:	7cdb      	ldrb	r3, [r3, #19]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b4b      	ldr	r3, [pc, #300]	; (800215c <sampling+0x7ac>)
 800202e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	b2db      	uxtb	r3, r3
 8002036:	4413      	add	r3, r2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <sampling+0x7ac>)
 800203c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52





	note[5].pitch=MajorNote[note[5].pitch];    //this is for sine skip mask
 8002040:	4b46      	ldr	r3, [pc, #280]	; (800215c <sampling+0x7ac>)
 8002042:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002046:	461a      	mov	r2, r3
 8002048:	4b47      	ldr	r3, [pc, #284]	; (8002168 <sampling+0x7b8>)
 800204a:	5c9a      	ldrb	r2, [r3, r2]
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <sampling+0x7ac>)
 800204e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	//note[5].pitch=11; // works ok with single note @24 but   fails on other
	note[5].tuned=sine_lut[note[5].pitch];	//sets freq ,1.0594  * 16536 =17518  ,
 8002052:	4b42      	ldr	r3, [pc, #264]	; (800215c <sampling+0x7ac>)
 8002054:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002058:	461a      	mov	r2, r3
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <sampling+0x7bc>)
 800205c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002060:	4b3e      	ldr	r3, [pc, #248]	; (800215c <sampling+0x7ac>)
 8002062:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <sampling+0x7ac>)
 8002068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800206c:	461a      	mov	r2, r3
 800206e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	129b      	asrs	r3, r3, #10
 8002078:	b29a      	uxth	r2, r3
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <sampling+0x7ac>)
 800207c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		mask_result =0;
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <sampling+0x7c0>)
 8002082:	2200      	movs	r2, #0
 8002084:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002086:	2300      	movs	r3, #0
 8002088:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800208c:	f102 021f 	add.w	r2, r2, #31
 8002090:	7013      	strb	r3, [r2, #0]
 8002092:	e038      	b.n	8002106 <sampling+0x756>

	if (note[mask_i].pitch) {tune_Accu=sample_Noteadd[MajorNote[note[mask_i].pitch]];   note[mask_i].tuned=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8002094:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002098:	f103 031f 	add.w	r3, r3, #31
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4a2f      	ldr	r2, [pc, #188]	; (800215c <sampling+0x7ac>)
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	4413      	add	r3, r2
 80020a4:	3302      	adds	r3, #2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d021      	beq.n	80020f0 <sampling+0x740>
 80020ac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020b0:	f103 031f 	add.w	r3, r3, #31
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <sampling+0x7ac>)
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	3302      	adds	r3, #2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <sampling+0x7b8>)
 80020c4:	5c9b      	ldrb	r3, [r3, r2]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <sampling+0x7c4>)
 80020ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <sampling+0x7c8>)
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <sampling+0x7c8>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020dc:	f103 031f 	add.w	r3, r3, #31
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b291      	uxth	r1, r2
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <sampling+0x7ac>)
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4413      	add	r3, r2
 80020ea:	330e      	adds	r3, #14
 80020ec:	460a      	mov	r2, r1
 80020ee:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80020f0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020f4:	f103 031f 	add.w	r3, r3, #31
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002100:	f102 021f 	add.w	r2, r2, #31
 8002104:	7013      	strb	r3, [r2, #0]
 8002106:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800210a:	f103 031f 	add.w	r3, r3, #31
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d9bf      	bls.n	8002094 <sampling+0x6e4>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <sampling+0x7b4>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 81eb 	bne.w	80024f8 <sampling+0xb48>
freq_temp=0;
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800212a:	f102 0214 	add.w	r2, r2, #20
 800212e:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002138:	f102 021c 	add.w	r2, r2, #28
 800213c:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 800213e:	2300      	movs	r3, #0
 8002140:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002144:	f102 021b 	add.w	r2, r2, #27
 8002148:	7013      	strb	r3, [r2, #0]
 800214a:	e193      	b.n	8002474 <sampling+0xac4>
 800214c:	200021ca 	.word	0x200021ca
 8002150:	2000219e 	.word	0x2000219e
 8002154:	20003b94 	.word	0x20003b94
 8002158:	200001a8 	.word	0x200001a8
 800215c:	20003b24 	.word	0x20003b24
 8002160:	20002188 	.word	0x20002188
 8002164:	20000d74 	.word	0x20000d74
 8002168:	08009c80 	.word	0x08009c80
 800216c:	20000144 	.word	0x20000144
 8002170:	20001580 	.word	0x20001580
 8002174:	08009c9c 	.word	0x08009c9c
 8002178:	20000d4c 	.word	0x20000d4c
			//LFO[l].rate=potSource[130+l];   //grab dat for now
			freq_temp=LFO[l].rate +1;  // rate. this needs a little log
 800217c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002180:	f103 031b 	add.w	r3, r3, #27
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4a45      	ldr	r2, [pc, #276]	; (800229c <sampling+0x8ec>)
 8002188:	015b      	lsls	r3, r3, #5
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002198:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800219c:	f103 0314 	add.w	r3, r3, #20
 80021a0:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*freq_temp;
 80021a4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021a8:	f103 0314 	add.w	r3, r3, #20
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021b8:	f103 031c 	add.w	r3, r3, #28
 80021bc:	edc3 7a00 	vstr	s15, [r3]
			freq_temp=freq2_temp/64;
 80021c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021c4:	f103 031c 	add.w	r3, r3, #28
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	eddf 6a34 	vldr	s13, [pc, #208]	; 80022a0 <sampling+0x8f0>
 80021d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021d8:	f103 0314 	add.w	r3, r3, #20
 80021dc:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 80021e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021e4:	f103 0314 	add.w	r3, r3, #20
 80021e8:	ed93 7a00 	vldr	s14, [r3]
 80021ec:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80021f0:	f103 0308 	add.w	r3, r3, #8
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002200:	f103 031c 	add.w	r3, r3, #28
 8002204:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8002208:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800220c:	f103 031b 	add.w	r3, r3, #27
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <sampling+0x8f4>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	4923      	ldr	r1, [pc, #140]	; (80022a8 <sampling+0x8f8>)
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4403      	add	r3, r0
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002230:	f103 031c 	add.w	r3, r3, #28
 8002234:	ed93 7a00 	vldr	s14, [r3]
 8002238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002240:	f103 0314 	add.w	r3, r3, #20
 8002244:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8002248:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800224c:	f103 0314 	add.w	r3, r3, #20
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80022ac <sampling+0x8fc>
 8002258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	dd26      	ble.n	80022b0 <sampling+0x900>
 8002262:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002266:	f103 031b 	add.w	r3, r3, #27
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <sampling+0x8f4>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002276:	f103 0314 	add.w	r3, r3, #20
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80022ac <sampling+0x8fc>
 8002282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <sampling+0x8f8>)
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4403      	add	r3, r0
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	edc3 7a00 	vstr	s15, [r3]
 800229a:	e01f      	b.n	80022dc <sampling+0x92c>
 800229c:	20002f58 	.word	0x20002f58
 80022a0:	42800000 	.word	0x42800000
 80022a4:	200022e0 	.word	0x200022e0
 80022a8:	200022e4 	.word	0x200022e4
 80022ac:	46800000 	.word	0x46800000
 80022b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80022b4:	f103 031b 	add.w	r3, r3, #27
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	4b9b      	ldr	r3, [pc, #620]	; (8002528 <sampling+0xb78>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	499a      	ldr	r1, [pc, #616]	; (800252c <sampling+0xb7c>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4403      	add	r3, r0
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80022d4:	f102 0214 	add.w	r2, r2, #20
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 80022dc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80022e0:	f103 031b 	add.w	r3, r3, #27
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	4b90      	ldr	r3, [pc, #576]	; (8002528 <sampling+0xb78>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	498f      	ldr	r1, [pc, #572]	; (800252c <sampling+0xb7c>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4403      	add	r3, r0
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002302:	f102 0214 	add.w	r2, r2, #20
 8002306:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002308:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800230c:	f103 0314 	add.w	r3, r3, #20
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f7fe f9ef 	bl	80006f4 <__aeabi_f2d>
 8002316:	a380      	add	r3, pc, #512	; (adr r3, 8002518 <sampling+0xb68>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ff5c 	bl	80001d8 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fa3c 	bl	80007a4 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002332:	f102 0214 	add.w	r2, r2, #20
 8002336:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems ok   , cmsis is ok
 8002338:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800233c:	f103 0314 	add.w	r3, r3, #20
 8002340:	ed93 0a00 	vldr	s0, [r3]
 8002344:	f007 fa8c 	bl	8009860 <arm_sin_f32>
 8002348:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800234c:	f103 031c 	add.w	r3, r3, #28
 8002350:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*LFO[l].depth*51;   // depth
 8002354:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002358:	f103 031b 	add.w	r3, r3, #27
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4a74      	ldr	r2, [pc, #464]	; (8002530 <sampling+0xb80>)
 8002360:	015b      	lsls	r3, r3, #5
 8002362:	4413      	add	r3, r2
 8002364:	3301      	adds	r3, #1
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002370:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002374:	f103 031c 	add.w	r3, r3, #28
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002380:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002534 <sampling+0xb84>
 8002384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002388:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800238c:	f103 0314 	add.w	r3, r3, #20
 8002390:	edc3 7a00 	vstr	s15, [r3]
		if (freq_temp>8195)  freq_temp=8195;
 8002394:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002398:	f103 0314 	add.w	r3, r3, #20
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002538 <sampling+0xb88>
 80023a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	dd05      	ble.n	80023ba <sampling+0xa0a>
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <sampling+0xb8c>)
 80023b0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023b4:	f102 0214 	add.w	r2, r2, #20
 80023b8:	6013      	str	r3, [r2, #0]
		if (freq_temp<-8195)  freq_temp=-8195;   // clip to 13bit
 80023ba:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023be:	f103 0314 	add.w	r3, r3, #20
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002540 <sampling+0xb90>
 80023ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	d505      	bpl.n	80023e0 <sampling+0xa30>
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <sampling+0xb94>)
 80023d6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023da:	f102 0214 	add.w	r2, r2, #20
 80023de:	6013      	str	r3, [r2, #0]
		lfo_out[l] [i_frac]=freq_temp+8195; // ok now     , 8 steps per i loop , 14 bit
 80023e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023e4:	f103 0314 	add.w	r3, r3, #20
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002538 <sampling+0xb88>
 80023f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80023f8:	f103 031b 	add.w	r3, r3, #27
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <sampling+0xb78>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461c      	mov	r4, r3
 8002404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002408:	ee17 3a90 	vmov	r3, s15
 800240c:	b298      	uxth	r0, r3
 800240e:	494e      	ldr	r1, [pc, #312]	; (8002548 <sampling+0xb98>)
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4423      	add	r3, r4
 800241a:	4602      	mov	r2, r0
 800241c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		LFO[l].out[i_frac]=lfo_out[l] [i_frac];  // just copy for now
 8002420:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002424:	f103 031b 	add.w	r3, r3, #27
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <sampling+0xb78>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461d      	mov	r5, r3
 8002430:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002434:	f103 031b 	add.w	r3, r3, #27
 8002438:	7819      	ldrb	r1, [r3, #0]
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <sampling+0xb78>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461c      	mov	r4, r3
 8002440:	4841      	ldr	r0, [pc, #260]	; (8002548 <sampling+0xb98>)
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	442b      	add	r3, r5
 800244c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8002450:	4a37      	ldr	r2, [pc, #220]	; (8002530 <sampling+0xb80>)
 8002452:	010b      	lsls	r3, r1, #4
 8002454:	4423      	add	r3, r4
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	4602      	mov	r2, r0
 800245c:	80da      	strh	r2, [r3, #6]
		for (l=0;l<10;l++){   //current lfo setup , messy
 800245e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002462:	f103 031b 	add.w	r3, r3, #27
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800246e:	f102 021b 	add.w	r2, r2, #27
 8002472:	7013      	strb	r3, [r2, #0]
 8002474:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002478:	f103 031b 	add.w	r3, r3, #27
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b09      	cmp	r3, #9
 8002480:	f67f ae7c 	bls.w	800217c <sampling+0x7cc>
		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <sampling+0xb78>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <sampling+0xb98>)
 800248c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f91d 	bl	80006d0 <__aeabi_i2d>
 8002496:	a322      	add	r3, pc, #136	; (adr r3, 8002520 <sampling+0xb70>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fd fe9c 	bl	80001d8 <__aeabi_dmul>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4920      	ldr	r1, [pc, #128]	; (8002528 <sampling+0xb78>)
 80024a6:	7809      	ldrb	r1, [r1, #0]
 80024a8:	460c      	mov	r4, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe f979 	bl	80007a4 <__aeabi_d2f>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4925      	ldr	r1, [pc, #148]	; (800254c <sampling+0xb9c>)
 80024b6:	00a3      	lsls	r3, r4, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 80024bc:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <sampling+0xb78>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <sampling+0xb98>)
 80024c2:	331e      	adds	r3, #30
 80024c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f901 	bl	80006d0 <__aeabi_i2d>
 80024ce:	a314      	add	r3, pc, #80	; (adr r3, 8002520 <sampling+0xb70>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fd fe80 	bl	80001d8 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4912      	ldr	r1, [pc, #72]	; (8002528 <sampling+0xb78>)
 80024de:	7809      	ldrb	r1, [r1, #0]
 80024e0:	460c      	mov	r4, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe f95d 	bl	80007a4 <__aeabi_d2f>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <sampling+0xb9c>)
 80024ee:	f104 0312 	add.w	r3, r4, #18
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <sampling+0xba0>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <sampling+0xba0>)
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <sampling+0xba0>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250c:	f4ff ac65 	bcc.w	8001dda <sampling+0x42a>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];
uint8_t sine_zero;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <sampling+0xba0>)
 8002512:	2200      	movs	r2, #0
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	e0fd      	b.n	8002714 <sampling+0xd64>
 8002518:	7bb1a72c 	.word	0x7bb1a72c
 800251c:	3f3921fa 	.word	0x3f3921fa
 8002520:	94fd52a7 	.word	0x94fd52a7
 8002524:	3f10de74 	.word	0x3f10de74
 8002528:	200022e0 	.word	0x200022e0
 800252c:	200022e4 	.word	0x200022e4
 8002530:	20002f58 	.word	0x20002f58
 8002534:	424c0000 	.word	0x424c0000
 8002538:	46000c00 	.word	0x46000c00
 800253c:	46000c00 	.word	0x46000c00
 8002540:	c6000c00 	.word	0xc6000c00
 8002544:	c6000c00 	.word	0xc6000c00
 8002548:	20002474 	.word	0x20002474
 800254c:	20002250 	.word	0x20002250
 8002550:	20000d74 	.word	0x20000d74
	i_total=i+sample_pointB;
 8002554:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <sampling+0xda4>)
 8002556:	881a      	ldrh	r2, [r3, #0]
 8002558:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <sampling+0xda8>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	4413      	add	r3, r2
 800255e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002562:	f102 0202 	add.w	r2, r2, #2
 8002566:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 8002568:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <sampling+0xda4>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	b29b      	uxth	r3, r3
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4b7a      	ldr	r3, [pc, #488]	; (800275c <sampling+0xdac>)
 8002574:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 8002576:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <sampling+0xdb0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7a      	ldr	r2, [pc, #488]	; (8002764 <sampling+0xdb4>)
 800257c:	89d2      	ldrh	r2, [r2, #14]
 800257e:	4413      	add	r3, r2
 8002580:	4a77      	ldr	r2, [pc, #476]	; (8002760 <sampling+0xdb0>)
 8002582:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002584:	4b76      	ldr	r3, [pc, #472]	; (8002760 <sampling+0xdb0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800258c:	db04      	blt.n	8002598 <sampling+0xbe8>
 800258e:	4b74      	ldr	r3, [pc, #464]	; (8002760 <sampling+0xdb0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	425b      	negs	r3, r3
 8002594:	4a72      	ldr	r2, [pc, #456]	; (8002760 <sampling+0xdb0>)
 8002596:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 8002598:	4b71      	ldr	r3, [pc, #452]	; (8002760 <sampling+0xdb0>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a71      	ldr	r2, [pc, #452]	; (8002764 <sampling+0xdb4>)
 800259e:	8bd2      	ldrh	r2, [r2, #30]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a6f      	ldr	r2, [pc, #444]	; (8002760 <sampling+0xdb0>)
 80025a4:	6053      	str	r3, [r2, #4]
		//	if (!(note[].pitch[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80025a6:	4b6e      	ldr	r3, [pc, #440]	; (8002760 <sampling+0xdb0>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025ae:	db04      	blt.n	80025ba <sampling+0xc0a>
 80025b0:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <sampling+0xdb0>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	425b      	negs	r3, r3
 80025b6:	4a6a      	ldr	r2, [pc, #424]	; (8002760 <sampling+0xdb0>)
 80025b8:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 80025ba:	4b69      	ldr	r3, [pc, #420]	; (8002760 <sampling+0xdb0>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4a69      	ldr	r2, [pc, #420]	; (8002764 <sampling+0xdb4>)
 80025c0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80025c2:	4413      	add	r3, r2
 80025c4:	4a66      	ldr	r2, [pc, #408]	; (8002760 <sampling+0xdb0>)
 80025c6:	6093      	str	r3, [r2, #8]
			//		if (!(note[].pitch[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 80025c8:	4b65      	ldr	r3, [pc, #404]	; (8002760 <sampling+0xdb0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025d0:	db04      	blt.n	80025dc <sampling+0xc2c>
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <sampling+0xdb0>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	425b      	negs	r3, r3
 80025d8:	4a61      	ldr	r2, [pc, #388]	; (8002760 <sampling+0xdb0>)
 80025da:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 80025dc:	4b60      	ldr	r3, [pc, #384]	; (8002760 <sampling+0xdb0>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a60      	ldr	r2, [pc, #384]	; (8002764 <sampling+0xdb4>)
 80025e2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 80025e4:	4413      	add	r3, r2
 80025e6:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <sampling+0xdb0>)
 80025e8:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note[].pitch[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <sampling+0xdb0>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025f2:	db04      	blt.n	80025fe <sampling+0xc4e>
 80025f4:	4b5a      	ldr	r3, [pc, #360]	; (8002760 <sampling+0xdb0>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	425b      	negs	r3, r3
 80025fa:	4a59      	ldr	r2, [pc, #356]	; (8002760 <sampling+0xdb0>)
 80025fc:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <sampling+0xdb0>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	4a58      	ldr	r2, [pc, #352]	; (8002764 <sampling+0xdb4>)
 8002604:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
 8002608:	4413      	add	r3, r2
 800260a:	4a55      	ldr	r2, [pc, #340]	; (8002760 <sampling+0xdb0>)
 800260c:	6113      	str	r3, [r2, #16]
								//	if (!(note[].pitch[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <sampling+0xdb0>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002616:	db04      	blt.n	8002622 <sampling+0xc72>
 8002618:	4b51      	ldr	r3, [pc, #324]	; (8002760 <sampling+0xdb0>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	425b      	negs	r3, r3
 800261e:	4a50      	ldr	r2, [pc, #320]	; (8002760 <sampling+0xdb0>)
 8002620:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002622:	4b51      	ldr	r3, [pc, #324]	; (8002768 <sampling+0xdb8>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <sampling+0xdb8>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <sampling+0xdb8>)
 8002630:	2200      	movs	r2, #0
 8002632:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002634:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <sampling+0xdb0>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	11db      	asrs	r3, r3, #7
 800263a:	4a4b      	ldr	r2, [pc, #300]	; (8002768 <sampling+0xdb8>)
 800263c:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input plus other
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <sampling+0xdb8>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b4a      	ldr	r3, [pc, #296]	; (800276c <sampling+0xdbc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800264c:	f102 0215 	add.w	r2, r2, #21
 8002650:	7812      	ldrb	r2, [r2, #0]
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	4a44      	ldr	r2, [pc, #272]	; (8002768 <sampling+0xdb8>)
 8002658:	6013      	str	r3, [r2, #0]
							//sample_Accu[0] = (sine_out*cross_fade[1]);  // sine out only
									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <sampling+0xdb0>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4a42      	ldr	r2, [pc, #264]	; (8002768 <sampling+0xdb8>)
 8002660:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <sampling+0xdb8>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800266a:	f102 0216 	add.w	r2, r2, #22
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <sampling+0xdb8>)
 8002676:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 8002678:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <sampling+0xdc0>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <sampling+0xcda>
 8002680:	4b38      	ldr	r3, [pc, #224]	; (8002764 <sampling+0xdb4>)
 8002682:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8002686:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <sampling+0xdc4>)
 8002688:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <sampling+0xdc0>)
 800268c:	881a      	ldrh	r2, [r3, #0]
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <sampling+0xdc4>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	b29a      	uxth	r2, r3
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <sampling+0xdc0>)
 8002698:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 800269a:	4b35      	ldr	r3, [pc, #212]	; (8002770 <sampling+0xdc0>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	09db      	lsrs	r3, r3, #7
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <sampling+0xd04>
 80026a6:	2300      	movs	r3, #0
 80026a8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80026ac:	f102 0201 	add.w	r2, r2, #1
 80026b0:	7013      	strb	r3, [r2, #0]
 80026b2:	e005      	b.n	80026c0 <sampling+0xd10>
 80026b4:	2301      	movs	r3, #1
 80026b6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80026ba:	f102 0201 	add.w	r2, r2, #1
 80026be:	7013      	strb	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <sampling+0xdc0>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <sampling+0xdc8>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	015b      	lsls	r3, r3, #5
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dd02      	ble.n	80026d6 <sampling+0xd26>
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <sampling+0xdc0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 80026d6:	f000 fb01 	bl	8002cdc <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <sampling+0xda4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4b21      	ldr	r3, [pc, #132]	; (8002768 <sampling+0xdb8>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80026e8:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 80026ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <sampling+0xda4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <sampling+0xdb8>)
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80026fe:	4619      	mov	r1, r3
 8002700:	0083      	lsls	r3, r0, #2
 8002702:	440b      	add	r3, r1
 8002704:	f843 2c80 	str.w	r2, [r3, #-128]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <sampling+0xda4>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <sampling+0xda4>)
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <sampling+0xda4>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271c:	f4ff af1a 	bcc.w	8002554 <sampling+0xba4>



//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002720:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002724:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002728:	f102 0206 	add.w	r2, r2, #6
 800272c:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 800272e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002732:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002736:	f102 020e 	add.w	r2, r2, #14
 800273a:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 800273c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002740:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002744:	f102 0204 	add.w	r2, r2, #4
 8002748:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 800274a:	4b02      	ldr	r3, [pc, #8]	; (8002754 <sampling+0xda4>)
 800274c:	2200      	movs	r2, #0
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	e05a      	b.n	8002808 <sampling+0xe58>
 8002752:	bf00      	nop
 8002754:	20000d74 	.word	0x20000d74
 8002758:	20000d72 	.word	0x20000d72
 800275c:	200022e0 	.word	0x200022e0
 8002760:	200021a4 	.word	0x200021a4
 8002764:	20003b24 	.word	0x20003b24
 8002768:	20000d54 	.word	0x20000d54
 800276c:	20000d3c 	.word	0x20000d3c
 8002770:	20000d3a 	.word	0x20000d3a
 8002774:	20000d40 	.word	0x20000d40
 8002778:	20000142 	.word	0x20000142
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <sampling+0xf58>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b62      	ldr	r3, [pc, #392]	; (800290c <sampling+0xf5c>)
 8002784:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002788:	461a      	mov	r2, r3
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9a      	subs	r2, r3, r2
 8002790:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002794:	f103 0304 	add.w	r3, r3, #4
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	10db      	asrs	r3, r3, #3
 800279e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80027a2:	f102 0206 	add.w	r2, r2, #6
 80027a6:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 80027a8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80027ac:	f103 0306 	add.w	r3, r3, #6
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	1a9a      	subs	r2, r3, r2
 80027b8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80027bc:	f103 030e 	add.w	r3, r3, #14
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	10db      	asrs	r3, r3, #3
 80027c6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80027ca:	f102 020e 	add.w	r2, r2, #14
 80027ce:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 80027d0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80027d4:	f103 030e 	add.w	r3, r3, #14
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	1a9a      	subs	r2, r3, r2
 80027e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80027e4:	f103 0304 	add.w	r3, r3, #4
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	10d9      	asrs	r1, r3, #3
 80027ee:	4b46      	ldr	r3, [pc, #280]	; (8002908 <sampling+0xf58>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	b289      	uxth	r1, r1
 80027f6:	4b45      	ldr	r3, [pc, #276]	; (800290c <sampling+0xf5c>)
 80027f8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 80027fc:	4b42      	ldr	r3, [pc, #264]	; (8002908 <sampling+0xf58>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b40      	ldr	r3, [pc, #256]	; (8002908 <sampling+0xf58>)
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <sampling+0xf58>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d3b4      	bcc.n	800277c <sampling+0xdcc>


}
*/

time_proc=0;
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <sampling+0xf60>)
 8002814:	2200      	movs	r2, #0
 8002816:	801a      	strh	r2, [r3, #0]

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002818:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <sampling+0xf58>)
 800281a:	2200      	movs	r2, #0
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	e235      	b.n	8002c8c <sampling+0x12dc>
	i_total=i+sample_pointB;
 8002820:	4b39      	ldr	r3, [pc, #228]	; (8002908 <sampling+0xf58>)
 8002822:	881a      	ldrh	r2, [r3, #0]
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <sampling+0xf64>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	4413      	add	r3, r2
 800282a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800282e:	f102 0202 	add.w	r2, r2, #2
 8002832:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <sampling+0xf58>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	b29b      	uxth	r3, r3
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b36      	ldr	r3, [pc, #216]	; (8002918 <sampling+0xf68>)
 8002840:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <sampling+0xf58>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	b29b      	uxth	r3, r3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8002850:	443b      	add	r3, r7
 8002852:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8002856:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <sampling+0xf58>)
 8002858:	8812      	ldrh	r2, [r2, #0]
 800285a:	f002 021f 	and.w	r2, r2, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	4293      	cmp	r3, r2
 8002866:	d10f      	bne.n	8002888 <sampling+0xed8>
 8002868:	4b2c      	ldr	r3, [pc, #176]	; (800291c <sampling+0xf6c>)
 800286a:	2200      	movs	r2, #0
 800286c:	711a      	strb	r2, [r3, #4]
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <sampling+0xf70>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <sampling+0xf70>)
 8002878:	801a      	strh	r2, [r3, #0]
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <sampling+0xf70>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <sampling+0xf70>)
 8002886:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level



//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[1]=play_holder1[i];  // sine input
 8002888:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <sampling+0xf58>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002892:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <sampling+0xf74>)
 800289c:	6053      	str	r3, [r2, #4]
sample_Accu[3]=play_holder2[i] >>5; // sine
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <sampling+0xf58>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80028ae:	115b      	asrs	r3, r3, #5
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <sampling+0xf74>)
 80028b2:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <sampling+0xf68>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <sampling+0xf78>)
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	; (800292c <sampling+0xf7c>)
 80028c2:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <sampling+0xf68>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <sampling+0xf78>)
 80028ca:	3312      	adds	r3, #18
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a16      	ldr	r2, [pc, #88]	; (800292c <sampling+0xf7c>)
 80028d4:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <sampling+0xf58>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	4a14      	ldr	r2, [pc, #80]	; (8002930 <sampling+0xf80>)
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <sampling+0xf84>)
 80028e8:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <sampling+0xf7c>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	dd1c      	ble.n	8002938 <sampling+0xf88>
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <sampling+0xf7c>)
 8002900:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e023      	b.n	8002950 <sampling+0xfa0>
 8002908:	20000d74 	.word	0x20000d74
 800290c:	20002b3c 	.word	0x20002b3c
 8002910:	20002f54 	.word	0x20002f54
 8002914:	20000d72 	.word	0x20000d72
 8002918:	200022e0 	.word	0x200022e0
 800291c:	20003098 	.word	0x20003098
 8002920:	200022e2 	.word	0x200022e2
 8002924:	20000d54 	.word	0x20000d54
 8002928:	20002250 	.word	0x20002250
 800292c:	20002240 	.word	0x20002240
 8002930:	20001d88 	.word	0x20001d88
 8002934:	20002b08 	.word	0x20002b08
 8002938:	4bba      	ldr	r3, [pc, #744]	; (8002c24 <sampling+0x1274>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d503      	bpl.n	8002950 <sampling+0xfa0>
 8002948:	4bb6      	ldr	r3, [pc, #728]	; (8002c24 <sampling+0x1274>)
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002950:	4bb4      	ldr	r3, [pc, #720]	; (8002c24 <sampling+0x1274>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800295a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295e:	4bb1      	ldr	r3, [pc, #708]	; (8002c24 <sampling+0x1274>)
 8002960:	edc3 7a01 	vstr	s15, [r3, #4]
		sample_Accu[1] = sample_Accu[1]>>13;
 8002964:	4bb0      	ldr	r3, [pc, #704]	; (8002c28 <sampling+0x1278>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	135b      	asrs	r3, r3, #13
 800296a:	4aaf      	ldr	r2, [pc, #700]	; (8002c28 <sampling+0x1278>)
 800296c:	6053      	str	r3, [r2, #4]

		//int16_t  ADSR[0].buffer_temp2=lfo_out [1] [i>>6];

		//ADSR[0].buffer_temp2=ADSR[0].buffer_temp2-8195;
		//sample_Accu[1] = sample_Accu[1] *lfo_out [0] [i>>6];     // vol lfo
		sample_Accu[1] = sample_Accu[1] *LFO[0].out[i>>6];
 800296e:	4bae      	ldr	r3, [pc, #696]	; (8002c28 <sampling+0x1278>)
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4bae      	ldr	r3, [pc, #696]	; (8002c2c <sampling+0x127c>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	b29b      	uxth	r3, r3
 800297a:	49ad      	ldr	r1, [pc, #692]	; (8002c30 <sampling+0x1280>)
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	440b      	add	r3, r1
 8002980:	88db      	ldrh	r3, [r3, #6]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	4aa8      	ldr	r2, [pc, #672]	; (8002c28 <sampling+0x1278>)
 8002988:	6053      	str	r3, [r2, #4]



		filter_accus[1]=sample_Accu[1]; // saw
 800298a:	4ba7      	ldr	r3, [pc, #668]	; (8002c28 <sampling+0x1278>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002996:	4ba7      	ldr	r3, [pc, #668]	; (8002c34 <sampling+0x1284>)
 8002998:	edc3 7a01 	vstr	s15, [r3, #4]
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		//filter_accus[1]=	filter_accus[1]*adsr_level[3];

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 800299c:	4ba5      	ldr	r3, [pc, #660]	; (8002c34 <sampling+0x1284>)
 800299e:	ed93 7a01 	vldr	s14, [r3, #4]
 80029a2:	4ba0      	ldr	r3, [pc, #640]	; (8002c24 <sampling+0x1274>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ac:	4ba1      	ldr	r3, [pc, #644]	; (8002c34 <sampling+0x1284>)
 80029ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80029b2:	4b9c      	ldr	r3, [pc, #624]	; (8002c24 <sampling+0x1274>)
 80029b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80029b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c0:	4b9c      	ldr	r3, [pc, #624]	; (8002c34 <sampling+0x1284>)
 80029c2:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 80029c6:	4b9b      	ldr	r3, [pc, #620]	; (8002c34 <sampling+0x1284>)
 80029c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80029cc:	4b95      	ldr	r3, [pc, #596]	; (8002c24 <sampling+0x1274>)
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d6:	4b97      	ldr	r3, [pc, #604]	; (8002c34 <sampling+0x1284>)
 80029d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80029dc:	4b91      	ldr	r3, [pc, #580]	; (8002c24 <sampling+0x1274>)
 80029de:	edd3 7a01 	vldr	s15, [r3, #4]
 80029e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <sampling+0x1284>)
 80029ec:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 80029f0:	4b90      	ldr	r3, [pc, #576]	; (8002c34 <sampling+0x1284>)
 80029f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <sampling+0x1274>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a00:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <sampling+0x1284>)
 8002a02:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a06:	4b87      	ldr	r3, [pc, #540]	; (8002c24 <sampling+0x1274>)
 8002a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	4b87      	ldr	r3, [pc, #540]	; (8002c34 <sampling+0x1284>)
 8002a16:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8002a1a:	4b86      	ldr	r3, [pc, #536]	; (8002c34 <sampling+0x1284>)
 8002a1c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a20:	4b80      	ldr	r3, [pc, #512]	; (8002c24 <sampling+0x1274>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2a:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <sampling+0x1284>)
 8002a2c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002a30:	4b7c      	ldr	r3, [pc, #496]	; (8002c24 <sampling+0x1274>)
 8002a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	4b7d      	ldr	r3, [pc, #500]	; (8002c34 <sampling+0x1284>)
 8002a40:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002a44:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <sampling+0x1284>)
 8002a46:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a4a:	4b7a      	ldr	r3, [pc, #488]	; (8002c34 <sampling+0x1284>)
 8002a4c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5c:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <sampling+0x1288>)
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <sampling+0x1284>)
 8002a64:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6c:	ee17 2a90 	vmov	r2, s15
 8002a70:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <sampling+0x1278>)
 8002a72:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8002a74:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <sampling+0x1284>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4a6e      	ldr	r2, [pc, #440]	; (8002c34 <sampling+0x1284>)
 8002a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 8002a7c:	4b6b      	ldr	r3, [pc, #428]	; (8002c2c <sampling+0x127c>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002a8c:	115b      	asrs	r3, r3, #5
 8002a8e:	4a66      	ldr	r2, [pc, #408]	; (8002c28 <sampling+0x1278>)
 8002a90:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 8002a92:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <sampling+0x1274>)
 8002a94:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	dd03      	ble.n	8002aae <sampling+0x10fe>
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <sampling+0x1274>)
 8002aa8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002aac:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <sampling+0x1274>)
 8002ab0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <sampling+0x1274>)
 8002abe:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=( sample_Accu[3]>>13)*LFO[1].out[i>>6];
 8002ac2:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <sampling+0x1278>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	135a      	asrs	r2, r3, #13
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <sampling+0x127c>)
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4957      	ldr	r1, [pc, #348]	; (8002c30 <sampling+0x1280>)
 8002ad2:	3310      	adds	r3, #16
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	440b      	add	r3, r1
 8002ad8:	88db      	ldrh	r3, [r3, #6]
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <sampling+0x1284>)
 8002ae8:	edc3 7a06 	vstr	s15, [r3, #24]
			//	filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002aec:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <sampling+0x1284>)
 8002aee:	ed93 7a06 	vldr	s14, [r3, #24]
 8002af2:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <sampling+0x1274>)
 8002af4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002afc:	4b4d      	ldr	r3, [pc, #308]	; (8002c34 <sampling+0x1284>)
 8002afe:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b02:	4b48      	ldr	r3, [pc, #288]	; (8002c24 <sampling+0x1274>)
 8002b04:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b10:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <sampling+0x1284>)
 8002b12:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <sampling+0x1284>)
 8002b18:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <sampling+0x1274>)
 8002b1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <sampling+0x1284>)
 8002b28:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b2c:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <sampling+0x1274>)
 8002b2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <sampling+0x1284>)
 8002b3c:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002b40:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <sampling+0x1284>)
 8002b42:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b46:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <sampling+0x1274>)
 8002b48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b50:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <sampling+0x1284>)
 8002b52:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002b56:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <sampling+0x1274>)
 8002b58:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <sampling+0x1284>)
 8002b66:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002b6a:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <sampling+0x1284>)
 8002b6c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <sampling+0x1274>)
 8002b72:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7a:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <sampling+0x1284>)
 8002b7c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002b80:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <sampling+0x1274>)
 8002b82:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <sampling+0x1284>)
 8002b90:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <sampling+0x1284>)
 8002b96:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <sampling+0x1284>)
 8002b9c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bac:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <sampling+0x1288>)
 8002bae:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <sampling+0x1284>)
 8002bb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bbc:	ee17 2a90 	vmov	r2, s15
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <sampling+0x1278>)
 8002bc2:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <sampling+0x1284>)
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <sampling+0x1284>)
 8002bca:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002bd2:	f102 0210 	add.w	r2, r2, #16
 8002bd6:	6013      	str	r3, [r2, #0]
filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <sampling+0x1278>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <sampling+0x1278>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4413      	add	r3, r2
 8002be2:	121b      	asrs	r3, r3, #8
 8002be4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002be8:	f102 0210 	add.w	r2, r2, #16
 8002bec:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 //filter_Accu=sample_Accu[1]>>7;

// filter_Accu=sample_Accu[2]>>11;
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <sampling+0x128c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2bc7      	cmp	r3, #199	; 0xc7
 8002bf4:	d005      	beq.n	8002c02 <sampling+0x1252>
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <sampling+0x128c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <sampling+0x128c>)
 8002c00:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002c02:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c06:	f103 0310 	add.w	r3, r3, #16
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	db16      	blt.n	8002c40 <sampling+0x1290>
 8002c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c16:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002c1a:	f102 0210 	add.w	r2, r2, #16
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e01c      	b.n	8002c5c <sampling+0x12ac>
 8002c22:	bf00      	nop
 8002c24:	20002240 	.word	0x20002240
 8002c28:	20000d54 	.word	0x20000d54
 8002c2c:	20000d74 	.word	0x20000d74
 8002c30:	20002f58 	.word	0x20002f58
 8002c34:	200021f0 	.word	0x200021f0
 8002c38:	2000222c 	.word	0x2000222c
 8002c3c:	200021bc 	.word	0x200021bc
 8002c40:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c44:	f103 0310 	add.w	r3, r3, #16
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c4e:	dc05      	bgt.n	8002c5c <sampling+0x12ac>
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <sampling+0x1310>)
 8002c52:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002c56:	f102 0210 	add.w	r2, r2, #16
 8002c5a:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 8002c5c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c60:	f103 0310 	add.w	r3, r3, #16
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	119b      	asrs	r3, r3, #6
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002c6e:	f103 0302 	add.w	r3, r3, #2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c78:	b291      	uxth	r1, r2
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <sampling+0x1314>)
 8002c7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <sampling+0x1318>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <sampling+0x1318>)
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <sampling+0x1318>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	f4ff adc4 	bcc.w	8002820 <sampling+0xe70>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <sampling+0x131c>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <sampling+0x12fc>
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <sampling+0x1320>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <sampling+0x1320>)
 8002caa:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <sampling+0x1324>)
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <sampling+0x1328>)
 8002cb2:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 8002cb4:	bf00      	nop
 8002cb6:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	ffff0001 	.word	0xffff0001
 8002cc4:	20000d78 	.word	0x20000d78
 8002cc8:	20000d74 	.word	0x20000d74
 8002ccc:	200001b2 	.word	0x200001b2
 8002cd0:	20002f56 	.word	0x20002f56
 8002cd4:	20002f54 	.word	0x20002f54
 8002cd8:	20002f50 	.word	0x20002f50

08002cdc <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002ce2:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <sine_count+0xc4>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <sine_count+0xc8>)
 8002cec:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002cee:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <sine_count+0xc4>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002cfa:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <sine_count+0xc8>)
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <sine_count+0xcc>)
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d903      	bls.n	8002d0e <sine_count+0x32>
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <sine_count+0xcc>)
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <sine_count+0xc8>)
 8002d0c:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <sine_count+0xc8>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <sine_count+0xd0>)
 8002d16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <sine_count+0xd4>)
 8002d1e:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <sine_count+0xd4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002d2c:	3b20      	subs	r3, #32
 8002d2e:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <sine_count+0xc8>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <sine_count+0xc8>)
 8002d3a:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <sine_count+0xc8>)
 8002d3e:	881a      	ldrh	r2, [r3, #0]
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <sine_count+0xcc>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <sine_count+0x72>
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <sine_count+0xc8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <sine_count+0xc8>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <sine_count+0xd0>)
 8002d56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <sine_count+0xd4>)
 8002d5e:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <sine_count+0xd4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002d6c:	3b20      	subs	r3, #32
 8002d6e:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	115b      	asrs	r3, r3, #5
 8002d7c:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002d7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <sine_count+0xd4>)
 8002d92:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20000d3a 	.word	0x20000d3a
 8002da4:	20000d38 	.word	0x20000d38
 8002da8:	20000142 	.word	0x20000142
 8002dac:	08009d1c 	.word	0x08009d1c
 8002db0:	20000d3c 	.word	0x20000d3c
 8002db4:	00000000 	.word	0x00000000

08002db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	b0a3      	sub	sp, #140	; 0x8c
 8002dbc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dbe:	f001 fb3f 	bl	8004440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc2:	f000 fd07 	bl	80037d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc6:	f000 ffcd 	bl	8003d64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dca:	f000 ffab 	bl	8003d24 <MX_DMA_Init>
  MX_ADC1_Init();
 8002dce:	f000 fd6b 	bl	80038a8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002dd2:	f000 fe53 	bl	8003a7c <MX_SPI2_Init>
  MX_TIM3_Init();
 8002dd6:	f000 fedb 	bl	8003b90 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002dda:	f000 ff4f 	bl	8003c7c <MX_TIM4_Init>
  MX_I2C2_Init();
 8002dde:	f000 fde9 	bl	80039b4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002de2:	f000 fe81 	bl	8003ae8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002de6:	f000 fe13 	bl	8003a10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002dea:	4baa      	ldr	r3, [pc, #680]	; (8003094 <main+0x2dc>)
 8002dec:	673b      	str	r3, [r7, #112]	; 0x70



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002dee:	48aa      	ldr	r0, [pc, #680]	; (8003098 <main+0x2e0>)
 8002df0:	f004 feca 	bl	8007b88 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002df4:	48a9      	ldr	r0, [pc, #676]	; (800309c <main+0x2e4>)
 8002df6:	f004 fec7 	bl	8007b88 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002dfa:	48a9      	ldr	r0, [pc, #676]	; (80030a0 <main+0x2e8>)
 8002dfc:	f005 fd16 	bl	800882c <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8002e00:	4ba8      	ldr	r3, [pc, #672]	; (80030a4 <main+0x2ec>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8002e06:	48a8      	ldr	r0, [pc, #672]	; (80030a8 <main+0x2f0>)
 8002e08:	f005 fcb6 	bl	8008778 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8002e0c:	48a7      	ldr	r0, [pc, #668]	; (80030ac <main+0x2f4>)
 8002e0e:	f005 fcb3 	bl	8008778 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002e12:	2108      	movs	r1, #8
 8002e14:	48a2      	ldr	r0, [pc, #648]	; (80030a0 <main+0x2e8>)
 8002e16:	f005 fdc5 	bl	80089a4 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e1e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8002e24:	48a2      	ldr	r0, [pc, #648]	; (80030b0 <main+0x2f8>)
 8002e26:	f001 fbe5 	bl	80045f4 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2e:	49a1      	ldr	r1, [pc, #644]	; (80030b4 <main+0x2fc>)
 8002e30:	489f      	ldr	r0, [pc, #636]	; (80030b0 <main+0x2f8>)
 8002e32:	f001 fd1f 	bl	8004874 <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 8002e36:	48a0      	ldr	r0, [pc, #640]	; (80030b8 <main+0x300>)
 8002e38:	f001 f8ce 	bl	8003fd8 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8002e3c:	4a9f      	ldr	r2, [pc, #636]	; (80030bc <main+0x304>)
 8002e3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e46:	6018      	str	r0, [r3, #0]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8002e4c:	2005      	movs	r0, #5
 8002e4e:	f001 fb69 	bl	8004524 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8002e52:	2306      	movs	r3, #6
 8002e54:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	4898      	ldr	r0, [pc, #608]	; (80030c0 <main+0x308>)
 8002e5e:	f003 fa75 	bl	800634c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002e62:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	488b      	ldr	r0, [pc, #556]	; (800309c <main+0x2e4>)
 8002e6e:	f004 ff14 	bl	8007c9a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002e72:	2201      	movs	r2, #1
 8002e74:	2110      	movs	r1, #16
 8002e76:	4892      	ldr	r0, [pc, #584]	; (80030c0 <main+0x308>)
 8002e78:	f003 fa68 	bl	800634c <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002e7c:	2005      	movs	r0, #5
 8002e7e:	f001 fb51 	bl	8004524 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8002e82:	2320      	movs	r3, #32
 8002e84:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	4888      	ldr	r0, [pc, #544]	; (80030c0 <main+0x308>)
 8002ea0:	f003 fa54 	bl	800634c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8002ea4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eac:	2204      	movs	r2, #4
 8002eae:	487b      	ldr	r0, [pc, #492]	; (800309c <main+0x2e4>)
 8002eb0:	f004 fef3 	bl	8007c9a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	4881      	ldr	r0, [pc, #516]	; (80030c0 <main+0x308>)
 8002eba:	f003 fa47 	bl	800634c <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
status_reg[1]=1; // set busy on
 8002eca:	4b7e      	ldr	r3, [pc, #504]	; (80030c4 <main+0x30c>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8002ed0:	e012      	b.n	8002ef8 <main+0x140>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	487a      	ldr	r0, [pc, #488]	; (80030c0 <main+0x308>)
 8002ed8:	f003 fa38 	bl	800634c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8002edc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ee0:	23c8      	movs	r3, #200	; 0xc8
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	4a77      	ldr	r2, [pc, #476]	; (80030c4 <main+0x30c>)
 8002ee8:	486c      	ldr	r0, [pc, #432]	; (800309c <main+0x2e4>)
 8002eea:	f005 f923 	bl	8008134 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2110      	movs	r1, #16
 8002ef2:	4873      	ldr	r0, [pc, #460]	; (80030c0 <main+0x308>)
 8002ef4:	f003 fa2a 	bl	800634c <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8002ef8:	4b72      	ldr	r3, [pc, #456]	; (80030c4 <main+0x30c>)
 8002efa:	785b      	ldrb	r3, [r3, #1]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e6      	bne.n	8002ed2 <main+0x11a>
}

send_spi1[0]=0x06; //enable write again
 8002f04:	2306      	movs	r3, #6
 8002f06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	486c      	ldr	r0, [pc, #432]	; (80030c0 <main+0x308>)
 8002f10:	f003 fa1c 	bl	800634c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002f14:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	485f      	ldr	r0, [pc, #380]	; (800309c <main+0x2e4>)
 8002f20:	f004 febb 	bl	8007c9a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002f24:	2201      	movs	r2, #1
 8002f26:	2110      	movs	r1, #16
 8002f28:	4865      	ldr	r0, [pc, #404]	; (80030c0 <main+0x308>)
 8002f2a:	f003 fa0f 	bl	800634c <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002f2e:	2005      	movs	r0, #5
 8002f30:	f001 faf8 	bl	8004524 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8002f34:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <main+0x310>)
 8002f36:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8002f44:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002f48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f4c:	220e      	movs	r2, #14
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f006 fcf8 	bl	8009944 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2110      	movs	r1, #16
 8002f58:	4859      	ldr	r0, [pc, #356]	; (80030c0 <main+0x308>)
 8002f5a:	f003 f9f7 	bl	800634c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8002f5e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f66:	220e      	movs	r2, #14
 8002f68:	484c      	ldr	r0, [pc, #304]	; (800309c <main+0x2e4>)
 8002f6a:	f004 fe96 	bl	8007c9a <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2110      	movs	r1, #16
 8002f72:	4853      	ldr	r0, [pc, #332]	; (80030c0 <main+0x308>)
 8002f74:	f003 f9ea 	bl	800634c <HAL_GPIO_WritePin>




HAL_Delay(25);
 8002f78:	2019      	movs	r0, #25
 8002f7a:	f001 fad3 	bl	8004524 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8002f7e:	2304      	movs	r3, #4
 8002f80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2110      	movs	r1, #16
 8002f88:	484d      	ldr	r0, [pc, #308]	; (80030c0 <main+0x308>)
 8002f8a:	f003 f9df 	bl	800634c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002f8e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f96:	2201      	movs	r2, #1
 8002f98:	4840      	ldr	r0, [pc, #256]	; (800309c <main+0x2e4>)
 8002f9a:	f004 fe7e 	bl	8007c9a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	2110      	movs	r1, #16
 8002fa2:	4847      	ldr	r0, [pc, #284]	; (80030c0 <main+0x308>)
 8002fa4:	f003 f9d2 	bl	800634c <HAL_GPIO_WritePin>

HAL_Delay(5);
 8002fa8:	2005      	movs	r0, #5
 8002faa:	f001 fabb 	bl	8004524 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8002fae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fb2:	220e      	movs	r2, #14
 8002fb4:	4945      	ldr	r1, [pc, #276]	; (80030cc <main+0x314>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 fcc4 	bl	8009944 <memcpy>
send_spi1[0]=0x03; //read page 1
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2110      	movs	r1, #16
 8002fd8:	4839      	ldr	r0, [pc, #228]	; (80030c0 <main+0x308>)
 8002fda:	f003 f9b7 	bl	800634c <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8002fde:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002fe2:	2364      	movs	r3, #100	; 0x64
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	482d      	ldr	r0, [pc, #180]	; (800309c <main+0x2e4>)
 8002fe8:	f004 fe57 	bl	8007c9a <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8002fec:	2364      	movs	r3, #100	; 0x64
 8002fee:	220a      	movs	r2, #10
 8002ff0:	4936      	ldr	r1, [pc, #216]	; (80030cc <main+0x314>)
 8002ff2:	482a      	ldr	r0, [pc, #168]	; (800309c <main+0x2e4>)
 8002ff4:	f004 ff8d 	bl	8007f12 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	2110      	movs	r1, #16
 8002ffc:	4830      	ldr	r0, [pc, #192]	; (80030c0 <main+0x308>)
 8002ffe:	f003 f9a5 	bl	800634c <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003002:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300a:	2201      	movs	r2, #1
 800300c:	4823      	ldr	r0, [pc, #140]	; (800309c <main+0x2e4>)
 800300e:	f004 fe44 	bl	8007c9a <HAL_SPI_Transmit>

uint8_t potSource2[64];



for(i=0;i<5;i++){     // 256
 8003012:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <main+0x318>)
 8003014:	2200      	movs	r2, #0
 8003016:	801a      	strh	r2, [r3, #0]
 8003018:	e02f      	b.n	800307a <main+0x2c2>
HAL_I2C_Mem_Read(&hi2c2, 160, 64+(i*64), 2,&potSource2, 64,1000);		// all good readin eeprom  values
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <main+0x318>)
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	b29b      	uxth	r3, r3
 8003022:	019b      	lsls	r3, r3, #6
 8003024:	b29a      	uxth	r2, r3
 8003026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	2340      	movs	r3, #64	; 0x40
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2302      	movs	r3, #2
 8003038:	21a0      	movs	r1, #160	; 0xa0
 800303a:	481f      	ldr	r0, [pc, #124]	; (80030b8 <main+0x300>)
 800303c:	f003 fbde 	bl	80067fc <HAL_I2C_Mem_Read>

memcpy (potSource+(i*64),potSource2,sizeof(potSource2));   //this works  ok now
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <main+0x318>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	461a      	mov	r2, r3
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <main+0x31c>)
 800304a:	4413      	add	r3, r2
 800304c:	f107 0408 	add.w	r4, r7, #8
 8003050:	469c      	mov	ip, r3
 8003052:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8003056:	4665      	mov	r5, ip
 8003058:	4626      	mov	r6, r4
 800305a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800305c:	6028      	str	r0, [r5, #0]
 800305e:	6069      	str	r1, [r5, #4]
 8003060:	60aa      	str	r2, [r5, #8]
 8003062:	60eb      	str	r3, [r5, #12]
 8003064:	3410      	adds	r4, #16
 8003066:	f10c 0c10 	add.w	ip, ip, #16
 800306a:	4574      	cmp	r4, lr
 800306c:	d1f3      	bne.n	8003056 <main+0x29e>
for(i=0;i<5;i++){     // 256
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <main+0x318>)
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <main+0x318>)
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <main+0x318>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d9cb      	bls.n	800301a <main+0x262>


}

for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <main+0x318>)
 8003084:	2200      	movs	r2, #0
 8003086:	801a      	strh	r2, [r3, #0]
 8003088:	e07c      	b.n	8003184 <main+0x3cc>

for 	(n=0;n<18;n++){					// this is ok
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <main+0x320>)
 800308c:	2200      	movs	r2, #0
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	e06e      	b.n	8003170 <main+0x3b8>
 8003092:	bf00      	nop
 8003094:	0800d2f0 	.word	0x0800d2f0
 8003098:	20003e38 	.word	0x20003e38
 800309c:	20003de0 	.word	0x20003de0
 80030a0:	20003ed8 	.word	0x20003ed8
 80030a4:	40000400 	.word	0x40000400
 80030a8:	20003e90 	.word	0x20003e90
 80030ac:	20003f20 	.word	0x20003f20
 80030b0:	20003ce4 	.word	0x20003ce4
 80030b4:	20001584 	.word	0x20001584
 80030b8:	20003d8c 	.word	0x20003d8c
 80030bc:	08009c64 	.word	0x08009c64
 80030c0:	40020000 	.word	0x40020000
 80030c4:	200001b8 	.word	0x200001b8
 80030c8:	08009c6c 	.word	0x08009c6c
 80030cc:	20002f40 	.word	0x20002f40
 80030d0:	20000d74 	.word	0x20000d74
 80030d4:	20000bb8 	.word	0x20000bb8
 80030d8:	20000d52 	.word	0x20000d52
	if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 80030dc:	4b9e      	ldr	r3, [pc, #632]	; (8003358 <main+0x5a0>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d114      	bne.n	800310e <main+0x356>
 80030e4:	4b9d      	ldr	r3, [pc, #628]	; (800335c <main+0x5a4>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	4b9a      	ldr	r3, [pc, #616]	; (800335c <main+0x5a4>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	460b      	mov	r3, r1
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4619      	mov	r1, r3
 8003100:	4b95      	ldr	r3, [pc, #596]	; (8003358 <main+0x5a0>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	440b      	add	r3, r1
 8003106:	3a80      	subs	r2, #128	; 0x80
 8003108:	b2d1      	uxtb	r1, r2
 800310a:	4a95      	ldr	r2, [pc, #596]	; (8003360 <main+0x5a8>)
 800310c:	54d1      	strb	r1, [r2, r3]
	if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 800310e:	4b92      	ldr	r3, [pc, #584]	; (8003358 <main+0x5a0>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d114      	bne.n	8003140 <main+0x388>
 8003116:	4b91      	ldr	r3, [pc, #580]	; (800335c <main+0x5a4>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	b29b      	uxth	r3, r3
 800311e:	3310      	adds	r3, #16
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b8e      	ldr	r3, [pc, #568]	; (800335c <main+0x5a4>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	4619      	mov	r1, r3
 8003128:	460b      	mov	r3, r1
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4619      	mov	r1, r3
 8003132:	4b89      	ldr	r3, [pc, #548]	; (8003358 <main+0x5a0>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	440b      	add	r3, r1
 8003138:	00d2      	lsls	r2, r2, #3
 800313a:	b2d1      	uxtb	r1, r2
 800313c:	4a88      	ldr	r2, [pc, #544]	; (8003360 <main+0x5a8>)
 800313e:	54d1      	strb	r1, [r2, r3]
	if (n>1)  gfx_ram[(i*18)+n] = 255;
 8003140:	4b85      	ldr	r3, [pc, #532]	; (8003358 <main+0x5a0>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d90d      	bls.n	8003164 <main+0x3ac>
 8003148:	4b84      	ldr	r3, [pc, #528]	; (800335c <main+0x5a4>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	461a      	mov	r2, r3
 8003158:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <main+0x5a0>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	4413      	add	r3, r2
 800315e:	4a80      	ldr	r2, [pc, #512]	; (8003360 <main+0x5a8>)
 8003160:	21ff      	movs	r1, #255	; 0xff
 8003162:	54d1      	strb	r1, [r2, r3]
for 	(n=0;n<18;n++){					// this is ok
 8003164:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <main+0x5a0>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	4b7a      	ldr	r3, [pc, #488]	; (8003358 <main+0x5a0>)
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	4b79      	ldr	r3, [pc, #484]	; (8003358 <main+0x5a0>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	2b11      	cmp	r3, #17
 8003176:	d9b1      	bls.n	80030dc <main+0x324>
for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003178:	4b78      	ldr	r3, [pc, #480]	; (800335c <main+0x5a4>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b76      	ldr	r3, [pc, #472]	; (800335c <main+0x5a4>)
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	4b75      	ldr	r3, [pc, #468]	; (800335c <main+0x5a4>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	2b3f      	cmp	r3, #63	; 0x3f
 800318a:	f67f af7e 	bls.w	800308a <main+0x2d2>

}



for(i=0;i<260;i++){			// write potvalues ,for display
 800318e:	4b73      	ldr	r3, [pc, #460]	; (800335c <main+0x5a4>)
 8003190:	2200      	movs	r2, #0
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	e010      	b.n	80031b8 <main+0x400>
	potValues[i]=potSource[i]>>4;
 8003196:	4b71      	ldr	r3, [pc, #452]	; (800335c <main+0x5a4>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	4b71      	ldr	r3, [pc, #452]	; (8003364 <main+0x5ac>)
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	4a6e      	ldr	r2, [pc, #440]	; (800335c <main+0x5a4>)
 80031a2:	8812      	ldrh	r2, [r2, #0]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	b2d9      	uxtb	r1, r3
 80031a8:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <main+0x5b0>)
 80031aa:	5499      	strb	r1, [r3, r2]
for(i=0;i<260;i++){			// write potvalues ,for display
 80031ac:	4b6b      	ldr	r3, [pc, #428]	; (800335c <main+0x5a4>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b69      	ldr	r3, [pc, #420]	; (800335c <main+0x5a4>)
 80031b6:	801a      	strh	r2, [r3, #0]
 80031b8:	4b68      	ldr	r3, [pc, #416]	; (800335c <main+0x5a4>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c0:	d3e9      	bcc.n	8003196 <main+0x3de>
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////// variable fill

memcpy(&seq,potSource,46 );  // load from potSource
 80031c2:	4a6a      	ldr	r2, [pc, #424]	; (800336c <main+0x5b4>)
 80031c4:	4b67      	ldr	r3, [pc, #412]	; (8003364 <main+0x5ac>)
 80031c6:	4614      	mov	r4, r2
 80031c8:	461d      	mov	r5, r3
 80031ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80031d6:	c407      	stmia	r4!, {r0, r1, r2}
 80031d8:	8023      	strh	r3, [r4, #0]


for(i=0;i<10;i++){
 80031da:	4b60      	ldr	r3, [pc, #384]	; (800335c <main+0x5a4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	e044      	b.n	800326c <main+0x4b4>
	if (i<8){    memcpy(&note[i],potSource+46+(i*14),14 );}  //grab note settings ,112 total , works ok
 80031e2:	4b5e      	ldr	r3, [pc, #376]	; (800335c <main+0x5a4>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	2b07      	cmp	r3, #7
 80031e8:	d812      	bhi.n	8003210 <main+0x458>
 80031ea:	4b5c      	ldr	r3, [pc, #368]	; (800335c <main+0x5a4>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	4a5f      	ldr	r2, [pc, #380]	; (8003370 <main+0x5b8>)
 80031f2:	1898      	adds	r0, r3, r2
 80031f4:	4b59      	ldr	r3, [pc, #356]	; (800335c <main+0x5a4>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	332e      	adds	r3, #46	; 0x2e
 8003204:	4a57      	ldr	r2, [pc, #348]	; (8003364 <main+0x5ac>)
 8003206:	4413      	add	r3, r2
 8003208:	220e      	movs	r2, #14
 800320a:	4619      	mov	r1, r3
 800320c:	f006 fb9a 	bl	8009944 <memcpy>

	memcpy(&LFO[i],potSource+158+(i*5),6 );  // + 60
 8003210:	4b52      	ldr	r3, [pc, #328]	; (800335c <main+0x5a4>)
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	015b      	lsls	r3, r3, #5
 8003216:	4a57      	ldr	r2, [pc, #348]	; (8003374 <main+0x5bc>)
 8003218:	1898      	adds	r0, r3, r2
 800321a:	4b50      	ldr	r3, [pc, #320]	; (800335c <main+0x5a4>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	339e      	adds	r3, #158	; 0x9e
 8003228:	4a4e      	ldr	r2, [pc, #312]	; (8003364 <main+0x5ac>)
 800322a:	4413      	add	r3, r2
 800322c:	2206      	movs	r2, #6
 800322e:	4619      	mov	r1, r3
 8003230:	f006 fb88 	bl	8009944 <memcpy>
	memcpy(&ADSR[i],potSource+218+(i*5),5 );  // +50  ,
 8003234:	4b49      	ldr	r3, [pc, #292]	; (800335c <main+0x5a4>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	4a4d      	ldr	r2, [pc, #308]	; (8003378 <main+0x5c0>)
 8003244:	1898      	adds	r0, r3, r2
 8003246:	4b45      	ldr	r3, [pc, #276]	; (800335c <main+0x5a4>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	33da      	adds	r3, #218	; 0xda
 8003254:	4a43      	ldr	r2, [pc, #268]	; (8003364 <main+0x5ac>)
 8003256:	4413      	add	r3, r2
 8003258:	2205      	movs	r2, #5
 800325a:	4619      	mov	r1, r3
 800325c:	f006 fb72 	bl	8009944 <memcpy>
for(i=0;i<10;i++){
 8003260:	4b3e      	ldr	r3, [pc, #248]	; (800335c <main+0x5a4>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b3c      	ldr	r3, [pc, #240]	; (800335c <main+0x5a4>)
 800326a:	801a      	strh	r2, [r3, #0]
 800326c:	4b3b      	ldr	r3, [pc, #236]	; (800335c <main+0x5a4>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	2b09      	cmp	r3, #9
 8003272:	d9b6      	bls.n	80031e2 <main+0x42a>




float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <main+0x5a4>)
 8003276:	2200      	movs	r2, #0
 8003278:	801a      	strh	r2, [r3, #0]
 800327a:	e03d      	b.n	80032f8 <main+0x540>

tempo_hold=(i+180)*0.0166666666;
 800327c:	4b37      	ldr	r3, [pc, #220]	; (800335c <main+0x5a4>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	33b4      	adds	r3, #180	; 0xb4
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fa24 	bl	80006d0 <__aeabi_i2d>
 8003288:	a32f      	add	r3, pc, #188	; (adr r3, 8003348 <main+0x590>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fc ffa3 	bl	80001d8 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f7fd fa83 	bl	80007a4 <__aeabi_d2f>
 800329e:	4603      	mov	r3, r0
 80032a0:	667b      	str	r3, [r7, #100]	; 0x64

tempo_hold=	1/tempo_hold;
 80032a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032a6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80032aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ae:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 80032b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80032b4:	f7fd fa1e 	bl	80006f4 <__aeabi_f2d>
 80032b8:	a325      	add	r3, pc, #148	; (adr r3, 8003350 <main+0x598>)
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	f7fc ff8b 	bl	80001d8 <__aeabi_dmul>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f7fd fa6b 	bl	80007a4 <__aeabi_d2f>
 80032ce:	4603      	mov	r3, r0
 80032d0:	667b      	str	r3, [r7, #100]	; 0x64
tempo_lut[i]=tempo_hold;
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <main+0x5a4>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80032dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e0:	ee17 3a90 	vmov	r3, s15
 80032e4:	b299      	uxth	r1, r3
 80032e6:	4b25      	ldr	r3, [pc, #148]	; (800337c <main+0x5c4>)
 80032e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <main+0x5a4>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <main+0x5a4>)
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <main+0x5a4>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	2ba0      	cmp	r3, #160	; 0xa0
 80032fe:	d9bd      	bls.n	800327c <main+0x4c4>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <main+0x5c8>)
 8003302:	f240 223b 	movw	r2, #571	; 0x23b
 8003306:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <main+0x5cc>)
 800330a:	2218      	movs	r2, #24
 800330c:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 800330e:	4b13      	ldr	r3, [pc, #76]	; (800335c <main+0x5a4>)
 8003310:	2200      	movs	r2, #0
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	e00b      	b.n	800332e <main+0x576>
	spell[i]=67;
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <main+0x5a4>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <main+0x5d0>)
 800331e:	2143      	movs	r1, #67	; 0x43
 8003320:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <main+0x5a4>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <main+0x5a4>)
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <main+0x5a4>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003336:	d3ee      	bcc.n	8003316 <main+0x55e>

}
gfx_clear();
 8003338:	f7fe f89e 	bl	8001478 <gfx_clear>
//display_fill();
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <main+0x5a4>)
 800333e:	2200      	movs	r2, #0
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	e033      	b.n	80033ac <main+0x5f4>
 8003344:	f3af 8000 	nop.w
 8003348:	0febdd13 	.word	0x0febdd13
 800334c:	3f911111 	.word	0x3f911111
 8003350:	33333333 	.word	0x33333333
 8003354:	40a11733 	.word	0x40a11733
 8003358:	20000d52 	.word	0x20000d52
 800335c:	20000d74 	.word	0x20000d74
 8003360:	20002680 	.word	0x20002680
 8003364:	20000bb8 	.word	0x20000bb8
 8003368:	20000a38 	.word	0x20000a38
 800336c:	20003b94 	.word	0x20003b94
 8003370:	20003b24 	.word	0x20003b24
 8003374:	20002f58 	.word	0x20002f58
 8003378:	20003098 	.word	0x20003098
 800337c:	2000253c 	.word	0x2000253c
 8003380:	20000d44 	.word	0x20000d44
 8003384:	20000a34 	.word	0x20000a34
 8003388:	20000000 	.word	0x20000000
 800338c:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <main+0x7f8>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	4b87      	ldr	r3, [pc, #540]	; (80035b0 <main+0x7f8>)
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	4b86      	ldr	r3, [pc, #536]	; (80035b4 <main+0x7fc>)
 800339a:	5c59      	ldrb	r1, [r3, r1]
 800339c:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <main+0x7fc>)
 800339e:	5499      	strb	r1, [r3, r2]
 80033a0:	4b83      	ldr	r3, [pc, #524]	; (80035b0 <main+0x7f8>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b81      	ldr	r3, [pc, #516]	; (80035b0 <main+0x7f8>)
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	4b80      	ldr	r3, [pc, #512]	; (80035b0 <main+0x7f8>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b4:	d3ea      	bcc.n	800338c <main+0x5d4>


}    //font replace
//    Merge menu times   here    char , int8 ,int16  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
for (n=0;n<256;n++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 80033b6:	4b80      	ldr	r3, [pc, #512]	; (80035b8 <main+0x800>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	801a      	strh	r2, [r3, #0]
 80033bc:	e00f      	b.n	80033de <main+0x626>

	menu_parser();  // run it closer to default_menu size ,times
 80033be:	f7fd fd0f 	bl	8000de0 <menu_parser>
	default_menu3[n>>1]=64;
 80033c2:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <main+0x800>)
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b7b      	ldr	r3, [pc, #492]	; (80035bc <main+0x804>)
 80033ce:	2140      	movs	r1, #64	; 0x40
 80033d0:	5499      	strb	r1, [r3, r2]
for (n=0;n<256;n++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 80033d2:	4b79      	ldr	r3, [pc, #484]	; (80035b8 <main+0x800>)
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <main+0x800>)
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <main+0x800>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	2bff      	cmp	r3, #255	; 0xff
 80033e4:	d9eb      	bls.n	80033be <main+0x606>
}
menu_title_count--;  //count back one
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <main+0x808>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4b74      	ldr	r3, [pc, #464]	; (80035c0 <main+0x808>)
 80033f0:	701a      	strb	r2, [r3, #0]

//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
uint16_t lut_temp3=0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c


menuSelect=0;
 80033fe:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <main+0x80c>)
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8003404:	4b70      	ldr	r3, [pc, #448]	; (80035c8 <main+0x810>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 800340a:	4b70      	ldr	r3, [pc, #448]	; (80035cc <main+0x814>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b6e      	ldr	r3, [pc, #440]	; (80035cc <main+0x814>)
 8003414:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003416:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <main+0x818>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a6c      	ldr	r2, [pc, #432]	; (80035d0 <main+0x818>)
 800341e:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003420:	4b6b      	ldr	r3, [pc, #428]	; (80035d0 <main+0x818>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	2b06      	cmp	r3, #6
 800342a:	d101      	bne.n	8003430 <main+0x678>
 800342c:	f7fd fea6 	bl	800117c <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8003430:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <main+0x818>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8003438:	4293      	cmp	r3, r2
 800343a:	f040 808f 	bne.w	800355c <main+0x7a4>
	  if (mem_count==255) mem_count=0; else mem_count++;  // write to first this was moved for no logical reason ?
 800343e:	4b65      	ldr	r3, [pc, #404]	; (80035d4 <main+0x81c>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2bff      	cmp	r3, #255	; 0xff
 8003444:	d103      	bne.n	800344e <main+0x696>
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <main+0x81c>)
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e005      	b.n	800345a <main+0x6a2>
 800344e:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <main+0x81c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	3301      	adds	r3, #1
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <main+0x81c>)
 8003458:	701a      	strb	r2, [r3, #0]
	  lfo_target_parse(); //
 800345a:	f7fd fd69 	bl	8000f30 <lfo_target_parse>
	// read values from stored

memcpy(potSource,&seq,46); // about 46 bytes
 800345e:	4a5e      	ldr	r2, [pc, #376]	; (80035d8 <main+0x820>)
 8003460:	4b5e      	ldr	r3, [pc, #376]	; (80035dc <main+0x824>)
 8003462:	4614      	mov	r4, r2
 8003464:	461d      	mov	r5, r3
 8003466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800346c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003472:	c407      	stmia	r4!, {r0, r1, r2}
 8003474:	8023      	strh	r3, [r4, #0]

for(i=0;i<10;i++){
 8003476:	4b4e      	ldr	r3, [pc, #312]	; (80035b0 <main+0x7f8>)
 8003478:	2200      	movs	r2, #0
 800347a:	801a      	strh	r2, [r3, #0]
 800347c:	e044      	b.n	8003508 <main+0x750>
	if (i<8){    memcpy(potSource+46+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 800347e:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <main+0x7f8>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	2b07      	cmp	r3, #7
 8003484:	d812      	bhi.n	80034ac <main+0x6f4>
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <main+0x7f8>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	332e      	adds	r3, #46	; 0x2e
 8003496:	4a50      	ldr	r2, [pc, #320]	; (80035d8 <main+0x820>)
 8003498:	1898      	adds	r0, r3, r2
 800349a:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <main+0x7f8>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	4a4f      	ldr	r2, [pc, #316]	; (80035e0 <main+0x828>)
 80034a2:	4413      	add	r3, r2
 80034a4:	220e      	movs	r2, #14
 80034a6:	4619      	mov	r1, r3
 80034a8:	f006 fa4c 	bl	8009944 <memcpy>

	memcpy(potSource+158+(i*5),&LFO[i],6 );  // + 60
 80034ac:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <main+0x7f8>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	339e      	adds	r3, #158	; 0x9e
 80034ba:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <main+0x820>)
 80034bc:	1898      	adds	r0, r3, r2
 80034be:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <main+0x7f8>)
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	015b      	lsls	r3, r3, #5
 80034c4:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <main+0x82c>)
 80034c6:	4413      	add	r3, r2
 80034c8:	2206      	movs	r2, #6
 80034ca:	4619      	mov	r1, r3
 80034cc:	f006 fa3a 	bl	8009944 <memcpy>
	memcpy(potSource+218+(i*5),&ADSR[i],5 );  // +50  ,
 80034d0:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <main+0x7f8>)
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	33da      	adds	r3, #218	; 0xda
 80034de:	4a3e      	ldr	r2, [pc, #248]	; (80035d8 <main+0x820>)
 80034e0:	1898      	adds	r0, r3, r2
 80034e2:	4b33      	ldr	r3, [pc, #204]	; (80035b0 <main+0x7f8>)
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	f44f 7307 	mov.w	r3, #540	; 0x21c
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	4a3d      	ldr	r2, [pc, #244]	; (80035e8 <main+0x830>)
 80034f2:	4413      	add	r3, r2
 80034f4:	2205      	movs	r2, #5
 80034f6:	4619      	mov	r1, r3
 80034f8:	f006 fa24 	bl	8009944 <memcpy>
for(i=0;i<10;i++){
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <main+0x7f8>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <main+0x7f8>)
 8003506:	801a      	strh	r2, [r3, #0]
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <main+0x7f8>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	2b09      	cmp	r3, #9
 800350e:	d9b6      	bls.n	800347e <main+0x6c6>

}	// copy vars into potSource

mem_buf=potSource[mem_count];
 8003510:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <main+0x81c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <main+0x820>)
 8003518:	5c9a      	ldrb	r2, [r3, r2]
 800351a:	4b34      	ldr	r3, [pc, #208]	; (80035ec <main+0x834>)
 800351c:	701a      	strb	r2, [r3, #0]
//if (mem_buf>160) mem_buf=160;   // just in case , may be a problem

	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 100);  // "&hi2c2"  actual register address
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <main+0x81c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	b2db      	uxtb	r3, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	b29b      	uxth	r3, r3
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	b29a      	uxth	r2, r3
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <main+0x81c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353a:	b29b      	uxth	r3, r3
 800353c:	4413      	add	r3, r2
 800353e:	b29a      	uxth	r2, r3
 8003540:	2364      	movs	r3, #100	; 0x64
 8003542:	9302      	str	r3, [sp, #8]
 8003544:	2301      	movs	r3, #1
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <main+0x834>)
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2302      	movs	r3, #2
 800354e:	21a0      	movs	r1, #160	; 0xa0
 8003550:	4827      	ldr	r0, [pc, #156]	; (80035f0 <main+0x838>)
 8003552:	f003 f859 	bl	8006608 <HAL_I2C_Mem_Write>
	//HAL_Delay(5); // this is slow , no bueno

	loop_counter2=0; //reset
 8003556:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <main+0x818>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi  ,, no freezes here
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <main+0x83c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d11c      	bne.n	800359e <main+0x7e6>

		  for (i=0;i<18;i++) {   display_process();   displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <main+0x7f8>)
 8003566:	2200      	movs	r2, #0
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	e009      	b.n	8003580 <main+0x7c8>
 800356c:	f7fd ffb8 	bl	80014e0 <display_process>
 8003570:	f7fe f98c 	bl	800188c <displayBuffer2>
 8003574:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <main+0x7f8>)
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <main+0x7f8>)
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <main+0x7f8>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	2b11      	cmp	r3, #17
 8003586:	d9f1      	bls.n	800356c <main+0x7b4>
		  gfx_send_swap=1;   // enable line swapping
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <main+0x840>)
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
		  disp_end=0;   ///reset till next full page
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <main+0x83c>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]


		  if (!disp_stepper) break;
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <main+0x844>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80f5 	beq.w	8003788 <main+0x9d0>
	  }


	  if (init<6)				// after 6 its done for good   // no freeze here
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <main+0x848>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d83a      	bhi.n	800361c <main+0x864>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 80035a6:	4b02      	ldr	r3, [pc, #8]	; (80035b0 <main+0x7f8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	e032      	b.n	8003614 <main+0x85c>
 80035ae:	bf00      	nop
 80035b0:	20000d74 	.word	0x20000d74
 80035b4:	200005a8 	.word	0x200005a8
 80035b8:	20000d52 	.word	0x20000d52
 80035bc:	20000438 	.word	0x20000438
 80035c0:	20003c4a 	.word	0x20003c4a
 80035c4:	20000d42 	.word	0x20000d42
 80035c8:	20000d46 	.word	0x20000d46
 80035cc:	20000d70 	.word	0x20000d70
 80035d0:	200021e0 	.word	0x200021e0
 80035d4:	200021de 	.word	0x200021de
 80035d8:	20000bb8 	.word	0x20000bb8
 80035dc:	20003b94 	.word	0x20003b94
 80035e0:	20003b24 	.word	0x20003b24
 80035e4:	20002f58 	.word	0x20002f58
 80035e8:	20003098 	.word	0x20003098
 80035ec:	200021e4 	.word	0x200021e4
 80035f0:	20003d8c 	.word	0x20003d8c
 80035f4:	20002b3a 	.word	0x20002b3a
 80035f8:	20002b06 	.word	0x20002b06
 80035fc:	200001b6 	.word	0x200001b6
 8003600:	200021d5 	.word	0x200021d5
 8003604:	f7fd fe8a 	bl	800131c <display_init>
 8003608:	4b62      	ldr	r3, [pc, #392]	; (8003794 <main+0x9dc>)
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	4b60      	ldr	r3, [pc, #384]	; (8003794 <main+0x9dc>)
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <main+0x9dc>)
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	2b05      	cmp	r3, #5
 800361a:	d9f3      	bls.n	8003604 <main+0x84c>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 800361c:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <main+0x9e0>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b05      	cmp	r3, #5
 8003622:	d92a      	bls.n	800367a <main+0x8c2>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 8003624:	4b5d      	ldr	r3, [pc, #372]	; (800379c <main+0x9e4>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d105      	bne.n	8003638 <main+0x880>
 800362c:	4b5c      	ldr	r3, [pc, #368]	; (80037a0 <main+0x9e8>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b5a      	ldr	r3, [pc, #360]	; (80037a0 <main+0x9e8>)
 8003636:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 8003638:	4b58      	ldr	r3, [pc, #352]	; (800379c <main+0x9e4>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10c      	bne.n	800365a <main+0x8a2>
 8003640:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <main+0x9ec>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	00d2      	lsls	r2, r2, #3
 800364a:	4413      	add	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	b29a      	uxth	r2, r3
 8003650:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <main+0x9f0>)
 8003652:	801a      	strh	r2, [r3, #0]
 8003654:	4b51      	ldr	r3, [pc, #324]	; (800379c <main+0x9e4>)
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 800365a:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <main+0x9e8>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b90      	cmp	r3, #144	; 0x90
 8003660:	d109      	bne.n	8003676 <main+0x8be>
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <main+0x9e8>)
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <main+0x9f0>)
 800366a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	4b4a      	ldr	r3, [pc, #296]	; (800379c <main+0x9e4>)
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 8003676:	f7fd fea7 	bl	80013c8 <gfx_send>


	  // send spi line data every loop cycle ,
	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 800367a:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <main+0x9f4>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2bff      	cmp	r3, #255	; 0xff
 8003680:	d128      	bne.n	80036d4 <main+0x91c>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8003682:	484b      	ldr	r0, [pc, #300]	; (80037b0 <main+0x9f8>)
 8003684:	f001 fd04 	bl	8005090 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8003688:	463b      	mov	r3, r7
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8003690:	2101      	movs	r1, #1
 8003692:	4847      	ldr	r0, [pc, #284]	; (80037b0 <main+0x9f8>)
 8003694:	f001 f862 	bl	800475c <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003698:	2101      	movs	r1, #1
 800369a:	4845      	ldr	r0, [pc, #276]	; (80037b0 <main+0x9f8>)
 800369c:	f001 fe0e 	bl	80052bc <HAL_ADCEx_InjectedGetValue>
 80036a0:	4603      	mov	r3, r0
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80036a6:	2102      	movs	r1, #2
 80036a8:	4841      	ldr	r0, [pc, #260]	; (80037b0 <main+0x9f8>)
 80036aa:	f001 fe07 	bl	80052bc <HAL_ADCEx_InjectedGetValue>
 80036ae:	4603      	mov	r3, r0
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 80036b4:	883b      	ldrh	r3, [r7, #0]
 80036b6:	09db      	lsrs	r3, r3, #7
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <main+0x9fc>)
 80036bc:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	09db      	lsrs	r3, r3, #7
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <main+0x9fc>)
 80036c6:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 80036c8:	4839      	ldr	r0, [pc, #228]	; (80037b0 <main+0x9f8>)
 80036ca:	f001 fdab 	bl	8005224 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <main+0x9f4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80036d4:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <main+0xa00>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b07      	cmp	r3, #7
 80036da:	d106      	bne.n	80036ea <main+0x932>
 80036dc:	4b37      	ldr	r3, [pc, #220]	; (80037bc <main+0xa04>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <main+0x932>
 80036e4:	4b35      	ldr	r3, [pc, #212]	; (80037bc <main+0xa04>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 80036ea:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <main+0xa00>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036fa:	4831      	ldr	r0, [pc, #196]	; (80037c0 <main+0xa08>)
 80036fc:	f002 fe26 	bl	800634c <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 8003700:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <main+0xa0c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d03a      	beq.n	800377e <main+0x9c6>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 8003708:	4829      	ldr	r0, [pc, #164]	; (80037b0 <main+0x9f8>)
 800370a:	f001 f9a3 	bl	8004a54 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 800370e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003712:	492d      	ldr	r1, [pc, #180]	; (80037c8 <main+0xa10>)
 8003714:	4826      	ldr	r0, [pc, #152]	; (80037b0 <main+0x9f8>)
 8003716:	f001 f8ad 	bl	8004874 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <main+0xa10>)
 800371c:	677b      	str	r3, [r7, #116]	; 0x74

	  			for (i=0;i<512;i++)
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <main+0x9dc>)
 8003720:	2200      	movs	r2, #0
 8003722:	801a      	strh	r2, [r3, #0]
 8003724:	e023      	b.n	800376e <main+0x9b6>
	  			{

	  				uint16_t crap_hold=*click;
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  			uint16_t crap_hold1=*(++click);
 800372e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003730:	3302      	adds	r3, #2
 8003732:	677b      	str	r3, [r7, #116]	; 0x74
 8003734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  		click++;
 800373c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373e:	3302      	adds	r3, #2
 8003740:	677b      	str	r3, [r7, #116]	; 0x74

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 8003742:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8003746:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800374a:	4413      	add	r3, r2
 800374c:	1059      	asrs	r1, r3, #1
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <main+0x9dc>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	b289      	uxth	r1, r1
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <main+0xa14>)
 8003758:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <main+0xa0c>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <main+0x9dc>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <main+0x9dc>)
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <main+0x9dc>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003776:	d3d6      	bcc.n	8003726 <main+0x96e>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 8003778:	e001      	b.n	800377e <main+0x9c6>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 800377a:	f7fe f919 	bl	80019b0 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <main+0xa18>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f9      	bne.n	800377a <main+0x9c2>
	  loop_counter++ ;
 8003786:	e640      	b.n	800340a <main+0x652>
		  if (!disp_stepper) break;
 8003788:	bf00      	nop
 800378a:	2300      	movs	r3, #0

	    }  // while loop , total 250/350  cycles/   5/7ms   , max allowed is 13ms


  /* USER CODE END 3 */
}
 800378c:	4618      	mov	r0, r3
 800378e:	377c      	adds	r7, #124	; 0x7c
 8003790:	46bd      	mov	sp, r7
 8003792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003794:	20000d74 	.word	0x20000d74
 8003798:	200021d5 	.word	0x200021d5
 800379c:	20002b06 	.word	0x20002b06
 80037a0:	20002b07 	.word	0x20002b07
 80037a4:	20002b05 	.word	0x20002b05
 80037a8:	20002b02 	.word	0x20002b02
 80037ac:	20000d70 	.word	0x20000d70
 80037b0:	20003ce4 	.word	0x20003ce4
 80037b4:	200001a8 	.word	0x200001a8
 80037b8:	20003b94 	.word	0x20003b94
 80037bc:	200021cc 	.word	0x200021cc
 80037c0:	40020800 	.word	0x40020800
 80037c4:	20002f3c 	.word	0x20002f3c
 80037c8:	20001584 	.word	0x20001584
 80037cc:	20002b3c 	.word	0x20002b3c
 80037d0:	200001b2 	.word	0x200001b2

080037d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b094      	sub	sp, #80	; 0x50
 80037d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037da:	f107 0320 	add.w	r3, r7, #32
 80037de:	2230      	movs	r2, #48	; 0x30
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f006 f8bc 	bl	8009960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <SystemClock_Config+0xcc>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a27      	ldr	r2, [pc, #156]	; (80038a0 <SystemClock_Config+0xcc>)
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003806:	6413      	str	r3, [r2, #64]	; 0x40
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <SystemClock_Config+0xcc>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <SystemClock_Config+0xd0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <SystemClock_Config+0xd0>)
 800381e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <SystemClock_Config+0xd0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003830:	2302      	movs	r3, #2
 8003832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003834:	2301      	movs	r3, #1
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003838:	2310      	movs	r3, #16
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800383c:	2302      	movs	r3, #2
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003840:	2300      	movs	r3, #0
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003844:	2308      	movs	r3, #8
 8003846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003848:	2364      	movs	r3, #100	; 0x64
 800384a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800384c:	2302      	movs	r3, #2
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003850:	2304      	movs	r3, #4
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003854:	f107 0320 	add.w	r3, r7, #32
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fd51 	bl	8007300 <HAL_RCC_OscConfig>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003864:	f000 faf6 	bl	8003e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003868:	230f      	movs	r3, #15
 800386a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800386c:	2302      	movs	r3, #2
 800386e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800387a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800387e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	2103      	movs	r1, #3
 8003886:	4618      	mov	r0, r3
 8003888:	f003 ffb2 	bl	80077f0 <HAL_RCC_ClockConfig>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003892:	f000 fadf 	bl	8003e54 <Error_Handler>
  }
}
 8003896:	bf00      	nop
 8003898:	3750      	adds	r7, #80	; 0x50
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000

080038a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	; 0x30
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038ae:	f107 0320 	add.w	r3, r7, #32
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80038bc:	463b      	mov	r3, r7
 80038be:	2220      	movs	r2, #32
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f006 f84c 	bl	8009960 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038c8:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038ca:	4a37      	ldr	r2, [pc, #220]	; (80039a8 <MX_ADC1_Init+0x100>)
 80038cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038ce:	4b35      	ldr	r3, [pc, #212]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038d6:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80038dc:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038de:	2201      	movs	r2, #1
 80038e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038f6:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038f8:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <MX_ADC1_Init+0x104>)
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <MX_ADC1_Init+0xfc>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <MX_ADC1_Init+0xfc>)
 8003904:	2201      	movs	r2, #1
 8003906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <MX_ADC1_Init+0xfc>)
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003910:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <MX_ADC1_Init+0xfc>)
 8003912:	2200      	movs	r2, #0
 8003914:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003916:	4823      	ldr	r0, [pc, #140]	; (80039a4 <MX_ADC1_Init+0xfc>)
 8003918:	f000 fe28 	bl	800456c <HAL_ADC_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8003922:	f000 fa97 	bl	8003e54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003926:	2309      	movs	r3, #9
 8003928:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800392e:	2306      	movs	r3, #6
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003932:	f107 0320 	add.w	r3, r7, #32
 8003936:	4619      	mov	r1, r3
 8003938:	481a      	ldr	r0, [pc, #104]	; (80039a4 <MX_ADC1_Init+0xfc>)
 800393a:	f001 f8f9 	bl	8004b30 <HAL_ADC_ConfigChannel>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003944:	f000 fa86 	bl	8003e54 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8003948:	2300      	movs	r3, #0
 800394a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800394c:	2301      	movs	r3, #1
 800394e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8003950:	2302      	movs	r3, #2
 8003952:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003954:	2303      	movs	r3, #3
 8003956:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <MX_ADC1_Init+0x108>)
 800395e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003960:	2300      	movs	r3, #0
 8003962:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003964:	2300      	movs	r3, #0
 8003966:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800396c:	463b      	mov	r3, r7
 800396e:	4619      	mov	r1, r3
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <MX_ADC1_Init+0xfc>)
 8003972:	f001 fcdb 	bl	800532c <HAL_ADCEx_InjectedConfigChannel>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800397c:	f000 fa6a 	bl	8003e54 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8003980:	2302      	movs	r3, #2
 8003982:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8003984:	2302      	movs	r3, #2
 8003986:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003988:	463b      	mov	r3, r7
 800398a:	4619      	mov	r1, r3
 800398c:	4805      	ldr	r0, [pc, #20]	; (80039a4 <MX_ADC1_Init+0xfc>)
 800398e:	f001 fccd 	bl	800532c <HAL_ADCEx_InjectedConfigChannel>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8003998:	f000 fa5c 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800399c:	bf00      	nop
 800399e:	3730      	adds	r7, #48	; 0x30
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20003ce4 	.word	0x20003ce4
 80039a8:	40012000 	.word	0x40012000
 80039ac:	0f000001 	.word	0x0f000001
 80039b0:	000f0001 	.word	0x000f0001

080039b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <MX_I2C2_Init+0x54>)
 80039bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <MX_I2C2_Init+0x58>)
 80039c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039da:	2200      	movs	r2, #0
 80039dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <MX_I2C2_Init+0x50>)
 80039f2:	f002 fcc5 	bl	8006380 <HAL_I2C_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80039fc:	f000 fa2a 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20003d8c 	.word	0x20003d8c
 8003a08:	40005800 	.word	0x40005800
 8003a0c:	00061a80 	.word	0x00061a80

08003a10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a14:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <MX_SPI1_Init+0x68>)
 8003a18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a28:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a44:	2208      	movs	r2, #8
 8003a46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a60:	4804      	ldr	r0, [pc, #16]	; (8003a74 <MX_SPI1_Init+0x64>)
 8003a62:	f004 f891 	bl	8007b88 <HAL_SPI_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a6c:	f000 f9f2 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20003de0 	.word	0x20003de0
 8003a78:	40013000 	.word	0x40013000

08003a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <MX_SPI2_Init+0x68>)
 8003a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003ab0:	2230      	movs	r2, #48	; 0x30
 8003ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003ac8:	220a      	movs	r2, #10
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003acc:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <MX_SPI2_Init+0x64>)
 8003ace:	f004 f85b 	bl	8007b88 <HAL_SPI_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ad8:	f000 f9bc 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20003e38 	.word	0x20003e38
 8003ae4:	40003800 	.word	0x40003800

08003ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f005 ff32 	bl	8009960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003b32:	2302      	movs	r3, #2
 8003b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b36:	2301      	movs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003b42:	2302      	movs	r3, #2
 8003b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b46:	2301      	movs	r3, #1
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	4619      	mov	r1, r3
 8003b58:	480c      	ldr	r0, [pc, #48]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b5a:	f004 ffd3 	bl	8008b04 <HAL_TIM_Encoder_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003b64:	f000 f976 	bl	8003e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_TIM2_Init+0xa4>)
 8003b76:	f005 fdf1 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003b80:	f000 f968 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	3730      	adds	r7, #48	; 0x30
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20003e90 	.word	0x20003e90

08003b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08e      	sub	sp, #56	; 0x38
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba4:	f107 0320 	add.w	r3, r7, #32
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	611a      	str	r2, [r3, #16]
 8003bbc:	615a      	str	r2, [r3, #20]
 8003bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bc0:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <MX_TIM3_Init+0xe8>)
 8003bc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003bc6:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003bd2:	4b28      	ldr	r3, [pc, #160]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003bd4:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8003bd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003be6:	4823      	ldr	r0, [pc, #140]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003be8:	f004 fd76 	bl	80086d8 <HAL_TIM_Base_Init>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003bf2:	f000 f92f 	bl	8003e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c00:	4619      	mov	r1, r3
 8003c02:	481c      	ldr	r0, [pc, #112]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003c04:	f005 f9ee 	bl	8008fe4 <HAL_TIM_ConfigClockSource>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003c0e:	f000 f921 	bl	8003e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c12:	4818      	ldr	r0, [pc, #96]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003c14:	f004 fe6c 	bl	80088f0 <HAL_TIM_PWM_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003c1e:	f000 f919 	bl	8003e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c2a:	f107 0320 	add.w	r3, r7, #32
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4810      	ldr	r0, [pc, #64]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003c32:	f005 fd93 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003c3c:	f000 f90a 	bl	8003e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003c40:	2370      	movs	r3, #112	; 0x70
 8003c42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	2208      	movs	r2, #8
 8003c54:	4619      	mov	r1, r3
 8003c56:	4807      	ldr	r0, [pc, #28]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003c58:	f005 f902 	bl	8008e60 <HAL_TIM_PWM_ConfigChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003c62:	f000 f8f7 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003c66:	4803      	ldr	r0, [pc, #12]	; (8003c74 <MX_TIM3_Init+0xe4>)
 8003c68:	f000 fb32 	bl	80042d0 <HAL_TIM_MspPostInit>

}
 8003c6c:	bf00      	nop
 8003c6e:	3738      	adds	r7, #56	; 0x38
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20003ed8 	.word	0x20003ed8
 8003c78:	40000400 	.word	0x40000400

08003c7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	2224      	movs	r2, #36	; 0x24
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f005 fe68 	bl	8009960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003c9a:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <MX_TIM4_Init+0xa4>)
 8003c9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003caa:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ce2:	f107 030c 	add.w	r3, r7, #12
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480c      	ldr	r0, [pc, #48]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003cea:	f004 ff0b 	bl	8008b04 <HAL_TIM_Encoder_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003cf4:	f000 f8ae 	bl	8003e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4805      	ldr	r0, [pc, #20]	; (8003d1c <MX_TIM4_Init+0xa0>)
 8003d06:	f005 fd29 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003d10:	f000 f8a0 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d14:	bf00      	nop
 8003d16:	3730      	adds	r7, #48	; 0x30
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20003f20 	.word	0x20003f20
 8003d20:	40000800 	.word	0x40000800

08003d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <MX_DMA_Init+0x3c>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <MX_DMA_Init+0x3c>)
 8003d34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <MX_DMA_Init+0x3c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	2100      	movs	r1, #0
 8003d4a:	203c      	movs	r0, #60	; 0x3c
 8003d4c:	f001 fd63 	bl	8005816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003d50:	203c      	movs	r0, #60	; 0x3c
 8003d52:	f001 fd7c 	bl	800584e <HAL_NVIC_EnableIRQ>

}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6a:	f107 030c 	add.w	r3, r7, #12
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	607b      	str	r3, [r7, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <MX_GPIO_Init+0xc4>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dd4:	4815      	ldr	r0, [pc, #84]	; (8003e2c <MX_GPIO_Init+0xc8>)
 8003dd6:	f002 fab9 	bl	800634c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8003dda:	2201      	movs	r2, #1
 8003ddc:	2110      	movs	r1, #16
 8003dde:	4814      	ldr	r0, [pc, #80]	; (8003e30 <MX_GPIO_Init+0xcc>)
 8003de0:	f002 fab4 	bl	800634c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dea:	2301      	movs	r3, #1
 8003dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	480b      	ldr	r0, [pc, #44]	; (8003e2c <MX_GPIO_Init+0xc8>)
 8003dfe:	f002 f921 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8003e02:	2310      	movs	r3, #16
 8003e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e06:	2301      	movs	r3, #1
 8003e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	4619      	mov	r1, r3
 8003e18:	4805      	ldr	r0, [pc, #20]	; (8003e30 <MX_GPIO_Init+0xcc>)
 8003e1a:	f002 f913 	bl	8006044 <HAL_GPIO_Init>

}
 8003e1e:	bf00      	nop
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020000 	.word	0x40020000

08003e34 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]


}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20002f3c 	.word	0x20002f3c

08003e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e58:	b672      	cpsid	i
}
 8003e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <Error_Handler+0x8>
	...

08003e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <HAL_MspInit+0x4c>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	4a0f      	ldr	r2, [pc, #60]	; (8003eac <HAL_MspInit+0x4c>)
 8003e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_MspInit+0x4c>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_MspInit+0x4c>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4a08      	ldr	r2, [pc, #32]	; (8003eac <HAL_MspInit+0x4c>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6413      	str	r3, [r2, #64]	; 0x40
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_MspInit+0x4c>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_ADC_MspInit+0x110>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d171      	bne.n	8003fb6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee2:	4b38      	ldr	r3, [pc, #224]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a33      	ldr	r2, [pc, #204]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_ADC_MspInit+0x114>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8003f26:	2305      	movs	r3, #5
 8003f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	4619      	mov	r1, r3
 8003f38:	4823      	ldr	r0, [pc, #140]	; (8003fc8 <HAL_ADC_MspInit+0x118>)
 8003f3a:	f002 f883 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f42:	2303      	movs	r3, #3
 8003f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	4619      	mov	r1, r3
 8003f50:	481e      	ldr	r0, [pc, #120]	; (8003fcc <HAL_ADC_MspInit+0x11c>)
 8003f52:	f002 f877 	bl	8006044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_ADC_MspInit+0x124>)
 8003f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f9a:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003f9c:	f001 fc72 	bl	8005884 <HAL_DMA_Init>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003fa6:	f7ff ff55 	bl	8003e54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
 8003fb0:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <HAL_ADC_MspInit+0x120>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fb6:	bf00      	nop
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40012000 	.word	0x40012000
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40020000 	.word	0x40020000
 8003fcc:	40020400 	.word	0x40020400
 8003fd0:	20003d2c 	.word	0x20003d2c
 8003fd4:	40026470 	.word	0x40026470

08003fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe0:	f107 0314 	add.w	r3, r7, #20
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	; (8004080 <HAL_I2C_MspInit+0xa8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d13d      	bne.n	8004076 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	4b21      	ldr	r3, [pc, #132]	; (8004084 <HAL_I2C_MspInit+0xac>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a20      	ldr	r2, [pc, #128]	; (8004084 <HAL_I2C_MspInit+0xac>)
 8004004:	f043 0302 	orr.w	r3, r3, #2
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_I2C_MspInit+0xac>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800401c:	2312      	movs	r3, #18
 800401e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004024:	2303      	movs	r3, #3
 8004026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004028:	2309      	movs	r3, #9
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	4619      	mov	r1, r3
 8004032:	4815      	ldr	r0, [pc, #84]	; (8004088 <HAL_I2C_MspInit+0xb0>)
 8004034:	f002 f806 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800403e:	2312      	movs	r3, #18
 8004040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004046:	2303      	movs	r3, #3
 8004048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800404a:	2304      	movs	r3, #4
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	4619      	mov	r1, r3
 8004054:	480c      	ldr	r0, [pc, #48]	; (8004088 <HAL_I2C_MspInit+0xb0>)
 8004056:	f001 fff5 	bl	8006044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_I2C_MspInit+0xac>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <HAL_I2C_MspInit+0xac>)
 8004064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_I2C_MspInit+0xac>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004076:	bf00      	nop
 8004078:	3728      	adds	r7, #40	; 0x28
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40005800 	.word	0x40005800
 8004084:	40023800 	.word	0x40023800
 8004088:	40020400 	.word	0x40020400

0800408c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08c      	sub	sp, #48	; 0x30
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004094:	f107 031c 	add.w	r3, r7, #28
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a32      	ldr	r2, [pc, #200]	; (8004174 <HAL_SPI_MspInit+0xe8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d12c      	bne.n	8004108 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	4b31      	ldr	r3, [pc, #196]	; (8004178 <HAL_SPI_MspInit+0xec>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	4a30      	ldr	r2, [pc, #192]	; (8004178 <HAL_SPI_MspInit+0xec>)
 80040b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040bc:	6453      	str	r3, [r2, #68]	; 0x44
 80040be:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_SPI_MspInit+0xec>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_SPI_MspInit+0xec>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	4a29      	ldr	r2, [pc, #164]	; (8004178 <HAL_SPI_MspInit+0xec>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6313      	str	r3, [r2, #48]	; 0x30
 80040da:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_SPI_MspInit+0xec>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80040e6:	23e0      	movs	r3, #224	; 0xe0
 80040e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ea:	2302      	movs	r3, #2
 80040ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040f6:	2305      	movs	r3, #5
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fa:	f107 031c 	add.w	r3, r7, #28
 80040fe:	4619      	mov	r1, r3
 8004100:	481e      	ldr	r0, [pc, #120]	; (800417c <HAL_SPI_MspInit+0xf0>)
 8004102:	f001 ff9f 	bl	8006044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004106:	e031      	b.n	800416c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_SPI_MspInit+0xf4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12c      	bne.n	800416c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_SPI_MspInit+0xec>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	4a17      	ldr	r2, [pc, #92]	; (8004178 <HAL_SPI_MspInit+0xec>)
 800411c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_SPI_MspInit+0xec>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_SPI_MspInit+0xec>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <HAL_SPI_MspInit+0xec>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_SPI_MspInit+0xec>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800414a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800414e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004158:	2303      	movs	r3, #3
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800415c:	2305      	movs	r3, #5
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004160:	f107 031c 	add.w	r3, r7, #28
 8004164:	4619      	mov	r1, r3
 8004166:	4807      	ldr	r0, [pc, #28]	; (8004184 <HAL_SPI_MspInit+0xf8>)
 8004168:	f001 ff6c 	bl	8006044 <HAL_GPIO_Init>
}
 800416c:	bf00      	nop
 800416e:	3730      	adds	r7, #48	; 0x30
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40013000 	.word	0x40013000
 8004178:	40023800 	.word	0x40023800
 800417c:	40020000 	.word	0x40020000
 8004180:	40003800 	.word	0x40003800
 8004184:	40020400 	.word	0x40020400

08004188 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 031c 	add.w	r3, r7, #28
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a8:	d12d      	bne.n	8004206 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	4b30      	ldr	r3, [pc, #192]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	4a2f      	ldr	r2, [pc, #188]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a28      	ldr	r2, [pc, #160]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b26      	ldr	r3, [pc, #152]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 80041e2:	f248 0302 	movw	r3, #32770	; 0x8002
 80041e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e8:	2302      	movs	r3, #2
 80041ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ec:	2301      	movs	r3, #1
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041f4:	2301      	movs	r3, #1
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f8:	f107 031c 	add.w	r3, r7, #28
 80041fc:	4619      	mov	r1, r3
 80041fe:	481d      	ldr	r0, [pc, #116]	; (8004274 <HAL_TIM_Encoder_MspInit+0xec>)
 8004200:	f001 ff20 	bl	8006044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004204:	e030      	b.n	8004268 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_TIM_Encoder_MspInit+0xf0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d12b      	bne.n	8004268 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	4a15      	ldr	r2, [pc, #84]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	6413      	str	r3, [r2, #64]	; 0x40
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	6313      	str	r3, [r2, #48]	; 0x30
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_TIM_Encoder_MspInit+0xe8>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004248:	23c0      	movs	r3, #192	; 0xc0
 800424a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424c:	2302      	movs	r3, #2
 800424e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004250:	2301      	movs	r3, #1
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004254:	2300      	movs	r3, #0
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004258:	2302      	movs	r3, #2
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800425c:	f107 031c 	add.w	r3, r7, #28
 8004260:	4619      	mov	r1, r3
 8004262:	4806      	ldr	r0, [pc, #24]	; (800427c <HAL_TIM_Encoder_MspInit+0xf4>)
 8004264:	f001 feee 	bl	8006044 <HAL_GPIO_Init>
}
 8004268:	bf00      	nop
 800426a:	3730      	adds	r7, #48	; 0x30
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	40020000 	.word	0x40020000
 8004278:	40000800 	.word	0x40000800
 800427c:	40020400 	.word	0x40020400

08004280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a0e      	ldr	r2, [pc, #56]	; (80042c8 <HAL_TIM_Base_MspInit+0x48>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d115      	bne.n	80042be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <HAL_TIM_Base_MspInit+0x4c>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <HAL_TIM_Base_MspInit+0x4c>)
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	6413      	str	r3, [r2, #64]	; 0x40
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_TIM_Base_MspInit+0x4c>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042ae:	2200      	movs	r2, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	201d      	movs	r0, #29
 80042b4:	f001 faaf 	bl	8005816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042b8:	201d      	movs	r0, #29
 80042ba:	f001 fac8 	bl	800584e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40023800 	.word	0x40023800

080042d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d8:	f107 030c 	add.w	r3, r7, #12
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a12      	ldr	r2, [pc, #72]	; (8004338 <HAL_TIM_MspPostInit+0x68>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d11d      	bne.n	800432e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_TIM_MspPostInit+0x6c>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <HAL_TIM_MspPostInit+0x6c>)
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_TIM_MspPostInit+0x6c>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800430e:	2301      	movs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004312:	2302      	movs	r3, #2
 8004314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800431e:	2302      	movs	r3, #2
 8004320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004322:	f107 030c 	add.w	r3, r7, #12
 8004326:	4619      	mov	r1, r3
 8004328:	4805      	ldr	r0, [pc, #20]	; (8004340 <HAL_TIM_MspPostInit+0x70>)
 800432a:	f001 fe8b 	bl	8006044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800432e:	bf00      	nop
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40000400 	.word	0x40000400
 800433c:	40023800 	.word	0x40023800
 8004340:	40020400 	.word	0x40020400

08004344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004348:	e7fe      	b.n	8004348 <NMI_Handler+0x4>

0800434a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800434e:	e7fe      	b.n	800434e <HardFault_Handler+0x4>

08004350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004354:	e7fe      	b.n	8004354 <MemManage_Handler+0x4>

08004356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800435a:	e7fe      	b.n	800435a <BusFault_Handler+0x4>

0800435c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004360:	e7fe      	b.n	8004360 <UsageFault_Handler+0x4>

08004362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004390:	f000 f8a8 	bl	80044e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004394:	bf00      	nop
 8004396:	bd80      	pop	{r7, pc}

08004398 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <TIM3_IRQHandler+0x10>)
 800439e:	f004 fc57 	bl	8008c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20003ed8 	.word	0x20003ed8

080043ac <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80043b0:	4802      	ldr	r0, [pc, #8]	; (80043bc <DMA2_Stream4_IRQHandler+0x10>)
 80043b2:	f001 fbdd 	bl	8005b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20003d2c 	.word	0x20003d2c

080043c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <SystemInit+0x28>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	4a07      	ldr	r2, [pc, #28]	; (80043e8 <SystemInit+0x28>)
 80043cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <SystemInit+0x28>)
 80043d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043da:	609a      	str	r2, [r3, #8]
#endif
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80043ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004424 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043f2:	e003      	b.n	80043fc <LoopCopyDataInit>

080043f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043fa:	3104      	adds	r1, #4

080043fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043fc:	480b      	ldr	r0, [pc, #44]	; (800442c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004400:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004402:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004404:	d3f6      	bcc.n	80043f4 <CopyDataInit>
  ldr  r2, =_sbss
 8004406:	4a0b      	ldr	r2, [pc, #44]	; (8004434 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004408:	e002      	b.n	8004410 <LoopFillZerobss>

0800440a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800440a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800440c:	f842 3b04 	str.w	r3, [r2], #4

08004410 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004412:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004414:	d3f9      	bcc.n	800440a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004416:	f7ff ffd3 	bl	80043c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800441a:	f005 fa6f 	bl	80098fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800441e:	f7fe fccb 	bl	8002db8 <main>
  bx  lr    
 8004422:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004424:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004428:	0800ab08 	.word	0x0800ab08
  ldr  r0, =_sdata
 800442c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004430:	20000a18 	.word	0x20000a18
  ldr  r2, =_sbss
 8004434:	20000a18 	.word	0x20000a18
  ldr  r3, = _ebss
 8004438:	20003f6c 	.word	0x20003f6c

0800443c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800443c:	e7fe      	b.n	800443c <ADC_IRQHandler>
	...

08004440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HAL_Init+0x40>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <HAL_Init+0x40>)
 800444a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_Init+0x40>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <HAL_Init+0x40>)
 8004456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800445a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_Init+0x40>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a07      	ldr	r2, [pc, #28]	; (8004480 <HAL_Init+0x40>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004468:	2003      	movs	r0, #3
 800446a:	f001 f9c9 	bl	8005800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800446e:	2000      	movs	r0, #0
 8004470:	f000 f808 	bl	8004484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004474:	f7ff fcf4 	bl	8003e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023c00 	.word	0x40023c00

08004484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <HAL_InitTick+0x54>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <HAL_InitTick+0x58>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800449a:	fbb3 f3f1 	udiv	r3, r3, r1
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 f9e1 	bl	800586a <HAL_SYSTICK_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e00e      	b.n	80044d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d80a      	bhi.n	80044ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044b8:	2200      	movs	r2, #0
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	f001 f9a9 	bl	8005816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044c4:	4a06      	ldr	r2, [pc, #24]	; (80044e0 <HAL_InitTick+0x5c>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	200009a8 	.word	0x200009a8
 80044dc:	200009b0 	.word	0x200009b0
 80044e0:	200009ac 	.word	0x200009ac

080044e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_IncTick+0x20>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_IncTick+0x24>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4413      	add	r3, r2
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <HAL_IncTick+0x24>)
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	200009b0 	.word	0x200009b0
 8004508:	20003f68 	.word	0x20003f68

0800450c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return uwTick;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_GetTick+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20003f68 	.word	0x20003f68

08004524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800452c:	f7ff ffee 	bl	800450c <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d005      	beq.n	800454a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <HAL_Delay+0x44>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800454a:	bf00      	nop
 800454c:	f7ff ffde 	bl	800450c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	429a      	cmp	r2, r3
 800455a:	d8f7      	bhi.n	800454c <HAL_Delay+0x28>
  {
  }
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200009b0 	.word	0x200009b0

0800456c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e033      	b.n	80045ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff fc90 	bl	8003eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d118      	bne.n	80045dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045b2:	f023 0302 	bic.w	r3, r3, #2
 80045b6:	f043 0202 	orr.w	r2, r3, #2
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fbe8 	bl	8004d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
 80045da:	e001      	b.n	80045e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_ADC_Start+0x1a>
 800460a:	2302      	movs	r3, #2
 800460c:	e097      	b.n	800473e <HAL_ADC_Start+0x14a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d018      	beq.n	8004656 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004634:	4b45      	ldr	r3, [pc, #276]	; (800474c <HAL_ADC_Start+0x158>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a45      	ldr	r2, [pc, #276]	; (8004750 <HAL_ADC_Start+0x15c>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	0c9a      	lsrs	r2, r3, #18
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004648:	e002      	b.n	8004650 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3b01      	subs	r3, #1
 800464e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f9      	bne.n	800464a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d15f      	bne.n	8004724 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800468e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d106      	bne.n	80046b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a8:	f023 0206 	bic.w	r2, r3, #6
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44
 80046b0:	e002      	b.n	80046b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_ADC_Start+0x160>)
 80046c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d129      	bne.n	800473c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	e020      	b.n	800473c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_ADC_Start+0x164>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d11b      	bne.n	800473c <HAL_ADC_Start+0x148>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d114      	bne.n	800473c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	e00b      	b.n	800473c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	f043 0210 	orr.w	r2, r3, #16
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	200009a8 	.word	0x200009a8
 8004750:	431bde83 	.word	0x431bde83
 8004754:	40012300 	.word	0x40012300
 8004758:	40012000 	.word	0x40012000

0800475c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004778:	d113      	bne.n	80047a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	d10b      	bne.n	80047a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e063      	b.n	800486a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80047a2:	f7ff feb3 	bl	800450c <HAL_GetTick>
 80047a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047a8:	e021      	b.n	80047ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d01d      	beq.n	80047ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_ADC_PollForConversion+0x6c>
 80047b8:	f7ff fea8 	bl	800450c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d212      	bcs.n	80047ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d00b      	beq.n	80047ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f043 0204 	orr.w	r2, r3, #4
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e03d      	b.n	800486a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d1d6      	bne.n	80047aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0212 	mvn.w	r2, #18
 8004804:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d123      	bne.n	8004868 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11f      	bne.n	8004868 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004840:	2b00      	cmp	r3, #0
 8004842:	d111      	bne.n	8004868 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d105      	bne.n	8004868 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_ADC_Start_DMA+0x1e>
 800488e:	2302      	movs	r3, #2
 8004890:	e0ce      	b.n	8004a30 <HAL_ADC_Start_DMA+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d018      	beq.n	80048da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048b8:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <HAL_ADC_Start_DMA+0x1c4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a5f      	ldr	r2, [pc, #380]	; (8004a3c <HAL_ADC_Start_DMA+0x1c8>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0c9a      	lsrs	r2, r3, #18
 80048c4:	4613      	mov	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	4413      	add	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80048cc:	e002      	b.n	80048d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f9      	bne.n	80048ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e8:	d107      	bne.n	80048fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b01      	cmp	r3, #1
 8004906:	f040 8086 	bne.w	8004a16 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004934:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004948:	d106      	bne.n	8004958 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f023 0206 	bic.w	r2, r3, #6
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	645a      	str	r2, [r3, #68]	; 0x44
 8004956:	e002      	b.n	800495e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004966:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_ADC_Start_DMA+0x1cc>)
 8004968:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	4a35      	ldr	r2, [pc, #212]	; (8004a44 <HAL_ADC_Start_DMA+0x1d0>)
 8004970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <HAL_ADC_Start_DMA+0x1d4>)
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	4a33      	ldr	r2, [pc, #204]	; (8004a4c <HAL_ADC_Start_DMA+0x1d8>)
 8004980:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800498a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800499a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	334c      	adds	r3, #76	; 0x4c
 80049b6:	4619      	mov	r1, r3
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f001 f810 	bl	80059e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10f      	bne.n	80049ec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d129      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	e020      	b.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <HAL_ADC_Start_DMA+0x1dc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d11b      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d114      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e00b      	b.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f043 0210 	orr.w	r2, r3, #16
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	200009a8 	.word	0x200009a8
 8004a3c:	431bde83 	.word	0x431bde83
 8004a40:	40012300 	.word	0x40012300
 8004a44:	08004f8d 	.word	0x08004f8d
 8004a48:	08005047 	.word	0x08005047
 8004a4c:	08005063 	.word	0x08005063
 8004a50:	40012000 	.word	0x40012000

08004a54 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_ADC_Stop_DMA+0x1a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e048      	b.n	8004b00 <HAL_ADC_Stop_DMA+0xac>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d130      	bne.n	8004af6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 ffea 	bl	8005a90 <HAL_DMA_Abort>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004ae0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x1c>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e113      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x244>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b09      	cmp	r3, #9
 8004b5a:	d925      	bls.n	8004ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68d9      	ldr	r1, [r3, #12]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	3b1e      	subs	r3, #30
 8004b72:	2207      	movs	r2, #7
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43da      	mvns	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	400a      	ands	r2, r1
 8004b80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68d9      	ldr	r1, [r3, #12]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	4618      	mov	r0, r3
 8004b94:	4603      	mov	r3, r0
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	4403      	add	r3, r0
 8004b9a:	3b1e      	subs	r3, #30
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	e022      	b.n	8004bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	2207      	movs	r2, #7
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	400a      	ands	r2, r1
 8004bca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6919      	ldr	r1, [r3, #16]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	4618      	mov	r0, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4403      	add	r3, r0
 8004be4:	409a      	lsls	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b06      	cmp	r3, #6
 8004bf4:	d824      	bhi.n	8004c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	3b05      	subs	r3, #5
 8004c08:	221f      	movs	r2, #31
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	400a      	ands	r2, r1
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	4618      	mov	r0, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	3b05      	subs	r3, #5
 8004c32:	fa00 f203 	lsl.w	r2, r0, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004c3e:	e04c      	b.n	8004cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d824      	bhi.n	8004c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	3b23      	subs	r3, #35	; 0x23
 8004c5a:	221f      	movs	r2, #31
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43da      	mvns	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	400a      	ands	r2, r1
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4618      	mov	r0, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	3b23      	subs	r3, #35	; 0x23
 8004c84:	fa00 f203 	lsl.w	r2, r0, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c90:	e023      	b.n	8004cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3b41      	subs	r3, #65	; 0x41
 8004ca4:	221f      	movs	r2, #31
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	3b41      	subs	r3, #65	; 0x41
 8004cce:	fa00 f203 	lsl.w	r2, r0, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cda:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_ADC_ConfigChannel+0x250>)
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <HAL_ADC_ConfigChannel+0x254>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10f      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x1d8>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b12      	cmp	r3, #18
 8004cee:	d10b      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_ADC_ConfigChannel+0x254>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d12b      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x23a>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_ADC_ConfigChannel+0x258>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <HAL_ADC_ConfigChannel+0x1f4>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b11      	cmp	r3, #17
 8004d22:	d122      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <HAL_ADC_ConfigChannel+0x258>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d111      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d46:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_ADC_ConfigChannel+0x25c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <HAL_ADC_ConfigChannel+0x260>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	0c9a      	lsrs	r2, r3, #18
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d5c:	e002      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f9      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40012300 	.word	0x40012300
 8004d84:	40012000 	.word	0x40012000
 8004d88:	10000012 	.word	0x10000012
 8004d8c:	200009a8 	.word	0x200009a8
 8004d90:	431bde83 	.word	0x431bde83

08004d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d9c:	4b79      	ldr	r3, [pc, #484]	; (8004f84 <ADC_Init+0x1f0>)
 8004d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6859      	ldr	r1, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	021a      	lsls	r2, r3, #8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6899      	ldr	r1, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	4a58      	ldr	r2, [pc, #352]	; (8004f88 <ADC_Init+0x1f4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6899      	ldr	r1, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	e00f      	b.n	8004e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0202 	bic.w	r2, r2, #2
 8004ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6899      	ldr	r1, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7e1b      	ldrb	r3, [r3, #24]
 8004eac:	005a      	lsls	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01b      	beq.n	8004ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	3b01      	subs	r3, #1
 8004eec:	035a      	lsls	r2, r3, #13
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	e007      	b.n	8004f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	051a      	lsls	r2, r3, #20
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6899      	ldr	r1, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f4a:	025a      	lsls	r2, r3, #9
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6899      	ldr	r1, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	029a      	lsls	r2, r3, #10
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40012300 	.word	0x40012300
 8004f88:	0f000001 	.word	0x0f000001

08004f8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d13c      	bne.n	8005020 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d12b      	bne.n	8005018 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d127      	bne.n	8005018 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d006      	beq.n	8004fe4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d119      	bne.n	8005018 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0220 	bic.w	r2, r2, #32
 8004ff2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	f043 0201 	orr.w	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7fe ff0b 	bl	8003e34 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800501e:	e00e      	b.n	800503e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff fd75 	bl	8004b1c <HAL_ADC_ErrorCallback>
}
 8005032:	e004      	b.n	800503e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	4798      	blx	r3
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff fd57 	bl	8004b08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2240      	movs	r2, #64	; 0x40
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fd4a 	bl	8004b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_ADCEx_InjectedStart+0x22>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e0aa      	b.n	8005208 <HAL_ADCEx_InjectedStart+0x178>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d018      	beq.n	80050fa <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050d8:	4b4e      	ldr	r3, [pc, #312]	; (8005214 <HAL_ADCEx_InjectedStart+0x184>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a4e      	ldr	r2, [pc, #312]	; (8005218 <HAL_ADCEx_InjectedStart+0x188>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	0c9a      	lsrs	r2, r3, #18
 80050e4:	4613      	mov	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4413      	add	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80050ec:	e002      	b.n	80050f4 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f9      	bne.n	80050ee <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d172      	bne.n	80051ee <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d102      	bne.n	800512e <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f06f 0204 	mvn.w	r2, #4
 800513e:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005140:	4b36      	ldr	r3, [pc, #216]	; (800521c <HAL_ADCEx_InjectedStart+0x18c>)
 8005142:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2b00      	cmp	r3, #0
 800514e:	d124      	bne.n	800519a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d041      	beq.n	8005206 <HAL_ADCEx_InjectedStart+0x176>
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d03e      	beq.n	8005206 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	e035      	b.n	8005206 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf0c      	ite	eq
 80051a8:	2301      	moveq	r3, #1
 80051aa:	2300      	movne	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a15      	ldr	r2, [pc, #84]	; (8005220 <HAL_ADCEx_InjectedStart+0x190>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d11a      	bne.n	8005206 <HAL_ADCEx_InjectedStart+0x176>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <HAL_ADCEx_InjectedStart+0x176>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d014      	beq.n	8005206 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	e00b      	b.n	8005206 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0210 	orr.w	r2, r3, #16
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	200009a8 	.word	0x200009a8
 8005218:	431bde83 	.word	0x431bde83
 800521c:	40012300 	.word	0x40012300
 8005220:	40012000 	.word	0x40012000

08005224 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_ADCEx_InjectedStop+0x1a>
 800523a:	2302      	movs	r3, #2
 800523c:	e037      	b.n	80052ae <HAL_ADCEx_InjectedStop+0x8a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d120      	bne.n	8005294 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800525c:	2b00      	cmp	r3, #0
 800525e:	d119      	bne.n	8005294 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d112      	bne.n	80052a4 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	f043 0201 	orr.w	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005292:	e007      	b.n	80052a4 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f06f 0204 	mvn.w	r2, #4
 80052d2:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d81f      	bhi.n	800531c <HAL_ADCEx_InjectedGetValue+0x60>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <HAL_ADCEx_InjectedGetValue+0x28>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005313 	.word	0x08005313
 80052e8:	08005309 	.word	0x08005309
 80052ec:	080052ff 	.word	0x080052ff
 80052f0:	080052f5 	.word	0x080052f5
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fa:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80052fc:	e00f      	b.n	800531e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005306:	e00a      	b.n	800531e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005310:	e005      	b.n	800531e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	60fb      	str	r3, [r7, #12]
    }
    break;
 800531a:	e000      	b.n	800531e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 800531c:	bf00      	nop
  }
  return tmp;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8005340:	2302      	movs	r3, #2
 8005342:	e17e      	b.n	8005642 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b09      	cmp	r3, #9
 8005352:	d925      	bls.n	80053a0 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68d9      	ldr	r1, [r3, #12]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	4613      	mov	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4413      	add	r3, r2
 8005368:	3b1e      	subs	r3, #30
 800536a:	2207      	movs	r2, #7
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43da      	mvns	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	400a      	ands	r2, r1
 8005378:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68d9      	ldr	r1, [r3, #12]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	4618      	mov	r0, r3
 800538c:	4603      	mov	r3, r0
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4403      	add	r3, r0
 8005392:	3b1e      	subs	r3, #30
 8005394:	409a      	lsls	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	e022      	b.n	80053e6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6919      	ldr	r1, [r3, #16]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	4613      	mov	r3, r2
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4413      	add	r3, r2
 80053b4:	2207      	movs	r2, #7
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43da      	mvns	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	400a      	ands	r2, r1
 80053c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6919      	ldr	r1, [r3, #16]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4618      	mov	r0, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4403      	add	r3, r0
 80053dc:	409a      	lsls	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	3b01      	subs	r3, #1
 8005402:	051a      	lsls	r2, r3, #20
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	b2db      	uxtb	r3, r3
 8005422:	3303      	adds	r3, #3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	221f      	movs	r2, #31
 8005430:	fa02 f303 	lsl.w	r3, r2, r3
 8005434:	43da      	mvns	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	400a      	ands	r2, r1
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	4618      	mov	r0, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	3303      	adds	r3, #3
 800545e:	b2db      	uxtb	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	fa00 f203 	lsl.w	r2, r0, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	4a75      	ldr	r2, [pc, #468]	; (8005650 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d022      	beq.n	80054c4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800548c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6899      	ldr	r1, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699a      	ldr	r2, [r3, #24]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80054ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	e00f      	b.n	80054e4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80054d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80054e2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	7d5b      	ldrb	r3, [r3, #21]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	e007      	b.n	800550e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	7d1b      	ldrb	r3, [r3, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	e007      	b.n	8005538 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005536:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d02e      	beq.n	800559e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8005540:	2b03      	cmp	r3, #3
 8005542:	d840      	bhi.n	80055c6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8005544:	2b01      	cmp	r3, #1
 8005546:	d002      	beq.n	800554e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8005548:	2b02      	cmp	r3, #2
 800554a:	d014      	beq.n	8005576 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 800554c:	e03b      	b.n	80055c6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800555c:	f023 030f 	bic.w	r3, r3, #15
 8005560:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6959      	ldr	r1, [r3, #20]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	615a      	str	r2, [r3, #20]
      break;
 8005574:	e03b      	b.n	80055ee <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005584:	f023 030f 	bic.w	r3, r3, #15
 8005588:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6999      	ldr	r1, [r3, #24]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	619a      	str	r2, [r3, #24]
      break;
 800559c:	e027      	b.n	80055ee <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80055ac:	f023 030f 	bic.w	r3, r3, #15
 80055b0:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69d9      	ldr	r1, [r3, #28]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	61da      	str	r2, [r3, #28]
      break;
 80055c4:	e013      	b.n	80055ee <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80055d4:	f023 030f 	bic.w	r3, r3, #15
 80055d8:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a19      	ldr	r1, [r3, #32]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	621a      	str	r2, [r3, #32]
      break;
 80055ec:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055ee:	4b19      	ldr	r3, [pc, #100]	; (8005654 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80055f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a18      	ldr	r2, [pc, #96]	; (8005658 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d109      	bne.n	8005610 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b12      	cmp	r3, #18
 8005602:	d105      	bne.n	8005610 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a10      	ldr	r2, [pc, #64]	; (8005658 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10e      	bne.n	8005638 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a0f      	ldr	r2, [pc, #60]	; (800565c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b11      	cmp	r3, #17
 800562a:	d105      	bne.n	8005638 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	000f0001 	.word	0x000f0001
 8005654:	40012300 	.word	0x40012300
 8005658:	40012000 	.word	0x40012000
 800565c:	10000012 	.word	0x10000012

08005660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800567c:	4013      	ands	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800568c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005692:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	60d3      	str	r3, [r2, #12]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <__NVIC_GetPriorityGrouping+0x18>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	f003 0307 	and.w	r3, r3, #7
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	db0b      	blt.n	80056ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	f003 021f 	and.w	r2, r3, #31
 80056dc:	4907      	ldr	r1, [pc, #28]	; (80056fc <__NVIC_EnableIRQ+0x38>)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2001      	movs	r0, #1
 80056e6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	e000e100 	.word	0xe000e100

08005700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005710:	2b00      	cmp	r3, #0
 8005712:	db0a      	blt.n	800572a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	490c      	ldr	r1, [pc, #48]	; (800574c <__NVIC_SetPriority+0x4c>)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	0112      	lsls	r2, r2, #4
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	440b      	add	r3, r1
 8005724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005728:	e00a      	b.n	8005740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <__NVIC_SetPriority+0x50>)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	3b04      	subs	r3, #4
 8005738:	0112      	lsls	r2, r2, #4
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	440b      	add	r3, r1
 800573e:	761a      	strb	r2, [r3, #24]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000e100 	.word	0xe000e100
 8005750:	e000ed00 	.word	0xe000ed00

08005754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f1c3 0307 	rsb	r3, r3, #7
 800576e:	2b04      	cmp	r3, #4
 8005770:	bf28      	it	cs
 8005772:	2304      	movcs	r3, #4
 8005774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3304      	adds	r3, #4
 800577a:	2b06      	cmp	r3, #6
 800577c:	d902      	bls.n	8005784 <NVIC_EncodePriority+0x30>
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3b03      	subs	r3, #3
 8005782:	e000      	b.n	8005786 <NVIC_EncodePriority+0x32>
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	401a      	ands	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800579c:	f04f 31ff 	mov.w	r1, #4294967295
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	43d9      	mvns	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ac:	4313      	orrs	r3, r2
         );
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3724      	adds	r7, #36	; 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057cc:	d301      	bcc.n	80057d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ce:	2301      	movs	r3, #1
 80057d0:	e00f      	b.n	80057f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <SysTick_Config+0x40>)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057da:	210f      	movs	r1, #15
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	f7ff ff8e 	bl	8005700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <SysTick_Config+0x40>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ea:	4b04      	ldr	r3, [pc, #16]	; (80057fc <SysTick_Config+0x40>)
 80057ec:	2207      	movs	r2, #7
 80057ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	e000e010 	.word	0xe000e010

08005800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff29 	bl	8005660 <__NVIC_SetPriorityGrouping>
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005816:	b580      	push	{r7, lr}
 8005818:	b086      	sub	sp, #24
 800581a:	af00      	add	r7, sp, #0
 800581c:	4603      	mov	r3, r0
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005828:	f7ff ff3e 	bl	80056a8 <__NVIC_GetPriorityGrouping>
 800582c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	6978      	ldr	r0, [r7, #20]
 8005834:	f7ff ff8e 	bl	8005754 <NVIC_EncodePriority>
 8005838:	4602      	mov	r2, r0
 800583a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583e:	4611      	mov	r1, r2
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff5d 	bl	8005700 <__NVIC_SetPriority>
}
 8005846:	bf00      	nop
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	4603      	mov	r3, r0
 8005856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff ff31 	bl	80056c4 <__NVIC_EnableIRQ>
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ffa2 	bl	80057bc <SysTick_Config>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005890:	f7fe fe3c 	bl	800450c <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e099      	b.n	80059d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058c0:	e00f      	b.n	80058e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058c2:	f7fe fe23 	bl	800450c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d908      	bls.n	80058e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2203      	movs	r2, #3
 80058da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e078      	b.n	80059d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e8      	bne.n	80058c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4b38      	ldr	r3, [pc, #224]	; (80059dc <HAL_DMA_Init+0x158>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800590e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2b04      	cmp	r3, #4
 800593a:	d107      	bne.n	800594c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	4313      	orrs	r3, r2
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0307 	bic.w	r3, r3, #7
 8005962:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b04      	cmp	r3, #4
 8005974:	d117      	bne.n	80059a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fadf 	bl	8005f4c <DMA_CheckFifoParam>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2240      	movs	r2, #64	; 0x40
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059a2:	2301      	movs	r3, #1
 80059a4:	e016      	b.n	80059d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa96 	bl	8005ee0 <DMA_CalcBaseAndBitshift>
 80059b4:	4603      	mov	r3, r0
 80059b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059bc:	223f      	movs	r2, #63	; 0x3f
 80059be:	409a      	lsls	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	f010803f 	.word	0xf010803f

080059e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_DMA_Start_IT+0x26>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e040      	b.n	8005a88 <HAL_DMA_Start_IT+0xa8>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d12f      	bne.n	8005a7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fa28 	bl	8005e84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a38:	223f      	movs	r2, #63	; 0x3f
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0216 	orr.w	r2, r2, #22
 8005a4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0208 	orr.w	r2, r2, #8
 8005a66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	e005      	b.n	8005a86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
 8005a84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a9e:	f7fe fd35 	bl	800450c <HAL_GetTick>
 8005aa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d008      	beq.n	8005ac2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2280      	movs	r2, #128	; 0x80
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e052      	b.n	8005b68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0216 	bic.w	r2, r2, #22
 8005ad0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ae0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <HAL_DMA_Abort+0x62>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0208 	bic.w	r2, r2, #8
 8005b00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b12:	e013      	b.n	8005b3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b14:	f7fe fcfa 	bl	800450c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b05      	cmp	r3, #5
 8005b20:	d90c      	bls.n	8005b3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e015      	b.n	8005b68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e4      	bne.n	8005b14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4e:	223f      	movs	r2, #63	; 0x3f
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b7c:	4b8e      	ldr	r3, [pc, #568]	; (8005db8 <HAL_DMA_IRQHandler+0x248>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a8e      	ldr	r2, [pc, #568]	; (8005dbc <HAL_DMA_IRQHandler+0x24c>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0a9b      	lsrs	r3, r3, #10
 8005b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	409a      	lsls	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01a      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	2208      	movs	r2, #8
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	2201      	movs	r2, #1
 8005be2:	409a      	lsls	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d012      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfe:	2201      	movs	r2, #1
 8005c00:	409a      	lsls	r2, r3
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f043 0202 	orr.w	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c16:	2204      	movs	r2, #4
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d012      	beq.n	8005c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	2204      	movs	r2, #4
 8005c36:	409a      	lsls	r2, r3
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	f043 0204 	orr.w	r2, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d043      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03c      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d018      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d108      	bne.n	8005ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d024      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
 8005c9e:	e01f      	b.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01b      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
 8005cb0:	e016      	b.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d107      	bne.n	8005cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0208 	bic.w	r2, r2, #8
 8005cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 808f 	beq.w	8005e10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8087 	beq.w	8005e10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	2220      	movs	r2, #32
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d136      	bne.n	8005d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0216 	bic.w	r2, r2, #22
 8005d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <HAL_DMA_IRQHandler+0x1da>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0208 	bic.w	r2, r2, #8
 8005d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	223f      	movs	r2, #63	; 0x3f
 8005d60:	409a      	lsls	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d07e      	beq.n	8005e7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
        }
        return;
 8005d86:	e079      	b.n	8005e7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01d      	beq.n	8005dd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10d      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d031      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
 8005db4:	e02c      	b.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
 8005db6:	bf00      	nop
 8005db8:	200009a8 	.word	0x200009a8
 8005dbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d023      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	e01e      	b.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10f      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0210 	bic.w	r2, r2, #16
 8005dee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d032      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d022      	beq.n	8005e6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2205      	movs	r2, #5
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d307      	bcc.n	8005e58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f2      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x2cc>
 8005e56:	e000      	b.n	8005e5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d005      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
 8005e7a:	e000      	b.n	8005e7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e7c:	bf00      	nop
    }
  }
}
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d108      	bne.n	8005ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ec2:	e007      	b.n	8005ed4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	60da      	str	r2, [r3, #12]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	3b10      	subs	r3, #16
 8005ef0:	4a14      	ldr	r2, [pc, #80]	; (8005f44 <DMA_CalcBaseAndBitshift+0x64>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005efa:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <DMA_CalcBaseAndBitshift+0x68>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d909      	bls.n	8005f22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8005f20:	e007      	b.n	8005f32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	aaaaaaab 	.word	0xaaaaaaab
 8005f48:	0800a1e8 	.word	0x0800a1e8

08005f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d11f      	bne.n	8005fa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d856      	bhi.n	800601a <DMA_CheckFifoParam+0xce>
 8005f6c:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <DMA_CheckFifoParam+0x28>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	08005f85 	.word	0x08005f85
 8005f78:	08005f97 	.word	0x08005f97
 8005f7c:	08005f85 	.word	0x08005f85
 8005f80:	0800601b 	.word	0x0800601b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d046      	beq.n	800601e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f94:	e043      	b.n	800601e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f9e:	d140      	bne.n	8006022 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa4:	e03d      	b.n	8006022 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fae:	d121      	bne.n	8005ff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d837      	bhi.n	8006026 <DMA_CheckFifoParam+0xda>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <DMA_CheckFifoParam+0x70>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fcd 	.word	0x08005fcd
 8005fc0:	08005fd3 	.word	0x08005fd3
 8005fc4:	08005fcd 	.word	0x08005fcd
 8005fc8:	08005fe5 	.word	0x08005fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	e030      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d025      	beq.n	800602a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe2:	e022      	b.n	800602a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fec:	d11f      	bne.n	800602e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ff2:	e01c      	b.n	800602e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d903      	bls.n	8006002 <DMA_CheckFifoParam+0xb6>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d003      	beq.n	8006008 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006000:	e018      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
      break;
 8006006:	e015      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00e      	beq.n	8006032 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	e00b      	b.n	8006032 <DMA_CheckFifoParam+0xe6>
      break;
 800601a:	bf00      	nop
 800601c:	e00a      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      break;
 800601e:	bf00      	nop
 8006020:	e008      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      break;
 8006022:	bf00      	nop
 8006024:	e006      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      break;
 8006026:	bf00      	nop
 8006028:	e004      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      break;
 800602a:	bf00      	nop
 800602c:	e002      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      break;   
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <DMA_CheckFifoParam+0xe8>
      break;
 8006032:	bf00      	nop
    }
  } 
  
  return status; 
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop

08006044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006044:	b480      	push	{r7}
 8006046:	b089      	sub	sp, #36	; 0x24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800604e:	2300      	movs	r3, #0
 8006050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006052:	2300      	movs	r3, #0
 8006054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e159      	b.n	8006314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006060:	2201      	movs	r2, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	429a      	cmp	r2, r3
 800607a:	f040 8148 	bne.w	800630e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d005      	beq.n	8006096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006092:	2b02      	cmp	r3, #2
 8006094:	d130      	bne.n	80060f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	2203      	movs	r2, #3
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43db      	mvns	r3, r3
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	4013      	ands	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4313      	orrs	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060cc:	2201      	movs	r2, #1
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	091b      	lsrs	r3, r3, #4
 80060e2:	f003 0201 	and.w	r2, r3, #1
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	2b03      	cmp	r3, #3
 8006102:	d017      	beq.n	8006134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	2203      	movs	r2, #3
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	43db      	mvns	r3, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d123      	bne.n	8006188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	08da      	lsrs	r2, r3, #3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3208      	adds	r2, #8
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	220f      	movs	r2, #15
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	08da      	lsrs	r2, r3, #3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3208      	adds	r2, #8
 8006182:	69b9      	ldr	r1, [r7, #24]
 8006184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	2203      	movs	r2, #3
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	43db      	mvns	r3, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4013      	ands	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 0203 	and.w	r2, r3, #3
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80a2 	beq.w	800630e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	4b57      	ldr	r3, [pc, #348]	; (800632c <HAL_GPIO_Init+0x2e8>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	4a56      	ldr	r2, [pc, #344]	; (800632c <HAL_GPIO_Init+0x2e8>)
 80061d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061d8:	6453      	str	r3, [r2, #68]	; 0x44
 80061da:	4b54      	ldr	r3, [pc, #336]	; (800632c <HAL_GPIO_Init+0x2e8>)
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061e6:	4a52      	ldr	r2, [pc, #328]	; (8006330 <HAL_GPIO_Init+0x2ec>)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	3302      	adds	r3, #2
 80061ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	220f      	movs	r2, #15
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a49      	ldr	r2, [pc, #292]	; (8006334 <HAL_GPIO_Init+0x2f0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d019      	beq.n	8006246 <HAL_GPIO_Init+0x202>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a48      	ldr	r2, [pc, #288]	; (8006338 <HAL_GPIO_Init+0x2f4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <HAL_GPIO_Init+0x1fe>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a47      	ldr	r2, [pc, #284]	; (800633c <HAL_GPIO_Init+0x2f8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00d      	beq.n	800623e <HAL_GPIO_Init+0x1fa>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a46      	ldr	r2, [pc, #280]	; (8006340 <HAL_GPIO_Init+0x2fc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d007      	beq.n	800623a <HAL_GPIO_Init+0x1f6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a45      	ldr	r2, [pc, #276]	; (8006344 <HAL_GPIO_Init+0x300>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d101      	bne.n	8006236 <HAL_GPIO_Init+0x1f2>
 8006232:	2304      	movs	r3, #4
 8006234:	e008      	b.n	8006248 <HAL_GPIO_Init+0x204>
 8006236:	2307      	movs	r3, #7
 8006238:	e006      	b.n	8006248 <HAL_GPIO_Init+0x204>
 800623a:	2303      	movs	r3, #3
 800623c:	e004      	b.n	8006248 <HAL_GPIO_Init+0x204>
 800623e:	2302      	movs	r3, #2
 8006240:	e002      	b.n	8006248 <HAL_GPIO_Init+0x204>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <HAL_GPIO_Init+0x204>
 8006246:	2300      	movs	r3, #0
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	f002 0203 	and.w	r2, r2, #3
 800624e:	0092      	lsls	r2, r2, #2
 8006250:	4093      	lsls	r3, r2
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006258:	4935      	ldr	r1, [pc, #212]	; (8006330 <HAL_GPIO_Init+0x2ec>)
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	089b      	lsrs	r3, r3, #2
 800625e:	3302      	adds	r3, #2
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006266:	4b38      	ldr	r3, [pc, #224]	; (8006348 <HAL_GPIO_Init+0x304>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	43db      	mvns	r3, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4013      	ands	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800628a:	4a2f      	ldr	r2, [pc, #188]	; (8006348 <HAL_GPIO_Init+0x304>)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006290:	4b2d      	ldr	r3, [pc, #180]	; (8006348 <HAL_GPIO_Init+0x304>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062b4:	4a24      	ldr	r2, [pc, #144]	; (8006348 <HAL_GPIO_Init+0x304>)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062ba:	4b23      	ldr	r3, [pc, #140]	; (8006348 <HAL_GPIO_Init+0x304>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4013      	ands	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062de:	4a1a      	ldr	r2, [pc, #104]	; (8006348 <HAL_GPIO_Init+0x304>)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <HAL_GPIO_Init+0x304>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006308:	4a0f      	ldr	r2, [pc, #60]	; (8006348 <HAL_GPIO_Init+0x304>)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3301      	adds	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b0f      	cmp	r3, #15
 8006318:	f67f aea2 	bls.w	8006060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	3724      	adds	r7, #36	; 0x24
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	40013800 	.word	0x40013800
 8006334:	40020000 	.word	0x40020000
 8006338:	40020400 	.word	0x40020400
 800633c:	40020800 	.word	0x40020800
 8006340:	40020c00 	.word	0x40020c00
 8006344:	40021000 	.word	0x40021000
 8006348:	40013c00 	.word	0x40013c00

0800634c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	807b      	strh	r3, [r7, #2]
 8006358:	4613      	mov	r3, r2
 800635a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800635c:	787b      	ldrb	r3, [r7, #1]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006362:	887a      	ldrh	r2, [r7, #2]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006368:	e003      	b.n	8006372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800636a:	887b      	ldrh	r3, [r7, #2]
 800636c:	041a      	lsls	r2, r3, #16
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	619a      	str	r2, [r3, #24]
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e12b      	b.n	80065ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fd fe16 	bl	8003fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063e4:	f001 fbbc 	bl	8007b60 <HAL_RCC_GetPCLK1Freq>
 80063e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4a81      	ldr	r2, [pc, #516]	; (80065f4 <HAL_I2C_Init+0x274>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d807      	bhi.n	8006404 <HAL_I2C_Init+0x84>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a80      	ldr	r2, [pc, #512]	; (80065f8 <HAL_I2C_Init+0x278>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bf94      	ite	ls
 80063fc:	2301      	movls	r3, #1
 80063fe:	2300      	movhi	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	e006      	b.n	8006412 <HAL_I2C_Init+0x92>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4a7d      	ldr	r2, [pc, #500]	; (80065fc <HAL_I2C_Init+0x27c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	bf94      	ite	ls
 800640c:	2301      	movls	r3, #1
 800640e:	2300      	movhi	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0e7      	b.n	80065ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a78      	ldr	r2, [pc, #480]	; (8006600 <HAL_I2C_Init+0x280>)
 800641e:	fba2 2303 	umull	r2, r3, r2, r3
 8006422:	0c9b      	lsrs	r3, r3, #18
 8006424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4a6a      	ldr	r2, [pc, #424]	; (80065f4 <HAL_I2C_Init+0x274>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d802      	bhi.n	8006454 <HAL_I2C_Init+0xd4>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	3301      	adds	r3, #1
 8006452:	e009      	b.n	8006468 <HAL_I2C_Init+0xe8>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	4a69      	ldr	r2, [pc, #420]	; (8006604 <HAL_I2C_Init+0x284>)
 8006460:	fba2 2303 	umull	r2, r3, r2, r3
 8006464:	099b      	lsrs	r3, r3, #6
 8006466:	3301      	adds	r3, #1
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	430b      	orrs	r3, r1
 800646e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800647a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	495c      	ldr	r1, [pc, #368]	; (80065f4 <HAL_I2C_Init+0x274>)
 8006484:	428b      	cmp	r3, r1
 8006486:	d819      	bhi.n	80064bc <HAL_I2C_Init+0x13c>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	1e59      	subs	r1, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	fbb1 f3f3 	udiv	r3, r1, r3
 8006496:	1c59      	adds	r1, r3, #1
 8006498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800649c:	400b      	ands	r3, r1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <HAL_I2C_Init+0x138>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1e59      	subs	r1, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80064b0:	3301      	adds	r3, #1
 80064b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b6:	e051      	b.n	800655c <HAL_I2C_Init+0x1dc>
 80064b8:	2304      	movs	r3, #4
 80064ba:	e04f      	b.n	800655c <HAL_I2C_Init+0x1dc>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d111      	bne.n	80064e8 <HAL_I2C_Init+0x168>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	1e58      	subs	r0, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6859      	ldr	r1, [r3, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	440b      	add	r3, r1
 80064d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064d6:	3301      	adds	r3, #1
 80064d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	e012      	b.n	800650e <HAL_I2C_Init+0x18e>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1e58      	subs	r0, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	0099      	lsls	r1, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80064fe:	3301      	adds	r3, #1
 8006500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf0c      	ite	eq
 8006508:	2301      	moveq	r3, #1
 800650a:	2300      	movne	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_I2C_Init+0x196>
 8006512:	2301      	movs	r3, #1
 8006514:	e022      	b.n	800655c <HAL_I2C_Init+0x1dc>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10e      	bne.n	800653c <HAL_I2C_Init+0x1bc>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1e58      	subs	r0, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6859      	ldr	r1, [r3, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	440b      	add	r3, r1
 800652c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006530:	3301      	adds	r3, #1
 8006532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653a:	e00f      	b.n	800655c <HAL_I2C_Init+0x1dc>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	1e58      	subs	r0, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6859      	ldr	r1, [r3, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	0099      	lsls	r1, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006552:	3301      	adds	r3, #1
 8006554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	6809      	ldr	r1, [r1, #0]
 8006560:	4313      	orrs	r3, r2
 8006562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69da      	ldr	r2, [r3, #28]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800658a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6911      	ldr	r1, [r2, #16]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	68d2      	ldr	r2, [r2, #12]
 8006596:	4311      	orrs	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	430b      	orrs	r3, r1
 800659e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695a      	ldr	r2, [r3, #20]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	000186a0 	.word	0x000186a0
 80065f8:	001e847f 	.word	0x001e847f
 80065fc:	003d08ff 	.word	0x003d08ff
 8006600:	431bde83 	.word	0x431bde83
 8006604:	10624dd3 	.word	0x10624dd3

08006608 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af02      	add	r7, sp, #8
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4603      	mov	r3, r0
 8006618:	817b      	strh	r3, [r7, #10]
 800661a:	460b      	mov	r3, r1
 800661c:	813b      	strh	r3, [r7, #8]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006622:	f7fd ff73 	bl	800450c <HAL_GetTick>
 8006626:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b20      	cmp	r3, #32
 8006632:	f040 80d9 	bne.w	80067e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	2319      	movs	r3, #25
 800663c:	2201      	movs	r2, #1
 800663e:	496d      	ldr	r1, [pc, #436]	; (80067f4 <HAL_I2C_Mem_Write+0x1ec>)
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fc7f 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800664c:	2302      	movs	r3, #2
 800664e:	e0cc      	b.n	80067ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_I2C_Mem_Write+0x56>
 800665a:	2302      	movs	r3, #2
 800665c:	e0c5      	b.n	80067ea <HAL_I2C_Mem_Write+0x1e2>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d007      	beq.n	8006684 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2221      	movs	r2, #33	; 0x21
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2240      	movs	r2, #64	; 0x40
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a4d      	ldr	r2, [pc, #308]	; (80067f8 <HAL_I2C_Mem_Write+0x1f0>)
 80066c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066c6:	88f8      	ldrh	r0, [r7, #6]
 80066c8:	893a      	ldrh	r2, [r7, #8]
 80066ca:	8979      	ldrh	r1, [r7, #10]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	4603      	mov	r3, r0
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fab6 	bl	8006c48 <I2C_RequestMemoryWrite>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d052      	beq.n	8006788 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e081      	b.n	80067ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 fd00 	bl	80070f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00d      	beq.n	8006712 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d107      	bne.n	800670e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800670c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e06b      	b.n	80067ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b04      	cmp	r3, #4
 800674e:	d11b      	bne.n	8006788 <HAL_I2C_Mem_Write+0x180>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006754:	2b00      	cmp	r3, #0
 8006756:	d017      	beq.n	8006788 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	781a      	ldrb	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1aa      	bne.n	80066e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 fcec 	bl	8007172 <I2C_WaitOnBTFFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00d      	beq.n	80067bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d107      	bne.n	80067b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e016      	b.n	80067ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80067e8:	2302      	movs	r3, #2
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	00100002 	.word	0x00100002
 80067f8:	ffff0000 	.word	0xffff0000

080067fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08c      	sub	sp, #48	; 0x30
 8006800:	af02      	add	r7, sp, #8
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	4608      	mov	r0, r1
 8006806:	4611      	mov	r1, r2
 8006808:	461a      	mov	r2, r3
 800680a:	4603      	mov	r3, r0
 800680c:	817b      	strh	r3, [r7, #10]
 800680e:	460b      	mov	r3, r1
 8006810:	813b      	strh	r3, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006816:	f7fd fe79 	bl	800450c <HAL_GetTick>
 800681a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b20      	cmp	r3, #32
 8006826:	f040 8208 	bne.w	8006c3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	2319      	movs	r3, #25
 8006830:	2201      	movs	r2, #1
 8006832:	497b      	ldr	r1, [pc, #492]	; (8006a20 <HAL_I2C_Mem_Read+0x224>)
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fb85 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006840:	2302      	movs	r3, #2
 8006842:	e1fb      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_I2C_Mem_Read+0x56>
 800684e:	2302      	movs	r3, #2
 8006850:	e1f4      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b01      	cmp	r3, #1
 8006866:	d007      	beq.n	8006878 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006886:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2222      	movs	r2, #34	; 0x22
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80068a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a5b      	ldr	r2, [pc, #364]	; (8006a24 <HAL_I2C_Mem_Read+0x228>)
 80068b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068ba:	88f8      	ldrh	r0, [r7, #6]
 80068bc:	893a      	ldrh	r2, [r7, #8]
 80068be:	8979      	ldrh	r1, [r7, #10]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4603      	mov	r3, r0
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fa52 	bl	8006d74 <I2C_RequestMemoryRead>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e1b0      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d113      	bne.n	800690a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	623b      	str	r3, [r7, #32]
 80068f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	e184      	b.n	8006c14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690e:	2b01      	cmp	r3, #1
 8006910:	d11b      	bne.n	800694a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	e164      	b.n	8006c14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694e:	2b02      	cmp	r3, #2
 8006950:	d11b      	bne.n	800698a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006960:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	e144      	b.n	8006c14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80069a0:	e138      	b.n	8006c14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	f200 80f1 	bhi.w	8006b8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d123      	bne.n	80069fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fc1b 	bl	80071f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e139      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069fa:	e10b      	b.n	8006c14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d14e      	bne.n	8006aa2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4906      	ldr	r1, [pc, #24]	; (8006a28 <HAL_I2C_Mem_Read+0x22c>)
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fa98 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d008      	beq.n	8006a2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e10e      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
 8006a1e:	bf00      	nop
 8006a20:	00100002 	.word	0x00100002
 8006a24:	ffff0000 	.word	0xffff0000
 8006a28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006aa0:	e0b8      	b.n	8006c14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4966      	ldr	r1, [pc, #408]	; (8006c44 <HAL_I2C_Mem_Read+0x448>)
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fa49 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0bf      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	2200      	movs	r2, #0
 8006b06:	494f      	ldr	r1, [pc, #316]	; (8006c44 <HAL_I2C_Mem_Read+0x448>)
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fa1b 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e091      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b8c:	e042      	b.n	8006c14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fb2e 	bl	80071f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e04c      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d118      	bne.n	8006c14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	b2d2      	uxtb	r2, r2
 8006bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f47f aec2 	bne.w	80069a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e000      	b.n	8006c3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006c3a:	2302      	movs	r3, #2
  }
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3728      	adds	r7, #40	; 0x28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	00010004 	.word	0x00010004

08006c48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	817b      	strh	r3, [r7, #10]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	813b      	strh	r3, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f960 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c98:	d103      	bne.n	8006ca2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e05f      	b.n	8006d66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ca6:	897b      	ldrh	r3, [r7, #10]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	461a      	mov	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	6a3a      	ldr	r2, [r7, #32]
 8006cba:	492d      	ldr	r1, [pc, #180]	; (8006d70 <I2C_RequestMemoryWrite+0x128>)
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f998 	bl	8006ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e04c      	b.n	8006d66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce4:	6a39      	ldr	r1, [r7, #32]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 fa02 	bl	80070f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d107      	bne.n	8006d0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e02b      	b.n	8006d66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d105      	bne.n	8006d20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d14:	893b      	ldrh	r3, [r7, #8]
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	611a      	str	r2, [r3, #16]
 8006d1e:	e021      	b.n	8006d64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d20:	893b      	ldrh	r3, [r7, #8]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d30:	6a39      	ldr	r1, [r7, #32]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f9dc 	bl	80070f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00d      	beq.n	8006d5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d107      	bne.n	8006d56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e005      	b.n	8006d66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d5a:	893b      	ldrh	r3, [r7, #8]
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	00010002 	.word	0x00010002

08006d74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	461a      	mov	r2, r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	817b      	strh	r3, [r7, #10]
 8006d86:	460b      	mov	r3, r1
 8006d88:	813b      	strh	r3, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f8c2 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00d      	beq.n	8006de2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd4:	d103      	bne.n	8006dde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e0aa      	b.n	8006f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006de2:	897b      	ldrh	r3, [r7, #10]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006df0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	6a3a      	ldr	r2, [r7, #32]
 8006df6:	4952      	ldr	r1, [pc, #328]	; (8006f40 <I2C_RequestMemoryRead+0x1cc>)
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f8fa 	bl	8006ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e097      	b.n	8006f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e20:	6a39      	ldr	r1, [r7, #32]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 f964 	bl	80070f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00d      	beq.n	8006e4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d107      	bne.n	8006e46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e076      	b.n	8006f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d105      	bne.n	8006e5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e50:	893b      	ldrh	r3, [r7, #8]
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	611a      	str	r2, [r3, #16]
 8006e5a:	e021      	b.n	8006ea0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e5c:	893b      	ldrh	r3, [r7, #8]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6c:	6a39      	ldr	r1, [r7, #32]
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f93e 	bl	80070f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d107      	bne.n	8006e92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e050      	b.n	8006f38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e96:	893b      	ldrh	r3, [r7, #8]
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	6a39      	ldr	r1, [r7, #32]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f923 	bl	80070f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00d      	beq.n	8006ecc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d107      	bne.n	8006ec8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e035      	b.n	8006f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f82b 	bl	8006f44 <I2C_WaitOnFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f02:	d103      	bne.n	8006f0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e013      	b.n	8006f38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f10:	897b      	ldrh	r3, [r7, #10]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f043 0301 	orr.w	r3, r3, #1
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	6a3a      	ldr	r2, [r7, #32]
 8006f24:	4906      	ldr	r1, [pc, #24]	; (8006f40 <I2C_RequestMemoryRead+0x1cc>)
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 f863 	bl	8006ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	00010002 	.word	0x00010002

08006f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f54:	e025      	b.n	8006fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d021      	beq.n	8006fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5e:	f7fd fad5 	bl	800450c <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d116      	bne.n	8006fa2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f043 0220 	orr.w	r2, r3, #32
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e023      	b.n	8006fea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	0c1b      	lsrs	r3, r3, #16
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d10d      	bne.n	8006fc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	43da      	mvns	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	e00c      	b.n	8006fe2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	43da      	mvns	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d0b6      	beq.n	8006f56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007000:	e051      	b.n	80070a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007010:	d123      	bne.n	800705a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007020:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800702a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	f043 0204 	orr.w	r2, r3, #4
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e046      	b.n	80070e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007060:	d021      	beq.n	80070a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007062:	f7fd fa53 	bl	800450c <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d116      	bne.n	80070a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f043 0220 	orr.w	r2, r3, #32
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e020      	b.n	80070e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	0c1b      	lsrs	r3, r3, #16
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d10c      	bne.n	80070ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	43da      	mvns	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bf14      	ite	ne
 80070c2:	2301      	movne	r3, #1
 80070c4:	2300      	moveq	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	e00b      	b.n	80070e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	43da      	mvns	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4013      	ands	r3, r2
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bf14      	ite	ne
 80070dc:	2301      	movne	r3, #1
 80070de:	2300      	moveq	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d18d      	bne.n	8007002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070fc:	e02d      	b.n	800715a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f8ce 	bl	80072a0 <I2C_IsAcknowledgeFailed>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e02d      	b.n	800716a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d021      	beq.n	800715a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007116:	f7fd f9f9 	bl	800450c <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d116      	bne.n	800715a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f043 0220 	orr.w	r2, r3, #32
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e007      	b.n	800716a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007164:	2b80      	cmp	r3, #128	; 0x80
 8007166:	d1ca      	bne.n	80070fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800717e:	e02d      	b.n	80071dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f88d 	bl	80072a0 <I2C_IsAcknowledgeFailed>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e02d      	b.n	80071ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007196:	d021      	beq.n	80071dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007198:	f7fd f9b8 	bl	800450c <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d302      	bcc.n	80071ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d116      	bne.n	80071dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	f043 0220 	orr.w	r2, r3, #32
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e007      	b.n	80071ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f003 0304 	and.w	r3, r3, #4
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d1ca      	bne.n	8007180 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007200:	e042      	b.n	8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b10      	cmp	r3, #16
 800720e:	d119      	bne.n	8007244 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0210 	mvn.w	r2, #16
 8007218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e029      	b.n	8007298 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007244:	f7fd f962 	bl	800450c <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	429a      	cmp	r2, r3
 8007252:	d302      	bcc.n	800725a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d116      	bne.n	8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	f043 0220 	orr.w	r2, r3, #32
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e007      	b.n	8007298 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d1b5      	bne.n	8007202 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b6:	d11b      	bne.n	80072f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	f043 0204 	orr.w	r2, r3, #4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
	...

08007300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e267      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d075      	beq.n	800740a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800731e:	4b88      	ldr	r3, [pc, #544]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 030c 	and.w	r3, r3, #12
 8007326:	2b04      	cmp	r3, #4
 8007328:	d00c      	beq.n	8007344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800732a:	4b85      	ldr	r3, [pc, #532]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007332:	2b08      	cmp	r3, #8
 8007334:	d112      	bne.n	800735c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007336:	4b82      	ldr	r3, [pc, #520]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800733e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007342:	d10b      	bne.n	800735c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007344:	4b7e      	ldr	r3, [pc, #504]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d05b      	beq.n	8007408 <HAL_RCC_OscConfig+0x108>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d157      	bne.n	8007408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e242      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007364:	d106      	bne.n	8007374 <HAL_RCC_OscConfig+0x74>
 8007366:	4b76      	ldr	r3, [pc, #472]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a75      	ldr	r2, [pc, #468]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 800736c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e01d      	b.n	80073b0 <HAL_RCC_OscConfig+0xb0>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800737c:	d10c      	bne.n	8007398 <HAL_RCC_OscConfig+0x98>
 800737e:	4b70      	ldr	r3, [pc, #448]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a6f      	ldr	r2, [pc, #444]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4b6d      	ldr	r3, [pc, #436]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a6c      	ldr	r2, [pc, #432]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e00b      	b.n	80073b0 <HAL_RCC_OscConfig+0xb0>
 8007398:	4b69      	ldr	r3, [pc, #420]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a68      	ldr	r2, [pc, #416]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 800739e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	4b66      	ldr	r3, [pc, #408]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a65      	ldr	r2, [pc, #404]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 80073aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d013      	beq.n	80073e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b8:	f7fd f8a8 	bl	800450c <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073c0:	f7fd f8a4 	bl	800450c <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b64      	cmp	r3, #100	; 0x64
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e207      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073d2:	4b5b      	ldr	r3, [pc, #364]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f0      	beq.n	80073c0 <HAL_RCC_OscConfig+0xc0>
 80073de:	e014      	b.n	800740a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e0:	f7fd f894 	bl	800450c <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073e6:	e008      	b.n	80073fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073e8:	f7fd f890 	bl	800450c <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b64      	cmp	r3, #100	; 0x64
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e1f3      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073fa:	4b51      	ldr	r3, [pc, #324]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f0      	bne.n	80073e8 <HAL_RCC_OscConfig+0xe8>
 8007406:	e000      	b.n	800740a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d063      	beq.n	80074de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007416:	4b4a      	ldr	r3, [pc, #296]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 030c 	and.w	r3, r3, #12
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007422:	4b47      	ldr	r3, [pc, #284]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800742a:	2b08      	cmp	r3, #8
 800742c:	d11c      	bne.n	8007468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800742e:	4b44      	ldr	r3, [pc, #272]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d116      	bne.n	8007468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800743a:	4b41      	ldr	r3, [pc, #260]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d005      	beq.n	8007452 <HAL_RCC_OscConfig+0x152>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d001      	beq.n	8007452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e1c7      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007452:	4b3b      	ldr	r3, [pc, #236]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4937      	ldr	r1, [pc, #220]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007462:	4313      	orrs	r3, r2
 8007464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007466:	e03a      	b.n	80074de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d020      	beq.n	80074b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007470:	4b34      	ldr	r3, [pc, #208]	; (8007544 <HAL_RCC_OscConfig+0x244>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007476:	f7fd f849 	bl	800450c <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800747e:	f7fd f845 	bl	800450c <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e1a8      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007490:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800749c:	4b28      	ldr	r3, [pc, #160]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	4925      	ldr	r1, [pc, #148]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	600b      	str	r3, [r1, #0]
 80074b0:	e015      	b.n	80074de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074b2:	4b24      	ldr	r3, [pc, #144]	; (8007544 <HAL_RCC_OscConfig+0x244>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b8:	f7fd f828 	bl	800450c <HAL_GetTick>
 80074bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074be:	e008      	b.n	80074d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074c0:	f7fd f824 	bl	800450c <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e187      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074d2:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f0      	bne.n	80074c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0308 	and.w	r3, r3, #8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d036      	beq.n	8007558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d016      	beq.n	8007520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074f2:	4b15      	ldr	r3, [pc, #84]	; (8007548 <HAL_RCC_OscConfig+0x248>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f8:	f7fd f808 	bl	800450c <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007500:	f7fd f804 	bl	800450c <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e167      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007512:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <HAL_RCC_OscConfig+0x240>)
 8007514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0x200>
 800751e:	e01b      	b.n	8007558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007520:	4b09      	ldr	r3, [pc, #36]	; (8007548 <HAL_RCC_OscConfig+0x248>)
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007526:	f7fc fff1 	bl	800450c <HAL_GetTick>
 800752a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800752c:	e00e      	b.n	800754c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800752e:	f7fc ffed 	bl	800450c <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d907      	bls.n	800754c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e150      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
 8007540:	40023800 	.word	0x40023800
 8007544:	42470000 	.word	0x42470000
 8007548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800754c:	4b88      	ldr	r3, [pc, #544]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800754e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1ea      	bne.n	800752e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8097 	beq.w	8007694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800756a:	4b81      	ldr	r3, [pc, #516]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10f      	bne.n	8007596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007576:	2300      	movs	r3, #0
 8007578:	60bb      	str	r3, [r7, #8]
 800757a:	4b7d      	ldr	r3, [pc, #500]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	4a7c      	ldr	r2, [pc, #496]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007584:	6413      	str	r3, [r2, #64]	; 0x40
 8007586:	4b7a      	ldr	r3, [pc, #488]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758e:	60bb      	str	r3, [r7, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007592:	2301      	movs	r3, #1
 8007594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007596:	4b77      	ldr	r3, [pc, #476]	; (8007774 <HAL_RCC_OscConfig+0x474>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d118      	bne.n	80075d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075a2:	4b74      	ldr	r3, [pc, #464]	; (8007774 <HAL_RCC_OscConfig+0x474>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a73      	ldr	r2, [pc, #460]	; (8007774 <HAL_RCC_OscConfig+0x474>)
 80075a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075ae:	f7fc ffad 	bl	800450c <HAL_GetTick>
 80075b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b4:	e008      	b.n	80075c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075b6:	f7fc ffa9 	bl	800450c <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d901      	bls.n	80075c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e10c      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c8:	4b6a      	ldr	r3, [pc, #424]	; (8007774 <HAL_RCC_OscConfig+0x474>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0f0      	beq.n	80075b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d106      	bne.n	80075ea <HAL_RCC_OscConfig+0x2ea>
 80075dc:	4b64      	ldr	r3, [pc, #400]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	4a63      	ldr	r2, [pc, #396]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
 80075e8:	e01c      	b.n	8007624 <HAL_RCC_OscConfig+0x324>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0x30c>
 80075f2:	4b5f      	ldr	r3, [pc, #380]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	4a5e      	ldr	r2, [pc, #376]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 80075f8:	f043 0304 	orr.w	r3, r3, #4
 80075fc:	6713      	str	r3, [r2, #112]	; 0x70
 80075fe:	4b5c      	ldr	r3, [pc, #368]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007602:	4a5b      	ldr	r2, [pc, #364]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	6713      	str	r3, [r2, #112]	; 0x70
 800760a:	e00b      	b.n	8007624 <HAL_RCC_OscConfig+0x324>
 800760c:	4b58      	ldr	r3, [pc, #352]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800760e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007610:	4a57      	ldr	r2, [pc, #348]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	6713      	str	r3, [r2, #112]	; 0x70
 8007618:	4b55      	ldr	r3, [pc, #340]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761c:	4a54      	ldr	r2, [pc, #336]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800761e:	f023 0304 	bic.w	r3, r3, #4
 8007622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d015      	beq.n	8007658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762c:	f7fc ff6e 	bl	800450c <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007632:	e00a      	b.n	800764a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007634:	f7fc ff6a 	bl	800450c <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007642:	4293      	cmp	r3, r2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e0cb      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800764a:	4b49      	ldr	r3, [pc, #292]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0ee      	beq.n	8007634 <HAL_RCC_OscConfig+0x334>
 8007656:	e014      	b.n	8007682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007658:	f7fc ff58 	bl	800450c <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800765e:	e00a      	b.n	8007676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007660:	f7fc ff54 	bl	800450c <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f241 3288 	movw	r2, #5000	; 0x1388
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e0b5      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007676:	4b3e      	ldr	r3, [pc, #248]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1ee      	bne.n	8007660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d105      	bne.n	8007694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007688:	4b39      	ldr	r3, [pc, #228]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	4a38      	ldr	r2, [pc, #224]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800768e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80a1 	beq.w	80077e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800769e:	4b34      	ldr	r3, [pc, #208]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 030c 	and.w	r3, r3, #12
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d05c      	beq.n	8007764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d141      	bne.n	8007736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076b2:	4b31      	ldr	r3, [pc, #196]	; (8007778 <HAL_RCC_OscConfig+0x478>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b8:	f7fc ff28 	bl	800450c <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076c0:	f7fc ff24 	bl	800450c <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e087      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d2:	4b27      	ldr	r3, [pc, #156]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1f0      	bne.n	80076c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69da      	ldr	r2, [r3, #28]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	019b      	lsls	r3, r3, #6
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	085b      	lsrs	r3, r3, #1
 80076f6:	3b01      	subs	r3, #1
 80076f8:	041b      	lsls	r3, r3, #16
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	061b      	lsls	r3, r3, #24
 8007702:	491b      	ldr	r1, [pc, #108]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007704:	4313      	orrs	r3, r2
 8007706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007708:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <HAL_RCC_OscConfig+0x478>)
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770e:	f7fc fefd 	bl	800450c <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007716:	f7fc fef9 	bl	800450c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e05c      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007728:	4b11      	ldr	r3, [pc, #68]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0f0      	beq.n	8007716 <HAL_RCC_OscConfig+0x416>
 8007734:	e054      	b.n	80077e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <HAL_RCC_OscConfig+0x478>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800773c:	f7fc fee6 	bl	800450c <HAL_GetTick>
 8007740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007744:	f7fc fee2 	bl	800450c <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e045      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007756:	4b06      	ldr	r3, [pc, #24]	; (8007770 <HAL_RCC_OscConfig+0x470>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f0      	bne.n	8007744 <HAL_RCC_OscConfig+0x444>
 8007762:	e03d      	b.n	80077e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d107      	bne.n	800777c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e038      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
 8007770:	40023800 	.word	0x40023800
 8007774:	40007000 	.word	0x40007000
 8007778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800777c:	4b1b      	ldr	r3, [pc, #108]	; (80077ec <HAL_RCC_OscConfig+0x4ec>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d028      	beq.n	80077dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007794:	429a      	cmp	r2, r3
 8007796:	d121      	bne.n	80077dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d11a      	bne.n	80077dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077ac:	4013      	ands	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d111      	bne.n	80077dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	3b01      	subs	r3, #1
 80077c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d107      	bne.n	80077dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077d8:	429a      	cmp	r2, r3
 80077da:	d001      	beq.n	80077e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40023800 	.word	0x40023800

080077f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0cc      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007804:	4b68      	ldr	r3, [pc, #416]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d90c      	bls.n	800782c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007812:	4b65      	ldr	r3, [pc, #404]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800781a:	4b63      	ldr	r3, [pc, #396]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d001      	beq.n	800782c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0b8      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d020      	beq.n	800787a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007844:	4b59      	ldr	r3, [pc, #356]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4a58      	ldr	r2, [pc, #352]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800784e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0308 	and.w	r3, r3, #8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800785c:	4b53      	ldr	r3, [pc, #332]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	4a52      	ldr	r2, [pc, #328]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007868:	4b50      	ldr	r3, [pc, #320]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	494d      	ldr	r1, [pc, #308]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007876:	4313      	orrs	r3, r2
 8007878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d044      	beq.n	8007910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d107      	bne.n	800789e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800788e:	4b47      	ldr	r3, [pc, #284]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d119      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e07f      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d003      	beq.n	80078ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d107      	bne.n	80078be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ae:	4b3f      	ldr	r3, [pc, #252]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e06f      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078be:	4b3b      	ldr	r3, [pc, #236]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e067      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ce:	4b37      	ldr	r3, [pc, #220]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f023 0203 	bic.w	r2, r3, #3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	4934      	ldr	r1, [pc, #208]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078e0:	f7fc fe14 	bl	800450c <HAL_GetTick>
 80078e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e6:	e00a      	b.n	80078fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e8:	f7fc fe10 	bl	800450c <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e04f      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fe:	4b2b      	ldr	r3, [pc, #172]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 020c 	and.w	r2, r3, #12
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	429a      	cmp	r2, r3
 800790e:	d1eb      	bne.n	80078e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007910:	4b25      	ldr	r3, [pc, #148]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d20c      	bcs.n	8007938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791e:	4b22      	ldr	r3, [pc, #136]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007926:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0307 	and.w	r3, r3, #7
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d001      	beq.n	8007938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e032      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	4916      	ldr	r1, [pc, #88]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007952:	4313      	orrs	r3, r2
 8007954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0308 	and.w	r3, r3, #8
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	490e      	ldr	r1, [pc, #56]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007972:	4313      	orrs	r3, r2
 8007974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007976:	f000 f821 	bl	80079bc <HAL_RCC_GetSysClockFreq>
 800797a:	4602      	mov	r2, r0
 800797c:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	091b      	lsrs	r3, r3, #4
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	490a      	ldr	r1, [pc, #40]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007988:	5ccb      	ldrb	r3, [r1, r3]
 800798a:	fa22 f303 	lsr.w	r3, r2, r3
 800798e:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007992:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f7fc fd74 	bl	8004484 <HAL_InitTick>

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40023c00 	.word	0x40023c00
 80079ac:	40023800 	.word	0x40023800
 80079b0:	0800a1d0 	.word	0x0800a1d0
 80079b4:	200009a8 	.word	0x200009a8
 80079b8:	200009ac 	.word	0x200009ac

080079bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079c0:	b090      	sub	sp, #64	; 0x40
 80079c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	637b      	str	r3, [r7, #52]	; 0x34
 80079c8:	2300      	movs	r3, #0
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079cc:	2300      	movs	r3, #0
 80079ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079d4:	4b59      	ldr	r3, [pc, #356]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 030c 	and.w	r3, r3, #12
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d00d      	beq.n	80079fc <HAL_RCC_GetSysClockFreq+0x40>
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	f200 80a1 	bhi.w	8007b28 <HAL_RCC_GetSysClockFreq+0x16c>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_RCC_GetSysClockFreq+0x34>
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d003      	beq.n	80079f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079ee:	e09b      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079f0:	4b53      	ldr	r3, [pc, #332]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x184>)
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80079f4:	e09b      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079f6:	4b53      	ldr	r3, [pc, #332]	; (8007b44 <HAL_RCC_GetSysClockFreq+0x188>)
 80079f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079fa:	e098      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079fc:	4b4f      	ldr	r3, [pc, #316]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x180>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a06:	4b4d      	ldr	r3, [pc, #308]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d028      	beq.n	8007a64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a12:	4b4a      	ldr	r3, [pc, #296]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	099b      	lsrs	r3, r3, #6
 8007a18:	2200      	movs	r2, #0
 8007a1a:	623b      	str	r3, [r7, #32]
 8007a1c:	627a      	str	r2, [r7, #36]	; 0x24
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a24:	2100      	movs	r1, #0
 8007a26:	4b47      	ldr	r3, [pc, #284]	; (8007b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a28:	fb03 f201 	mul.w	r2, r3, r1
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	fb00 f303 	mul.w	r3, r0, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	4a43      	ldr	r2, [pc, #268]	; (8007b44 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a36:	fba0 1202 	umull	r1, r2, r0, r2
 8007a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a3c:	460a      	mov	r2, r1
 8007a3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a42:	4413      	add	r3, r2
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a48:	2200      	movs	r2, #0
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	61fa      	str	r2, [r7, #28]
 8007a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a56:	f7f8 fef5 	bl	8000844 <__aeabi_uldivmod>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4613      	mov	r3, r2
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a62:	e053      	b.n	8007b0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a64:	4b35      	ldr	r3, [pc, #212]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	099b      	lsrs	r3, r3, #6
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	617a      	str	r2, [r7, #20]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a76:	f04f 0b00 	mov.w	fp, #0
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	465b      	mov	r3, fp
 8007a7e:	f04f 0000 	mov.w	r0, #0
 8007a82:	f04f 0100 	mov.w	r1, #0
 8007a86:	0159      	lsls	r1, r3, #5
 8007a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a8c:	0150      	lsls	r0, r2, #5
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	ebb2 080a 	subs.w	r8, r2, sl
 8007a96:	eb63 090b 	sbc.w	r9, r3, fp
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007aa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007aaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007aae:	ebb2 0408 	subs.w	r4, r2, r8
 8007ab2:	eb63 0509 	sbc.w	r5, r3, r9
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	00eb      	lsls	r3, r5, #3
 8007ac0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ac4:	00e2      	lsls	r2, r4, #3
 8007ac6:	4614      	mov	r4, r2
 8007ac8:	461d      	mov	r5, r3
 8007aca:	eb14 030a 	adds.w	r3, r4, sl
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	eb45 030b 	adc.w	r3, r5, fp
 8007ad4:	607b      	str	r3, [r7, #4]
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	028b      	lsls	r3, r1, #10
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007aec:	4621      	mov	r1, r4
 8007aee:	028a      	lsls	r2, r1, #10
 8007af0:	4610      	mov	r0, r2
 8007af2:	4619      	mov	r1, r3
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	2200      	movs	r2, #0
 8007af8:	60bb      	str	r3, [r7, #8]
 8007afa:	60fa      	str	r2, [r7, #12]
 8007afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b00:	f7f8 fea0 	bl	8000844 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4613      	mov	r3, r2
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	3301      	adds	r3, #1
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b26:	e002      	b.n	8007b2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3740      	adds	r7, #64	; 0x40
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	00f42400 	.word	0x00f42400
 8007b44:	017d7840 	.word	0x017d7840

08007b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b4c:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	200009a8 	.word	0x200009a8

08007b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b64:	f7ff fff0 	bl	8007b48 <HAL_RCC_GetHCLKFreq>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	0a9b      	lsrs	r3, r3, #10
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	4903      	ldr	r1, [pc, #12]	; (8007b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b76:	5ccb      	ldrb	r3, [r1, r3]
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40023800 	.word	0x40023800
 8007b84:	0800a1e0 	.word	0x0800a1e0

08007b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e07b      	b.n	8007c92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d108      	bne.n	8007bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007baa:	d009      	beq.n	8007bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	61da      	str	r2, [r3, #28]
 8007bb2:	e005      	b.n	8007bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d106      	bne.n	8007be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7fc fa56 	bl	800408c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c44:	ea42 0103 	orr.w	r1, r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	0c1b      	lsrs	r3, r3, #16
 8007c5e:	f003 0104 	and.w	r1, r3, #4
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	f003 0210 	and.w	r2, r3, #16
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	603b      	str	r3, [r7, #0]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_SPI_Transmit+0x22>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e126      	b.n	8007f0a <HAL_SPI_Transmit+0x270>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cc4:	f7fc fc22 	bl	800450c <HAL_GetTick>
 8007cc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d002      	beq.n	8007ce0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cde:	e10b      	b.n	8007ef8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_SPI_Transmit+0x52>
 8007ce6:	88fb      	ldrh	r3, [r7, #6]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cf0:	e102      	b.n	8007ef8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d38:	d10f      	bne.n	8007d5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	d007      	beq.n	8007d78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d80:	d14b      	bne.n	8007e1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_SPI_Transmit+0xf6>
 8007d8a:	8afb      	ldrh	r3, [r7, #22]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d13e      	bne.n	8007e0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	881a      	ldrh	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	1c9a      	adds	r2, r3, #2
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007db4:	e02b      	b.n	8007e0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d112      	bne.n	8007dea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	881a      	ldrh	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	1c9a      	adds	r2, r3, #2
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	86da      	strh	r2, [r3, #54]	; 0x36
 8007de8:	e011      	b.n	8007e0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dea:	f7fc fb8f 	bl	800450c <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d803      	bhi.n	8007e02 <HAL_SPI_Transmit+0x168>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d102      	bne.n	8007e08 <HAL_SPI_Transmit+0x16e>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e0c:	e074      	b.n	8007ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1ce      	bne.n	8007db6 <HAL_SPI_Transmit+0x11c>
 8007e18:	e04c      	b.n	8007eb4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <HAL_SPI_Transmit+0x18e>
 8007e22:	8afb      	ldrh	r3, [r7, #22]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d140      	bne.n	8007eaa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	330c      	adds	r3, #12
 8007e32:	7812      	ldrb	r2, [r2, #0]
 8007e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e4e:	e02c      	b.n	8007eaa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d113      	bne.n	8007e86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	330c      	adds	r3, #12
 8007e68:	7812      	ldrb	r2, [r2, #0]
 8007e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	1c5a      	adds	r2, r3, #1
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e84:	e011      	b.n	8007eaa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e86:	f7fc fb41 	bl	800450c <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d803      	bhi.n	8007e9e <HAL_SPI_Transmit+0x204>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d102      	bne.n	8007ea4 <HAL_SPI_Transmit+0x20a>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ea8:	e026      	b.n	8007ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1cd      	bne.n	8007e50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fbcb 	bl	8008654 <SPI_EndRxTxTransaction>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10a      	bne.n	8007ee8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	613b      	str	r3, [r7, #16]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	613b      	str	r3, [r7, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	77fb      	strb	r3, [r7, #31]
 8007ef4:	e000      	b.n	8007ef8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007ef6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3720      	adds	r7, #32
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b088      	sub	sp, #32
 8007f16:	af02      	add	r7, sp, #8
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	603b      	str	r3, [r7, #0]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f2e:	d112      	bne.n	8007f56 <HAL_SPI_Receive+0x44>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10e      	bne.n	8007f56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f8f1 	bl	8008134 <HAL_SPI_TransmitReceive>
 8007f52:	4603      	mov	r3, r0
 8007f54:	e0ea      	b.n	800812c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_SPI_Receive+0x52>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e0e3      	b.n	800812c <HAL_SPI_Receive+0x21a>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f6c:	f7fc face 	bl	800450c <HAL_GetTick>
 8007f70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d002      	beq.n	8007f84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f82:	e0ca      	b.n	800811a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_SPI_Receive+0x7e>
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f94:	e0c1      	b.n	800811a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2204      	movs	r2, #4
 8007f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	88fa      	ldrh	r2, [r7, #6]
 8007fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	88fa      	ldrh	r2, [r7, #6]
 8007fb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fdc:	d10f      	bne.n	8007ffe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ffc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008008:	2b40      	cmp	r3, #64	; 0x40
 800800a:	d007      	beq.n	800801c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800801a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d162      	bne.n	80080ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008024:	e02e      	b.n	8008084 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b01      	cmp	r3, #1
 8008032:	d115      	bne.n	8008060 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f103 020c 	add.w	r2, r3, #12
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800805e:	e011      	b.n	8008084 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008060:	f7fc fa54 	bl	800450c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d803      	bhi.n	8008078 <HAL_SPI_Receive+0x166>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d102      	bne.n	800807e <HAL_SPI_Receive+0x16c>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008082:	e04a      	b.n	800811a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1cb      	bne.n	8008026 <HAL_SPI_Receive+0x114>
 800808e:	e031      	b.n	80080f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b01      	cmp	r3, #1
 800809c:	d113      	bne.n	80080c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	b292      	uxth	r2, r2
 80080aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	1c9a      	adds	r2, r3, #2
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080c4:	e011      	b.n	80080ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c6:	f7fc fa21 	bl	800450c <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d803      	bhi.n	80080de <HAL_SPI_Receive+0x1cc>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d102      	bne.n	80080e4 <HAL_SPI_Receive+0x1d2>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080e8:	e017      	b.n	800811a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1cd      	bne.n	8008090 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fa45 	bl	8008588 <SPI_EndRxTransaction>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	75fb      	strb	r3, [r7, #23]
 8008116:	e000      	b.n	800811a <HAL_SPI_Receive+0x208>
  }

error :
 8008118:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08c      	sub	sp, #48	; 0x30
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008142:	2301      	movs	r3, #1
 8008144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <HAL_SPI_TransmitReceive+0x26>
 8008156:	2302      	movs	r3, #2
 8008158:	e18a      	b.n	8008470 <HAL_SPI_TransmitReceive+0x33c>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008162:	f7fc f9d3 	bl	800450c <HAL_GetTick>
 8008166:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800816e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008178:	887b      	ldrh	r3, [r7, #2]
 800817a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800817c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008180:	2b01      	cmp	r3, #1
 8008182:	d00f      	beq.n	80081a4 <HAL_SPI_TransmitReceive+0x70>
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818a:	d107      	bne.n	800819c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <HAL_SPI_TransmitReceive+0x68>
 8008194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008198:	2b04      	cmp	r3, #4
 800819a:	d003      	beq.n	80081a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800819c:	2302      	movs	r3, #2
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081a2:	e15b      	b.n	800845c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <HAL_SPI_TransmitReceive+0x82>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_SPI_TransmitReceive+0x82>
 80081b0:	887b      	ldrh	r3, [r7, #2]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081bc:	e14e      	b.n	800845c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d003      	beq.n	80081d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2205      	movs	r2, #5
 80081ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	887a      	ldrh	r2, [r7, #2]
 80081e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	887a      	ldrh	r2, [r7, #2]
 80081e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	887a      	ldrh	r2, [r7, #2]
 80081f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	887a      	ldrh	r2, [r7, #2]
 80081fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b40      	cmp	r3, #64	; 0x40
 8008214:	d007      	beq.n	8008226 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008224:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800822e:	d178      	bne.n	8008322 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <HAL_SPI_TransmitReceive+0x10a>
 8008238:	8b7b      	ldrh	r3, [r7, #26]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d166      	bne.n	800830c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008242:	881a      	ldrh	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b29a      	uxth	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008262:	e053      	b.n	800830c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b02      	cmp	r3, #2
 8008270:	d11b      	bne.n	80082aa <HAL_SPI_TransmitReceive+0x176>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d016      	beq.n	80082aa <HAL_SPI_TransmitReceive+0x176>
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	2b01      	cmp	r3, #1
 8008280:	d113      	bne.n	80082aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	881a      	ldrh	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	1c9a      	adds	r2, r3, #2
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d119      	bne.n	80082ec <HAL_SPI_TransmitReceive+0x1b8>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d014      	beq.n	80082ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	b292      	uxth	r2, r2
 80082ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	1c9a      	adds	r2, r3, #2
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082e8:	2301      	movs	r3, #1
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082ec:	f7fc f90e 	bl	800450c <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d807      	bhi.n	800830c <HAL_SPI_TransmitReceive+0x1d8>
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008302:	d003      	beq.n	800830c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800830a:	e0a7      	b.n	800845c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1a6      	bne.n	8008264 <HAL_SPI_TransmitReceive+0x130>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1a1      	bne.n	8008264 <HAL_SPI_TransmitReceive+0x130>
 8008320:	e07c      	b.n	800841c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x1fc>
 800832a:	8b7b      	ldrh	r3, [r7, #26]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d16b      	bne.n	8008408 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	330c      	adds	r3, #12
 800833a:	7812      	ldrb	r2, [r2, #0]
 800833c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008356:	e057      	b.n	8008408 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b02      	cmp	r3, #2
 8008364:	d11c      	bne.n	80083a0 <HAL_SPI_TransmitReceive+0x26c>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800836a:	b29b      	uxth	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d017      	beq.n	80083a0 <HAL_SPI_TransmitReceive+0x26c>
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008372:	2b01      	cmp	r3, #1
 8008374:	d114      	bne.n	80083a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	330c      	adds	r3, #12
 8008380:	7812      	ldrb	r2, [r2, #0]
 8008382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d119      	bne.n	80083e2 <HAL_SPI_TransmitReceive+0x2ae>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d014      	beq.n	80083e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	b2d2      	uxtb	r2, r2
 80083c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083de:	2301      	movs	r3, #1
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083e2:	f7fc f893 	bl	800450c <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d803      	bhi.n	80083fa <HAL_SPI_TransmitReceive+0x2c6>
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d102      	bne.n	8008400 <HAL_SPI_TransmitReceive+0x2cc>
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d103      	bne.n	8008408 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008406:	e029      	b.n	800845c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800840c:	b29b      	uxth	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1a2      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x224>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d19d      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800841c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f917 	bl	8008654 <SPI_EndRxTxTransaction>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d006      	beq.n	800843a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008438:	e010      	b.n	800845c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10b      	bne.n	800845a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	e000      	b.n	800845c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800845a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800846c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008470:	4618      	mov	r0, r3
 8008472:	3730      	adds	r7, #48	; 0x30
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008488:	f7fc f840 	bl	800450c <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4413      	add	r3, r2
 8008496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008498:	f7fc f838 	bl	800450c <HAL_GetTick>
 800849c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800849e:	4b39      	ldr	r3, [pc, #228]	; (8008584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	015b      	lsls	r3, r3, #5
 80084a4:	0d1b      	lsrs	r3, r3, #20
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ae:	e054      	b.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d050      	beq.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084b8:	f7fc f828 	bl	800450c <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d902      	bls.n	80084ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d13d      	bne.n	800854a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084e6:	d111      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f0:	d004      	beq.n	80084fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084fa:	d107      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008514:	d10f      	bne.n	8008536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e017      	b.n	800857a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	3b01      	subs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	429a      	cmp	r2, r3
 8008576:	d19b      	bne.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	200009a8 	.word	0x200009a8

08008588 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800859c:	d111      	bne.n	80085c2 <SPI_EndRxTransaction+0x3a>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a6:	d004      	beq.n	80085b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b0:	d107      	bne.n	80085c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ca:	d12a      	bne.n	8008622 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d4:	d012      	beq.n	80085fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	2180      	movs	r1, #128	; 0x80
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f7ff ff49 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d02d      	beq.n	8008648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f0:	f043 0220 	orr.w	r2, r3, #32
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e026      	b.n	800864a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	2101      	movs	r1, #1
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f7ff ff36 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01a      	beq.n	8008648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008616:	f043 0220 	orr.w	r2, r3, #32
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e013      	b.n	800864a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2200      	movs	r2, #0
 800862a:	2101      	movs	r1, #1
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f7ff ff23 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863c:	f043 0220 	orr.w	r2, r3, #32
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e000      	b.n	800864a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af02      	add	r7, sp, #8
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008660:	4b1b      	ldr	r3, [pc, #108]	; (80086d0 <SPI_EndRxTxTransaction+0x7c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1b      	ldr	r2, [pc, #108]	; (80086d4 <SPI_EndRxTxTransaction+0x80>)
 8008666:	fba2 2303 	umull	r2, r3, r2, r3
 800866a:	0d5b      	lsrs	r3, r3, #21
 800866c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008670:	fb02 f303 	mul.w	r3, r2, r3
 8008674:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800867e:	d112      	bne.n	80086a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	2180      	movs	r1, #128	; 0x80
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f7ff fef4 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d016      	beq.n	80086c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	f043 0220 	orr.w	r2, r3, #32
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e00f      	b.n	80086c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086bc:	2b80      	cmp	r3, #128	; 0x80
 80086be:	d0f2      	beq.n	80086a6 <SPI_EndRxTxTransaction+0x52>
 80086c0:	e000      	b.n	80086c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80086c2:	bf00      	nop
  }

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200009a8 	.word	0x200009a8
 80086d4:	165e9f81 	.word	0x165e9f81

080086d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e041      	b.n	800876e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7fb fdbe 	bl	8004280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f000 fd54 	bl	80091c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b01      	cmp	r3, #1
 800878a:	d001      	beq.n	8008790 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e03c      	b.n	800880a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <HAL_TIM_Base_Start+0xa0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d018      	beq.n	80087d4 <HAL_TIM_Base_Start+0x5c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087aa:	d013      	beq.n	80087d4 <HAL_TIM_Base_Start+0x5c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1a      	ldr	r2, [pc, #104]	; (800881c <HAL_TIM_Base_Start+0xa4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d00e      	beq.n	80087d4 <HAL_TIM_Base_Start+0x5c>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a19      	ldr	r2, [pc, #100]	; (8008820 <HAL_TIM_Base_Start+0xa8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d009      	beq.n	80087d4 <HAL_TIM_Base_Start+0x5c>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a17      	ldr	r2, [pc, #92]	; (8008824 <HAL_TIM_Base_Start+0xac>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d004      	beq.n	80087d4 <HAL_TIM_Base_Start+0x5c>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a16      	ldr	r2, [pc, #88]	; (8008828 <HAL_TIM_Base_Start+0xb0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d111      	bne.n	80087f8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b06      	cmp	r3, #6
 80087e4:	d010      	beq.n	8008808 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f6:	e007      	b.n	8008808 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40014000 	.word	0x40014000

0800882c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b01      	cmp	r3, #1
 800883e:	d001      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e044      	b.n	80088ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0201 	orr.w	r2, r2, #1
 800885a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <HAL_TIM_Base_Start_IT+0xb0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x6c>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886e:	d013      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x6c>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1a      	ldr	r2, [pc, #104]	; (80088e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x6c>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a19      	ldr	r2, [pc, #100]	; (80088e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x6c>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a17      	ldr	r2, [pc, #92]	; (80088e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIM_Base_Start_IT+0x6c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a16      	ldr	r2, [pc, #88]	; (80088ec <HAL_TIM_Base_Start_IT+0xc0>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d111      	bne.n	80088bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b06      	cmp	r3, #6
 80088a8:	d010      	beq.n	80088cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f042 0201 	orr.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ba:	e007      	b.n	80088cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	40010000 	.word	0x40010000
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	40014000 	.word	0x40014000

080088f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e041      	b.n	8008986 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f839 	bl	800898e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f000 fc48 	bl	80091c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
	...

080089a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d109      	bne.n	80089c8 <HAL_TIM_PWM_Start+0x24>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	e022      	b.n	8008a0e <HAL_TIM_PWM_Start+0x6a>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	d109      	bne.n	80089e2 <HAL_TIM_PWM_Start+0x3e>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	bf14      	ite	ne
 80089da:	2301      	movne	r3, #1
 80089dc:	2300      	moveq	r3, #0
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	e015      	b.n	8008a0e <HAL_TIM_PWM_Start+0x6a>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d109      	bne.n	80089fc <HAL_TIM_PWM_Start+0x58>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	bf14      	ite	ne
 80089f4:	2301      	movne	r3, #1
 80089f6:	2300      	moveq	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	e008      	b.n	8008a0e <HAL_TIM_PWM_Start+0x6a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	bf14      	ite	ne
 8008a08:	2301      	movne	r3, #1
 8008a0a:	2300      	moveq	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e068      	b.n	8008ae8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_PWM_Start+0x82>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a24:	e013      	b.n	8008a4e <HAL_TIM_PWM_Start+0xaa>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_PWM_Start+0x92>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a34:	e00b      	b.n	8008a4e <HAL_TIM_PWM_Start+0xaa>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_PWM_Start+0xa2>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a44:	e003      	b.n	8008a4e <HAL_TIM_PWM_Start+0xaa>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2201      	movs	r2, #1
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fe5a 	bl	8009710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a23      	ldr	r2, [pc, #140]	; (8008af0 <HAL_TIM_PWM_Start+0x14c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d107      	bne.n	8008a76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <HAL_TIM_PWM_Start+0x14c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d018      	beq.n	8008ab2 <HAL_TIM_PWM_Start+0x10e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a88:	d013      	beq.n	8008ab2 <HAL_TIM_PWM_Start+0x10e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a19      	ldr	r2, [pc, #100]	; (8008af4 <HAL_TIM_PWM_Start+0x150>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00e      	beq.n	8008ab2 <HAL_TIM_PWM_Start+0x10e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <HAL_TIM_PWM_Start+0x154>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d009      	beq.n	8008ab2 <HAL_TIM_PWM_Start+0x10e>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a16      	ldr	r2, [pc, #88]	; (8008afc <HAL_TIM_PWM_Start+0x158>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d004      	beq.n	8008ab2 <HAL_TIM_PWM_Start+0x10e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a14      	ldr	r2, [pc, #80]	; (8008b00 <HAL_TIM_PWM_Start+0x15c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d111      	bne.n	8008ad6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b06      	cmp	r3, #6
 8008ac2:	d010      	beq.n	8008ae6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad4:	e007      	b.n	8008ae6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0201 	orr.w	r2, r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40000400 	.word	0x40000400
 8008af8:	40000800 	.word	0x40000800
 8008afc:	40000c00 	.word	0x40000c00
 8008b00:	40014000 	.word	0x40014000

08008b04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e097      	b.n	8008c48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d106      	bne.n	8008b32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7fb fb2b 	bl	8004188 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2202      	movs	r2, #2
 8008b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b48:	f023 0307 	bic.w	r3, r3, #7
 8008b4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f000 fb33 	bl	80091c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	4313      	orrs	r3, r2
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ba4:	f023 030c 	bic.w	r3, r3, #12
 8008ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	011a      	lsls	r2, r3, #4
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	031b      	lsls	r3, r3, #12
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008bea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d122      	bne.n	8008cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d11b      	bne.n	8008cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f06f 0202 	mvn.w	r2, #2
 8008c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa77 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 8008c98:	e005      	b.n	8008ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa69 	bl	8009172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fa7a 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d122      	bne.n	8008d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d11b      	bne.n	8008d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f06f 0204 	mvn.w	r2, #4
 8008cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa4d 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 8008cec:	e005      	b.n	8008cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fa3f 	bl	8009172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa50 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f003 0308 	and.w	r3, r3, #8
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d122      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d11b      	bne.n	8008d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f06f 0208 	mvn.w	r2, #8
 8008d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2204      	movs	r2, #4
 8008d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa23 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 8008d40:	e005      	b.n	8008d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa15 	bl	8009172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fa26 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f003 0310 	and.w	r3, r3, #16
 8008d5e:	2b10      	cmp	r3, #16
 8008d60:	d122      	bne.n	8008da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f003 0310 	and.w	r3, r3, #16
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d11b      	bne.n	8008da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f06f 0210 	mvn.w	r2, #16
 8008d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2208      	movs	r2, #8
 8008d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9f9 	bl	8009186 <HAL_TIM_IC_CaptureCallback>
 8008d94:	e005      	b.n	8008da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f9eb 	bl	8009172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f9fc 	bl	800919a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d10e      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d107      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f06f 0201 	mvn.w	r2, #1
 8008dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7f8 f978 	bl	80010c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dde:	2b80      	cmp	r3, #128	; 0x80
 8008de0:	d10e      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dec:	2b80      	cmp	r3, #128	; 0x80
 8008dee:	d107      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fd26 	bl	800984c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0a:	2b40      	cmp	r3, #64	; 0x40
 8008e0c:	d10e      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	d107      	bne.n	8008e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f9c1 	bl	80091ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d10e      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0320 	and.w	r3, r3, #32
 8008e44:	2b20      	cmp	r3, #32
 8008e46:	d107      	bne.n	8008e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0220 	mvn.w	r2, #32
 8008e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fcf0 	bl	8009838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e0ae      	b.n	8008fdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b0c      	cmp	r3, #12
 8008e8a:	f200 809f 	bhi.w	8008fcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e8e:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ec9 	.word	0x08008ec9
 8008e98:	08008fcd 	.word	0x08008fcd
 8008e9c:	08008fcd 	.word	0x08008fcd
 8008ea0:	08008fcd 	.word	0x08008fcd
 8008ea4:	08008f09 	.word	0x08008f09
 8008ea8:	08008fcd 	.word	0x08008fcd
 8008eac:	08008fcd 	.word	0x08008fcd
 8008eb0:	08008fcd 	.word	0x08008fcd
 8008eb4:	08008f4b 	.word	0x08008f4b
 8008eb8:	08008fcd 	.word	0x08008fcd
 8008ebc:	08008fcd 	.word	0x08008fcd
 8008ec0:	08008fcd 	.word	0x08008fcd
 8008ec4:	08008f8b 	.word	0x08008f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 f9f8 	bl	80092c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f042 0208 	orr.w	r2, r2, #8
 8008ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699a      	ldr	r2, [r3, #24]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0204 	bic.w	r2, r2, #4
 8008ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6999      	ldr	r1, [r3, #24]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	691a      	ldr	r2, [r3, #16]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	619a      	str	r2, [r3, #24]
      break;
 8008f06:	e064      	b.n	8008fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 fa3e 	bl	8009390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6999      	ldr	r1, [r3, #24]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	021a      	lsls	r2, r3, #8
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	619a      	str	r2, [r3, #24]
      break;
 8008f48:	e043      	b.n	8008fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fa89 	bl	8009468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69da      	ldr	r2, [r3, #28]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0208 	orr.w	r2, r2, #8
 8008f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69da      	ldr	r2, [r3, #28]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 0204 	bic.w	r2, r2, #4
 8008f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69d9      	ldr	r1, [r3, #28]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	61da      	str	r2, [r3, #28]
      break;
 8008f88:	e023      	b.n	8008fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fad3 	bl	800953c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69d9      	ldr	r1, [r3, #28]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	021a      	lsls	r2, r3, #8
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	61da      	str	r2, [r3, #28]
      break;
 8008fca:	e002      	b.n	8008fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_TIM_ConfigClockSource+0x1c>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e0b4      	b.n	800916a <HAL_TIM_ConfigClockSource+0x186>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800901e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009038:	d03e      	beq.n	80090b8 <HAL_TIM_ConfigClockSource+0xd4>
 800903a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800903e:	f200 8087 	bhi.w	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009046:	f000 8086 	beq.w	8009156 <HAL_TIM_ConfigClockSource+0x172>
 800904a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800904e:	d87f      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009050:	2b70      	cmp	r3, #112	; 0x70
 8009052:	d01a      	beq.n	800908a <HAL_TIM_ConfigClockSource+0xa6>
 8009054:	2b70      	cmp	r3, #112	; 0x70
 8009056:	d87b      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009058:	2b60      	cmp	r3, #96	; 0x60
 800905a:	d050      	beq.n	80090fe <HAL_TIM_ConfigClockSource+0x11a>
 800905c:	2b60      	cmp	r3, #96	; 0x60
 800905e:	d877      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009060:	2b50      	cmp	r3, #80	; 0x50
 8009062:	d03c      	beq.n	80090de <HAL_TIM_ConfigClockSource+0xfa>
 8009064:	2b50      	cmp	r3, #80	; 0x50
 8009066:	d873      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009068:	2b40      	cmp	r3, #64	; 0x40
 800906a:	d058      	beq.n	800911e <HAL_TIM_ConfigClockSource+0x13a>
 800906c:	2b40      	cmp	r3, #64	; 0x40
 800906e:	d86f      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009070:	2b30      	cmp	r3, #48	; 0x30
 8009072:	d064      	beq.n	800913e <HAL_TIM_ConfigClockSource+0x15a>
 8009074:	2b30      	cmp	r3, #48	; 0x30
 8009076:	d86b      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009078:	2b20      	cmp	r3, #32
 800907a:	d060      	beq.n	800913e <HAL_TIM_ConfigClockSource+0x15a>
 800907c:	2b20      	cmp	r3, #32
 800907e:	d867      	bhi.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
 8009080:	2b00      	cmp	r3, #0
 8009082:	d05c      	beq.n	800913e <HAL_TIM_ConfigClockSource+0x15a>
 8009084:	2b10      	cmp	r3, #16
 8009086:	d05a      	beq.n	800913e <HAL_TIM_ConfigClockSource+0x15a>
 8009088:	e062      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	6899      	ldr	r1, [r3, #8]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	f000 fb19 	bl	80096d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	609a      	str	r2, [r3, #8]
      break;
 80090b6:	e04f      	b.n	8009158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	6899      	ldr	r1, [r3, #8]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f000 fb02 	bl	80096d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090da:	609a      	str	r2, [r3, #8]
      break;
 80090dc:	e03c      	b.n	8009158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	6859      	ldr	r1, [r3, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f000 fa76 	bl	80095dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2150      	movs	r1, #80	; 0x50
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 facf 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 80090fc:	e02c      	b.n	8009158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	6859      	ldr	r1, [r3, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	461a      	mov	r2, r3
 800910c:	f000 fa95 	bl	800963a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2160      	movs	r1, #96	; 0x60
 8009116:	4618      	mov	r0, r3
 8009118:	f000 fabf 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 800911c:	e01c      	b.n	8009158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	6859      	ldr	r1, [r3, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	461a      	mov	r2, r3
 800912c:	f000 fa56 	bl	80095dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2140      	movs	r1, #64	; 0x40
 8009136:	4618      	mov	r0, r3
 8009138:	f000 faaf 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 800913c:	e00c      	b.n	8009158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4619      	mov	r1, r3
 8009148:	4610      	mov	r0, r2
 800914a:	f000 faa6 	bl	800969a <TIM_ITRx_SetConfig>
      break;
 800914e:	e003      	b.n	8009158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
      break;
 8009154:	e000      	b.n	8009158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009168:	7bfb      	ldrb	r3, [r7, #15]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800917a:	bf00      	nop
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
	...

080091c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a34      	ldr	r2, [pc, #208]	; (80092a8 <TIM_Base_SetConfig+0xe4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00f      	beq.n	80091fc <TIM_Base_SetConfig+0x38>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e2:	d00b      	beq.n	80091fc <TIM_Base_SetConfig+0x38>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a31      	ldr	r2, [pc, #196]	; (80092ac <TIM_Base_SetConfig+0xe8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d007      	beq.n	80091fc <TIM_Base_SetConfig+0x38>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a30      	ldr	r2, [pc, #192]	; (80092b0 <TIM_Base_SetConfig+0xec>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_Base_SetConfig+0x38>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a2f      	ldr	r2, [pc, #188]	; (80092b4 <TIM_Base_SetConfig+0xf0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d108      	bne.n	800920e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a25      	ldr	r2, [pc, #148]	; (80092a8 <TIM_Base_SetConfig+0xe4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d01b      	beq.n	800924e <TIM_Base_SetConfig+0x8a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921c:	d017      	beq.n	800924e <TIM_Base_SetConfig+0x8a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a22      	ldr	r2, [pc, #136]	; (80092ac <TIM_Base_SetConfig+0xe8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d013      	beq.n	800924e <TIM_Base_SetConfig+0x8a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a21      	ldr	r2, [pc, #132]	; (80092b0 <TIM_Base_SetConfig+0xec>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d00f      	beq.n	800924e <TIM_Base_SetConfig+0x8a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a20      	ldr	r2, [pc, #128]	; (80092b4 <TIM_Base_SetConfig+0xf0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d00b      	beq.n	800924e <TIM_Base_SetConfig+0x8a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a1f      	ldr	r2, [pc, #124]	; (80092b8 <TIM_Base_SetConfig+0xf4>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d007      	beq.n	800924e <TIM_Base_SetConfig+0x8a>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a1e      	ldr	r2, [pc, #120]	; (80092bc <TIM_Base_SetConfig+0xf8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d003      	beq.n	800924e <TIM_Base_SetConfig+0x8a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a1d      	ldr	r2, [pc, #116]	; (80092c0 <TIM_Base_SetConfig+0xfc>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d108      	bne.n	8009260 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689a      	ldr	r2, [r3, #8]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a08      	ldr	r2, [pc, #32]	; (80092a8 <TIM_Base_SetConfig+0xe4>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d103      	bne.n	8009294 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	691a      	ldr	r2, [r3, #16]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	615a      	str	r2, [r3, #20]
}
 800929a:	bf00      	nop
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	40010000 	.word	0x40010000
 80092ac:	40000400 	.word	0x40000400
 80092b0:	40000800 	.word	0x40000800
 80092b4:	40000c00 	.word	0x40000c00
 80092b8:	40014000 	.word	0x40014000
 80092bc:	40014400 	.word	0x40014400
 80092c0:	40014800 	.word	0x40014800

080092c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	f023 0201 	bic.w	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0303 	bic.w	r3, r3, #3
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f023 0302 	bic.w	r3, r3, #2
 800930c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <TIM_OC1_SetConfig+0xc8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d10c      	bne.n	800933a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f023 0308 	bic.w	r3, r3, #8
 8009326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f023 0304 	bic.w	r3, r3, #4
 8009338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a13      	ldr	r2, [pc, #76]	; (800938c <TIM_OC1_SetConfig+0xc8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d111      	bne.n	8009366 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	4313      	orrs	r3, r2
 8009364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	621a      	str	r2, [r3, #32]
}
 8009380:	bf00      	nop
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	40010000 	.word	0x40010000

08009390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	f023 0210 	bic.w	r2, r3, #16
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f023 0320 	bic.w	r3, r3, #32
 80093da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a1e      	ldr	r2, [pc, #120]	; (8009464 <TIM_OC2_SetConfig+0xd4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10d      	bne.n	800940c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	011b      	lsls	r3, r3, #4
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800940a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a15      	ldr	r2, [pc, #84]	; (8009464 <TIM_OC2_SetConfig+0xd4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d113      	bne.n	800943c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800941a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4313      	orrs	r3, r2
 800943a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	621a      	str	r2, [r3, #32]
}
 8009456:	bf00      	nop
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40010000 	.word	0x40010000

08009468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f023 0303 	bic.w	r3, r3, #3
 800949e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a1d      	ldr	r2, [pc, #116]	; (8009538 <TIM_OC3_SetConfig+0xd0>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d10d      	bne.n	80094e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a14      	ldr	r2, [pc, #80]	; (8009538 <TIM_OC3_SetConfig+0xd0>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d113      	bne.n	8009512 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	4313      	orrs	r3, r2
 8009504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	4313      	orrs	r3, r2
 8009510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	621a      	str	r2, [r3, #32]
}
 800952c:	bf00      	nop
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	40010000 	.word	0x40010000

0800953c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800956a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4313      	orrs	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	031b      	lsls	r3, r3, #12
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a10      	ldr	r2, [pc, #64]	; (80095d8 <TIM_OC4_SetConfig+0x9c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d109      	bne.n	80095b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	019b      	lsls	r3, r3, #6
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	621a      	str	r2, [r3, #32]
}
 80095ca:	bf00      	nop
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	40010000 	.word	0x40010000

080095dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	f023 0201 	bic.w	r2, r3, #1
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f023 030a 	bic.w	r3, r3, #10
 8009618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4313      	orrs	r3, r2
 8009620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	621a      	str	r2, [r3, #32]
}
 800962e:	bf00      	nop
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800963a:	b480      	push	{r7}
 800963c:	b087      	sub	sp, #28
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	f023 0210 	bic.w	r2, r3, #16
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a1b      	ldr	r3, [r3, #32]
 800965c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	031b      	lsls	r3, r3, #12
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009676:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	621a      	str	r2, [r3, #32]
}
 800968e:	bf00      	nop
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	f043 0307 	orr.w	r3, r3, #7
 80096bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	609a      	str	r2, [r3, #8]
}
 80096c4:	bf00      	nop
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	021a      	lsls	r2, r3, #8
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	609a      	str	r2, [r3, #8]
}
 8009704:	bf00      	nop
 8009706:	371c      	adds	r7, #28
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f003 031f 	and.w	r3, r3, #31
 8009722:	2201      	movs	r2, #1
 8009724:	fa02 f303 	lsl.w	r3, r2, r3
 8009728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6a1a      	ldr	r2, [r3, #32]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	43db      	mvns	r3, r3
 8009732:	401a      	ands	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a1a      	ldr	r2, [r3, #32]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 031f 	and.w	r3, r3, #31
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	fa01 f303 	lsl.w	r3, r1, r3
 8009748:	431a      	orrs	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	621a      	str	r2, [r3, #32]
}
 800974e:	bf00      	nop
 8009750:	371c      	adds	r7, #28
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
	...

0800975c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d101      	bne.n	8009774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009770:	2302      	movs	r3, #2
 8009772:	e050      	b.n	8009816 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d018      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c0:	d013      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a18      	ldr	r2, [pc, #96]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00e      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a16      	ldr	r2, [pc, #88]	; (800982c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d009      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a15      	ldr	r2, [pc, #84]	; (8009830 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d004      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a13      	ldr	r2, [pc, #76]	; (8009834 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d10c      	bne.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40010000 	.word	0x40010000
 8009828:	40000400 	.word	0x40000400
 800982c:	40000800 	.word	0x40000800
 8009830:	40000c00 	.word	0x40000c00
 8009834:	40014000 	.word	0x40014000

08009838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <arm_sin_f32>:
 8009860:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80098dc <arm_sin_f32+0x7c>
 8009864:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009868:	ee20 7a07 	vmul.f32	s14, s0, s14
 800986c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009870:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009874:	d42c      	bmi.n	80098d0 <arm_sin_f32+0x70>
 8009876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800987a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80098e0 <arm_sin_f32+0x80>
 800987e:	4a19      	ldr	r2, [pc, #100]	; (80098e4 <arm_sin_f32+0x84>)
 8009880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009884:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009888:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800988c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009894:	bfa8      	it	ge
 8009896:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800989a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800989e:	ee17 3a10 	vmov	r3, s14
 80098a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a6:	ee07 3a10 	vmov	s14, r3
 80098aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80098ae:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80098b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098b6:	edd1 6a01 	vldr	s13, [r1, #4]
 80098ba:	ee30 7a67 	vsub.f32	s14, s0, s15
 80098be:	ed91 0a00 	vldr	s0, [r1]
 80098c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80098c6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80098ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80098ce:	4770      	bx	lr
 80098d0:	ee17 3a90 	vmov	r3, s15
 80098d4:	3b01      	subs	r3, #1
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	e7cc      	b.n	8009876 <arm_sin_f32+0x16>
 80098dc:	3e22f983 	.word	0x3e22f983
 80098e0:	44000000 	.word	0x44000000
 80098e4:	0800a1f0 	.word	0x0800a1f0

080098e8 <atoi>:
 80098e8:	220a      	movs	r2, #10
 80098ea:	2100      	movs	r1, #0
 80098ec:	f000 b8d6 	b.w	8009a9c <strtol>

080098f0 <__errno>:
 80098f0:	4b01      	ldr	r3, [pc, #4]	; (80098f8 <__errno+0x8>)
 80098f2:	6818      	ldr	r0, [r3, #0]
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	200009b4 	.word	0x200009b4

080098fc <__libc_init_array>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	4d0d      	ldr	r5, [pc, #52]	; (8009934 <__libc_init_array+0x38>)
 8009900:	4c0d      	ldr	r4, [pc, #52]	; (8009938 <__libc_init_array+0x3c>)
 8009902:	1b64      	subs	r4, r4, r5
 8009904:	10a4      	asrs	r4, r4, #2
 8009906:	2600      	movs	r6, #0
 8009908:	42a6      	cmp	r6, r4
 800990a:	d109      	bne.n	8009920 <__libc_init_array+0x24>
 800990c:	4d0b      	ldr	r5, [pc, #44]	; (800993c <__libc_init_array+0x40>)
 800990e:	4c0c      	ldr	r4, [pc, #48]	; (8009940 <__libc_init_array+0x44>)
 8009910:	f000 f8ce 	bl	8009ab0 <_init>
 8009914:	1b64      	subs	r4, r4, r5
 8009916:	10a4      	asrs	r4, r4, #2
 8009918:	2600      	movs	r6, #0
 800991a:	42a6      	cmp	r6, r4
 800991c:	d105      	bne.n	800992a <__libc_init_array+0x2e>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	f855 3b04 	ldr.w	r3, [r5], #4
 8009924:	4798      	blx	r3
 8009926:	3601      	adds	r6, #1
 8009928:	e7ee      	b.n	8009908 <__libc_init_array+0xc>
 800992a:	f855 3b04 	ldr.w	r3, [r5], #4
 800992e:	4798      	blx	r3
 8009930:	3601      	adds	r6, #1
 8009932:	e7f2      	b.n	800991a <__libc_init_array+0x1e>
 8009934:	0800ab00 	.word	0x0800ab00
 8009938:	0800ab00 	.word	0x0800ab00
 800993c:	0800ab00 	.word	0x0800ab00
 8009940:	0800ab04 	.word	0x0800ab04

08009944 <memcpy>:
 8009944:	440a      	add	r2, r1
 8009946:	4291      	cmp	r1, r2
 8009948:	f100 33ff 	add.w	r3, r0, #4294967295
 800994c:	d100      	bne.n	8009950 <memcpy+0xc>
 800994e:	4770      	bx	lr
 8009950:	b510      	push	{r4, lr}
 8009952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800995a:	4291      	cmp	r1, r2
 800995c:	d1f9      	bne.n	8009952 <memcpy+0xe>
 800995e:	bd10      	pop	{r4, pc}

08009960 <memset>:
 8009960:	4402      	add	r2, r0
 8009962:	4603      	mov	r3, r0
 8009964:	4293      	cmp	r3, r2
 8009966:	d100      	bne.n	800996a <memset+0xa>
 8009968:	4770      	bx	lr
 800996a:	f803 1b01 	strb.w	r1, [r3], #1
 800996e:	e7f9      	b.n	8009964 <memset+0x4>

08009970 <strncmp>:
 8009970:	b510      	push	{r4, lr}
 8009972:	b17a      	cbz	r2, 8009994 <strncmp+0x24>
 8009974:	4603      	mov	r3, r0
 8009976:	3901      	subs	r1, #1
 8009978:	1884      	adds	r4, r0, r2
 800997a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800997e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009982:	4290      	cmp	r0, r2
 8009984:	d101      	bne.n	800998a <strncmp+0x1a>
 8009986:	42a3      	cmp	r3, r4
 8009988:	d101      	bne.n	800998e <strncmp+0x1e>
 800998a:	1a80      	subs	r0, r0, r2
 800998c:	bd10      	pop	{r4, pc}
 800998e:	2800      	cmp	r0, #0
 8009990:	d1f3      	bne.n	800997a <strncmp+0xa>
 8009992:	e7fa      	b.n	800998a <strncmp+0x1a>
 8009994:	4610      	mov	r0, r2
 8009996:	e7f9      	b.n	800998c <strncmp+0x1c>

08009998 <_strtol_l.constprop.0>:
 8009998:	2b01      	cmp	r3, #1
 800999a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999e:	d001      	beq.n	80099a4 <_strtol_l.constprop.0+0xc>
 80099a0:	2b24      	cmp	r3, #36	; 0x24
 80099a2:	d906      	bls.n	80099b2 <_strtol_l.constprop.0+0x1a>
 80099a4:	f7ff ffa4 	bl	80098f0 <__errno>
 80099a8:	2316      	movs	r3, #22
 80099aa:	6003      	str	r3, [r0, #0]
 80099ac:	2000      	movs	r0, #0
 80099ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009a98 <_strtol_l.constprop.0+0x100>
 80099b6:	460d      	mov	r5, r1
 80099b8:	462e      	mov	r6, r5
 80099ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80099c2:	f017 0708 	ands.w	r7, r7, #8
 80099c6:	d1f7      	bne.n	80099b8 <_strtol_l.constprop.0+0x20>
 80099c8:	2c2d      	cmp	r4, #45	; 0x2d
 80099ca:	d132      	bne.n	8009a32 <_strtol_l.constprop.0+0x9a>
 80099cc:	782c      	ldrb	r4, [r5, #0]
 80099ce:	2701      	movs	r7, #1
 80099d0:	1cb5      	adds	r5, r6, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d05b      	beq.n	8009a8e <_strtol_l.constprop.0+0xf6>
 80099d6:	2b10      	cmp	r3, #16
 80099d8:	d109      	bne.n	80099ee <_strtol_l.constprop.0+0x56>
 80099da:	2c30      	cmp	r4, #48	; 0x30
 80099dc:	d107      	bne.n	80099ee <_strtol_l.constprop.0+0x56>
 80099de:	782c      	ldrb	r4, [r5, #0]
 80099e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80099e4:	2c58      	cmp	r4, #88	; 0x58
 80099e6:	d14d      	bne.n	8009a84 <_strtol_l.constprop.0+0xec>
 80099e8:	786c      	ldrb	r4, [r5, #1]
 80099ea:	2310      	movs	r3, #16
 80099ec:	3502      	adds	r5, #2
 80099ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80099f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80099f6:	f04f 0c00 	mov.w	ip, #0
 80099fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80099fe:	4666      	mov	r6, ip
 8009a00:	fb03 8a19 	mls	sl, r3, r9, r8
 8009a04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009a08:	f1be 0f09 	cmp.w	lr, #9
 8009a0c:	d816      	bhi.n	8009a3c <_strtol_l.constprop.0+0xa4>
 8009a0e:	4674      	mov	r4, lr
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	dd24      	ble.n	8009a5e <_strtol_l.constprop.0+0xc6>
 8009a14:	f1bc 0f00 	cmp.w	ip, #0
 8009a18:	db1e      	blt.n	8009a58 <_strtol_l.constprop.0+0xc0>
 8009a1a:	45b1      	cmp	r9, r6
 8009a1c:	d31c      	bcc.n	8009a58 <_strtol_l.constprop.0+0xc0>
 8009a1e:	d101      	bne.n	8009a24 <_strtol_l.constprop.0+0x8c>
 8009a20:	45a2      	cmp	sl, r4
 8009a22:	db19      	blt.n	8009a58 <_strtol_l.constprop.0+0xc0>
 8009a24:	fb06 4603 	mla	r6, r6, r3, r4
 8009a28:	f04f 0c01 	mov.w	ip, #1
 8009a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a30:	e7e8      	b.n	8009a04 <_strtol_l.constprop.0+0x6c>
 8009a32:	2c2b      	cmp	r4, #43	; 0x2b
 8009a34:	bf04      	itt	eq
 8009a36:	782c      	ldrbeq	r4, [r5, #0]
 8009a38:	1cb5      	addeq	r5, r6, #2
 8009a3a:	e7ca      	b.n	80099d2 <_strtol_l.constprop.0+0x3a>
 8009a3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009a40:	f1be 0f19 	cmp.w	lr, #25
 8009a44:	d801      	bhi.n	8009a4a <_strtol_l.constprop.0+0xb2>
 8009a46:	3c37      	subs	r4, #55	; 0x37
 8009a48:	e7e2      	b.n	8009a10 <_strtol_l.constprop.0+0x78>
 8009a4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009a4e:	f1be 0f19 	cmp.w	lr, #25
 8009a52:	d804      	bhi.n	8009a5e <_strtol_l.constprop.0+0xc6>
 8009a54:	3c57      	subs	r4, #87	; 0x57
 8009a56:	e7db      	b.n	8009a10 <_strtol_l.constprop.0+0x78>
 8009a58:	f04f 3cff 	mov.w	ip, #4294967295
 8009a5c:	e7e6      	b.n	8009a2c <_strtol_l.constprop.0+0x94>
 8009a5e:	f1bc 0f00 	cmp.w	ip, #0
 8009a62:	da05      	bge.n	8009a70 <_strtol_l.constprop.0+0xd8>
 8009a64:	2322      	movs	r3, #34	; 0x22
 8009a66:	6003      	str	r3, [r0, #0]
 8009a68:	4646      	mov	r6, r8
 8009a6a:	b942      	cbnz	r2, 8009a7e <_strtol_l.constprop.0+0xe6>
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	e79e      	b.n	80099ae <_strtol_l.constprop.0+0x16>
 8009a70:	b107      	cbz	r7, 8009a74 <_strtol_l.constprop.0+0xdc>
 8009a72:	4276      	negs	r6, r6
 8009a74:	2a00      	cmp	r2, #0
 8009a76:	d0f9      	beq.n	8009a6c <_strtol_l.constprop.0+0xd4>
 8009a78:	f1bc 0f00 	cmp.w	ip, #0
 8009a7c:	d000      	beq.n	8009a80 <_strtol_l.constprop.0+0xe8>
 8009a7e:	1e69      	subs	r1, r5, #1
 8009a80:	6011      	str	r1, [r2, #0]
 8009a82:	e7f3      	b.n	8009a6c <_strtol_l.constprop.0+0xd4>
 8009a84:	2430      	movs	r4, #48	; 0x30
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1b1      	bne.n	80099ee <_strtol_l.constprop.0+0x56>
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	e7af      	b.n	80099ee <_strtol_l.constprop.0+0x56>
 8009a8e:	2c30      	cmp	r4, #48	; 0x30
 8009a90:	d0a5      	beq.n	80099de <_strtol_l.constprop.0+0x46>
 8009a92:	230a      	movs	r3, #10
 8009a94:	e7ab      	b.n	80099ee <_strtol_l.constprop.0+0x56>
 8009a96:	bf00      	nop
 8009a98:	0800a9f5 	.word	0x0800a9f5

08009a9c <strtol>:
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	460a      	mov	r2, r1
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	4802      	ldr	r0, [pc, #8]	; (8009aac <strtol+0x10>)
 8009aa4:	6800      	ldr	r0, [r0, #0]
 8009aa6:	f7ff bf77 	b.w	8009998 <_strtol_l.constprop.0>
 8009aaa:	bf00      	nop
 8009aac:	200009b4 	.word	0x200009b4

08009ab0 <_init>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	bf00      	nop
 8009ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab6:	bc08      	pop	{r3}
 8009ab8:	469e      	mov	lr, r3
 8009aba:	4770      	bx	lr

08009abc <_fini>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	bf00      	nop
 8009ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac2:	bc08      	pop	{r3}
 8009ac4:	469e      	mov	lr, r3
 8009ac6:	4770      	bx	lr
