
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bddc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d10  0800bf74  0800bf74  0001bf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc84  0800dc84  0002041c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc84  0800dc84  0001dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc8c  0800dc8c  0002041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc8c  0800dc8c  0001dc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc90  0800dc90  0001dc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000041c  20000000  0800dc94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010d7c  2000041c  0800e0b0  0002041c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011198  0800e0b0  00021198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002041c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f83  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  000383cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d97  00000000  00000000  0003d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c62  00000000  00000000  000560ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1876  00000000  00000000  0006ed61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001105d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ec  00000000  00000000  00110698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00115f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000041c 	.word	0x2000041c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bf5c 	.word	0x0800bf5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000420 	.word	0x20000420
 80001d4:	0800bf5c 	.word	0x0800bf5c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000bac:	2300      	movs	r3, #0
 8000bae:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bb4:	4bba      	ldr	r3, [pc, #744]	; (8000ea0 <menu_vars+0x308>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
 8000bba:	e01d      	b.n	8000bf8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bbc:	4bb8      	ldr	r3, [pc, #736]	; (8000ea0 <menu_vars+0x308>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4bb8      	ldr	r3, [pc, #736]	; (8000ea4 <menu_vars+0x30c>)
 8000bc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	6810      	ldr	r0, [r2, #0]
 8000bce:	6851      	ldr	r1, [r2, #4]
 8000bd0:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f00b f91e 	bl	800be1c <strncmp>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <menu_vars+0x54>
			menu_countr = i;
 8000be6:	4bae      	ldr	r3, [pc, #696]	; (8000ea0 <menu_vars+0x308>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bec:	4bac      	ldr	r3, [pc, #688]	; (8000ea0 <menu_vars+0x308>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4baa      	ldr	r3, [pc, #680]	; (8000ea0 <menu_vars+0x308>)
 8000bf6:	801a      	strh	r2, [r3, #0]
 8000bf8:	4ba9      	ldr	r3, [pc, #676]	; (8000ea0 <menu_vars+0x308>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	2b36      	cmp	r3, #54	; 0x36
 8000bfe:	d9dd      	bls.n	8000bbc <menu_vars+0x24>

		}
	}
	menu_vars_ref=menu_countr ;
 8000c00:	4aa9      	ldr	r2, [pc, #676]	; (8000ea8 <menu_vars+0x310>)
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	4aa8      	ldr	r2, [pc, #672]	; (8000eac <menu_vars+0x314>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	78fa      	ldrb	r2, [r7, #3]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d903      	bls.n	8000c1a <menu_vars+0x82>
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	4aa5      	ldr	r2, [pc, #660]	; (8000eac <menu_vars+0x314>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	2b35      	cmp	r3, #53	; 0x35
 8000c1e:	f200 8224 	bhi.w	800106a <menu_vars+0x4d2>
 8000c22:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <menu_vars+0x90>)
 8000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c28:	08000d01 	.word	0x08000d01
 8000c2c:	08000d07 	.word	0x08000d07
 8000c30:	08000d19 	.word	0x08000d19
 8000c34:	08000d2d 	.word	0x08000d2d
 8000c38:	08000d41 	.word	0x08000d41
 8000c3c:	08000d55 	.word	0x08000d55
 8000c40:	08000d69 	.word	0x08000d69
 8000c44:	08000d6f 	.word	0x08000d6f
 8000c48:	08000d81 	.word	0x08000d81
 8000c4c:	08000d95 	.word	0x08000d95
 8000c50:	08000da9 	.word	0x08000da9
 8000c54:	08000dbd 	.word	0x08000dbd
 8000c58:	08000dc3 	.word	0x08000dc3
 8000c5c:	08000dd5 	.word	0x08000dd5
 8000c60:	08000de9 	.word	0x08000de9
 8000c64:	08000dfd 	.word	0x08000dfd
 8000c68:	08000e11 	.word	0x08000e11
 8000c6c:	08000e25 	.word	0x08000e25
 8000c70:	08000e39 	.word	0x08000e39
 8000c74:	08000e4d 	.word	0x08000e4d
 8000c78:	08000e61 	.word	0x08000e61
 8000c7c:	08000e75 	.word	0x08000e75
 8000c80:	08000e7b 	.word	0x08000e7b
 8000c84:	08000e81 	.word	0x08000e81
 8000c88:	08000e87 	.word	0x08000e87
 8000c8c:	08000e93 	.word	0x08000e93
 8000c90:	08000ec9 	.word	0x08000ec9
 8000c94:	08000ed7 	.word	0x08000ed7
 8000c98:	08000ee3 	.word	0x08000ee3
 8000c9c:	08000ef1 	.word	0x08000ef1
 8000ca0:	08000eff 	.word	0x08000eff
 8000ca4:	08000f0d 	.word	0x08000f0d
 8000ca8:	08000f1b 	.word	0x08000f1b
 8000cac:	08000f29 	.word	0x08000f29
 8000cb0:	08000f37 	.word	0x08000f37
 8000cb4:	08000f45 	.word	0x08000f45
 8000cb8:	08000f59 	.word	0x08000f59
 8000cbc:	08000f6b 	.word	0x08000f6b
 8000cc0:	08000f7f 	.word	0x08000f7f
 8000cc4:	08000f93 	.word	0x08000f93
 8000cc8:	08000fa7 	.word	0x08000fa7
 8000ccc:	08000fb9 	.word	0x08000fb9
 8000cd0:	08000fcd 	.word	0x08000fcd
 8000cd4:	08000fe1 	.word	0x08000fe1
 8000cd8:	08000ff5 	.word	0x08000ff5
 8000cdc:	08000ffb 	.word	0x08000ffb
 8000ce0:	08001001 	.word	0x08001001
 8000ce4:	08001007 	.word	0x08001007
 8000ce8:	0800100d 	.word	0x0800100d
 8000cec:	08001013 	.word	0x08001013
 8000cf0:	08001025 	.word	0x08001025
 8000cf4:	08001039 	.word	0x08001039
 8000cf8:	0800104d 	.word	0x0800104d
 8000cfc:	08001061 	.word	0x08001061
	case 0:     menu_vars_var1= NULL; break;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	e1b4      	b.n	8001070 <menu_vars+0x4d8>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000d06:	78fa      	ldrb	r2, [r7, #3]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4a67      	ldr	r2, [pc, #412]	; (8000eb0 <menu_vars+0x318>)
 8000d12:	4413      	add	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e1ab      	b.n	8001070 <menu_vars+0x4d8>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d18:	78fa      	ldrb	r2, [r7, #3]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4a63      	ldr	r2, [pc, #396]	; (8000eb0 <menu_vars+0x318>)
 8000d24:	4413      	add	r3, r2
 8000d26:	3301      	adds	r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e1a1      	b.n	8001070 <menu_vars+0x4d8>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d2c:	78fa      	ldrb	r2, [r7, #3]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4a5e      	ldr	r2, [pc, #376]	; (8000eb0 <menu_vars+0x318>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e197      	b.n	8001070 <menu_vars+0x4d8>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	4613      	mov	r3, r2
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4a59      	ldr	r2, [pc, #356]	; (8000eb0 <menu_vars+0x318>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3303      	adds	r3, #3
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e18d      	b.n	8001070 <menu_vars+0x4d8>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4a55      	ldr	r2, [pc, #340]	; (8000eb4 <menu_vars+0x31c>)
 8000d60:	4413      	add	r3, r2
 8000d62:	3304      	adds	r3, #4
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	e183      	b.n	8001070 <menu_vars+0x4d8>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	e180      	b.n	8001070 <menu_vars+0x4d8>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <menu_vars+0x320>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e177      	b.n	8001070 <menu_vars+0x4d8>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d86:	fb02 f303 	mul.w	r3, r2, r3
 8000d8a:	4a4b      	ldr	r2, [pc, #300]	; (8000eb8 <menu_vars+0x320>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3301      	adds	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e16d      	b.n	8001070 <menu_vars+0x4d8>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4a46      	ldr	r2, [pc, #280]	; (8000eb8 <menu_vars+0x320>)
 8000da0:	4413      	add	r3, r2
 8000da2:	3302      	adds	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e163      	b.n	8001070 <menu_vars+0x4d8>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	4a41      	ldr	r2, [pc, #260]	; (8000eb8 <menu_vars+0x320>)
 8000db4:	4413      	add	r3, r2
 8000db6:	3303      	adds	r3, #3
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e159      	b.n	8001070 <menu_vars+0x4d8>
	case 11:     menu_vars_var1= NULL  ; break;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	e156      	b.n	8001070 <menu_vars+0x4d8>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000dc2:	78fa      	ldrb	r2, [r7, #3]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4a3b      	ldr	r2, [pc, #236]	; (8000ebc <menu_vars+0x324>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	e14d      	b.n	8001070 <menu_vars+0x4d8>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4a37      	ldr	r2, [pc, #220]	; (8000ebc <menu_vars+0x324>)
 8000de0:	4413      	add	r3, r2
 8000de2:	3301      	adds	r3, #1
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	e143      	b.n	8001070 <menu_vars+0x4d8>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000de8:	78fa      	ldrb	r2, [r7, #3]
 8000dea:	4613      	mov	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <menu_vars+0x324>)
 8000df4:	4413      	add	r3, r2
 8000df6:	3302      	adds	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	e139      	b.n	8001070 <menu_vars+0x4d8>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <menu_vars+0x324>)
 8000e08:	4413      	add	r3, r2
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e12f      	b.n	8001070 <menu_vars+0x4d8>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	4613      	mov	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <menu_vars+0x324>)
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3304      	adds	r3, #4
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	e125      	b.n	8001070 <menu_vars+0x4d8>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e24:	78fa      	ldrb	r2, [r7, #3]
 8000e26:	4613      	mov	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	1a9b      	subs	r3, r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <menu_vars+0x324>)
 8000e30:	4413      	add	r3, r2
 8000e32:	3305      	adds	r3, #5
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	e11b      	b.n	8001070 <menu_vars+0x4d8>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e38:	78fa      	ldrb	r2, [r7, #3]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	1a9b      	subs	r3, r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <menu_vars+0x324>)
 8000e44:	4413      	add	r3, r2
 8000e46:	3306      	adds	r3, #6
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	e111      	b.n	8001070 <menu_vars+0x4d8>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <menu_vars+0x324>)
 8000e58:	4413      	add	r3, r2
 8000e5a:	3307      	adds	r3, #7
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	e107      	b.n	8001070 <menu_vars+0x4d8>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	4613      	mov	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <menu_vars+0x324>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	e0fd      	b.n	8001070 <menu_vars+0x4d8>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	e0fa      	b.n	8001070 <menu_vars+0x4d8>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <menu_vars+0x328>)
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	e0f7      	b.n	8001070 <menu_vars+0x4d8>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <menu_vars+0x32c>)
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	e0f4      	b.n	8001070 <menu_vars+0x4d8>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <menu_vars+0x328>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e0ee      	b.n	8001070 <menu_vars+0x4d8>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	3310      	adds	r3, #16
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <menu_vars+0x328>)
 8000e98:	4413      	add	r3, r2
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	e0e7      	b.n	8001070 <menu_vars+0x4d8>
 8000ea0:	20000908 	.word	0x20000908
 8000ea4:	2000022c 	.word	0x2000022c
 8000ea8:	2000755d 	.word	0x2000755d
 8000eac:	0800ceb4 	.word	0x0800ceb4
 8000eb0:	20003f20 	.word	0x20003f20
 8000eb4:	20004d88 	.word	0x20004d88
 8000eb8:	200042cc 	.word	0x200042cc
 8000ebc:	20000158 	.word	0x20000158
 8000ec0:	20004d58 	.word	0x20004d58
 8000ec4:	20004d59 	.word	0x20004d59
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	3320      	adds	r3, #32
 8000ecc:	4a6b      	ldr	r2, [pc, #428]	; (800107c <menu_vars+0x4e4>)
 8000ece:	4413      	add	r3, r2
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	e0cc      	b.n	8001070 <menu_vars+0x4d8>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a69      	ldr	r2, [pc, #420]	; (8001080 <menu_vars+0x4e8>)
 8000edc:	4413      	add	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	e0c6      	b.n	8001070 <menu_vars+0x4d8>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4a66      	ldr	r2, [pc, #408]	; (8001080 <menu_vars+0x4e8>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	3301      	adds	r3, #1
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	e0bf      	b.n	8001070 <menu_vars+0x4d8>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4a62      	ldr	r2, [pc, #392]	; (8001080 <menu_vars+0x4e8>)
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	e0b8      	b.n	8001070 <menu_vars+0x4d8>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4a5f      	ldr	r2, [pc, #380]	; (8001080 <menu_vars+0x4e8>)
 8000f04:	4413      	add	r3, r2
 8000f06:	3303      	adds	r3, #3
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	e0b1      	b.n	8001070 <menu_vars+0x4d8>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4a5b      	ldr	r2, [pc, #364]	; (8001080 <menu_vars+0x4e8>)
 8000f12:	4413      	add	r3, r2
 8000f14:	3304      	adds	r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	e0aa      	b.n	8001070 <menu_vars+0x4d8>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4a58      	ldr	r2, [pc, #352]	; (8001080 <menu_vars+0x4e8>)
 8000f20:	4413      	add	r3, r2
 8000f22:	3307      	adds	r3, #7
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e0a3      	b.n	8001070 <menu_vars+0x4d8>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4a54      	ldr	r2, [pc, #336]	; (8001080 <menu_vars+0x4e8>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	3306      	adds	r3, #6
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	e09c      	b.n	8001070 <menu_vars+0x4d8>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4a51      	ldr	r2, [pc, #324]	; (8001080 <menu_vars+0x4e8>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3305      	adds	r3, #5
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e095      	b.n	8001070 <menu_vars+0x4d8>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <menu_vars+0x4ec>)
 8000f50:	4413      	add	r3, r2
 8000f52:	3305      	adds	r3, #5
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	e08b      	b.n	8001070 <menu_vars+0x4d8>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f58:	78fa      	ldrb	r2, [r7, #3]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4a48      	ldr	r2, [pc, #288]	; (8001084 <menu_vars+0x4ec>)
 8000f64:	4413      	add	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	e082      	b.n	8001070 <menu_vars+0x4d8>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4a43      	ldr	r2, [pc, #268]	; (8001084 <menu_vars+0x4ec>)
 8000f76:	4413      	add	r3, r2
 8000f78:	3301      	adds	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e078      	b.n	8001070 <menu_vars+0x4d8>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4a3e      	ldr	r2, [pc, #248]	; (8001084 <menu_vars+0x4ec>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e06e      	b.n	8001070 <menu_vars+0x4d8>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f92:	78fa      	ldrb	r2, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4a39      	ldr	r2, [pc, #228]	; (8001084 <menu_vars+0x4ec>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3303      	adds	r3, #3
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	e064      	b.n	8001070 <menu_vars+0x4d8>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4a35      	ldr	r2, [pc, #212]	; (8001088 <menu_vars+0x4f0>)
 8000fb2:	4413      	add	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	e05b      	b.n	8001070 <menu_vars+0x4d8>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4a31      	ldr	r2, [pc, #196]	; (8001088 <menu_vars+0x4f0>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	e051      	b.n	8001070 <menu_vars+0x4d8>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <menu_vars+0x4f0>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	3304      	adds	r3, #4
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	e047      	b.n	8001070 <menu_vars+0x4d8>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4a27      	ldr	r2, [pc, #156]	; (8001088 <menu_vars+0x4f0>)
 8000fec:	4413      	add	r3, r2
 8000fee:	3303      	adds	r3, #3
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	e03d      	b.n	8001070 <menu_vars+0x4d8>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <menu_vars+0x4f4>)
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	e03a      	b.n	8001070 <menu_vars+0x4d8>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <menu_vars+0x4f8>)
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e037      	b.n	8001070 <menu_vars+0x4d8>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <menu_vars+0x4fc>)
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e034      	b.n	8001070 <menu_vars+0x4d8>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <menu_vars+0x500>)
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	e031      	b.n	8001070 <menu_vars+0x4d8>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <menu_vars+0x504>)
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e02e      	b.n	8001070 <menu_vars+0x4d8>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 8001012:	78fa      	ldrb	r2, [r7, #3]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <menu_vars+0x508>)
 800101e:	4413      	add	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	e025      	b.n	8001070 <menu_vars+0x4d8>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <menu_vars+0x508>)
 8001030:	4413      	add	r3, r2
 8001032:	3301      	adds	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	e01b      	b.n	8001070 <menu_vars+0x4d8>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <menu_vars+0x508>)
 8001044:	4413      	add	r3, r2
 8001046:	3302      	adds	r3, #2
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e011      	b.n	8001070 <menu_vars+0x4d8>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <menu_vars+0x508>)
 8001058:	4413      	add	r3, r2
 800105a:	3303      	adds	r3, #3
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	e007      	b.n	8001070 <menu_vars+0x4d8>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <menu_vars+0x50c>)
 8001064:	4413      	add	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e002      	b.n	8001070 <menu_vars+0x4d8>


	default :		menu_vars_var1= NULL   ; break;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8001070:	693b      	ldr	r3, [r7, #16]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20004d58 	.word	0x20004d58
 8001080:	200001e4 	.word	0x200001e4
 8001084:	20004d88 	.word	0x20004d88
 8001088:	200041c8 	.word	0x200041c8
 800108c:	20000212 	.word	0x20000212
 8001090:	20000213 	.word	0x20000213
 8001094:	20000214 	.word	0x20000214
 8001098:	20000215 	.word	0x20000215
 800109c:	20000208 	.word	0x20000208
 80010a0:	20004204 	.word	0x20004204
 80010a4:	2001097c 	.word	0x2001097c

080010a8 <sampler_ram_record>:

void sampler_ram_record(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

memcpy(	&RAM[sampler.ram_pos], input_holder,sizeof(input_holder));
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <sampler_ram_record+0x44>)
 80010ae:	899b      	ldrh	r3, [r3, #12]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <sampler_ram_record+0x48>)
 80010b4:	4413      	add	r3, r2
 80010b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ba:	490e      	ldr	r1, [pc, #56]	; (80010f4 <sampler_ram_record+0x4c>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f00a fe97 	bl	800bdf0 <memcpy>
	sampler.ram_pos =sampler.ram_pos+512;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <sampler_ram_record+0x44>)
 80010c4:	899b      	ldrh	r3, [r3, #12]
 80010c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <sampler_ram_record+0x44>)
 80010ce:	819a      	strh	r2, [r3, #12]
if (sampler.ram_pos>16383) { sampler.ram_pos=0; sampler.record_enable=0; } // reset and stop record
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <sampler_ram_record+0x44>)
 80010d2:	899b      	ldrh	r3, [r3, #12]
 80010d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010d8:	d305      	bcc.n	80010e6 <sampler_ram_record+0x3e>
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <sampler_ram_record+0x44>)
 80010dc:	2200      	movs	r2, #0
 80010de:	819a      	strh	r2, [r3, #12]
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <sampler_ram_record+0x44>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000204 	.word	0x20000204
 80010f0:	20007764 	.word	0x20007764
 80010f4:	20003b04 	.word	0x20003b04

080010f8 <menu_parser>:




void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 80010fe:	4a6b      	ldr	r2, [pc, #428]	; (80012ac <menu_parser+0x1b4>)
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001108:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 800110c:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <menu_parser+0x1b8>)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001118:	2300      	movs	r3, #0
 800111a:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 800111c:	f44f 631a 	mov.w	r3, #2464	; 0x9a0
 8001120:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 8001122:	4b64      	ldr	r3, [pc, #400]	; (80012b4 <menu_parser+0x1bc>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	8aba      	ldrh	r2, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f0c0 80bb 	bcc.w	80012a4 <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 800112e:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <menu_parser+0x1bc>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	4b60      	ldr	r3, [pc, #384]	; (80012b8 <menu_parser+0x1c0>)
 8001136:	441a      	add	r2, r3
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	6810      	ldr	r0, [r2, #0]
 800113e:	6851      	ldr	r1, [r2, #4]
 8001140:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
 8001146:	e092      	b.n	800126e <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	4a5c      	ldr	r2, [pc, #368]	; (80012bc <menu_parser+0x1c4>)
 800114c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	6810      	ldr	r0, [r2, #0]
 8001154:	6851      	ldr	r1, [r2, #4]
 8001156:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001158:	1d39      	adds	r1, r7, #4
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2208      	movs	r2, #8
 8001160:	4618      	mov	r0, r3
 8001162:	f00a fe5b 	bl	800be1c <strncmp>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d17d      	bne.n	8001268 <menu_parser+0x170>
		    {

			    if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 800116c:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <menu_parser+0x1c8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	2b6e      	cmp	r3, #110	; 0x6e
 8001172:	d909      	bls.n	8001188 <menu_parser+0x90>
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <menu_parser+0x1c8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2b7f      	cmp	r3, #127	; 0x7f
 800117a:	d805      	bhi.n	8001188 <menu_parser+0x90>
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <menu_parser+0x1c8>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	3310      	adds	r3, #16
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <menu_parser+0x1c8>)
 8001186:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>238)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001188:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <menu_parser+0x1c8>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	2bee      	cmp	r3, #238	; 0xee
 800118e:	d909      	bls.n	80011a4 <menu_parser+0xac>
 8001190:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <menu_parser+0x1c8>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	2bff      	cmp	r3, #255	; 0xff
 8001196:	d805      	bhi.n	80011a4 <menu_parser+0xac>
 8001198:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <menu_parser+0x1c8>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	3310      	adds	r3, #16
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <menu_parser+0x1c8>)
 80011a2:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <menu_parser+0x1c8>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80011ac:	d30a      	bcc.n	80011c4 <menu_parser+0xcc>
 80011ae:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <menu_parser+0x1c8>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011b6:	d205      	bcs.n	80011c4 <menu_parser+0xcc>
 80011b8:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <menu_parser+0x1c8>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	3310      	adds	r3, #16
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <menu_parser+0x1c8>)
 80011c2:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <menu_parser+0x1c8>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80011cc:	d30a      	bcc.n	80011e4 <menu_parser+0xec>
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <menu_parser+0x1c8>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d6:	d205      	bcs.n	80011e4 <menu_parser+0xec>
 80011d8:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <menu_parser+0x1c8>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	3310      	adds	r3, #16
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <menu_parser+0x1c8>)
 80011e2:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <menu_parser+0x1c8>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80011ec:	d30a      	bcc.n	8001204 <menu_parser+0x10c>
 80011ee:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <menu_parser+0x1c8>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80011f6:	d205      	bcs.n	8001204 <menu_parser+0x10c>
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <menu_parser+0x1c8>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	3310      	adds	r3, #16
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <menu_parser+0x1c8>)
 8001202:	801a      	strh	r2, [r3, #0]
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	041a      	lsls	r2, r3, #16
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <menu_parser+0x1c8>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001210:	18d1      	adds	r1, r2, r3
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <menu_parser+0x1cc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <menu_parser+0x1d0>)
 800121a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <menu_parser+0x1cc>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	461a      	mov	r2, r3
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <menu_parser+0x1d4>)
 8001228:	18d0      	adds	r0, r2, r3
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <menu_parser+0x1bc>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	3b02      	subs	r3, #2
 8001230:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <menu_parser+0x1c0>)
 8001232:	4413      	add	r3, r2
 8001234:	2202      	movs	r2, #2
 8001236:	4619      	mov	r1, r3
 8001238:	f00a fdda 	bl	800bdf0 <memcpy>
        			    menu_title_count++;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <menu_parser+0x1cc>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	3301      	adds	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <menu_parser+0x1cc>)
 8001246:	701a      	strb	r2, [r3, #0]
			    menu_counter++;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <menu_parser+0x1c8>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <menu_parser+0x1c8>)
 8001252:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <menu_parser+0x1d8>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <menu_parser+0x1bc>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	3308      	adds	r3, #8
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <menu_parser+0x1bc>)
 8001264:	801a      	strh	r2, [r3, #0]
    			    return;}
 8001266:	e01e      	b.n	80012a6 <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	3301      	adds	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	2b36      	cmp	r3, #54	; 0x36
 8001272:	f67f af69 	bls.w	8001148 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <menu_parser+0x1d8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d905      	bls.n	800128a <menu_parser+0x192>
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <menu_parser+0x1c8>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <menu_parser+0x1c8>)
 8001288:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <menu_parser+0x1d8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <menu_parser+0x1d8>)
 8001294:	701a      	strb	r2, [r3, #0]
	    string_search++;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <menu_parser+0x1bc>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <menu_parser+0x1bc>)
 80012a0:	801a      	strh	r2, [r3, #0]
	    return;
 80012a2:	e000      	b.n	80012a6 <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 80012a4:	bf00      	nop

    }
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0800c3dc 	.word	0x0800c3dc
 80012b0:	0800c3e4 	.word	0x0800c3e4
 80012b4:	20004f18 	.word	0x20004f18
 80012b8:	0800c50c 	.word	0x0800c50c
 80012bc:	2000022c 	.word	0x2000022c
 80012c0:	20004f1a 	.word	0x20004f1a
 80012c4:	20004f1d 	.word	0x20004f1d
 80012c8:	20004f20 	.word	0x20004f20
 80012cc:	20005320 	.word	0x20005320
 80012d0:	20004f1c 	.word	0x20004f1c

080012d4 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 80012de:	4b90      	ldr	r3, [pc, #576]	; (8001520 <patch_target_parse+0x24c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
 80012e4:	e112      	b.n	800150c <patch_target_parse+0x238>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 80012e6:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <patch_target_parse+0x24c>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4a8d      	ldr	r2, [pc, #564]	; (8001524 <patch_target_parse+0x250>)
 80012ee:	460b      	mov	r3, r1
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	717b      	strb	r3, [r7, #5]
			if (patch[n].input1>=menu_lookup_count) patch[n].input1=0;    // limit
 80012fc:	4b88      	ldr	r3, [pc, #544]	; (8001520 <patch_target_parse+0x24c>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	4a88      	ldr	r2, [pc, #544]	; (8001524 <patch_target_parse+0x250>)
 8001304:	460b      	mov	r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b36      	cmp	r3, #54	; 0x36
 8001312:	d90a      	bls.n	800132a <patch_target_parse+0x56>
 8001314:	4b82      	ldr	r3, [pc, #520]	; (8001520 <patch_target_parse+0x24c>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	4a82      	ldr	r2, [pc, #520]	; (8001524 <patch_target_parse+0x250>)
 800131c:	460b      	mov	r3, r1
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4413      	add	r3, r2
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 800132a:	797b      	ldrb	r3, [r7, #5]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b03      	cmp	r3, #3
 8001332:	d841      	bhi.n	80013b8 <patch_target_parse+0xe4>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <patch_target_parse+0x68>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001367 	.word	0x08001367
 8001344:	08001383 	.word	0x08001383
 8001348:	0800139f 	.word	0x0800139f

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 800134c:	797b      	ldrb	r3, [r7, #5]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	4613      	mov	r3, r2
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4a72      	ldr	r2, [pc, #456]	; (8001528 <patch_target_parse+0x254>)
 800135e:	4413      	add	r3, r2
 8001360:	3306      	adds	r3, #6
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	e028      	b.n	80013b8 <patch_target_parse+0xe4>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4613      	mov	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	3318      	adds	r3, #24
 8001378:	4a6b      	ldr	r2, [pc, #428]	; (8001528 <patch_target_parse+0x254>)
 800137a:	4413      	add	r3, r2
 800137c:	3302      	adds	r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	e01a      	b.n	80013b8 <patch_target_parse+0xe4>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001382:	797b      	ldrb	r3, [r7, #5]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4613      	mov	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	3328      	adds	r3, #40	; 0x28
 8001394:	4a64      	ldr	r2, [pc, #400]	; (8001528 <patch_target_parse+0x254>)
 8001396:	4413      	add	r3, r2
 8001398:	3306      	adds	r3, #6
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	e00c      	b.n	80013b8 <patch_target_parse+0xe4>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 800139e:	797b      	ldrb	r3, [r7, #5]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4a5f      	ldr	r2, [pc, #380]	; (800152c <patch_target_parse+0x258>)
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	bf00      	nop
			}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <patch_target_parse+0x24c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	4a59      	ldr	r2, [pc, #356]	; (8001524 <patch_target_parse+0x250>)
 80013c0:	460b      	mov	r3, r1
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4413      	add	r3, r2
 80013ca:	3320      	adds	r3, #32
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	601a      	str	r2, [r3, #0]
			if (patch[n].target) {  // test if above zero
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <patch_target_parse+0x24c>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4a53      	ldr	r2, [pc, #332]	; (8001524 <patch_target_parse+0x250>)
 80013d8:	460b      	mov	r3, r1
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	3304      	adds	r3, #4
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 808a 	beq.w	8001500 <patch_target_parse+0x22c>
				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <patch_target_parse+0x24c>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <patch_target_parse+0x250>)
 80013f4:	460b      	mov	r3, r1
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	3304      	adds	r3, #4
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e00a      	b.n	8001420 <patch_target_parse+0x14c>
					if (patch_skip_list[target_input]==1)  target_input++;
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4a48      	ldr	r2, [pc, #288]	; (8001530 <patch_target_parse+0x25c>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d102      	bne.n	800141a <patch_target_parse+0x146>
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	3301      	adds	r3, #1
 8001418:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	3301      	adds	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b36      	cmp	r3, #54	; 0x36
 8001424:	d9f1      	bls.n	800140a <patch_target_parse+0x136>
				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b36      	cmp	r3, #54	; 0x36
 800142a:	d901      	bls.n	8001430 <patch_target_parse+0x15c>
 800142c:	2336      	movs	r3, #54	; 0x36
 800142e:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b23      	cmp	r3, #35	; 0x23
 8001434:	d058      	beq.n	80014e8 <patch_target_parse+0x214>
			patch[n].target=target_input; // write back corrected value
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <patch_target_parse+0x24c>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	4a39      	ldr	r2, [pc, #228]	; (8001524 <patch_target_parse+0x250>)
 800143e:	460b      	mov	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	3304      	adds	r3, #4
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	701a      	strb	r2, [r3, #0]
			uint8_t target_index=patch[n].target_index;
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <patch_target_parse+0x24c>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4a33      	ldr	r2, [pc, #204]	; (8001524 <patch_target_parse+0x250>)
 8001456:	460b      	mov	r3, r1
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	3305      	adds	r3, #5
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	71bb      	strb	r3, [r7, #6]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	4a32      	ldr	r2, [pc, #200]	; (8001534 <patch_target_parse+0x260>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	79ba      	ldrb	r2, [r7, #6]
 800146e:	429a      	cmp	r2, r3
 8001470:	d903      	bls.n	800147a <patch_target_parse+0x1a6>
			{	target_index=menu_vars_index_limit[target_index]; }
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <patch_target_parse+0x260>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <patch_target_parse+0x24c>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <patch_target_parse+0x250>)
 8001482:	460b      	mov	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	3305      	adds	r3, #5
 800148e:	79ba      	ldrb	r2, [r7, #6]
 8001490:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a28      	ldr	r2, [pc, #160]	; (8001538 <patch_target_parse+0x264>)
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	79ba      	ldrb	r2, [r7, #6]
 800149c:	4611      	mov	r1, r2
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fb7a 	bl	8000b98 <menu_vars>
 80014a4:	6038      	str	r0, [r7, #0]
			if (target_out_ptr)           {patch[n].out_ptr =target_out_ptr;     // write ptr
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d029      	beq.n	8001500 <patch_target_parse+0x22c>
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <patch_target_parse+0x24c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <patch_target_parse+0x250>)
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	331c      	adds	r3, #28
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	601a      	str	r2, [r3, #0]
			patch[n].limiter=menu_vars_limiter[menu_vars_ref]; }
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <patch_target_parse+0x268>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <patch_target_parse+0x24c>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <patch_target_parse+0x26c>)
 80014d2:	5c98      	ldrb	r0, [r3, r2]
 80014d4:	4a13      	ldr	r2, [pc, #76]	; (8001524 <patch_target_parse+0x250>)
 80014d6:	460b      	mov	r3, r1
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	3324      	adds	r3, #36	; 0x24
 80014e2:	4602      	mov	r2, r0
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e00b      	b.n	8001500 <patch_target_parse+0x22c>
				}
				else patch[n].target=0;  // write back 0 if failed
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <patch_target_parse+0x24c>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <patch_target_parse+0x250>)
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <patch_target_parse+0x24c>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <patch_target_parse+0x24c>)
 800150a:	801a      	strh	r2, [r3, #0]
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <patch_target_parse+0x24c>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	2b09      	cmp	r3, #9
 8001512:	f67f aee8 	bls.w	80012e6 <patch_target_parse+0x12>
			}
		}
	}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000902 	.word	0x20000902
 8001524:	20004d88 	.word	0x20004d88
 8001528:	20003f20 	.word	0x20003f20
 800152c:	20004204 	.word	0x20004204
 8001530:	0800cf24 	.word	0x0800cf24
 8001534:	0800ceb4 	.word	0x0800ceb4
 8001538:	2000022c 	.word	0x2000022c
 800153c:	2000755d 	.word	0x2000755d
 8001540:	0800ceec 	.word	0x0800ceec

08001544 <patch_target_replace>:
			*ptr_to_modify =var_replaced;   // replace original value,ok
		}
	}
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 8001544:	b490      	push	{r4, r7}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <patch_target_replace+0x104>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	73bb      	strb	r3, [r7, #14]

	    for (n=0;n<10;n++){
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <patch_target_replace+0x108>)
 8001556:	2200      	movs	r2, #0
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	e06b      	b.n	8001634 <patch_target_replace+0xf0>



		    if (patch[n].target) {         // check first for enable
 800155c:	4b3b      	ldr	r3, [pc, #236]	; (800164c <patch_target_replace+0x108>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	4a3b      	ldr	r2, [pc, #236]	; (8001650 <patch_target_replace+0x10c>)
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d058      	beq.n	8001628 <patch_target_replace+0xe4>

			    patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <patch_target_replace+0x108>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	4a34      	ldr	r2, [pc, #208]	; (8001650 <patch_target_replace+0x10c>)
 800157e:	460b      	mov	r3, r1
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	3320      	adds	r3, #32
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	4a2e      	ldr	r2, [pc, #184]	; (800164c <patch_target_replace+0x108>)
 8001594:	8812      	ldrh	r2, [r2, #0]
 8001596:	4610      	mov	r0, r2
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	881c      	ldrh	r4, [r3, #0]
 800159c:	492c      	ldr	r1, [pc, #176]	; (8001650 <patch_target_replace+0x10c>)
 800159e:	4603      	mov	r3, r0
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4403      	add	r3, r0
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	4622      	mov	r2, r4
 80015ae:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <patch_target_replace+0x108>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4a26      	ldr	r2, [pc, #152]	; (8001650 <patch_target_replace+0x10c>)
 80015b8:	460b      	mov	r3, r1
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	331c      	adds	r3, #28
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]
			    uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <patch_target_replace+0x108>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	7bba      	ldrb	r2, [r7, #14]
 80015d0:	491f      	ldr	r1, [pc, #124]	; (8001650 <patch_target_replace+0x10c>)
 80015d2:	4603      	mov	r3, r0
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	440b      	add	r3, r1
 80015e0:	88db      	ldrh	r3, [r3, #6]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	80fb      	strh	r3, [r7, #6]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	717b      	strb	r3, [r7, #5]

			    uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	73fb      	strb	r3, [r7, #15]

			    if (var_replaced>patch[n].limiter) var_replaced=patch[n].limiter;  // limit lfo output
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <patch_target_replace+0x108>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <patch_target_replace+0x10c>)
 80015f6:	460b      	mov	r3, r1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	3324      	adds	r3, #36	; 0x24
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	429a      	cmp	r2, r3
 8001608:	d90b      	bls.n	8001622 <patch_target_replace+0xde>
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <patch_target_replace+0x108>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <patch_target_replace+0x10c>)
 8001612:	460b      	mov	r3, r1
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	3324      	adds	r3, #36	; 0x24
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	73fb      	strb	r3, [r7, #15]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	701a      	strb	r2, [r3, #0]
	    for (n=0;n<10;n++){
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <patch_target_replace+0x108>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <patch_target_replace+0x108>)
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <patch_target_replace+0x108>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d98f      	bls.n	800155c <patch_target_replace+0x18>
		    }
	    }
    }
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bc90      	pop	{r4, r7}
 8001646:	4770      	bx	lr
 8001648:	20005534 	.word	0x20005534
 800164c:	20000902 	.word	0x20000902
 8001650:	20004d88 	.word	0x20004d88

08001654 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d118      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800166e:	4413      	add	r3, r2
 8001670:	2236      	movs	r2, #54	; 0x36
 8001672:	4619      	mov	r1, r3
 8001674:	482c      	ldr	r0, [pc, #176]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001676:	f008 fb8b 	bl	8009d90 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 800167a:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 8001682:	d206      	bcs.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	3336      	adds	r3, #54	; 0x36
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	e002      	b.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001694:	2200      	movs	r2, #0
 8001696:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a23      	ldr	r2, [pc, #140]	; (800172c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d137      	bne.n	8001712 <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016ac:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016b8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80016be:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80016d2:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80016de:	4293      	cmp	r3, r2
 80016e0:	d906      	bls.n	80016f0 <HAL_TIM_PeriodElapsedCallback+0x9c>
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	e006      	b.n	80016fe <HAL_TIM_PeriodElapsedCallback+0xaa>
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016fc:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001710:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40014400 	.word	0x40014400
 8001720:	2001076c 	.word	0x2001076c
 8001724:	2000f76c 	.word	0x2000f76c
 8001728:	20010f34 	.word	0x20010f34
 800172c:	40000400 	.word	0x40000400
 8001730:	20003f1c 	.word	0x20003f1c
 8001734:	20001910 	.word	0x20001910
 8001738:	2000090c 	.word	0x2000090c
 800173c:	20001912 	.word	0x20001912
 8001740:	20001914 	.word	0x20001914
 8001744:	2000014e 	.word	0x2000014e

08001748 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <analoginputloopb+0xf4>)
 800174e:	889b      	ldrh	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	b29b      	uxth	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b3a      	ldr	r3, [pc, #232]	; (8001840 <analoginputloopb+0xf8>)
 8001758:	701a      	strb	r2, [r3, #0]
		    menuSelectX=cursor_menu[2]&15;  // Y select inside page
 800175a:	4b38      	ldr	r3, [pc, #224]	; (800183c <analoginputloopb+0xf4>)
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <analoginputloopb+0xfc>)
 8001768:	701a      	strb	r2, [r3, #0]
        		    cursor_menu[1]=0;
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <analoginputloopb+0xf4>)
 800176c:	2200      	movs	r2, #0
 800176e:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <analoginputloopb+0x100>)
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <analoginputloopb+0xf4>)
 8001776:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 8001778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001782:	337f      	adds	r3, #127	; 0x7f
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <analoginputloopb+0x104>)
 800178a:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <analoginputloopb+0x108>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001794:	337f      	adds	r3, #127	; 0x7f
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <analoginputloopb+0x10c>)
 800179c:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <analoginputloopb+0x104>)
 80017a0:	881a      	ldrh	r2, [r3, #0]
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <analoginputloopb+0x110>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d908      	bls.n	80017bc <analoginputloopb+0x74>
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <analoginputloopb+0x114>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <analoginputloopb+0x114>)
 80017ba:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <analoginputloopb+0x104>)
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <analoginputloopb+0x110>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d208      	bcs.n	80017da <analoginputloopb+0x92>
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <analoginputloopb+0x114>)
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <analoginputloopb+0x114>)
 80017d8:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <analoginputloopb+0x10c>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	43db      	mvns	r3, r3
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <analoginputloopb+0x100>)
 80017e4:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <analoginputloopb+0x114>)
 80017e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ec:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 80017f0:	4293      	cmp	r3, r2
 80017f2:	dd02      	ble.n	80017fa <analoginputloopb+0xb2>
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <analoginputloopb+0x114>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <analoginputloopb+0x114>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	2b00      	cmp	r3, #0
 8001802:	da03      	bge.n	800180c <analoginputloopb+0xc4>
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <analoginputloopb+0x114>)
 8001806:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800180a:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <analoginputloopb+0x104>)
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <analoginputloopb+0x110>)
 8001812:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <analoginputloopb+0x10c>)
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <analoginputloopb+0x118>)
 800181a:	801a      	strh	r2, [r3, #0]


    potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <analoginputloopb+0x11c>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <analoginputloopb+0x120>)
 8001824:	5c9b      	ldrb	r3, [r3, r2]
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <analoginputloopb+0x11c>)
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	b2d9      	uxtb	r1, r3
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <analoginputloopb+0x124>)
 8001830:	5499      	strb	r1, [r3, r2]


    }
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	20003158 	.word	0x20003158
 8001840:	200008fc 	.word	0x200008fc
 8001844:	200008fd 	.word	0x200008fd
 8001848:	20003142 	.word	0x20003142
 800184c:	2000313a 	.word	0x2000313a
 8001850:	40000800 	.word	0x40000800
 8001854:	2000313e 	.word	0x2000313e
 8001858:	2000313c 	.word	0x2000313c
 800185c:	20003144 	.word	0x20003144
 8001860:	20003140 	.word	0x20003140
 8001864:	20000900 	.word	0x20000900
 8001868:	2000069c 	.word	0x2000069c
 800186c:	2000049c 	.word	0x2000049c

08001870 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <note_reset+0x78>)
 8001876:	22ff      	movs	r2, #255	; 0xff
 8001878:	71da      	strb	r2, [r3, #7]
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <note_reset+0x78>)
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	755a      	strb	r2, [r3, #21]
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <note_reset+0x78>)
 8001882:	22ff      	movs	r2, #255	; 0xff
 8001884:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <note_reset+0x78>)
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <note_reset+0x78>)
 8001892:	22ff      	movs	r2, #255	; 0xff
 8001894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <note_reset+0x78>)
 800189a:	22ff      	movs	r2, #255	; 0xff
 800189c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <note_reset+0x78>)
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <note_reset+0x78>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	721a      	strb	r2, [r3, #8]
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <note_reset+0x78>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	759a      	strb	r2, [r3, #22]
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <note_reset+0x78>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <note_reset+0x78>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <note_reset+0x78>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=0;note[6].detune=0;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <note_reset+0x78>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <note_reset+0x78>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000158 	.word	0x20000158

080018ec <main_initial>:

void main_initial(void){
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b0a0      	sub	sp, #128	; 0x80
 80018f0:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 80018f2:	4ba7      	ldr	r3, [pc, #668]	; (8001b90 <main_initial+0x2a4>)
 80018f4:	66bb      	str	r3, [r7, #104]	; 0x68



	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 80018f6:	48a7      	ldr	r0, [pc, #668]	; (8001b94 <main_initial+0x2a8>)
 80018f8:	f007 fdd2 	bl	80094a0 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 80018fc:	48a6      	ldr	r0, [pc, #664]	; (8001b98 <main_initial+0x2ac>)
 80018fe:	f007 fdcf 	bl	80094a0 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001902:	48a6      	ldr	r0, [pc, #664]	; (8001b9c <main_initial+0x2b0>)
 8001904:	f008 fd6a 	bl	800a3dc <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001908:	4ba5      	ldr	r3, [pc, #660]	; (8001ba0 <main_initial+0x2b4>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 800190e:	48a5      	ldr	r0, [pc, #660]	; (8001ba4 <main_initial+0x2b8>)
 8001910:	f008 fd0a 	bl	800a328 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001914:	48a4      	ldr	r0, [pc, #656]	; (8001ba8 <main_initial+0x2bc>)
 8001916:	f008 fd07 	bl	800a328 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800191a:	2100      	movs	r1, #0
 800191c:	489f      	ldr	r0, [pc, #636]	; (8001b9c <main_initial+0x2b0>)
 800191e:	f008 fe71 	bl	800a604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001922:	2104      	movs	r1, #4
 8001924:	489d      	ldr	r0, [pc, #628]	; (8001b9c <main_initial+0x2b0>)
 8001926:	f008 fe6d 	bl	800a604 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 800192a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001934:	489d      	ldr	r0, [pc, #628]	; (8001bac <main_initial+0x2c0>)
 8001936:	f004 fac7 	bl	8005ec8 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 800193a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800193e:	499c      	ldr	r1, [pc, #624]	; (8001bb0 <main_initial+0x2c4>)
 8001940:	489a      	ldr	r0, [pc, #616]	; (8001bac <main_initial+0x2c0>)
 8001942:	f004 fc01 	bl	8006148 <HAL_ADC_Start_DMA>
	HAL_DMA_Init(&hdma_spi2_tx);
 8001946:	489b      	ldr	r0, [pc, #620]	; (8001bb4 <main_initial+0x2c8>)
 8001948:	f005 fbfc 	bl	8007144 <HAL_DMA_Init>

	HAL_I2C_MspInit(&hi2c2);
 800194c:	489a      	ldr	r0, [pc, #616]	; (8001bb8 <main_initial+0x2cc>)
 800194e:	f003 fec3 	bl	80056d8 <HAL_I2C_MspInit>
	uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8001952:	4a9a      	ldr	r2, [pc, #616]	; (8001bbc <main_initial+0x2d0>)
 8001954:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800195c:	6018      	str	r0, [r3, #0]
 800195e:	3304      	adds	r3, #4
 8001960:	7019      	strb	r1, [r3, #0]
	HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

	*/


	HAL_Delay(5);
 8001962:	2005      	movs	r0, #5
 8001964:	f004 fa48 	bl	8005df8 <HAL_Delay>

	//               ----                  16Mbyte   flash   , w25q128   -----  16M (24bit) * 8bits   ( 1 page 256 bytes)
		send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8001968:	2306      	movs	r3, #6
 800196a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2110      	movs	r1, #16
 8001972:	4893      	ldr	r0, [pc, #588]	; (8001bc0 <main_initial+0x2d4>)
 8001974:	f006 f94a 	bl	8007c0c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001978:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	2201      	movs	r2, #1
 8001982:	4885      	ldr	r0, [pc, #532]	; (8001b98 <main_initial+0x2ac>)
 8001984:	f007 fe15 	bl	80095b2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001988:	2201      	movs	r2, #1
 800198a:	2110      	movs	r1, #16
 800198c:	488c      	ldr	r0, [pc, #560]	; (8001bc0 <main_initial+0x2d4>)
 800198e:	f006 f93d 	bl	8007c0c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001992:	2005      	movs	r0, #5
 8001994:	f004 fa30 	bl	8005df8 <HAL_Delay>
		send_spi1[0]=0x20; //sector erase
 8001998:	2320      	movs	r3, #32
 800199a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		send_spi1[2]=0; //24bit address
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		send_spi1[3]=1; //24bit address lsb
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80019b0:	2200      	movs	r2, #0
 80019b2:	2110      	movs	r1, #16
 80019b4:	4882      	ldr	r0, [pc, #520]	; (8001bc0 <main_initial+0x2d4>)
 80019b6:	f006 f929 	bl	8007c0c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 80019ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	2204      	movs	r2, #4
 80019c4:	4874      	ldr	r0, [pc, #464]	; (8001b98 <main_initial+0x2ac>)
 80019c6:	f007 fdf4 	bl	80095b2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	2110      	movs	r1, #16
 80019ce:	487c      	ldr	r0, [pc, #496]	; (8001bc0 <main_initial+0x2d4>)
 80019d0:	f006 f91c 	bl	8007c0c <HAL_GPIO_WritePin>


		send_spi1[0]=0x05; //read status register  if writing
 80019d4:	2305      	movs	r3, #5
 80019d6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		status_reg[1]=1; // set busy on
 80019e0:	4b78      	ldr	r3, [pc, #480]	; (8001bc4 <main_initial+0x2d8>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	705a      	strb	r2, [r3, #1]

		while (status_reg[1]&1){								// check if write busy
 80019e6:	e012      	b.n	8001a0e <main_initial+0x122>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2110      	movs	r1, #16
 80019ec:	4874      	ldr	r0, [pc, #464]	; (8001bc0 <main_initial+0x2d4>)
 80019ee:	f006 f90d 	bl	8007c0c <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 80019f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80019f6:	23c8      	movs	r3, #200	; 0xc8
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2302      	movs	r3, #2
 80019fc:	4a71      	ldr	r2, [pc, #452]	; (8001bc4 <main_initial+0x2d8>)
 80019fe:	4866      	ldr	r0, [pc, #408]	; (8001b98 <main_initial+0x2ac>)
 8001a00:	f008 f824 	bl	8009a4c <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2110      	movs	r1, #16
 8001a08:	486d      	ldr	r0, [pc, #436]	; (8001bc0 <main_initial+0x2d4>)
 8001a0a:	f006 f8ff 	bl	8007c0c <HAL_GPIO_WritePin>
		while (status_reg[1]&1){								// check if write busy
 8001a0e:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <main_initial+0x2d8>)
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e6      	bne.n	80019e8 <main_initial+0xfc>
		}

		send_spi1[0]=0x06; //enable write again
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2110      	movs	r1, #16
 8001a24:	4866      	ldr	r0, [pc, #408]	; (8001bc0 <main_initial+0x2d4>)
 8001a26:	f006 f8f1 	bl	8007c0c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001a2a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	2201      	movs	r2, #1
 8001a34:	4858      	ldr	r0, [pc, #352]	; (8001b98 <main_initial+0x2ac>)
 8001a36:	f007 fdbc 	bl	80095b2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	4860      	ldr	r0, [pc, #384]	; (8001bc0 <main_initial+0x2d4>)
 8001a40:	f006 f8e4 	bl	8007c0c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001a44:	2005      	movs	r0, #5
 8001a46:	f004 f9d7 	bl	8005df8 <HAL_Delay>

		//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
		uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <main_initial+0x2dc>)
 8001a4c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001a50:	461d      	mov	r5, r3
 8001a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	8023      	strh	r3, [r4, #0]
		memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8001a5a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001a5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a62:	220e      	movs	r2, #14
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00a f9c3 	bl	800bdf0 <memcpy>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	4854      	ldr	r0, [pc, #336]	; (8001bc0 <main_initial+0x2d4>)
 8001a70:	f006 f8cc 	bl	8007c0c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8001a74:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7c:	220e      	movs	r2, #14
 8001a7e:	4846      	ldr	r0, [pc, #280]	; (8001b98 <main_initial+0x2ac>)
 8001a80:	f007 fd97 	bl	80095b2 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	484d      	ldr	r0, [pc, #308]	; (8001bc0 <main_initial+0x2d4>)
 8001a8a:	f006 f8bf 	bl	8007c0c <HAL_GPIO_WritePin>

		HAL_Delay(25);
 8001a8e:	2019      	movs	r0, #25
 8001a90:	f004 f9b2 	bl	8005df8 <HAL_Delay>
		send_spi1[0]=0x04; //disable write
 8001a94:	2304      	movs	r3, #4
 8001a96:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4848      	ldr	r0, [pc, #288]	; (8001bc0 <main_initial+0x2d4>)
 8001aa0:	f006 f8b4 	bl	8007c0c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001aa4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aac:	2201      	movs	r2, #1
 8001aae:	483a      	ldr	r0, [pc, #232]	; (8001b98 <main_initial+0x2ac>)
 8001ab0:	f007 fd7f 	bl	80095b2 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	4841      	ldr	r0, [pc, #260]	; (8001bc0 <main_initial+0x2d4>)
 8001aba:	f006 f8a7 	bl	8007c0c <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8001abe:	2005      	movs	r0, #5
 8001ac0:	f004 f99a 	bl	8005df8 <HAL_Delay>
		memcpy  (send_spi1,return_spi1, 14);   // clear out
 8001ac4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ac8:	220e      	movs	r2, #14
 8001aca:	4940      	ldr	r1, [pc, #256]	; (8001bcc <main_initial+0x2e0>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00a f98f 	bl	800bdf0 <memcpy>
		send_spi1[0]=0x03; //read page 1
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		send_spi1[2]=0; //24bit address
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		send_spi1[3]=1; //24bit address lsb
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8001aea:	2200      	movs	r2, #0
 8001aec:	2110      	movs	r1, #16
 8001aee:	4834      	ldr	r0, [pc, #208]	; (8001bc0 <main_initial+0x2d4>)
 8001af0:	f006 f88c 	bl	8007c0c <HAL_GPIO_WritePin>

		HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8001af4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001af8:	2364      	movs	r3, #100	; 0x64
 8001afa:	2204      	movs	r2, #4
 8001afc:	4826      	ldr	r0, [pc, #152]	; (8001b98 <main_initial+0x2ac>)
 8001afe:	f007 fd58 	bl	80095b2 <HAL_SPI_Transmit>
		HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8001b02:	2364      	movs	r3, #100	; 0x64
 8001b04:	220a      	movs	r2, #10
 8001b06:	4931      	ldr	r1, [pc, #196]	; (8001bcc <main_initial+0x2e0>)
 8001b08:	4823      	ldr	r0, [pc, #140]	; (8001b98 <main_initial+0x2ac>)
 8001b0a:	f007 fe8e 	bl	800982a <HAL_SPI_Receive>

		//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
		//HAL_Delay(5);

		//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2110      	movs	r1, #16
 8001b12:	482b      	ldr	r0, [pc, #172]	; (8001bc0 <main_initial+0x2d4>)
 8001b14:	f006 f87a 	bl	8007c0c <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001b18:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	2201      	movs	r2, #1
 8001b22:	481d      	ldr	r0, [pc, #116]	; (8001b98 <main_initial+0x2ac>)
 8001b24:	f007 fd45 	bl	80095b2 <HAL_SPI_Transmit>


	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	223c      	movs	r2, #60	; 0x3c
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00a f969 	bl	800be0c <memset>
	uint16_t mem_count2=0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <main_initial+0x2e4>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2302      	movs	r3, #2
 8001b52:	2240      	movs	r2, #64	; 0x40
 8001b54:	21a0      	movs	r1, #160	; 0xa0
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <main_initial+0x2cc>)
 8001b58:	f006 fac8 	bl	80080ec <HAL_I2C_Mem_Read>

		uint16_t mem_counter=0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <main_initial+0x2e8>)
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <main_initial+0x2e4>)
 8001b66:	4614      	mov	r4, r2
 8001b68:	461d      	mov	r5, r3
 8001b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b76:	c407      	stmia	r4!, {r0, r1, r2}
 8001b78:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <main_initial+0x2ec>)
 8001b7c:	22a0      	movs	r2, #160	; 0xa0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4816      	ldr	r0, [pc, #88]	; (8001bdc <main_initial+0x2f0>)
 8001b82:	f00a f935 	bl	800bdf0 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001b8c:	e093      	b.n	8001cb6 <main_initial+0x3ca>
 8001b8e:	bf00      	nop
 8001b90:	0800d2f0 	.word	0x0800d2f0
 8001b94:	20010f34 	.word	0x20010f34
 8001b98:	20010edc 	.word	0x20010edc
 8001b9c:	20011034 	.word	0x20011034
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	20010fec 	.word	0x20010fec
 8001ba8:	2001107c 	.word	0x2001107c
 8001bac:	20010de0 	.word	0x20010de0
 8001bb0:	2000191c 	.word	0x2000191c
 8001bb4:	20010f8c 	.word	0x20010f8c
 8001bb8:	20010e88 	.word	0x20010e88
 8001bbc:	0800c3ec 	.word	0x0800c3ec
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	20000154 	.word	0x20000154
 8001bc8:	0800c3f4 	.word	0x0800c3f4
 8001bcc:	20003f08 	.word	0x20003f08
 8001bd0:	2000069c 	.word	0x2000069c
 8001bd4:	20004d58 	.word	0x20004d58
 8001bd8:	20000738 	.word	0x20000738
 8001bdc:	20000158 	.word	0x20000158

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001be0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4a9f      	ldr	r2, [pc, #636]	; (8001e6c <main_initial+0x580>)
 8001bee:	1898      	adds	r0, r3, r2
 8001bf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	332e      	adds	r3, #46	; 0x2e
 8001bfe:	4a9c      	ldr	r2, [pc, #624]	; (8001e70 <main_initial+0x584>)
 8001c00:	4413      	add	r3, r2
 8001c02:	2206      	movs	r2, #6
 8001c04:	4619      	mov	r1, r3
 8001c06:	f00a f8f3 	bl	800bdf0 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001c0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c0e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a97      	ldr	r2, [pc, #604]	; (8001e74 <main_initial+0x588>)
 8001c18:	1898      	adds	r0, r3, r2
 8001c1a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	336a      	adds	r3, #106	; 0x6a
 8001c26:	4a92      	ldr	r2, [pc, #584]	; (8001e70 <main_initial+0x584>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f00a f8df 	bl	800bdf0 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001c32:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4a8e      	ldr	r2, [pc, #568]	; (8001e78 <main_initial+0x58c>)
 8001c40:	1898      	adds	r0, r3, r2
 8001c42:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001c52:	4a87      	ldr	r2, [pc, #540]	; (8001e70 <main_initial+0x584>)
 8001c54:	4413      	add	r3, r2
 8001c56:	2206      	movs	r2, #6
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f00a f8c9 	bl	800bdf0 <memcpy>
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001c5e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4a84      	ldr	r2, [pc, #528]	; (8001e7c <main_initial+0x590>)
 8001c6c:	1898      	adds	r0, r3, r2
 8001c6e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c7e:	4a7c      	ldr	r2, [pc, #496]	; (8001e70 <main_initial+0x584>)
 8001c80:	4413      	add	r3, r2
 8001c82:	2206      	movs	r2, #6
 8001c84:	4619      	mov	r1, r3
 8001c86:	f00a f8b3 	bl	800bdf0 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001c8a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4a7a      	ldr	r2, [pc, #488]	; (8001e80 <main_initial+0x594>)
 8001c98:	4413      	add	r3, r2
 8001c9a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001ca4:	4972      	ldr	r1, [pc, #456]	; (8001e70 <main_initial+0x584>)
 8001ca6:	440a      	add	r2, r1
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	601a      	str	r2, [r3, #0]
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001cac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001cb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001cba:	2b09      	cmp	r3, #9
 8001cbc:	d990      	bls.n	8001be0 <main_initial+0x2f4>
	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001cbe:	4b71      	ldr	r3, [pc, #452]	; (8001e84 <main_initial+0x598>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	801a      	strh	r2, [r3, #0]
 8001cc4:	e057      	b.n	8001d76 <main_initial+0x48a>

		for 	(n=0;n<18;n++){					// this is ok
 8001cc6:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <main_initial+0x59c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	e049      	b.n	8001d62 <main_initial+0x476>
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001cce:	4b6e      	ldr	r3, [pc, #440]	; (8001e88 <main_initial+0x59c>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d114      	bne.n	8001d00 <main_initial+0x414>
 8001cd6:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <main_initial+0x598>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <main_initial+0x598>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <main_initial+0x59c>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3a80      	subs	r2, #128	; 0x80
 8001cfa:	b2d1      	uxtb	r1, r2
 8001cfc:	4a63      	ldr	r2, [pc, #396]	; (8001e8c <main_initial+0x5a0>)
 8001cfe:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <main_initial+0x59c>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d114      	bne.n	8001d32 <main_initial+0x446>
 8001d08:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <main_initial+0x598>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3310      	adds	r3, #16
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <main_initial+0x598>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4619      	mov	r1, r3
 8001d24:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <main_initial+0x59c>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	440b      	add	r3, r1
 8001d2a:	00d2      	lsls	r2, r2, #3
 8001d2c:	b2d1      	uxtb	r1, r2
 8001d2e:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <main_initial+0x5a0>)
 8001d30:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001d32:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <main_initial+0x59c>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d90d      	bls.n	8001d56 <main_initial+0x46a>
 8001d3a:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <main_initial+0x598>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <main_initial+0x59c>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <main_initial+0x5a0>)
 8001d52:	21ff      	movs	r1, #255	; 0xff
 8001d54:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001d56:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <main_initial+0x59c>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <main_initial+0x59c>)
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <main_initial+0x59c>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	2b11      	cmp	r3, #17
 8001d68:	d9b1      	bls.n	8001cce <main_initial+0x3e2>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <main_initial+0x598>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b44      	ldr	r3, [pc, #272]	; (8001e84 <main_initial+0x598>)
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <main_initial+0x598>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	2b3f      	cmp	r3, #63	; 0x3f
 8001d7c:	d9a3      	bls.n	8001cc6 <main_initial+0x3da>

		}

		}
	seq.pos=0;
 8001d7e:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <main_initial+0x5a4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001d84:	2301      	movs	r3, #1
 8001d86:	663b      	str	r3, [r7, #96]	; 0x60


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001d88:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <main_initial+0x598>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	e016      	b.n	8001dbe <main_initial+0x4d2>
	  		tempo_hold=i;
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <main_initial+0x598>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	663b      	str	r3, [r7, #96]	; 0x60
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4a3e      	ldr	r2, [pc, #248]	; (8001e94 <main_initial+0x5a8>)
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	663b      	str	r3, [r7, #96]	; 0x60

	  	tempo_lut[i]=tempo_hold;
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <main_initial+0x598>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001daa:	b299      	uxth	r1, r3
 8001dac:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <main_initial+0x5ac>)
 8001dae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <main_initial+0x598>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <main_initial+0x598>)
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <main_initial+0x598>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d9e4      	bls.n	8001d90 <main_initial+0x4a4>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001dc6:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <main_initial+0x5b0>)
 8001dc8:	2218      	movs	r2, #24
 8001dca:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <main_initial+0x598>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	801a      	strh	r2, [r3, #0]
 8001dd2:	e00b      	b.n	8001dec <main_initial+0x500>
			spell[i]=67;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <main_initial+0x598>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <main_initial+0x5b4>)
 8001ddc:	2143      	movs	r1, #67	; 0x43
 8001dde:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <main_initial+0x598>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <main_initial+0x598>)
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <main_initial+0x598>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001df4:	d3ee      	bcc.n	8001dd4 <main_initial+0x4e8>

		}

		gfx_clear();
 8001df6:	f002 f947 	bl	8004088 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001e00:	e006      	b.n	8001e10 <main_initial+0x524>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001e02:	f7ff f979 	bl	80010f8 <menu_parser>
	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001e06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001e10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e18:	d3f3      	bcc.n	8001e02 <main_initial+0x516>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <main_initial+0x598>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	e00c      	b.n	8001e3c <main_initial+0x550>
	RAM[i]=0;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <main_initial+0x598>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <main_initial+0x5b8>)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <main_initial+0x598>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <main_initial+0x598>)
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <main_initial+0x598>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e44:	d3ed      	bcc.n	8001e22 <main_initial+0x536>
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <main_initial+0x598>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	801a      	strh	r2, [r3, #0]
 8001e4c:	e005      	b.n	8001e5a <main_initial+0x56e>
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <main_initial+0x598>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <main_initial+0x598>)
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <main_initial+0x598>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e62:	d3f4      	bcc.n	8001e4e <main_initial+0x562>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001e6a:	e02a      	b.n	8001ec2 <main_initial+0x5d6>
 8001e6c:	20003f20 	.word	0x20003f20
 8001e70:	2000069c 	.word	0x2000069c
 8001e74:	200042cc 	.word	0x200042cc
 8001e78:	20004d88 	.word	0x20004d88
 8001e7c:	200041c8 	.word	0x200041c8
 8001e80:	20004204 	.word	0x20004204
 8001e84:	20000908 	.word	0x20000908
 8001e88:	20000902 	.word	0x20000902
 8001e8c:	20003670 	.word	0x20003670
 8001e90:	20004d58 	.word	0x20004d58
 8001e94:	0020b584 	.word	0x0020b584
 8001e98:	2000326c 	.word	0x2000326c
 8001e9c:	20000498 	.word	0x20000498
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20007764 	.word	0x20007764
 8001ea8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <main_initial+0x64c>)
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	5499      	strb	r1, [r3, r2]
 8001eb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001ec2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eca:	d3ed      	bcc.n	8001ea8 <main_initial+0x5bc>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001ecc:	481a      	ldr	r0, [pc, #104]	; (8001f38 <main_initial+0x64c>)
 8001ece:	f7fe f983 	bl	80001d8 <strlen>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <main_initial+0x650>)
 8001ed8:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <main_initial+0x654>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <main_initial+0x654>)
 8001ee4:	701a      	strb	r2, [r3, #0]
			display_clear ();
 8001ee6:	f002 f911 	bl	800410c <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001ef0:	e00e      	b.n	8001f10 <main_initial+0x624>
 8001ef2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <main_initial+0x658>)
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <main_initial+0x64c>)
 8001f02:	2130      	movs	r1, #48	; 0x30
 8001f04:	54d1      	strb	r1, [r2, r3]
 8001f06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <main_initial+0x654>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3e9      	bcc.n	8001ef2 <main_initial+0x606>
			note_reset();
 8001f1e:	f7ff fca7 	bl	8001870 <note_reset>
		menuSelect=0;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <main_initial+0x65c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <main_initial+0x660>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8001f2e:	bf00      	nop
 8001f30:	3770      	adds	r7, #112	; 0x70
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200109e0 	.word	0x200109e0
 8001f3c:	2000552e 	.word	0x2000552e
 8001f40:	20004f1d 	.word	0x20004f1d
 8001f44:	20004f20 	.word	0x20004f20
 8001f48:	200008fc 	.word	0x200008fc
 8001f4c:	200008fe 	.word	0x200008fe

08001f50 <patch_lists>:



}

void patch_lists(void){
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    for (list_counter=0;list_counter<10;list_counter++){
 8001f56:	2300      	movs	r3, #0
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	e02a      	b.n	8001fb2 <patch_lists+0x62>

	if ((patch[list_counter].input1&3)== 3   )     LFO_sqr_list[patch[list_counter].input1>>2]   =  (patch[list_counter].target_index&7)+48;
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	491a      	ldr	r1, [pc, #104]	; (8001fc8 <patch_lists+0x78>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d11b      	bne.n	8001fac <patch_lists+0x5c>
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	4914      	ldr	r1, [pc, #80]	; (8001fc8 <patch_lists+0x78>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3305      	adds	r3, #5
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	b2d9      	uxtb	r1, r3
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <patch_lists+0x78>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4403      	add	r3, r0
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8001fa6:	b2d9      	uxtb	r1, r3
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <patch_lists+0x7c>)
 8001faa:	5499      	strb	r1, [r3, r2]
    for (list_counter=0;list_counter<10;list_counter++){
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	71fb      	strb	r3, [r7, #7]
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d9d1      	bls.n	8001f5c <patch_lists+0xc>


    }

}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20004d88 	.word	0x20004d88
 8001fcc:	20010770 	.word	0x20010770

08001fd0 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b0ea      	sub	sp, #424	; 0x1a8
 8001fd4:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;
uint8_t seqpos_i;
	time_proc=0;
 8001fd6:	4b98      	ldr	r3, [pc, #608]	; (8002238 <sampling+0x268>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 8001fdc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001fe0:	2228      	movs	r2, #40	; 0x28
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f009 ff11 	bl	800be0c <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 8001fea:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001fee:	2228      	movs	r2, #40	; 0x28
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f009 ff0a 	bl	800be0c <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 8001ff8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ffc:	2250      	movs	r2, #80	; 0x50
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f009 ff03 	bl	800be0c <memset>
 8002006:	2301      	movs	r3, #1
 8002008:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800200c:	2301      	movs	r3, #1
 800200e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8002012:	2301      	movs	r3, #1
 8002014:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8002018:	2301      	movs	r3, #1
 800201a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800201e:	2301      	movs	r3, #1
 8002020:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8002024:	2301      	movs	r3, #1
 8002026:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800202a:	2301      	movs	r3, #1
 800202c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8002030:	2301      	movs	r3, #1
 8002032:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8002036:	2301      	movs	r3, #1
 8002038:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800203c:	2301      	movs	r3, #1
 800203e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8002042:	2301      	movs	r3, #1
 8002044:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8002048:	2301      	movs	r3, #1
 800204a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800204e:	2301      	movs	r3, #1
 8002050:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8002054:	2301      	movs	r3, #1
 8002056:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800205a:	2301      	movs	r3, #1
 800205c:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8002060:	2301      	movs	r3, #1
 8002062:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8002066:	2301      	movs	r3, #1
 8002068:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 800206c:	2301      	movs	r3, #1
 800206e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8002072:	2301      	movs	r3, #1
 8002074:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 8002078:	2301      	movs	r3, #1
 800207a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 800207e:	2301      	movs	r3, #1
 8002080:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 8002084:	2301      	movs	r3, #1
 8002086:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
 800208a:	2301      	movs	r3, #1
 800208c:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
 8002090:	2301      	movs	r3, #1
 8002092:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
 8002096:	2301      	movs	r3, #1
 8002098:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
 800209c:	2301      	movs	r3, #1
 800209e:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 80020a2:	2301      	movs	r3, #1
 80020a4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 80020a8:	2301      	movs	r3, #1
 80020aa:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 80020ae:	2301      	movs	r3, #1
 80020b0:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
 80020b4:	2301      	movs	r3, #1
 80020b6:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
 80020ba:	2301      	movs	r3, #1
 80020bc:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
 80020c0:	2301      	movs	r3, #1
 80020c2:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 80020c6:	2301      	movs	r3, #1
 80020c8:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 80020cc:	2301      	movs	r3, #1
 80020ce:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
 80020d2:	2301      	movs	r3, #1
 80020d4:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 80020d8:	2301      	movs	r3, #1
 80020da:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 80020de:	2301      	movs	r3, #1
 80020e0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8


if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <sampling+0x26c>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d104      	bne.n	80020f6 <sampling+0x126>
 80020ec:	4b54      	ldr	r3, [pc, #336]	; (8002240 <sampling+0x270>)
 80020ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	e002      	b.n	80020fc <sampling+0x12c>
 80020f6:	4b52      	ldr	r3, [pc, #328]	; (8002240 <sampling+0x270>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	801a      	strh	r2, [r3, #0]

bank_write=0;
 80020fc:	4b4f      	ldr	r3, [pc, #316]	; (800223c <sampling+0x26c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 8002102:	2210      	movs	r2, #16
 8002104:	494f      	ldr	r1, [pc, #316]	; (8002244 <sampling+0x274>)
 8002106:	4850      	ldr	r0, [pc, #320]	; (8002248 <sampling+0x278>)
 8002108:	f009 fe72 	bl	800bdf0 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 800210c:	4b4f      	ldr	r3, [pc, #316]	; (800224c <sampling+0x27c>)
 800210e:	2210      	movs	r2, #16
 8002110:	494f      	ldr	r1, [pc, #316]	; (8002250 <sampling+0x280>)
 8002112:	4618      	mov	r0, r3
 8002114:	f009 fe6c 	bl	800bdf0 <memcpy>
sample_pointB=sample_pointD;
 8002118:	4b49      	ldr	r3, [pc, #292]	; (8002240 <sampling+0x270>)
 800211a:	881a      	ldrh	r2, [r3, #0]
 800211c:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <sampling+0x284>)
 800211e:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002120:	2300      	movs	r3, #0
 8002122:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8002126:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <sampling+0x288>)
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	461a      	mov	r2, r3
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <sampling+0x28c>)
 800212e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002132:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
 8002136:	4b48      	ldr	r3, [pc, #288]	; (8002258 <sampling+0x288>)
 8002138:	785b      	ldrb	r3, [r3, #1]
 800213a:	2b27      	cmp	r3, #39	; 0x27
 800213c:	d803      	bhi.n	8002146 <sampling+0x176>
 800213e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002142:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8002146:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 800214a:	2b00      	cmp	r3, #0
 800214c:	da00      	bge.n	8002150 <sampling+0x180>
 800214e:	331f      	adds	r3, #31
 8002150:	115b      	asrs	r3, r3, #5
 8002152:	461a      	mov	r2, r3
 8002154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002158:	fb93 f3f2 	sdiv	r3, r3, r2
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002164:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <sampling+0x290>)
 8002166:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <sampling+0x290>)
 800216c:	ed93 7a00 	vldr	s14, [r3]
 8002170:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002264 <sampling+0x294>
 8002174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <sampling+0x290>)
 800217a:	edc3 7a00 	vstr	s15, [r3]

uint8_t looper_dat[8]={1,3,7,15};
 800217e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002182:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8002186:	4938      	ldr	r1, [pc, #224]	; (8002268 <sampling+0x298>)
 8002188:	4613      	mov	r3, r2
 800218a:	c903      	ldmia	r1, {r0, r1}
 800218c:	6018      	str	r0, [r3, #0]
 800218e:	3304      	adds	r3, #4
 8002190:	7019      	strb	r1, [r3, #0]
 8002192:	1d53      	adds	r3, r2, #5
 8002194:	2200      	movs	r2, #0
 8002196:	801a      	strh	r2, [r3, #0]
 8002198:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <sampling+0x29c>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d036      	beq.n	8002214 <sampling+0x244>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note
 80021a6:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 80021aa:	4a31      	ldr	r2, [pc, #196]	; (8002270 <sampling+0x2a0>)
 80021ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80021b0:	ee07 3a90 	vmov	s15, r3
 80021b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b8:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194


						for (i=0;i<256;i++){								// 128 is 1 note
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <sampling+0x2a4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	e023      	b.n	800220c <sampling+0x23c>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <sampling+0x2a4>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d2:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80021d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021da:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002278 <sampling+0x2a8>
 80021de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e6:	ee17 3a90 	vmov	r3, s15
 80021ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	lfo_tempo_lut[i]= lfo_tempo_hold;
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <sampling+0x2a4>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80021f8:	b299      	uxth	r1, r3
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <sampling+0x2ac>)
 80021fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <sampling+0x2a4>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <sampling+0x2a4>)
 800220a:	801a      	strh	r2, [r3, #0]
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <sampling+0x2a4>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2bff      	cmp	r3, #255	; 0xff
 8002212:	d9d7      	bls.n	80021c4 <sampling+0x1f4>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <sampling+0x29c>)
 8002216:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 800221a:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 800221c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002220:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002224:	4618      	mov	r0, r3
 8002226:	2344      	movs	r3, #68	; 0x44
 8002228:	461a      	mov	r2, r3
 800222a:	2100      	movs	r1, #0
 800222c:	f009 fdee 	bl	800be0c <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002230:	4b10      	ldr	r3, [pc, #64]	; (8002274 <sampling+0x2a4>)
 8002232:	2200      	movs	r2, #0
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e033      	b.n	80022a0 <sampling+0x2d0>
 8002238:	20003f1c 	.word	0x20003f1c
 800223c:	2000014e 	.word	0x2000014e
 8002240:	20001916 	.word	0x20001916
 8002244:	20004d5a 	.word	0x20004d5a
 8002248:	2000753c 	.word	0x2000753c
 800224c:	2000754c 	.word	0x2000754c
 8002250:	20004d6b 	.word	0x20004d6b
 8002254:	20000906 	.word	0x20000906
 8002258:	20004d58 	.word	0x20004d58
 800225c:	2000326c 	.word	0x2000326c
 8002260:	20003af8 	.word	0x20003af8
 8002264:	42a00000 	.word	0x42a00000
 8002268:	0800c408 	.word	0x0800c408
 800226c:	2000366c 	.word	0x2000366c
 8002270:	006487ec 	.word	0x006487ec
 8002274:	20000908 	.word	0x20000908
 8002278:	42800000 	.word	0x42800000
 800227c:	2000346c 	.word	0x2000346c
 8002280:	4b41      	ldr	r3, [pc, #260]	; (8002388 <sampling+0x3b8>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800228a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800228e:	2200      	movs	r2, #0
 8002290:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002294:	4b3c      	ldr	r3, [pc, #240]	; (8002388 <sampling+0x3b8>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <sampling+0x3b8>)
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	4b39      	ldr	r3, [pc, #228]	; (8002388 <sampling+0x3b8>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d9eb      	bls.n	8002280 <sampling+0x2b0>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <sampling+0x3bc>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4a38      	ldr	r2, [pc, #224]	; (8002390 <sampling+0x3c0>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3330      	adds	r3, #48	; 0x30
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <sampling+0x3c4>)
 80022bc:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <sampling+0x3bc>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4a32      	ldr	r2, [pc, #200]	; (8002390 <sampling+0x3c0>)
 80022c6:	fba2 1203 	umull	r1, r2, r2, r3
 80022ca:	0952      	lsrs	r2, r2, #5
 80022cc:	2164      	movs	r1, #100	; 0x64
 80022ce:	fb01 f202 	mul.w	r2, r1, r2
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4a30      	ldr	r2, [pc, #192]	; (8002398 <sampling+0x3c8>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3330      	adds	r3, #48	; 0x30
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <sampling+0x3c4>)
 80022e6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_temp%10)+48;
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <sampling+0x3bc>)
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <sampling+0x3c8>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	08d9      	lsrs	r1, r3, #3
 80022f6:	460b      	mov	r3, r1
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	3330      	adds	r3, #48	; 0x30
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <sampling+0x3c4>)
 8002308:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

LCD_Info[0]  =( seq.pos/100) +48;
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <sampling+0x3cc>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <sampling+0x3c0>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3330      	adds	r3, #48	; 0x30
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <sampling+0x3d0>)
 8002320:	701a      	strb	r2, [r3, #0]
LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <sampling+0x3cc>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <sampling+0x3c0>)
 8002328:	fba2 1203 	umull	r1, r2, r2, r3
 800232c:	0952      	lsrs	r2, r2, #5
 800232e:	2164      	movs	r1, #100	; 0x64
 8002330:	fb01 f202 	mul.w	r2, r1, r2
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <sampling+0x3c8>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	08db      	lsrs	r3, r3, #3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3330      	adds	r3, #48	; 0x30
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <sampling+0x3d0>)
 8002348:	705a      	strb	r2, [r3, #1]
LCD_Info[2]  =( seq.pos%10)+48 ;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <sampling+0x3cc>)
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <sampling+0x3c8>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	08d9      	lsrs	r1, r3, #3
 8002356:	460b      	mov	r3, r1
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3330      	adds	r3, #48	; 0x30
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <sampling+0x3d0>)
 8002368:	709a      	strb	r2, [r3, #2]
patch_lists();
 800236a:	f7ff fdf1 	bl	8001f50 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <sampling+0x3d4>)
 8002370:	8b1b      	ldrh	r3, [r3, #24]
 8002372:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 8002376:	d302      	bcc.n	800237e <sampling+0x3ae>
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <sampling+0x3d4>)
 800237a:	2200      	movs	r2, #0
 800237c:	831a      	strh	r2, [r3, #24]
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 800237e:	2300      	movs	r3, #0
 8002380:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
 8002384:	e0fc      	b.n	8002580 <sampling+0x5b0>
 8002386:	bf00      	nop
 8002388:	20000908 	.word	0x20000908
 800238c:	20005532 	.word	0x20005532
 8002390:	51eb851f 	.word	0x51eb851f
 8002394:	2000069c 	.word	0x2000069c
 8002398:	cccccccd 	.word	0xcccccccd
 800239c:	20004d58 	.word	0x20004d58
 80023a0:	2001097c 	.word	0x2001097c
 80023a4:	20000204 	.word	0x20000204


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 80023a8:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 80023ac:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 80023b0:	49b1      	ldr	r1, [pc, #708]	; (8002678 <sampling+0x6a8>)
 80023b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80023bc:	443b      	add	r3, r7
 80023be:	f843 2c64 	str.w	r2, [r3, #-100]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80023c2:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 80023c6:	49ad      	ldr	r1, [pc, #692]	; (800267c <sampling+0x6ac>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	440b      	add	r3, r1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10a      	bne.n	80023ee <sampling+0x41e>
 80023d8:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 80023dc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80023e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023e4:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80023e8:	3114      	adds	r1, #20
 80023ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 80023ee:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 80023f2:	49a2      	ldr	r1, [pc, #648]	; (800267c <sampling+0x6ac>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	440b      	add	r3, r1
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10d      	bne.n	8002420 <sampling+0x450>
 8002404:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 8002408:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 800240c:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4419      	add	r1, r3
 8002414:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002418:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 8002420:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8002424:	4995      	ldr	r1, [pc, #596]	; (800267c <sampling+0x6ac>)
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	440b      	add	r3, r1
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d10d      	bne.n	8002452 <sampling+0x482>
 8002436:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 800243a:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 800243e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4419      	add	r1, r3
 8002446:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800244a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800244e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 8002452:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8002456:	4989      	ldr	r1, [pc, #548]	; (800267c <sampling+0x6ac>)
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	440b      	add	r3, r1
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d11c      	bne.n	80024a2 <sampling+0x4d2>
 8002468:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 800246c:	3306      	adds	r3, #6
 800246e:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8002472:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4419      	add	r1, r3
 800247a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800247e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002486:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <sampling+0x6b0>)
 8002488:	78db      	ldrb	r3, [r3, #3]
 800248a:	b25a      	sxtb	r2, r3
 800248c:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	b25b      	sxtb	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b25b      	sxtb	r3, r3
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b78      	ldr	r3, [pc, #480]	; (8002680 <sampling+0x6b0>)
 80024a0:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 80024a2:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 80024a6:	4975      	ldr	r1, [pc, #468]	; (800267c <sampling+0x6ac>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	440b      	add	r3, r1
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11e      	bne.n	80024f6 <sampling+0x526>
 80024b8:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 80024bc:	3306      	adds	r3, #6
 80024be:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 80024c2:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4419      	add	r1, r3
 80024ca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80024ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <sampling+0x6b0>)
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	b25a      	sxtb	r2, r3
 80024dc:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <sampling+0x6b0>)
 80024f4:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 80024f6:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 80024fa:	4960      	ldr	r1, [pc, #384]	; (800267c <sampling+0x6ac>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	440b      	add	r3, r1
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d109      	bne.n	8002520 <sampling+0x550>
 800250c:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8002510:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002514:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002518:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800251c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 8002520:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8002524:	4955      	ldr	r1, [pc, #340]	; (800267c <sampling+0x6ac>)
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	440b      	add	r3, r1
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b06      	cmp	r3, #6
 8002534:	d109      	bne.n	800254a <sampling+0x57a>
 8002536:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 800253a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800253e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002542:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8002546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>6) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800254a:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 800254e:	494b      	ldr	r1, [pc, #300]	; (800267c <sampling+0x6ac>)
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	440b      	add	r3, r1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b06      	cmp	r3, #6
 800255e:	d90a      	bls.n	8002576 <sampling+0x5a6>
 8002560:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
 8002564:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002568:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800256c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002570:	3114      	adds	r1, #20
 8002572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002576:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 800257a:	3301      	adds	r3, #1
 800257c:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
 8002580:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 8002584:	2b03      	cmp	r3, #3
 8002586:	f67f af0f 	bls.w	80023a8 <sampling+0x3d8>


 }

note_holdA=0;
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <sampling+0x6b4>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002590:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002594:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002598:	2200      	movs	r2, #0
 800259a:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 800259c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80025a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025a4:	4a38      	ldr	r2, [pc, #224]	; (8002688 <sampling+0x6b8>)
 80025a6:	461c      	mov	r4, r3
 80025a8:	4615      	mov	r5, r2
 80025aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ae:	682b      	ldr	r3, [r5, #0]
 80025b0:	7023      	strb	r3, [r4, #0]
//adc_values[2]= 15; //force for now
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <sampling+0x6bc>)
 80025b4:	791b      	ldrb	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d146      	bne.n	8002648 <sampling+0x678>
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <sampling+0x6bc>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f88c 	bl	80006e0 <__aeabi_i2d>
 80025c8:	a327      	add	r3, pc, #156	; (adr r3, 8002668 <sampling+0x698>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fd fe0b 	bl	80001e8 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe f90b 	bl	80007f4 <__aeabi_d2f>
 80025de:	4603      	mov	r3, r0
 80025e0:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <sampling+0x6c0>)
 80025e2:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 80025e4:	4b29      	ldr	r3, [pc, #164]	; (800268c <sampling+0x6bc>)
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe f877 	bl	80006e0 <__aeabi_i2d>
 80025f2:	a31f      	add	r3, pc, #124	; (adr r3, 8002670 <sampling+0x6a0>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fd fdf6 	bl	80001e8 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f7fe f8f6 	bl	80007f4 <__aeabi_d2f>
 8002608:	4603      	mov	r3, r0
 800260a:	4a20      	ldr	r2, [pc, #128]	; (800268c <sampling+0x6bc>)
 800260c:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <sampling+0x6c0>)
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <sampling+0x6c0>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <sampling+0x6c0>)
 8002620:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <sampling+0x6bc>)
 8002626:	ed93 7a04 	vldr	s14, [r3, #16]
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <sampling+0x6bc>)
 800262c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <sampling+0x6bc>)
 8002636:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <sampling+0x6bc>)
 800263c:	2201      	movs	r2, #1
 800263e:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <sampling+0x6bc>)
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/

uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <sampling+0x6c4>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	b29b      	uxth	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	2201      	movs	r2, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <sampling+0x6c8>)
 8002662:	2200      	movs	r2, #0
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	e1ee      	b.n	8002a46 <sampling+0xa76>
 8002668:	47ae147b 	.word	0x47ae147b
 800266c:	3f947ae1 	.word	0x3f947ae1
 8002670:	47ae147b 	.word	0x47ae147b
 8002674:	3f847ae1 	.word	0x3f847ae1
 8002678:	20003120 	.word	0x20003120
 800267c:	20000158 	.word	0x20000158
 8002680:	20000204 	.word	0x20000204
 8002684:	2000311e 	.word	0x2000311e
 8002688:	0800c410 	.word	0x0800c410
 800268c:	200042cc 	.word	0x200042cc
 8002690:	20003afc 	.word	0x20003afc
 8002694:	20000144 	.word	0x20000144
 8002698:	20000908 	.word	0x20000908

	i_total=i+sample_pointB;
 800269c:	4b90      	ldr	r3, [pc, #576]	; (80028e0 <sampling+0x910>)
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	4b90      	ldr	r3, [pc, #576]	; (80028e4 <sampling+0x914>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
	sampling_position=i>>6;   //   0-8 steps
 80026aa:	4b8d      	ldr	r3, [pc, #564]	; (80028e0 <sampling+0x910>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <sampling+0x918>)
 80026b6:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80026b8:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <sampling+0x918>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3307      	adds	r3, #7
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b89      	ldr	r3, [pc, #548]	; (80028ec <sampling+0x91c>)
 80026c8:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80026ca:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <sampling+0x920>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	4a87      	ldr	r2, [pc, #540]	; (80028f0 <sampling+0x920>)
 80026d4:	4413      	add	r3, r2
 80026d6:	789b      	ldrb	r3, [r3, #2]
 80026d8:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80026dc:	4b80      	ldr	r3, [pc, #512]	; (80028e0 <sampling+0x910>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4a84      	ldr	r2, [pc, #528]	; (80028f4 <sampling+0x924>)
 80026e4:	5cd2      	ldrb	r2, [r2, r3]
 80026e6:	4b7e      	ldr	r3, [pc, #504]	; (80028e0 <sampling+0x910>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	0912      	lsrs	r2, r2, #4
 80026ee:	b2d1      	uxtb	r1, r2
 80026f0:	4a81      	ldr	r2, [pc, #516]	; (80028f8 <sampling+0x928>)
 80026f2:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80026f4:	4b81      	ldr	r3, [pc, #516]	; (80028fc <sampling+0x92c>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d80c      	bhi.n	800271a <sampling+0x74a>
 8002700:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <sampling+0x930>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	b29b      	uxth	r3, r3
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b7c      	ldr	r3, [pc, #496]	; (8002900 <sampling+0x930>)
 8002710:	801a      	strh	r2, [r3, #0]
 8002712:	4b7a      	ldr	r3, [pc, #488]	; (80028fc <sampling+0x92c>)
 8002714:	2200      	movs	r2, #0
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	e005      	b.n	8002726 <sampling+0x756>
 800271a:	4b78      	ldr	r3, [pc, #480]	; (80028fc <sampling+0x92c>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b76      	ldr	r3, [pc, #472]	; (80028fc <sampling+0x92c>)
 8002724:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002726:	2300      	movs	r3, #0
 8002728:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800272c:	4b74      	ldr	r3, [pc, #464]	; (8002900 <sampling+0x930>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b6e      	ldr	r3, [pc, #440]	; (80028f0 <sampling+0x920>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	429a      	cmp	r2, r3
 800273c:	d009      	beq.n	8002752 <sampling+0x782>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800273e:	4b70      	ldr	r3, [pc, #448]	; (8002900 <sampling+0x930>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	b29b      	uxth	r3, r3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4b69      	ldr	r3, [pc, #420]	; (80028f0 <sampling+0x920>)
 800274a:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800274c:	2301      	movs	r3, #1
 800274e:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002752:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8165 	beq.w	8002a26 <sampling+0xa56>
	{
		serial_tosend=1;
 800275c:	4b69      	ldr	r3, [pc, #420]	; (8002904 <sampling+0x934>)
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i;   //record postion
 8002762:	4b5f      	ldr	r3, [pc, #380]	; (80028e0 <sampling+0x910>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 800276a:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <sampling+0x920>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	b2da      	uxtb	r2, r3
 8002774:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002778:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800277c:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 800277e:	4b62      	ldr	r3, [pc, #392]	; (8002908 <sampling+0x938>)
 8002780:	885b      	ldrh	r3, [r3, #2]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	b29b      	uxth	r3, r3
 8002786:	b2da      	uxtb	r2, r3
 8002788:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800278c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002790:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 8002792:	4b5d      	ldr	r3, [pc, #372]	; (8002908 <sampling+0x938>)
 8002794:	889b      	ldrh	r3, [r3, #4]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	b29b      	uxth	r3, r3
 800279a:	b2da      	uxtb	r2, r3
 800279c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027a0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80027a4:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 80027a6:	4b58      	ldr	r3, [pc, #352]	; (8002908 <sampling+0x938>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027b4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80027b8:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 80027ba:	4b54      	ldr	r3, [pc, #336]	; (800290c <sampling+0x93c>)
 80027bc:	799a      	ldrb	r2, [r3, #6]
 80027be:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027c2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027d0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	4413      	add	r3, r2
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <sampling+0x920>)
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 80027e6:	4b49      	ldr	r3, [pc, #292]	; (800290c <sampling+0x93c>)
 80027e8:	7d1a      	ldrb	r2, [r3, #20]
 80027ea:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027ee:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027fc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002800:	789b      	ldrb	r3, [r3, #2]
 8002802:	4413      	add	r3, r2
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <sampling+0x920>)
 800280e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <sampling+0x93c>)
 8002814:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002818:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800281c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <sampling+0x920>)
 800282e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 8002832:	4b36      	ldr	r3, [pc, #216]	; (800290c <sampling+0x93c>)
 8002834:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002838:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800283c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	b2da      	uxtb	r2, r3
 8002846:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800284a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800284e:	78db      	ldrb	r3, [r3, #3]
 8002850:	4413      	add	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <sampling+0x920>)
 800285c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <sampling+0x920>)
 8002862:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002866:	461a      	mov	r2, r3
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <sampling+0x940>)
 800286a:	5c9a      	ldrb	r2, [r3, r2]
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <sampling+0x93c>)
 800286e:	795b      	ldrb	r3, [r3, #5]
 8002870:	4413      	add	r3, r2
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <sampling+0x93c>)
 8002876:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <sampling+0x920>)
 800287a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800287e:	461a      	mov	r2, r3
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <sampling+0x940>)
 8002882:	5c9a      	ldrb	r2, [r3, r2]
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <sampling+0x93c>)
 8002886:	7cdb      	ldrb	r3, [r3, #19]
 8002888:	4413      	add	r3, r2
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <sampling+0x93c>)
 800288e:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <sampling+0x920>)
 8002892:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002896:	461a      	mov	r2, r3
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <sampling+0x940>)
 800289a:	5c9a      	ldrb	r2, [r3, r2]
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <sampling+0x93c>)
 800289e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a2:	4413      	add	r3, r2
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <sampling+0x93c>)
 80028a8:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <sampling+0x920>)
 80028ac:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <sampling+0x940>)
 80028b4:	5c9a      	ldrb	r2, [r3, r2]
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <sampling+0x93c>)
 80028b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80028bc:	4413      	add	r3, r2
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <sampling+0x93c>)
 80028c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

//	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
		patch_target_replace();
 80028c6:	f7fe fe3d 	bl	8001544 <patch_target_replace>
		uint8_t detune_temp=0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <sampling+0x944>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
 80028dc:	e09e      	b.n	8002a1c <sampling+0xa4c>
 80028de:	bf00      	nop
 80028e0:	20000908 	.word	0x20000908
 80028e4:	20000906 	.word	0x20000906
 80028e8:	20005534 	.word	0x20005534
 80028ec:	20005535 	.word	0x20005535
 80028f0:	20004d58 	.word	0x20004d58
 80028f4:	2000069c 	.word	0x2000069c
 80028f8:	2000049c 	.word	0x2000049c
 80028fc:	20003148 	.word	0x20003148
 8002900:	2000311c 	.word	0x2000311c
 8002904:	20007761 	.word	0x20007761
 8002908:	20000144 	.word	0x20000144
 800290c:	20000158 	.word	0x20000158
 8002910:	2000753c 	.word	0x2000753c
 8002914:	20001918 	.word	0x20001918
   // note[0].tuned=7181;
  //  detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
	//	if(detune_temp>27) detune_temp=27;


		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002918:	f897 21a6 	ldrb.w	r2, [r7, #422]	; 0x1a6
 800291c:	49ae      	ldr	r1, [pc, #696]	; (8002bd8 <sampling+0xc08>)
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	440b      	add	r3, r1
 8002928:	3302      	adds	r3, #2
 800292a:	7819      	ldrb	r1, [r3, #0]
 800292c:	f897 21a6 	ldrb.w	r2, [r7, #422]	; 0x1a6
 8002930:	48a9      	ldr	r0, [pc, #676]	; (8002bd8 <sampling+0xc08>)
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4403      	add	r3, r0
 800293c:	3308      	adds	r3, #8
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	440b      	add	r3, r1
 8002942:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0

	if	   (detune_temp>=30) detune_temp=30;
 8002946:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800294a:	2b1d      	cmp	r3, #29
 800294c:	d902      	bls.n	8002954 <sampling+0x984>
 800294e:	231e      	movs	r3, #30
 8002950:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here
	note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here
 8002954:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8002958:	4aa0      	ldr	r2, [pc, #640]	; (8002bdc <sampling+0xc0c>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	4619      	mov	r1, r3
 800295e:	f897 21a6 	ldrb.w	r2, [r7, #422]	; 0x1a6
 8002962:	4b9f      	ldr	r3, [pc, #636]	; (8002be0 <sampling+0xc10>)
 8002964:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002968:	499b      	ldr	r1, [pc, #620]	; (8002bd8 <sampling+0xc08>)
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	440b      	add	r3, r1
 8002974:	330c      	adds	r3, #12
 8002976:	4602      	mov	r2, r0
 8002978:	801a      	strh	r2, [r3, #0]

		float tune_temp=note[mask_i].tuned;
 800297a:	f897 21a6 	ldrb.w	r2, [r7, #422]	; 0x1a6
 800297e:	4996      	ldr	r1, [pc, #600]	; (8002bd8 <sampling+0xc08>)
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	440b      	add	r3, r1
 800298a:	330c      	adds	r3, #12
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		note[mask_i].tuned=tune_temp*0.99;	// this works
 800299a:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 800299e:	f7fd feb1 	bl	8000704 <__aeabi_f2d>
 80029a2:	a38b      	add	r3, pc, #556	; (adr r3, 8002bd0 <sampling+0xc00>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fc1e 	bl	80001e8 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	f897 41a6 	ldrb.w	r4, [r7, #422]	; 0x1a6
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fd fefc 	bl	80007b4 <__aeabi_d2uiz>
 80029bc:	4603      	mov	r3, r0
 80029be:	b299      	uxth	r1, r3
 80029c0:	4a85      	ldr	r2, [pc, #532]	; (8002bd8 <sampling+0xc08>)
 80029c2:	4623      	mov	r3, r4
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1b1b      	subs	r3, r3, r4
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	330c      	adds	r3, #12
 80029ce:	460a      	mov	r2, r1
 80029d0:	801a      	strh	r2, [r3, #0]

		note[mask_i].position=1;  // for sample
 80029d2:	f897 21a6 	ldrb.w	r2, [r7, #422]	; 0x1a6
 80029d6:	4980      	ldr	r1, [pc, #512]	; (8002bd8 <sampling+0xc08>)
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	440b      	add	r3, r1
 80029e2:	3304      	adds	r3, #4
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
		//tuned_list[mask_i]=note[mask_i].tuned;
	//	if (note[mask_i].osc>=3)  note[mask_i].tuned=note[mask_i].tuned>>1;



		if (sampler.one_shot &(1<<mask_i))  sine_counter[4+(mask_i*3)]=0;  // clear if one shto enabled
 80029e8:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <sampling+0xc14>)
 80029ea:	78db      	ldrb	r3, [r3, #3]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 80029f2:	fa42 f303 	asr.w	r3, r2, r3
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <sampling+0xa42>
 80029fe:	f897 21a6 	ldrb.w	r2, [r7, #422]	; 0x1a6
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	4a77      	ldr	r2, [pc, #476]	; (8002be8 <sampling+0xc18>)
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002a12:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8002a16:	3301      	adds	r3, #1
 8002a18:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
 8002a1c:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	f67f af79 	bls.w	8002918 <sampling+0x948>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002a26:	4b71      	ldr	r3, [pc, #452]	; (8002bec <sampling+0xc1c>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <sampling+0xa6a>
	{
	    LFO_square_one_pulse();
 8002a32:	f000 fe73 	bl	800371c <LFO_square_one_pulse>
	//	LFO_source(); // calculate lfo maybe 8 times for now
		LFO_source_synced();
 8002a36:	f000 ff1b 	bl	8003870 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002a3a:	4b6c      	ldr	r3, [pc, #432]	; (8002bec <sampling+0xc1c>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <sampling+0xc1c>)
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	4b69      	ldr	r3, [pc, #420]	; (8002bec <sampling+0xc1c>)
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4e:	f4ff ae25 	bcc.w	800269c <sampling+0x6cc>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002a52:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <sampling+0xc20>)
 8002a54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002a58:	4611      	mov	r1, r2
 8002a5a:	2250      	movs	r2, #80	; 0x50
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f009 f9c7 	bl	800bdf0 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002a62:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <sampling+0xc08>)
 8002a64:	899b      	ldrh	r3, [r3, #12]
 8002a66:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
sample_counts_temp[31]=note[1].tuned;
 8002a6a:	4b5b      	ldr	r3, [pc, #364]	; (8002bd8 <sampling+0xc08>)
 8002a6c:	8b5b      	ldrh	r3, [r3, #26]
 8002a6e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
sample_counts_temp[32]=note[2].tuned;
 8002a72:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <sampling+0xc08>)
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
sample_counts_temp[33]=note[3].tuned;
 8002a7a:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <sampling+0xc08>)
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7e:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002a82:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <sampling+0xc14>)
 8002a84:	7b9b      	ldrb	r3, [r3, #14]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	4b55      	ldr	r3, [pc, #340]	; (8002be4 <sampling+0xc14>)
 8002a8e:	7bdb      	ldrb	r3, [r3, #15]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <sampling+0xc14>)
 8002a98:	80da      	strh	r2, [r3, #6]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002a9a:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <sampling+0xc14>)
 8002a9c:	7c1b      	ldrb	r3, [r3, #16]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <sampling+0xc14>)
 8002aa6:	7c5b      	ldrb	r3, [r3, #17]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <sampling+0xc14>)
 8002ab0:	811a      	strh	r2, [r3, #8]


	if ((sampler.one_shot&1) && (sine_counter[4]>(sampler.end-1000)) && (note[0].osc==3))   {note[0].position=0; sine_counter[4] =0;} //stop at the end
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <sampling+0xc14>)
 8002ab4:	78db      	ldrb	r3, [r3, #3]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d011      	beq.n	8002ae2 <sampling+0xb12>
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <sampling+0xc18>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	4a48      	ldr	r2, [pc, #288]	; (8002be4 <sampling+0xc14>)
 8002ac4:	8912      	ldrh	r2, [r2, #8]
 8002ac6:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d909      	bls.n	8002ae2 <sampling+0xb12>
 8002ace:	4b42      	ldr	r3, [pc, #264]	; (8002bd8 <sampling+0xc08>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d105      	bne.n	8002ae2 <sampling+0xb12>
 8002ad6:	4b40      	ldr	r3, [pc, #256]	; (8002bd8 <sampling+0xc08>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	711a      	strb	r2, [r3, #4]
 8002adc:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <sampling+0xc18>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))    note[1].position=0;
 8002ae2:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <sampling+0xc14>)
 8002ae4:	78db      	ldrb	r3, [r3, #3]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <sampling+0xb3c>
 8002aee:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <sampling+0xc18>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <sampling+0xc14>)
 8002af4:	8912      	ldrh	r2, [r2, #8]
 8002af6:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d906      	bls.n	8002b0c <sampling+0xb3c>
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <sampling+0xc08>)
 8002b00:	7b9b      	ldrb	r3, [r3, #14]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d102      	bne.n	8002b0c <sampling+0xb3c>
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <sampling+0xc08>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	749a      	strb	r2, [r3, #18]
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))    note[2].position=0;
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <sampling+0xc14>)
 8002b0e:	78db      	ldrb	r3, [r3, #3]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00f      	beq.n	8002b38 <sampling+0xb68>
 8002b18:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <sampling+0xc18>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <sampling+0xc14>)
 8002b1e:	8912      	ldrh	r2, [r2, #8]
 8002b20:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d907      	bls.n	8002b38 <sampling+0xb68>
 8002b28:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <sampling+0xc08>)
 8002b2a:	7f1b      	ldrb	r3, [r3, #28]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d103      	bne.n	8002b38 <sampling+0xb68>
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <sampling+0xc08>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))   note[3].position=0;
 8002b38:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <sampling+0xc14>)
 8002b3a:	78db      	ldrb	r3, [r3, #3]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <sampling+0xb96>
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <sampling+0xc18>)
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	4a26      	ldr	r2, [pc, #152]	; (8002be4 <sampling+0xc14>)
 8002b4a:	8912      	ldrh	r2, [r2, #8]
 8002b4c:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d908      	bls.n	8002b66 <sampling+0xb96>
 8002b54:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <sampling+0xc08>)
 8002b56:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d103      	bne.n	8002b66 <sampling+0xb96>
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <sampling+0xc08>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e


	sine_ptr_temp[0]=&sine_counter[3];
 8002b66:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b6e:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <sampling+0xc24>)
 8002b70:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002b72:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b76:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <sampling+0xc28>)
 8002b7c:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002b7e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b86:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <sampling+0xc2c>)
 8002b88:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002b8a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b92:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <sampling+0xc30>)
 8002b94:	60da      	str	r2, [r3, #12]


	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <sampling+0xc14>)
 8002b98:	7b9a      	ldrb	r2, [r3, #14]
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <sampling+0xc14>)
 8002b9c:	7c1b      	ldrb	r3, [r3, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d902      	bls.n	8002ba8 <sampling+0xbd8>
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <sampling+0xc14>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	739a      	strb	r2, [r3, #14]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <sampling+0xc14>)
 8002baa:	8b1a      	ldrh	r2, [r3, #24]
 8002bac:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <sampling+0xc14>)
 8002bae:	88db      	ldrh	r3, [r3, #6]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d203      	bcs.n	8002bbc <sampling+0xbec>
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <sampling+0xc14>)
 8002bb6:	88da      	ldrh	r2, [r3, #6]
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <sampling+0xc14>)
 8002bba:	831a      	strh	r2, [r3, #24]
	if ((sampler.ram_seq+256)>sampler.end) sampler.ram_seq=sampler.start;     // just for playback counter
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <sampling+0xc14>)
 8002bbe:	8b1b      	ldrh	r3, [r3, #24]
 8002bc0:	33ff      	adds	r3, #255	; 0xff
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <sampling+0xc14>)
 8002bc4:	8912      	ldrh	r2, [r2, #8]
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	db20      	blt.n	8002c0c <sampling+0xc3c>
 8002bca:	e01b      	b.n	8002c04 <sampling+0xc34>
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	7ae147ae 	.word	0x7ae147ae
 8002bd4:	3fefae14 	.word	0x3fefae14
 8002bd8:	20000158 	.word	0x20000158
 8002bdc:	0800c484 	.word	0x0800c484
 8002be0:	0800c4a4 	.word	0x0800c4a4
 8002be4:	20000204 	.word	0x20000204
 8002be8:	2000089c 	.word	0x2000089c
 8002bec:	20000908 	.word	0x20000908
 8002bf0:	20000438 	.word	0x20000438
 8002bf4:	200008a8 	.word	0x200008a8
 8002bf8:	200008b4 	.word	0x200008b4
 8002bfc:	200008c0 	.word	0x200008c0
 8002c00:	200008cc 	.word	0x200008cc
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <sampling+0xd00>)
 8002c06:	88da      	ldrh	r2, [r3, #6]
 8002c08:	4b31      	ldr	r3, [pc, #196]	; (8002cd0 <sampling+0xd00>)
 8002c0a:	831a      	strh	r2, [r3, #24]

	sampler.length=sampler.end-sampler.start;
 8002c0c:	4b30      	ldr	r3, [pc, #192]	; (8002cd0 <sampling+0xd00>)
 8002c0e:	891a      	ldrh	r2, [r3, #8]
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <sampling+0xd00>)
 8002c12:	88db      	ldrh	r3, [r3, #6]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <sampling+0xd00>)
 8002c1a:	815a      	strh	r2, [r3, #10]
	 if(!note[3].position )	sampler_offset=(sampler.offset&15)*1024;   // use positon to trigger
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <sampling+0xd04>)
 8002c1e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <sampling+0xc66>
 8002c26:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <sampling+0xd00>)
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	029b      	lsls	r3, r3, #10
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <sampling+0xd08>)
 8002c34:	601a      	str	r2, [r3, #0]

	if(sine_counter[9]<=sampler.start) sine_counter[9]=sampler.start;
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <sampling+0xd0c>)
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	4a25      	ldr	r2, [pc, #148]	; (8002cd0 <sampling+0xd00>)
 8002c3c:	88d2      	ldrh	r2, [r2, #6]
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d804      	bhi.n	8002c4c <sampling+0xc7c>
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <sampling+0xd00>)
 8002c44:	88db      	ldrh	r3, [r3, #6]
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <sampling+0xd0c>)
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
	 if(note[3].position)		sine_counter[9]=sine_counter[9]+256;
 8002c4c:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <sampling+0xd04>)
 8002c4e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <sampling+0xc92>
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <sampling+0xd0c>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <sampling+0xd0c>)
 8002c60:	6253      	str	r3, [r2, #36]	; 0x24

	if (sine_counter[9]>((sampler.length+sampler.start+sampler_offset)-256))   {sine_counter[9]=sampler.start+sampler_offset; }/////note[2].tuned=0;}
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <sampling+0xd0c>)
 8002c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <sampling+0xd00>)
 8002c68:	895b      	ldrh	r3, [r3, #10]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <sampling+0xd00>)
 8002c6e:	88db      	ldrh	r3, [r3, #6]
 8002c70:	440b      	add	r3, r1
 8002c72:	4619      	mov	r1, r3
 8002c74:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <sampling+0xd08>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	440b      	add	r3, r1
 8002c7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d907      	bls.n	8002c92 <sampling+0xcc2>
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <sampling+0xd00>)
 8002c84:	88db      	ldrh	r3, [r3, #6]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <sampling+0xd08>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <sampling+0xd0c>)
 8002c90:	6253      	str	r3, [r2, #36]	; 0x24

	sampler.start_ptr=&RAM[sine_counter[9]-sampler_offset];    // only 256
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <sampling+0xd0c>)
 8002c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <sampling+0xd08>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <sampling+0xd10>)
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <sampling+0xd00>)
 8002ca4:	6153      	str	r3, [r2, #20]
//	sampler_offset=(sampler.offset&15)*(sampler.length>>4);

//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002ca6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002caa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cae:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <sampling+0xd14>)
 8002cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cb4:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002cb8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	490a      	ldr	r1, [pc, #40]	; (8002ce8 <sampling+0xd18>)
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f009 f895 	bl	800bdf0 <memcpy>

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <sampling+0xd1c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]
 8002ccc:	e221      	b.n	8003112 <sampling+0x1142>
 8002cce:	bf00      	nop
 8002cd0:	20000204 	.word	0x20000204
 8002cd4:	20000158 	.word	0x20000158
 8002cd8:	2000f764 	.word	0x2000f764
 8002cdc:	2000089c 	.word	0x2000089c
 8002ce0:	20007764 	.word	0x20007764
 8002ce4:	20000488 	.word	0x20000488
 8002ce8:	20003120 	.word	0x20003120
 8002cec:	20000908 	.word	0x20000908
	i_total=i+sample_pointB;
 8002cf0:	4bcd      	ldr	r3, [pc, #820]	; (8003028 <sampling+0x1058>)
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	4bcd      	ldr	r3, [pc, #820]	; (800302c <sampling+0x105c>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
	sampling_position=(i>>6);
 8002cfe:	4bca      	ldr	r3, [pc, #808]	; (8003028 <sampling+0x1058>)
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4bc9      	ldr	r3, [pc, #804]	; (8003030 <sampling+0x1060>)
 8002d0a:	701a      	strb	r2, [r3, #0]
	if ((tempo_mod==511 )   && (sampler.ram_seq==0))   { next_isr=next_isr&4080; tempo_count=i; }   //  this should sync to sample loop start  //
 8002d0c:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002d10:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10e      	bne.n	8002d36 <sampling+0xd66>
 8002d18:	4bc6      	ldr	r3, [pc, #792]	; (8003034 <sampling+0x1064>)
 8002d1a:	8b1b      	ldrh	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <sampling+0xd66>
 8002d20:	4bc5      	ldr	r3, [pc, #788]	; (8003038 <sampling+0x1068>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4bc3      	ldr	r3, [pc, #780]	; (8003038 <sampling+0x1068>)
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	4bbe      	ldr	r3, [pc, #760]	; (8003028 <sampling+0x1058>)
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	4bc2      	ldr	r3, [pc, #776]	; (800303c <sampling+0x106c>)
 8002d34:	801a      	strh	r2, [r3, #0]

	sample_adc=input_holder[i>>1];
 8002d36:	4bbc      	ldr	r3, [pc, #752]	; (8003028 <sampling+0x1058>)
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4bbf      	ldr	r3, [pc, #764]	; (8003040 <sampling+0x1070>)
 8002d42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	sample_adc=(sample_adc-2040)<<11;
 8002d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d4e:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002d52:	02db      	lsls	r3, r3, #11
 8002d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	ram_temp=((RAM[sampler.ram_seq])); // grab data   , half rate
 8002d58:	4bb6      	ldr	r3, [pc, #728]	; (8003034 <sampling+0x1064>)
 8002d5a:	8b1b      	ldrh	r3, [r3, #24]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4bb9      	ldr	r3, [pc, #740]	; (8003044 <sampling+0x1074>)
 8002d60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	ram_temp=(ram_temp-2040)<<11;    // will clip sometimes
 8002d68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d6c:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002d70:	02db      	lsls	r3, r3, #11
 8002d72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	if(i&1)  sampler.ram_seq++;
 8002d76:	4bac      	ldr	r3, [pc, #688]	; (8003028 <sampling+0x1058>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <sampling+0xdbe>
 8002d82:	4bac      	ldr	r3, [pc, #688]	; (8003034 <sampling+0x1064>)
 8002d84:	8b1b      	ldrh	r3, [r3, #24]
 8002d86:	3301      	adds	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4baa      	ldr	r3, [pc, #680]	; (8003034 <sampling+0x1064>)
 8002d8c:	831a      	strh	r2, [r3, #24]

	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002d8e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4ba4      	ldr	r3, [pc, #656]	; (8003028 <sampling+0x1058>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d10f      	bne.n	8002dbc <sampling+0xdec>
 8002d9c:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8002da0:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
	sample_counts_temp[21]=sample_counts_temp[31];
 8002da4:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8002da8:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
	sample_counts_temp[22]=sample_counts_temp[32];
 8002dac:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8002db0:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
	sample_counts_temp[23]=sample_counts_temp[33];
 8002db4:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8002db8:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	}

	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 8002dbc:	4b9a      	ldr	r3, [pc, #616]	; (8003028 <sampling+0x1058>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 8095 	bne.w	8002ef4 <sampling+0xf24>
 8002dca:	f7fe fbbb 	bl	8001544 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002dce:	4b9e      	ldr	r3, [pc, #632]	; (8003048 <sampling+0x1078>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fc84 	bl	80006e0 <__aeabi_i2d>
 8002dd8:	a38f      	add	r3, pc, #572	; (adr r3, 8003018 <sampling+0x1048>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fa03 	bl	80001e8 <__aeabi_dmul>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd fd03 	bl	80007f4 <__aeabi_d2f>
 8002dee:	4603      	mov	r3, r0
 8002df0:	ee00 3a10 	vmov	s0, r3
 8002df4:	f008 ff8a 	bl	800bd0c <arm_sin_f32>
 8002df8:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	; (8003030 <sampling+0x1060>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e04:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0c:	4a8f      	ldr	r2, [pc, #572]	; (800304c <sampling+0x107c>)
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002e16:	4b8c      	ldr	r3, [pc, #560]	; (8003048 <sampling+0x1078>)
 8002e18:	7a1b      	ldrb	r3, [r3, #8]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd fc60 	bl	80006e0 <__aeabi_i2d>
 8002e20:	a37f      	add	r3, pc, #508	; (adr r3, 8003020 <sampling+0x1050>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f7fd f9df 	bl	80001e8 <__aeabi_dmul>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fd fcdf 	bl	80007f4 <__aeabi_d2f>
 8002e36:	4603      	mov	r3, r0
 8002e38:	ee00 3a10 	vmov	s0, r3
 8002e3c:	f008 ff66 	bl	800bd0c <arm_sin_f32>
 8002e40:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002e44:	4b7a      	ldr	r3, [pc, #488]	; (8003030 <sampling+0x1060>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e4c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e54:	4a7d      	ldr	r2, [pc, #500]	; (800304c <sampling+0x107c>)
 8002e56:	3309      	adds	r3, #9
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002e60:	4b79      	ldr	r3, [pc, #484]	; (8003048 <sampling+0x1078>)
 8002e62:	7c1b      	ldrb	r3, [r3, #16]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fc3b 	bl	80006e0 <__aeabi_i2d>
 8002e6a:	a36d      	add	r3, pc, #436	; (adr r3, 8003020 <sampling+0x1050>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	f7fd f9ba 	bl	80001e8 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f7fd fcba 	bl	80007f4 <__aeabi_d2f>
 8002e80:	4603      	mov	r3, r0
 8002e82:	ee00 3a10 	vmov	s0, r3
 8002e86:	f008 ff41 	bl	800bd0c <arm_sin_f32>
 8002e8a:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002e8e:	4b68      	ldr	r3, [pc, #416]	; (8003030 <sampling+0x1060>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e96:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9e:	4a6b      	ldr	r2, [pc, #428]	; (800304c <sampling+0x107c>)
 8002ea0:	3312      	adds	r3, #18
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002eaa:	4b67      	ldr	r3, [pc, #412]	; (8003048 <sampling+0x1078>)
 8002eac:	7e1b      	ldrb	r3, [r3, #24]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fc16 	bl	80006e0 <__aeabi_i2d>
 8002eb4:	a35a      	add	r3, pc, #360	; (adr r3, 8003020 <sampling+0x1050>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd f995 	bl	80001e8 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7fd fc95 	bl	80007f4 <__aeabi_d2f>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	ee00 3a10 	vmov	s0, r3
 8002ed0:	f008 ff1c 	bl	800bd0c <arm_sin_f32>
 8002ed4:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002ed8:	4b55      	ldr	r3, [pc, #340]	; (8003030 <sampling+0x1060>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ee0:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <sampling+0x107c>)
 8002eea:	331b      	adds	r3, #27
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  // normal adder full volume
 8002ef4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002ef8:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8002efc:	4413      	add	r3, r2
 8002efe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 8002f02:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002f06:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 8002f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f14:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8002f18:	4413      	add	r3, r2
 8002f1a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 8002f1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f22:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8002f26:	4413      	add	r3, r2
 8002f28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

			if (sample_accus[0]>524287) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002f2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f34:	db04      	blt.n	8002f40 <sampling+0xf70>
 8002f36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f3a:	425b      	negs	r3, r3
 8002f3c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (sample_accus[1]>524287) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
 8002f40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002f44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f48:	db04      	blt.n	8002f54 <sampling+0xf84>
 8002f4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002f4e:	425b      	negs	r3, r3
 8002f50:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			if (sample_accus[2]>524287) sample_accus[2] =-0-sample_accus[2] ; //
 8002f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f5c:	db04      	blt.n	8002f68 <sampling+0xf98>
 8002f5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f62:	425b      	negs	r3, r3
 8002f64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			if (sample_accus[3]>524287) sample_accus[3] =-0-sample_accus[3] ; //  6 cycles
 8002f68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f70:	db04      	blt.n	8002f7c <sampling+0xfac>
 8002f72:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f76:	425b      	negs	r3, r3
 8002f78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
//		if (sample_accus[0]>(1048575)) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
//		if (sample_accus[1]>1048575) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
//		if (sample_accus[2]>1048575) sample_accus[2] =-0-sample_accus[2] ; //
//		if (sample_accus[3]>1048575) sample_accus[3] =-0-sample_accus[3] ; //

	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8002f7c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bfb8      	it	lt
 8002f84:	425b      	neglt	r3, r3
 8002f86:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8002f90:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bfb8      	it	lt
 8002f98:	425b      	neglt	r3, r3
 8002f9a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8002fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bfb8      	it	lt
 8002fac:	425b      	neglt	r3, r3
 8002fae:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8002fb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bfb8      	it	lt
 8002fc0:	425b      	neglt	r3, r3
 8002fc2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128



					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 8002fcc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002fd0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <sampling+0x1080>)
 8002fda:	79d2      	ldrb	r2, [r2, #7]
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp2=(sample_temp1)>>2;
 8002fe4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002fe8:	109b      	asrs	r3, r3, #2
 8002fea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8002fee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ff2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <sampling+0x1080>)
 8002ffc:	7d52      	ldrb	r2, [r2, #21]
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp3=sample_temp1>>2; // 20+8
 8003006:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800300a:	109b      	asrs	r3, r3, #2
 800300c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8003010:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003014:	e01e      	b.n	8003054 <sampling+0x1084>
 8003016:	bf00      	nop
 8003018:	f9378ee3 	.word	0xf9378ee3
 800301c:	3f793a2d 	.word	0x3f793a2d
 8003020:	bc6a7efa 	.word	0xbc6a7efa
 8003024:	3f789374 	.word	0x3f789374
 8003028:	20000908 	.word	0x20000908
 800302c:	20000906 	.word	0x20000906
 8003030:	20005534 	.word	0x20005534
 8003034:	20000204 	.word	0x20000204
 8003038:	2000311c 	.word	0x2000311c
 800303c:	20003148 	.word	0x20003148
 8003040:	20003b04 	.word	0x20003b04
 8003044:	20007764 	.word	0x20007764
 8003048:	200001e4 	.word	0x200001e4
 800304c:	200031d8 	.word	0x200031d8
 8003050:	20000158 	.word	0x20000158
 8003054:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a3e      	ldr	r2, [pc, #248]	; (8003158 <sampling+0x1188>)
 800305e:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 800306a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800306e:	109b      	asrs	r3, r3, #2
 8003070:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

					if (note[3].position) sample_Accu[9]=((*(sampler.start_ptr+(i>>1))-2040)<<10)+(sample_Accu[9]>>1); // bit hot , also  add avr
 8003074:	4b38      	ldr	r3, [pc, #224]	; (8003158 <sampling+0x1188>)
 8003076:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800307a:	2b00      	cmp	r3, #0
 800307c:	d011      	beq.n	80030a2 <sampling+0x10d2>
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <sampling+0x118c>)
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	4b37      	ldr	r3, [pc, #220]	; (8003160 <sampling+0x1190>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8003094:	029a      	lsls	r2, r3, #10
 8003096:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800309a:	105b      	asrs	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140


					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 80030a2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80030a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <sampling+0x1188>)
 80030b0:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp5 =sample_temp1>>2;
 80030bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030c0:	109b      	asrs	r3, r3, #2
 80030c2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <sampling+0x1190>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	4619      	mov	r1, r3
 80030cc:	4a25      	ldr	r2, [pc, #148]	; (8003164 <sampling+0x1194>)
 80030ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <sampling+0x1190>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	4619      	mov	r1, r3
 80030dc:	4a22      	ldr	r2, [pc, #136]	; (8003168 <sampling+0x1198>)
 80030de:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80030e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 80030e6:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <sampling+0x1190>)
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	4a1f      	ldr	r2, [pc, #124]	; (800316c <sampling+0x119c>)
 80030ee:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80030f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <sampling+0x1190>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	4619      	mov	r1, r3
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <sampling+0x11a0>)
 80030fe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003102:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <sampling+0x1190>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <sampling+0x1190>)
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <sampling+0x1190>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311a:	f4ff ade9 	bcc.w	8002cf0 <sampling+0xd20>
	} // end of osc , doing some sound



memcpy(&sample_accus_hold,sample_accus,16);
 800311e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8003122:	2210      	movs	r2, #16
 8003124:	4619      	mov	r1, r3
 8003126:	4813      	ldr	r0, [pc, #76]	; (8003174 <sampling+0x11a4>)
 8003128:	f008 fe62 	bl	800bdf0 <memcpy>
memcpy(&sample_accu_counter,accu_count,8);   // copy back
 800312c:	4912      	ldr	r1, [pc, #72]	; (8003178 <sampling+0x11a8>)
 800312e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003132:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8003136:	460b      	mov	r3, r1
 8003138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800313c:	e883 0003 	stmia.w	r3, {r0, r1}
memcpy(&sample_counts_holder,sample_counts_temp,80);
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <sampling+0x11ac>)
 8003142:	4618      	mov	r0, r3
 8003144:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003148:	2250      	movs	r2, #80	; 0x50
 800314a:	4619      	mov	r1, r3
 800314c:	f008 fe50 	bl	800bdf0 <memcpy>
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <sampling+0x1190>)
 8003152:	2200      	movs	r2, #0
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	e2b0      	b.n	80036ba <sampling+0x16ea>
 8003158:	20000158 	.word	0x20000158
 800315c:	20000204 	.word	0x20000204
 8003160:	20000908 	.word	0x20000908
 8003164:	20006d38 	.word	0x20006d38
 8003168:	20005538 	.word	0x20005538
 800316c:	20005d38 	.word	0x20005d38
 8003170:	20006538 	.word	0x20006538
 8003174:	20003120 	.word	0x20003120
 8003178:	20000488 	.word	0x20000488
 800317c:	20000438 	.word	0x20000438
				i_total=i+sample_pointB;
 8003180:	4bbd      	ldr	r3, [pc, #756]	; (8003478 <sampling+0x14a8>)
 8003182:	881a      	ldrh	r2, [r3, #0]
 8003184:	4bbd      	ldr	r3, [pc, #756]	; (800347c <sampling+0x14ac>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	4413      	add	r3, r2
 800318a:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c

			sampling_position=(i>>6);
 800318e:	4bba      	ldr	r3, [pc, #744]	; (8003478 <sampling+0x14a8>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	b29b      	uxth	r3, r3
 8003196:	b2da      	uxtb	r2, r3
 8003198:	4bb9      	ldr	r3, [pc, #740]	; (8003480 <sampling+0x14b0>)
 800319a:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 800319c:	4bb6      	ldr	r3, [pc, #728]	; (8003478 <sampling+0x14a8>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80031aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80031ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b2:	4ab1      	ldr	r2, [pc, #708]	; (8003478 <sampling+0x14a8>)
 80031b4:	8812      	ldrh	r2, [r2, #0]
 80031b6:	f002 021f 	and.w	r2, r2, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10f      	bne.n	80031e4 <sampling+0x1214>
 80031c4:	4baf      	ldr	r3, [pc, #700]	; (8003484 <sampling+0x14b4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	711a      	strb	r2, [r3, #4]
 80031ca:	4baf      	ldr	r3, [pc, #700]	; (8003488 <sampling+0x14b8>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4bad      	ldr	r3, [pc, #692]	; (8003488 <sampling+0x14b8>)
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	4bac      	ldr	r3, [pc, #688]	; (8003488 <sampling+0x14b8>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4ba9      	ldr	r3, [pc, #676]	; (8003488 <sampling+0x14b8>)
 80031e2:	801a      	strh	r2, [r3, #0]

			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 80031e4:	4ba4      	ldr	r3, [pc, #656]	; (8003478 <sampling+0x14a8>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4ba8      	ldr	r3, [pc, #672]	; (800348c <sampling+0x14bc>)
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80031f4:	4ba0      	ldr	r3, [pc, #640]	; (8003478 <sampling+0x14a8>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003200:	49a3      	ldr	r1, [pc, #652]	; (8003490 <sampling+0x14c0>)
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 8003206:	4b9c      	ldr	r3, [pc, #624]	; (8003478 <sampling+0x14a8>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4ba1      	ldr	r3, [pc, #644]	; (8003494 <sampling+0x14c4>)
 800320e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003212:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003216:	4b98      	ldr	r3, [pc, #608]	; (8003478 <sampling+0x14a8>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003222:	499d      	ldr	r1, [pc, #628]	; (8003498 <sampling+0x14c8>)
 8003224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003228:	4b93      	ldr	r3, [pc, #588]	; (8003478 <sampling+0x14a8>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	4b9b      	ldr	r3, [pc, #620]	; (800349c <sampling+0x14cc>)
 8003230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003234:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003238:	4b8f      	ldr	r3, [pc, #572]	; (8003478 <sampling+0x14a8>)
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003244:	4996      	ldr	r1, [pc, #600]	; (80034a0 <sampling+0x14d0>)
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 800324a:	4b8b      	ldr	r3, [pc, #556]	; (8003478 <sampling+0x14a8>)
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b94      	ldr	r3, [pc, #592]	; (80034a4 <sampling+0x14d4>)
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800325a:	4b87      	ldr	r3, [pc, #540]	; (8003478 <sampling+0x14a8>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003266:	4990      	ldr	r1, [pc, #576]	; (80034a8 <sampling+0x14d8>)
 8003268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 800326c:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <sampling+0x14dc>)
 800326e:	789b      	ldrb	r3, [r3, #2]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <sampling+0x12ca>
 8003274:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003278:	105a      	asrs	r2, r3, #1
 800327a:	4b7f      	ldr	r3, [pc, #508]	; (8003478 <sampling+0x14a8>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4b8a      	ldr	r3, [pc, #552]	; (80034ac <sampling+0x14dc>)
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	1acb      	subs	r3, r1, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	4980      	ldr	r1, [pc, #512]	; (8003490 <sampling+0x14c0>)
 800328e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003292:	105b      	asrs	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 800329a:	4b84      	ldr	r3, [pc, #528]	; (80034ac <sampling+0x14dc>)
 800329c:	7a9b      	ldrb	r3, [r3, #10]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d012      	beq.n	80032c8 <sampling+0x12f8>
 80032a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032a6:	105a      	asrs	r2, r3, #1
 80032a8:	4b73      	ldr	r3, [pc, #460]	; (8003478 <sampling+0x14a8>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	4b7f      	ldr	r3, [pc, #508]	; (80034ac <sampling+0x14dc>)
 80032b0:	7a9b      	ldrb	r3, [r3, #10]
 80032b2:	1acb      	subs	r3, r1, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	4977      	ldr	r1, [pc, #476]	; (8003498 <sampling+0x14c8>)
 80032bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032c0:	105b      	asrs	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 80032c8:	4b78      	ldr	r3, [pc, #480]	; (80034ac <sampling+0x14dc>)
 80032ca:	7c9b      	ldrb	r3, [r3, #18]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <sampling+0x1326>
 80032d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80032d4:	105a      	asrs	r2, r3, #1
 80032d6:	4b68      	ldr	r3, [pc, #416]	; (8003478 <sampling+0x14a8>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4b73      	ldr	r3, [pc, #460]	; (80034ac <sampling+0x14dc>)
 80032de:	7c9b      	ldrb	r3, [r3, #18]
 80032e0:	1acb      	subs	r3, r1, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	496d      	ldr	r1, [pc, #436]	; (80034a0 <sampling+0x14d0>)
 80032ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032ee:	105b      	asrs	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 80032f6:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <sampling+0x14dc>)
 80032f8:	7e9b      	ldrb	r3, [r3, #26]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <sampling+0x1354>
 80032fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003302:	105a      	asrs	r2, r3, #1
 8003304:	4b5c      	ldr	r3, [pc, #368]	; (8003478 <sampling+0x14a8>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	4b68      	ldr	r3, [pc, #416]	; (80034ac <sampling+0x14dc>)
 800330c:	7e9b      	ldrb	r3, [r3, #26]
 800330e:	1acb      	subs	r3, r1, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	4964      	ldr	r1, [pc, #400]	; (80034a8 <sampling+0x14d8>)
 8003318:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800331c:	105b      	asrs	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 8003324:	4b54      	ldr	r3, [pc, #336]	; (8003478 <sampling+0x14a8>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <sampling+0x1364>
 8003330:	f000 fb96 	bl	8003a60 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003334:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003340:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <sampling+0x14e0>)
 8003342:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8003346:	4b5a      	ldr	r3, [pc, #360]	; (80034b0 <sampling+0x14e0>)
 8003348:	ed93 7a01 	vldr	s14, [r3, #4]
 800334c:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <sampling+0x14e0>)
 800334e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003352:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <sampling+0x14e4>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <sampling+0x14e0>)
 8003362:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8003366:	4b52      	ldr	r3, [pc, #328]	; (80034b0 <sampling+0x14e0>)
 8003368:	ed93 7a01 	vldr	s14, [r3, #4]
 800336c:	4b52      	ldr	r3, [pc, #328]	; (80034b8 <sampling+0x14e8>)
 800336e:	edd3 7a00 	vldr	s15, [r3]
 8003372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003376:	4b4e      	ldr	r3, [pc, #312]	; (80034b0 <sampling+0x14e0>)
 8003378:	edd3 6a02 	vldr	s13, [r3, #8]
 800337c:	4b4e      	ldr	r3, [pc, #312]	; (80034b8 <sampling+0x14e8>)
 800337e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338a:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <sampling+0x14e0>)
 800338c:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 8003390:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <sampling+0x14e0>)
 8003392:	ed93 7a02 	vldr	s14, [r3, #8]
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <sampling+0x14e8>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a0:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <sampling+0x14e0>)
 80033a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80033a6:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <sampling+0x14e8>)
 80033a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b4:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <sampling+0x14e0>)
 80033b6:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <sampling+0x14e0>)
 80033bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80033c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033c4:	ee17 3a90 	vmov	r3, s15
 80033c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 80033cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d8:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <sampling+0x14e0>)
 80033da:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <sampling+0x14e0>)
 80033e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80033e4:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <sampling+0x14e0>)
 80033e6:	edd3 6a06 	vldr	s13, [r3, #24]
 80033ea:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <sampling+0x14e4>)
 80033ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f8:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <sampling+0x14e0>)
 80033fa:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <sampling+0x14e0>)
 8003400:	ed93 7a04 	vldr	s14, [r3, #16]
 8003404:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <sampling+0x14e8>)
 8003406:	edd3 7a02 	vldr	s15, [r3, #8]
 800340a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800340e:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <sampling+0x14e0>)
 8003410:	edd3 6a05 	vldr	s13, [r3, #20]
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <sampling+0x14e8>)
 8003416:	edd3 7a03 	vldr	s15, [r3, #12]
 800341a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <sampling+0x14e0>)
 8003424:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <sampling+0x14e0>)
 800342a:	ed93 7a05 	vldr	s14, [r3, #20]
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <sampling+0x14e8>)
 8003430:	edd3 7a02 	vldr	s15, [r3, #8]
 8003434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <sampling+0x14e0>)
 800343a:	edd3 6a06 	vldr	s13, [r3, #24]
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <sampling+0x14e8>)
 8003440:	edd3 7a03 	vldr	s15, [r3, #12]
 8003444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <sampling+0x14e0>)
 800344e:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <sampling+0x14e0>)
 8003454:	edd3 7a06 	vldr	s15, [r3, #24]
 8003458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800345c:	ee17 3a90 	vmov	r3, s15
 8003460:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

		filter_accus[7]=sample_Accu[2];
 8003464:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <sampling+0x14e0>)
 8003472:	edc3 7a07 	vstr	s15, [r3, #28]
 8003476:	e021      	b.n	80034bc <sampling+0x14ec>
 8003478:	20000908 	.word	0x20000908
 800347c:	20000906 	.word	0x20000906
 8003480:	20005534 	.word	0x20005534
 8003484:	200042cc 	.word	0x200042cc
 8003488:	20003268 	.word	0x20003268
 800348c:	20006d38 	.word	0x20006d38
 8003490:	2001077c 	.word	0x2001077c
 8003494:	20005538 	.word	0x20005538
 8003498:	200107fc 	.word	0x200107fc
 800349c:	20005d38 	.word	0x20005d38
 80034a0:	2001087c 	.word	0x2001087c
 80034a4:	20006538 	.word	0x20006538
 80034a8:	200108fc 	.word	0x200108fc
 80034ac:	200001e4 	.word	0x200001e4
 80034b0:	2000317c 	.word	0x2000317c
 80034b4:	20003168 	.word	0x20003168
 80034b8:	200031b8 	.word	0x200031b8
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80034bc:	4b8b      	ldr	r3, [pc, #556]	; (80036ec <sampling+0x171c>)
 80034be:	ed93 7a07 	vldr	s14, [r3, #28]
 80034c2:	4b8a      	ldr	r3, [pc, #552]	; (80036ec <sampling+0x171c>)
 80034c4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80034c8:	4b89      	ldr	r3, [pc, #548]	; (80036f0 <sampling+0x1720>)
 80034ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80034ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d6:	4b85      	ldr	r3, [pc, #532]	; (80036ec <sampling+0x171c>)
 80034d8:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80034dc:	4b83      	ldr	r3, [pc, #524]	; (80036ec <sampling+0x171c>)
 80034de:	ed93 7a07 	vldr	s14, [r3, #28]
 80034e2:	4b84      	ldr	r3, [pc, #528]	; (80036f4 <sampling+0x1724>)
 80034e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80034e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ec:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <sampling+0x171c>)
 80034ee:	edd3 6a08 	vldr	s13, [r3, #32]
 80034f2:	4b80      	ldr	r3, [pc, #512]	; (80036f4 <sampling+0x1724>)
 80034f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80034f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003500:	4b7a      	ldr	r3, [pc, #488]	; (80036ec <sampling+0x171c>)
 8003502:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003506:	4b79      	ldr	r3, [pc, #484]	; (80036ec <sampling+0x171c>)
 8003508:	ed93 7a08 	vldr	s14, [r3, #32]
 800350c:	4b79      	ldr	r3, [pc, #484]	; (80036f4 <sampling+0x1724>)
 800350e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003516:	4b75      	ldr	r3, [pc, #468]	; (80036ec <sampling+0x171c>)
 8003518:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800351c:	4b75      	ldr	r3, [pc, #468]	; (80036f4 <sampling+0x1724>)
 800351e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352a:	4b70      	ldr	r3, [pc, #448]	; (80036ec <sampling+0x171c>)
 800352c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 8003530:	4b6e      	ldr	r3, [pc, #440]	; (80036ec <sampling+0x171c>)
 8003532:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353a:	ee17 3a90 	vmov	r3, s15
 800353e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				filter_accus[10]=sample_Accu[3];
 8003542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354e:	4b67      	ldr	r3, [pc, #412]	; (80036ec <sampling+0x171c>)
 8003550:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 8003554:	4b65      	ldr	r3, [pc, #404]	; (80036ec <sampling+0x171c>)
 8003556:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800355a:	4b64      	ldr	r3, [pc, #400]	; (80036ec <sampling+0x171c>)
 800355c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003560:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <sampling+0x1720>)
 8003562:	edd3 7a03 	vldr	s15, [r3, #12]
 8003566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800356a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800356e:	4b5f      	ldr	r3, [pc, #380]	; (80036ec <sampling+0x171c>)
 8003570:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 8003574:	4b5d      	ldr	r3, [pc, #372]	; (80036ec <sampling+0x171c>)
 8003576:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800357a:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <sampling+0x1724>)
 800357c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <sampling+0x171c>)
 8003586:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800358a:	4b5a      	ldr	r3, [pc, #360]	; (80036f4 <sampling+0x1724>)
 800358c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003598:	4b54      	ldr	r3, [pc, #336]	; (80036ec <sampling+0x171c>)
 800359a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 800359e:	4b53      	ldr	r3, [pc, #332]	; (80036ec <sampling+0x171c>)
 80035a0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80035a4:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <sampling+0x1724>)
 80035a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80035aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ae:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <sampling+0x171c>)
 80035b0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80035b4:	4b4f      	ldr	r3, [pc, #316]	; (80036f4 <sampling+0x1724>)
 80035b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80035ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c2:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <sampling+0x171c>)
 80035c4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80035c8:	4b48      	ldr	r3, [pc, #288]	; (80036ec <sampling+0x171c>)
 80035ca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80035ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d2:	ee17 3a90 	vmov	r3, s15
 80035d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80035e0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80035e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 80035e8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80035ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80035f0:	4413      	add	r3, r2
 80035f2:	141b      	asrs	r3, r3, #16
 80035f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 80035f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80035fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003600:	4413      	add	r3, r2
 8003602:	141b      	asrs	r3, r3, #16
 8003604:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <sampling+0x1728>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2bc7      	cmp	r3, #199	; 0xc7
 800360e:	d005      	beq.n	800361c <sampling+0x164c>
 8003610:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <sampling+0x1728>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <sampling+0x1728>)
 800361a:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 800361c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003624:	db0a      	blt.n	800363c <sampling+0x166c>
 8003626:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800362a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800362e:	4b33      	ldr	r3, [pc, #204]	; (80036fc <sampling+0x172c>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4b31      	ldr	r3, [pc, #196]	; (80036fc <sampling+0x172c>)
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <sampling+0x167c>
 800363c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003640:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003644:	dc02      	bgt.n	800364c <sampling+0x167c>
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <sampling+0x1730>)
 8003648:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 800364c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003654:	db0a      	blt.n	800366c <sampling+0x169c>
 8003656:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800365a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <sampling+0x172c>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b25      	ldr	r3, [pc, #148]	; (80036fc <sampling+0x172c>)
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e007      	b.n	800367c <sampling+0x16ac>
 800366c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003670:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003674:	dc02      	bgt.n	800367c <sampling+0x16ac>
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <sampling+0x1730>)
 8003678:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 800367c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003680:	b29a      	uxth	r2, r3
 8003682:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800368c:	b291      	uxth	r1, r2
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <sampling+0x1734>)
 8003690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 8003694:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8003698:	b29a      	uxth	r2, r3
 800369a:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	3301      	adds	r3, #1
 80036a2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80036a6:	b291      	uxth	r1, r2
 80036a8:	4a16      	ldr	r2, [pc, #88]	; (8003704 <sampling+0x1734>)
 80036aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <sampling+0x1738>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <sampling+0x1738>)
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <sampling+0x1738>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c2:	f4ff ad5d 	bcc.w	8003180 <sampling+0x11b0>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <sampling+0x173c>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <sampling+0x170a>
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <sampling+0x1740>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <sampling+0x1740>)
 80036d8:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <sampling+0x1744>)
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <sampling+0x1748>)
 80036e0:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 80036e2:	bf00      	nop
 80036e4:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdb0      	pop	{r4, r5, r7, pc}
 80036ec:	2000317c 	.word	0x2000317c
 80036f0:	20003168 	.word	0x20003168
 80036f4:	200031b8 	.word	0x200031b8
 80036f8:	20003138 	.word	0x20003138
 80036fc:	20007538 	.word	0x20007538
 8003700:	fffffc01 	.word	0xfffffc01
 8003704:	2000090c 	.word	0x2000090c
 8003708:	20000908 	.word	0x20000908
 800370c:	2000014e 	.word	0x2000014e
 8003710:	20003f1e 	.word	0x20003f1e
 8003714:	20003f1c 	.word	0x20003f1c
 8003718:	20003f18 	.word	0x20003f18

0800371c <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 800371c:	b490      	push	{r4, r7}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos ;
 8003722:	4b50      	ldr	r3, [pc, #320]	; (8003864 <LFO_square_one_pulse+0x148>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	70fb      	strb	r3, [r7, #3]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8003728:	2307      	movs	r3, #7
 800372a:	71bb      	strb	r3, [r7, #6]
	uint8_t lfo_c ;
	uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t delay;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 800372c:	2300      	movs	r3, #0
 800372e:	717b      	strb	r3, [r7, #5]
 8003730:	e08e      	b.n	8003850 <LFO_square_one_pulse+0x134>

	    pulse_length=LFO_square[lfo_c].rate;
 8003732:	797a      	ldrb	r2, [r7, #5]
 8003734:	494c      	ldr	r1, [pc, #304]	; (8003868 <LFO_square_one_pulse+0x14c>)
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	803b      	strh	r3, [r7, #0]
	    if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
 8003744:	797a      	ldrb	r2, [r7, #5]
 8003746:	4948      	ldr	r1, [pc, #288]	; (8003868 <LFO_square_one_pulse+0x14c>)
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3303      	adds	r3, #3
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b07      	cmp	r3, #7
 8003758:	d80a      	bhi.n	8003770 <LFO_square_one_pulse+0x54>
 800375a:	797a      	ldrb	r2, [r7, #5]
 800375c:	4942      	ldr	r1, [pc, #264]	; (8003868 <LFO_square_one_pulse+0x14c>)
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3303      	adds	r3, #3
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	713b      	strb	r3, [r7, #4]
 800376e:	e001      	b.n	8003774 <LFO_square_one_pulse+0x58>
 8003770:	2307      	movs	r3, #7
 8003772:	713b      	strb	r3, [r7, #4]

	    if (pulse_length<120)  {pulse_low=pulse_length-56;seq_div=63;}  // This is the end
 8003774:	883b      	ldrh	r3, [r7, #0]
 8003776:	2b77      	cmp	r3, #119	; 0x77
 8003778:	d805      	bhi.n	8003786 <LFO_square_one_pulse+0x6a>
 800377a:	883b      	ldrh	r3, [r7, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	3b38      	subs	r3, #56	; 0x38
 8003780:	71fb      	strb	r3, [r7, #7]
 8003782:	233f      	movs	r3, #63	; 0x3f
 8003784:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<56)  {pulse_low=pulse_length-24;seq_div=31;}
 8003786:	883b      	ldrh	r3, [r7, #0]
 8003788:	2b37      	cmp	r3, #55	; 0x37
 800378a:	d805      	bhi.n	8003798 <LFO_square_one_pulse+0x7c>
 800378c:	883b      	ldrh	r3, [r7, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3b18      	subs	r3, #24
 8003792:	71fb      	strb	r3, [r7, #7]
 8003794:	231f      	movs	r3, #31
 8003796:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<24)  {pulse_low=pulse_length-8; seq_div=15;}
 8003798:	883b      	ldrh	r3, [r7, #0]
 800379a:	2b17      	cmp	r3, #23
 800379c:	d805      	bhi.n	80037aa <LFO_square_one_pulse+0x8e>
 800379e:	883b      	ldrh	r3, [r7, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3b08      	subs	r3, #8
 80037a4:	71fb      	strb	r3, [r7, #7]
 80037a6:	230f      	movs	r3, #15
 80037a8:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<8)  {pulse_low=pulse_length; seq_div=7;}
 80037aa:	883b      	ldrh	r3, [r7, #0]
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	d803      	bhi.n	80037b8 <LFO_square_one_pulse+0x9c>
 80037b0:	883b      	ldrh	r3, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	2307      	movs	r3, #7
 80037b6:	71bb      	strb	r3, [r7, #6]

	    delay=(delay*seq_div)>>3;   // this is the start
 80037b8:	793b      	ldrb	r3, [r7, #4]
 80037ba:	79ba      	ldrb	r2, [r7, #6]
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	10db      	asrs	r3, r3, #3
 80037c2:	713b      	strb	r3, [r7, #4]

	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=delay))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	79bb      	ldrb	r3, [r7, #6]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	79fa      	ldrb	r2, [r7, #7]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d321      	bcc.n	8003816 <LFO_square_one_pulse+0xfa>
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	79bb      	ldrb	r3, [r7, #6]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	793a      	ldrb	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d81a      	bhi.n	8003816 <LFO_square_one_pulse+0xfa>
 80037e0:	797a      	ldrb	r2, [r7, #5]
 80037e2:	4921      	ldr	r1, [pc, #132]	; (8003868 <LFO_square_one_pulse+0x14c>)
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3301      	adds	r3, #1
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	797a      	ldrb	r2, [r7, #5]
 80037f6:	491d      	ldr	r1, [pc, #116]	; (800386c <LFO_square_one_pulse+0x150>)
 80037f8:	7809      	ldrb	r1, [r1, #0]
 80037fa:	460c      	mov	r4, r1
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	b298      	uxth	r0, r3
 8003800:	4919      	ldr	r1, [pc, #100]	; (8003868 <LFO_square_one_pulse+0x14c>)
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4423      	add	r3, r4
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	440b      	add	r3, r1
 8003810:	4602      	mov	r2, r0
 8003812:	809a      	strh	r2, [r3, #4]
 8003814:	e019      	b.n	800384a <LFO_square_one_pulse+0x12e>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8003816:	797a      	ldrb	r2, [r7, #5]
 8003818:	4913      	ldr	r1, [pc, #76]	; (8003868 <LFO_square_one_pulse+0x14c>)
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3302      	adds	r3, #2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	797a      	ldrb	r2, [r7, #5]
 800382c:	490f      	ldr	r1, [pc, #60]	; (800386c <LFO_square_one_pulse+0x150>)
 800382e:	7809      	ldrb	r1, [r1, #0]
 8003830:	460c      	mov	r4, r1
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	b298      	uxth	r0, r3
 8003836:	490c      	ldr	r1, [pc, #48]	; (8003868 <LFO_square_one_pulse+0x14c>)
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4423      	add	r3, r4
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	440b      	add	r3, r1
 8003846:	4602      	mov	r2, r0
 8003848:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 800384a:	797b      	ldrb	r3, [r7, #5]
 800384c:	3301      	adds	r3, #1
 800384e:	717b      	strb	r3, [r7, #5]
 8003850:	797b      	ldrb	r3, [r7, #5]
 8003852:	2b09      	cmp	r3, #9
 8003854:	f67f af6d 	bls.w	8003732 <LFO_square_one_pulse+0x16>

	}
    }
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bc90      	pop	{r4, r7}
 8003862:	4770      	bx	lr
 8003864:	20004d58 	.word	0x20004d58
 8003868:	20004204 	.word	0x20004204
 800386c:	20005534 	.word	0x20005534

08003870 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , needs to be at start
 8003870:	b4f0      	push	{r4, r5, r6, r7}
 8003872:	b08c      	sub	sp, #48	; 0x30
 8003874:	af00      	add	r7, sp, #0


float	freq_temp=0;
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
float 	freq2_temp=0;
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
uint32_t 	freq_saw=0;
 8003882:	2300      	movs	r3, #0
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
uint8_t lfo_c ;
float offset=0;
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint64_t delay_value;
	uint16_t nextisr=next_isr;
 800388c:	4b71      	ldr	r3, [pc, #452]	; (8003a54 <LFO_source_synced+0x1e4>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	827b      	strh	r3, [r7, #18]
	float multiply;
	uint16_t rate;


	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003892:	2300      	movs	r3, #0
 8003894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003898:	e0d0      	b.n	8003a3c <LFO_source_synced+0x1cc>
	    nextisr=next_isr;
 800389a:	4b6e      	ldr	r3, [pc, #440]	; (8003a54 <LFO_source_synced+0x1e4>)
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	827b      	strh	r3, [r7, #18]
	//lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
;   // 0-4096 , double every 16 steps
	//rate= LFO_sync_table[LFO[lfo_c].rate];  // this by default 1-65536  , doubles every 16
	rate= LFO[lfo_c].rate;
 80038a0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80038a4:	4c6c      	ldr	r4, [pc, #432]	; (8003a58 <LFO_source_synced+0x1e8>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4423      	add	r3, r4
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	823b      	strh	r3, [r7, #16]

	nextisr=(nextisr+(rate*(LFO[lfo_c].delay&15)))&4095;
 80038b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80038b8:	4c67      	ldr	r4, [pc, #412]	; (8003a58 <LFO_source_synced+0x1e8>)
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4423      	add	r3, r4
 80038c4:	3304      	adds	r3, #4
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	8a3a      	ldrh	r2, [r7, #16]
 80038d2:	fb12 f303 	smulbb	r3, r2, r3
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	8a7b      	ldrh	r3, [r7, #18]
 80038da:	4413      	add	r3, r2
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	827b      	strh	r3, [r7, #18]


	lfo_accu_temp=nextisr*rate*rate; // 16 bit * 12bit
 80038e4:	8a7b      	ldrh	r3, [r7, #18]
 80038e6:	8a3a      	ldrh	r2, [r7, #16]
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	8a3a      	ldrh	r2, [r7, #16]
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	17da      	asrs	r2, r3, #31
 80038f4:	4618      	mov	r0, r3
 80038f6:	4611      	mov	r1, r2
 80038f8:	e9c7 0102 	strd	r0, r1, [r7, #8]

	//freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate]                             ;  // rate. this needs a little log
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 reallys


	freq_temp_saw=lfo_accu_temp&65535     ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	623b      	str	r3, [r7, #32]


 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003902:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003906:	4c54      	ldr	r4, [pc, #336]	; (8003a58 <LFO_source_synced+0x1e8>)
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4423      	add	r3, r4
 8003912:	3303      	adds	r3, #3
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003920:	edc7 7a05 	vstr	s15, [r7, #20]
			offset2=offset;
 8003924:	edd7 7a05 	vldr	s15, [r7, #20]
 8003928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800392c:	ee17 3a90 	vmov	r3, s15
 8003930:	607b      	str	r3, [r7, #4]

	//	if (freq2_temp>32766)  freq2_temp=32767;
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

					//	output_hold=freq2_temp;
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003938:	4293      	cmp	r3, r2
 800393a:	d902      	bls.n	8003942 <LFO_source_synced+0xd2>
 800393c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003940:	623b      	str	r3, [r7, #32]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003942:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003946:	4c44      	ldr	r4, [pc, #272]	; (8003a58 <LFO_source_synced+0x1e8>)
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4423      	add	r3, r4
 8003952:	3301      	adds	r3, #1
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800396c:	4293      	cmp	r3, r2
 800396e:	d902      	bls.n	8003976 <LFO_source_synced+0x106>
 8003970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold+32767; // sine out
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800397c:	4c37      	ldr	r4, [pc, #220]	; (8003a5c <LFO_source_synced+0x1ec>)
 800397e:	7824      	ldrb	r4, [r4, #0]
 8003980:	4626      	mov	r6, r4
 8003982:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003986:	337f      	adds	r3, #127	; 0x7f
 8003988:	b29d      	uxth	r5, r3
 800398a:	4c33      	ldr	r4, [pc, #204]	; (8003a58 <LFO_source_synced+0x1e8>)
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	4413      	add	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4433      	add	r3, r6
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4423      	add	r3, r4
 800399a:	462a      	mov	r2, r5
 800399c:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 800399e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039a2:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <LFO_source_synced+0x1ec>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461e      	mov	r6, r3
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	b29d      	uxth	r5, r3
 80039ac:	4c2a      	ldr	r4, [pc, #168]	; (8003a58 <LFO_source_synced+0x1e8>)
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	4413      	add	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4433      	add	r3, r6
 80039b8:	330c      	adds	r3, #12
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4423      	add	r3, r4
 80039be:	462a      	mov	r2, r5
 80039c0:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c8:	d202      	bcs.n	80039d0 <LFO_source_synced+0x160>
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	e003      	b.n	80039d8 <LFO_source_synced+0x168>
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 80039d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039dc:	4c1e      	ldr	r4, [pc, #120]	; (8003a58 <LFO_source_synced+0x1e8>)
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4423      	add	r3, r4
 80039e8:	3301      	adds	r3, #1
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	11db      	asrs	r3, r3, #7
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a04:	4293      	cmp	r3, r2
 8003a06:	dd02      	ble.n	8003a0e <LFO_source_synced+0x19e>
 8003a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003a0e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <LFO_source_synced+0x1ec>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461e      	mov	r6, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	b29d      	uxth	r5, r3
 8003a1c:	4c0e      	ldr	r4, [pc, #56]	; (8003a58 <LFO_source_synced+0x1e8>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	4413      	add	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4433      	add	r3, r6
 8003a28:	3314      	adds	r3, #20
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4423      	add	r3, r4
 8003a2e:	462a      	mov	r2, r5
 8003a30:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003a32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a36:	3301      	adds	r3, #1
 8003a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a40:	2b09      	cmp	r3, #9
 8003a42:	f67f af2a 	bls.w	800389a <LFO_source_synced+0x2a>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	3730      	adds	r7, #48	; 0x30
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	2000311c 	.word	0x2000311c
 8003a58:	20003f20 	.word	0x20003f20
 8003a5c:	20005534 	.word	0x20005534

08003a60 <frq_point>:

void  frq_point(void){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003a64:	4b84      	ldr	r3, [pc, #528]	; (8003c78 <frq_point+0x218>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4a84      	ldr	r2, [pc, #528]	; (8003c7c <frq_point+0x21c>)
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a83      	ldr	r2, [pc, #524]	; (8003c80 <frq_point+0x220>)
 8003a72:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003a74:	4b80      	ldr	r3, [pc, #512]	; (8003c78 <frq_point+0x218>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4a80      	ldr	r2, [pc, #512]	; (8003c7c <frq_point+0x21c>)
 8003a7a:	3309      	adds	r3, #9
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a7f      	ldr	r2, [pc, #508]	; (8003c80 <frq_point+0x220>)
 8003a84:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8003a86:	4b7c      	ldr	r3, [pc, #496]	; (8003c78 <frq_point+0x218>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <frq_point+0x21c>)
 8003a8c:	3312      	adds	r3, #18
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7a      	ldr	r2, [pc, #488]	; (8003c80 <frq_point+0x220>)
 8003a96:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003a98:	4b77      	ldr	r3, [pc, #476]	; (8003c78 <frq_point+0x218>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4a77      	ldr	r2, [pc, #476]	; (8003c7c <frq_point+0x21c>)
 8003a9e:	331b      	adds	r3, #27
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a76      	ldr	r2, [pc, #472]	; (8003c80 <frq_point+0x220>)
 8003aa8:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003aaa:	4b75      	ldr	r3, [pc, #468]	; (8003c80 <frq_point+0x220>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	dd04      	ble.n	8003ac8 <frq_point+0x68>
 8003abe:	4b70      	ldr	r3, [pc, #448]	; (8003c80 <frq_point+0x220>)
 8003ac0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e00b      	b.n	8003ae0 <frq_point+0x80>
 8003ac8:	4b6d      	ldr	r3, [pc, #436]	; (8003c80 <frq_point+0x220>)
 8003aca:	edd3 7a00 	vldr	s15, [r3]
 8003ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad6:	d503      	bpl.n	8003ae0 <frq_point+0x80>
 8003ad8:	4b69      	ldr	r3, [pc, #420]	; (8003c80 <frq_point+0x220>)
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003ae0:	4b67      	ldr	r3, [pc, #412]	; (8003c80 <frq_point+0x220>)
 8003ae2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	dd04      	ble.n	8003afe <frq_point+0x9e>
 8003af4:	4b62      	ldr	r3, [pc, #392]	; (8003c80 <frq_point+0x220>)
 8003af6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003afa:	611a      	str	r2, [r3, #16]
 8003afc:	e00b      	b.n	8003b16 <frq_point+0xb6>
 8003afe:	4b60      	ldr	r3, [pc, #384]	; (8003c80 <frq_point+0x220>)
 8003b00:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0c:	d503      	bpl.n	8003b16 <frq_point+0xb6>
 8003b0e:	4b5c      	ldr	r3, [pc, #368]	; (8003c80 <frq_point+0x220>)
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8003b16:	4b5a      	ldr	r3, [pc, #360]	; (8003c80 <frq_point+0x220>)
 8003b18:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b28:	dd04      	ble.n	8003b34 <frq_point+0xd4>
 8003b2a:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <frq_point+0x220>)
 8003b2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	e00b      	b.n	8003b4c <frq_point+0xec>
 8003b34:	4b52      	ldr	r3, [pc, #328]	; (8003c80 <frq_point+0x220>)
 8003b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	d503      	bpl.n	8003b4c <frq_point+0xec>
 8003b44:	4b4e      	ldr	r3, [pc, #312]	; (8003c80 <frq_point+0x220>)
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	; (8003c80 <frq_point+0x220>)
 8003b4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	dd04      	ble.n	8003b6a <frq_point+0x10a>
 8003b60:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <frq_point+0x220>)
 8003b62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	e00b      	b.n	8003b82 <frq_point+0x122>
 8003b6a:	4b45      	ldr	r3, [pc, #276]	; (8003c80 <frq_point+0x220>)
 8003b6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b78:	d503      	bpl.n	8003b82 <frq_point+0x122>
 8003b7a:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <frq_point+0x220>)
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 8003b82:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <frq_point+0x220>)
 8003b84:	edd3 7a00 	vldr	s15, [r3]
 8003b88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <frq_point+0x220>)
 8003b92:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 8003b96:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <frq_point+0x220>)
 8003b98:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba4:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <frq_point+0x220>)
 8003ba6:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8003baa:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <frq_point+0x220>)
 8003bac:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bb8:	4b31      	ldr	r3, [pc, #196]	; (8003c80 <frq_point+0x220>)
 8003bba:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <frq_point+0x220>)
 8003bc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <frq_point+0x220>)
 8003bce:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <frq_point+0x220>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fd94 	bl	8000704 <__aeabi_f2d>
 8003bdc:	a324      	add	r3, pc, #144	; (adr r3, 8003c70 <frq_point+0x210>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f7fc fb01 	bl	80001e8 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	f7fc fe01 	bl	80007f4 <__aeabi_d2f>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4a23      	ldr	r2, [pc, #140]	; (8003c84 <frq_point+0x224>)
 8003bf6:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <frq_point+0x220>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fd81 	bl	8000704 <__aeabi_f2d>
 8003c02:	a31b      	add	r3, pc, #108	; (adr r3, 8003c70 <frq_point+0x210>)
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f7fc faee 	bl	80001e8 <__aeabi_dmul>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	f7fc fdee 	bl	80007f4 <__aeabi_d2f>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <frq_point+0x224>)
 8003c1c:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <frq_point+0x220>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fd6e 	bl	8000704 <__aeabi_f2d>
 8003c28:	a311      	add	r3, pc, #68	; (adr r3, 8003c70 <frq_point+0x210>)
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f7fc fadb 	bl	80001e8 <__aeabi_dmul>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f7fc fddb 	bl	80007f4 <__aeabi_d2f>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <frq_point+0x224>)
 8003c42:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <frq_point+0x220>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fd5b 	bl	8000704 <__aeabi_f2d>
 8003c4e:	a308      	add	r3, pc, #32	; (adr r3, 8003c70 <frq_point+0x210>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f7fc fac8 	bl	80001e8 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f7fc fdc8 	bl	80007f4 <__aeabi_d2f>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <frq_point+0x224>)
 8003c68:	60d3      	str	r3, [r2, #12]

}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	9999999a 	.word	0x9999999a
 8003c74:	3fc99999 	.word	0x3fc99999
 8003c78:	20005534 	.word	0x20005534
 8003c7c:	200031d8 	.word	0x200031d8
 8003c80:	200031b8 	.word	0x200031b8
 8003c84:	20003168 	.word	0x20003168

08003c88 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0




}   // end o void
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003c9e:	4b6e      	ldr	r3, [pc, #440]	; (8003e58 <displayBuffer2+0x1c0>)
 8003ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	; (8003e5c <displayBuffer2+0x1c4>)
 8003ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	336b      	adds	r3, #107	; 0x6b
 8003cb6:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003cb8:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <displayBuffer2+0x1c0>)
 8003cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <displayBuffer2+0x1c4>)
 8003cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4a64      	ldr	r2, [pc, #400]	; (8003e60 <displayBuffer2+0x1c8>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <displayBuffer2+0x1cc>)
 8003cd6:	6810      	ldr	r0, [r2, #0]
 8003cd8:	6851      	ldr	r1, [r2, #4]
 8003cda:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003cdc:	4a62      	ldr	r2, [pc, #392]	; (8003e68 <displayBuffer2+0x1d0>)
 8003cde:	463b      	mov	r3, r7
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	8019      	strh	r1, [r3, #0]
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	0c12      	lsrs	r2, r2, #16
 8003cea:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003cec:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <displayBuffer2+0x1c0>)
 8003cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <displayBuffer2+0x1d4>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003d00:	463b      	mov	r3, r7
 8003d02:	4618      	mov	r0, r3
 8003d04:	f008 f846 	bl	800bd94 <atoi>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	4b58      	ldr	r3, [pc, #352]	; (8003e70 <displayBuffer2+0x1d8>)
 8003d0e:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003d10:	4b57      	ldr	r3, [pc, #348]	; (8003e70 <displayBuffer2+0x1d8>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	4619      	mov	r1, r3
 8003d16:	4853      	ldr	r0, [pc, #332]	; (8003e64 <displayBuffer2+0x1cc>)
 8003d18:	f7fc ff3e 	bl	8000b98 <menu_vars>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4a55      	ldr	r2, [pc, #340]	; (8003e74 <displayBuffer2+0x1dc>)
 8003d20:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003d22:	88bb      	ldrh	r3, [r7, #4]
 8003d24:	3308      	adds	r3, #8
 8003d26:	4a54      	ldr	r2, [pc, #336]	; (8003e78 <displayBuffer2+0x1e0>)
 8003d28:	1898      	adds	r0, r3, r2
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a4c      	ldr	r2, [pc, #304]	; (8003e60 <displayBuffer2+0x1c8>)
 8003d30:	4413      	add	r3, r2
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2208      	movs	r2, #8
 8003d36:	4619      	mov	r1, r3
 8003d38:	f008 f85a 	bl	800bdf0 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);
 8003d3c:	88bb      	ldrh	r3, [r7, #4]
 8003d3e:	3311      	adds	r3, #17
 8003d40:	4a4d      	ldr	r2, [pc, #308]	; (8003e78 <displayBuffer2+0x1e0>)
 8003d42:	4413      	add	r3, r2
 8003d44:	494d      	ldr	r1, [pc, #308]	; (8003e7c <displayBuffer2+0x1e4>)
 8003d46:	2203      	movs	r2, #3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f008 f851 	bl	800bdf0 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003d4e:	88bb      	ldrh	r3, [r7, #4]
 8003d50:	3305      	adds	r3, #5
 8003d52:	4a49      	ldr	r2, [pc, #292]	; (8003e78 <displayBuffer2+0x1e0>)
 8003d54:	4413      	add	r3, r2
 8003d56:	883a      	ldrh	r2, [r7, #0]
 8003d58:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <displayBuffer2+0x1e8>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d102      	bne.n	8003d68 <displayBuffer2+0xd0>
 8003d62:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <displayBuffer2+0x1ec>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003d68:	4b45      	ldr	r3, [pc, #276]	; (8003e80 <displayBuffer2+0x1e8>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b24      	cmp	r3, #36	; 0x24
 8003d6e:	d102      	bne.n	8003d76 <displayBuffer2+0xde>
 8003d70:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <displayBuffer2+0x1ec>)
 8003d72:	2202      	movs	r2, #2
 8003d74:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8003d76:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <displayBuffer2+0x1e8>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b30      	cmp	r3, #48	; 0x30
 8003d7c:	d906      	bls.n	8003d8c <displayBuffer2+0xf4>
 8003d7e:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <displayBuffer2+0x1e8>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b34      	cmp	r3, #52	; 0x34
 8003d84:	d802      	bhi.n	8003d8c <displayBuffer2+0xf4>
 8003d86:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <displayBuffer2+0x1ec>)
 8003d88:	2203      	movs	r2, #3
 8003d8a:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8003d8c:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <displayBuffer2+0x1ec>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d04b      	beq.n	8003e2c <displayBuffer2+0x194>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8003d94:	4b37      	ldr	r3, [pc, #220]	; (8003e74 <displayBuffer2+0x1dc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b36      	cmp	r3, #54	; 0x36
 8003da0:	d901      	bls.n	8003da6 <displayBuffer2+0x10e>
 8003da2:	2300      	movs	r3, #0
 8003da4:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <displayBuffer2+0x1ec>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d10c      	bne.n	8003dc8 <displayBuffer2+0x130>
 8003dae:	88bb      	ldrh	r3, [r7, #4]
 8003db0:	3308      	adds	r3, #8
 8003db2:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <displayBuffer2+0x1e0>)
 8003db4:	1898      	adds	r0, r3, r2
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <displayBuffer2+0x1c8>)
 8003dbc:	4413      	add	r3, r2
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f008 f814 	bl	800bdf0 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8003dc8:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <displayBuffer2+0x1ec>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d10c      	bne.n	8003dea <displayBuffer2+0x152>
 8003dd0:	88bb      	ldrh	r3, [r7, #4]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <displayBuffer2+0x1e0>)
 8003dd6:	1898      	adds	r0, r3, r2
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4a2a      	ldr	r2, [pc, #168]	; (8003e88 <displayBuffer2+0x1f0>)
 8003dde:	4413      	add	r3, r2
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2208      	movs	r2, #8
 8003de4:	4619      	mov	r1, r3
 8003de6:	f008 f803 	bl	800bdf0 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <displayBuffer2+0x1ec>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d11c      	bne.n	8003e2c <displayBuffer2+0x194>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  "Note_0",6);LCD_Info[9]=LFO_sqr_list[menu_index_in&7];    }
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <displayBuffer2+0x1d8>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <displayBuffer2+0x1f4>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <displayBuffer2+0x188>
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <displayBuffer2+0x1f8>)
 8003e04:	2206      	movs	r2, #6
 8003e06:	4923      	ldr	r1, [pc, #140]	; (8003e94 <displayBuffer2+0x1fc>)
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f007 fff1 	bl	800bdf0 <memcpy>
 8003e0e:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <displayBuffer2+0x1d8>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <displayBuffer2+0x1f4>)
 8003e18:	5cd2      	ldrb	r2, [r2, r3]
 8003e1a:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <displayBuffer2+0x200>)
 8003e1c:	725a      	strb	r2, [r3, #9]
 8003e1e:	e005      	b.n	8003e2c <displayBuffer2+0x194>
	     		 else memcpy(LCD_Info+3,"        ",8);
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <displayBuffer2+0x1f8>)
 8003e22:	2208      	movs	r2, #8
 8003e24:	491d      	ldr	r1, [pc, #116]	; (8003e9c <displayBuffer2+0x204>)
 8003e26:	4618      	mov	r0, r3
 8003e28:	f007 ffe2 	bl	800bdf0 <memcpy>
	     		    }
	     	}

	     target_display=0;
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <displayBuffer2+0x1ec>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <displayBuffer2+0x208>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b11      	cmp	r3, #17
 8003e38:	d103      	bne.n	8003e42 <displayBuffer2+0x1aa>
 8003e3a:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <displayBuffer2+0x208>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8003e40:	e005      	b.n	8003e4e <displayBuffer2+0x1b6>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <displayBuffer2+0x208>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <displayBuffer2+0x208>)
 8003e4c:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000220 	.word	0x20000220
 8003e5c:	20004f20 	.word	0x20004f20
 8003e60:	2000022c 	.word	0x2000022c
 8003e64:	20005524 	.word	0x20005524
 8003e68:	0800c438 	.word	0x0800c438
 8003e6c:	20005320 	.word	0x20005320
 8003e70:	2000552c 	.word	0x2000552c
 8003e74:	20005520 	.word	0x20005520
 8003e78:	200109e0 	.word	0x200109e0
 8003e7c:	20000818 	.word	0x20000818
 8003e80:	2000755d 	.word	0x2000755d
 8003e84:	20005533 	.word	0x20005533
 8003e88:	20000308 	.word	0x20000308
 8003e8c:	20010770 	.word	0x20010770
 8003e90:	2001097f 	.word	0x2001097f
 8003e94:	0800c424 	.word	0x0800c424
 8003e98:	2001097c 	.word	0x2001097c
 8003e9c:	0800c42c 	.word	0x0800c42c
 8003ea0:	20000150 	.word	0x20000150

08003ea4 <SPI_command>:

void SPI_command(void){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <SPI_command+0x68>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d128      	bne.n	8003f04 <SPI_command+0x60>
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <SPI_command+0x6c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d124      	bne.n	8003f04 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <SPI_command+0x70>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <SPI_command+0x2a>
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <SPI_command+0x74>)
 8003ec8:	22f8      	movs	r2, #248	; 0xf8
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e002      	b.n	8003ed4 <SPI_command+0x30>
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <SPI_command+0x74>)
 8003ed0:	22fa      	movs	r2, #250	; 0xfa
 8003ed2:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <SPI_command+0x74>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <SPI_command+0x70>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <SPI_command+0x70>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	4808      	ldr	r0, [pc, #32]	; (8003f1c <SPI_command+0x78>)
 8003efa:	f005 fb5a 	bl	80095b2 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8003efe:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <SPI_command+0x68>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	801a      	strh	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	2000314c 	.word	0x2000314c
 8003f10:	20003152 	.word	0x20003152
 8003f14:	20003150 	.word	0x20003150
 8003f18:	2000314e 	.word	0x2000314e
 8003f1c:	20010f34 	.word	0x20010f34

08003f20 <display_init>:

void display_init(void){
 8003f20:	b5b0      	push	{r4, r5, r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <display_init+0x90>)
 8003f28:	1d3c      	adds	r4, r7, #4
 8003f2a:	461d      	mov	r5, r3
 8003f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <display_init+0x94>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d132      	bne.n	8003fa6 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <display_init+0x98>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b06      	subs	r3, #6
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <display_init+0x9c>)
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	f7ff fea3 	bl	8003c98 <displayBuffer2>
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <display_init+0x9c>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <display_init+0xa0>)
 8003f5a:	5c9b      	ldrb	r3, [r3, r2]
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <display_init+0xa4>)
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8003f64:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <display_init+0x98>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d80b      	bhi.n	8003f84 <display_init+0x64>
 8003f6c:	2003      	movs	r0, #3
 8003f6e:	f001 ff43 	bl	8005df8 <HAL_Delay>
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <display_init+0x98>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	3328      	adds	r3, #40	; 0x28
 8003f7a:	443b      	add	r3, r7
 8003f7c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <display_init+0xa4>)
 8003f82:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <display_init+0x98>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <display_init+0x98>)
 8003f8e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <display_init+0x94>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	f7ff ff85 	bl	8003ea4 <SPI_command>
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <display_init+0x94>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <display_init+0xa8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8003fa6:	bf00      	nop
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bdb0      	pop	{r4, r5, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	0800c43c 	.word	0x0800c43c
 8003fb4:	20003152 	.word	0x20003152
 8003fb8:	20003153 	.word	0x20003153
 8003fbc:	20003154 	.word	0x20003154
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	20003150 	.word	0x20003150
 8003fc8:	2000314c 	.word	0x2000314c

08003fcc <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 8003fe2:	4b25      	ldr	r3, [pc, #148]	; (8004078 <gfx_TX_block+0xac>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8003fe8:	2300      	movs	r3, #0
 8003fea:	81bb      	strh	r3, [r7, #12]
 8003fec:	e034      	b.n	8004058 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <gfx_TX_block+0xac>)
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <gfx_TX_block+0xb0>)
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d902      	bls.n	8004006 <gfx_TX_block+0x3a>
 8004000:	23fa      	movs	r3, #250	; 0xfa
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e001      	b.n	800400a <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8004006:	23f8      	movs	r3, #248	; 0xf8
 8004008:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 800400e:	7abb      	ldrb	r3, [r7, #10]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	b2db      	uxtb	r3, r3
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	b2db      	uxtb	r3, r3
 8004018:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 800401a:	7abb      	ldrb	r3, [r7, #10]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	b2db      	uxtb	r3, r3
 8004020:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8004022:	89bb      	ldrh	r3, [r7, #12]
 8004024:	4a16      	ldr	r2, [pc, #88]	; (8004080 <gfx_TX_block+0xb4>)
 8004026:	4413      	add	r3, r2
 8004028:	461a      	mov	r2, r3
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	8819      	ldrh	r1, [r3, #0]
 800402e:	789b      	ldrb	r3, [r3, #2]
 8004030:	8011      	strh	r1, [r2, #0]
 8004032:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8004034:	7afb      	ldrb	r3, [r7, #11]
 8004036:	2b11      	cmp	r3, #17
 8004038:	d102      	bne.n	8004040 <gfx_TX_block+0x74>
 800403a:	2300      	movs	r3, #0
 800403c:	72fb      	strb	r3, [r7, #11]
 800403e:	e002      	b.n	8004046 <gfx_TX_block+0x7a>
 8004040:	7afb      	ldrb	r3, [r7, #11]
 8004042:	3301      	adds	r3, #1
 8004044:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <gfx_TX_block+0xac>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <gfx_TX_block+0xac>)
 8004050:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004052:	89bb      	ldrh	r3, [r7, #12]
 8004054:	3303      	adds	r3, #3
 8004056:	81bb      	strh	r3, [r7, #12]
 8004058:	89bb      	ldrh	r3, [r7, #12]
 800405a:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800405e:	d3c6      	bcc.n	8003fee <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <gfx_TX_block+0xac>)
 8004062:	2200      	movs	r2, #0
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <gfx_TX_block+0xb8>)
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]

}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	20003af2 	.word	0x20003af2
 800407c:	20003670 	.word	0x20003670
 8004080:	2000f76c 	.word	0x2000f76c
 8004084:	20003b02 	.word	0x20003b02

08004088 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <gfx_clear+0x6c>)
 800408e:	2200      	movs	r2, #0
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	e01c      	b.n	80040ce <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <gfx_clear+0x70>)
 8004096:	2202      	movs	r2, #2
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	e00e      	b.n	80040ba <gfx_clear+0x32>
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <gfx_clear+0x6c>)
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <gfx_clear+0x70>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	4413      	add	r3, r2
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <gfx_clear+0x74>)
 80040aa:	2100      	movs	r1, #0
 80040ac:	54d1      	strb	r1, [r2, r3]
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <gfx_clear+0x70>)
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <gfx_clear+0x70>)
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <gfx_clear+0x70>)
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	2b11      	cmp	r3, #17
 80040c0:	d9ec      	bls.n	800409c <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <gfx_clear+0x6c>)
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	3312      	adds	r3, #18
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <gfx_clear+0x6c>)
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <gfx_clear+0x6c>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80040d6:	d3dd      	bcc.n	8004094 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <gfx_clear+0x78>)
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <gfx_clear+0x7c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <gfx_clear+0x80>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]

}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20000902 	.word	0x20000902
 80040f8:	20000908 	.word	0x20000908
 80040fc:	20003670 	.word	0x20003670
 8004100:	20003af4 	.word	0x20003af4
 8004104:	20003af2 	.word	0x20003af2
 8004108:	20003b02 	.word	0x20003b02

0800410c <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 8004112:	2300      	movs	r3, #0
 8004114:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8004116:	2300      	movs	r3, #0
 8004118:	80fb      	strh	r3, [r7, #6]
 800411a:	e006      	b.n	800412a <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <display_clear+0x34>)
 8004120:	212f      	movs	r1, #47	; 0x2f
 8004122:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	3301      	adds	r3, #1
 8004128:	80fb      	strh	r3, [r7, #6]
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004130:	d3f4      	bcc.n	800411c <display_clear+0x10>
	}


}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	200109e0 	.word	0x200109e0

08004144 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <display_generate+0x1c>)
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 800414e:	f7ff fd9b 	bl	8003c88 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8004152:	f7ff fda1 	bl	8003c98 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8004156:	4b03      	ldr	r3, [pc, #12]	; (8004164 <display_generate+0x20>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20005536 	.word	0x20005536
 8004164:	20003b02 	.word	0x20003b02

08004168 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8004168:	b480      	push	{r7}
 800416a:	b08b      	sub	sp, #44	; 0x2c
 800416c:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 800416e:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <gfx_line_fill+0x178>)
 8004170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004174:	461a      	mov	r2, r3
 8004176:	4b5b      	ldr	r3, [pc, #364]	; (80042e4 <gfx_line_fill+0x17c>)
 8004178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417c:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 800417e:	4b5a      	ldr	r3, [pc, #360]	; (80042e8 <gfx_line_fill+0x180>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	b29a      	uxth	r2, r3
 800418a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800418c:	09db      	lsrs	r3, r3, #7
 800418e:	b29b      	uxth	r3, r3
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	b29b      	uxth	r3, r3
 8004194:	4413      	add	r3, r2
 8004196:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8004198:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	00d2      	lsls	r2, r2, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 80041aa:	8c3b      	ldrh	r3, [r7, #32]
 80041ac:	3390      	adds	r3, #144	; 0x90
 80041ae:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 80041b0:	4b4e      	ldr	r3, [pc, #312]	; (80042ec <gfx_line_fill+0x184>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 80041bc:	2300      	movs	r3, #0
 80041be:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 80041c0:	2300      	movs	r3, #0
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	f107 0308 	add.w	r3, r7, #8
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 80041d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80041d8:	429a      	cmp	r2, r3
 80041da:	d107      	bne.n	80041ec <gfx_line_fill+0x84>
 80041dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	3328      	adds	r3, #40	; 0x28
 80041e4:	443b      	add	r3, r7
 80041e6:	2201      	movs	r2, #1
 80041e8:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80041ec:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <gfx_line_fill+0x188>)
 80041ee:	8c3b      	ldrh	r3, [r7, #32]
 80041f0:	8013      	strh	r3, [r2, #0]
 80041f2:	e068      	b.n	80042c6 <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 80041f4:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <gfx_line_fill+0x18c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	e055      	b.n	80042a8 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 80041fc:	4b3d      	ldr	r3, [pc, #244]	; (80042f4 <gfx_line_fill+0x18c>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	4413      	add	r3, r2
 8004208:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <gfx_line_fill+0x190>)
 800420a:	5cd3      	ldrb	r3, [r2, r3]
 800420c:	3b2f      	subs	r3, #47	; 0x2f
 800420e:	b29b      	uxth	r3, r3
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	b29a      	uxth	r2, r3
 8004214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004218:	b29b      	uxth	r3, r3
 800421a:	4413      	add	r3, r2
 800421c:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 800421e:	8b7b      	ldrh	r3, [r7, #26]
 8004220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004224:	4a35      	ldr	r2, [pc, #212]	; (80042fc <gfx_line_fill+0x194>)
 8004226:	5cd3      	ldrb	r3, [r2, r3]
 8004228:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <gfx_line_fill+0x18c>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	3328      	adds	r3, #40	; 0x28
 8004230:	443b      	add	r3, r7
 8004232:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004236:	461a      	mov	r2, r3
 8004238:	01d2      	lsls	r2, r2, #7
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	b25a      	sxtb	r2, r3
 8004240:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004244:	4053      	eors	r3, r2
 8004246:	b25b      	sxtb	r3, r3
 8004248:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 800424a:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <gfx_line_fill+0x188>)
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	4b28      	ldr	r3, [pc, #160]	; (80042f4 <gfx_line_fill+0x18c>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	4413      	add	r3, r2
 8004256:	3302      	adds	r3, #2
 8004258:	4929      	ldr	r1, [pc, #164]	; (8004300 <gfx_line_fill+0x198>)
 800425a:	7f7a      	ldrb	r2, [r7, #29]
 800425c:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 800425e:	23fa      	movs	r3, #250	; 0xfa
 8004260:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8004262:	7f7b      	ldrb	r3, [r7, #29]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	b2db      	uxtb	r3, r3
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	b2db      	uxtb	r3, r3
 800426c:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 800426e:	7f7b      	ldrb	r3, [r7, #29]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	b2db      	uxtb	r3, r3
 8004274:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8004276:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <gfx_line_fill+0x188>)
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <gfx_line_fill+0x18c>)
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	441a      	add	r2, r3
 8004282:	4613      	mov	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	3306      	adds	r3, #6
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <gfx_line_fill+0x19c>)
 800428c:	4413      	add	r3, r2
 800428e:	461a      	mov	r2, r3
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	8819      	ldrh	r1, [r3, #0]
 8004296:	789b      	ldrb	r3, [r3, #2]
 8004298:	8011      	strh	r1, [r2, #0]
 800429a:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 800429c:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <gfx_line_fill+0x18c>)
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <gfx_line_fill+0x18c>)
 80042a6:	801a      	strh	r2, [r3, #0]
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <gfx_line_fill+0x18c>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	2b0f      	cmp	r3, #15
 80042ae:	d9a5      	bls.n	80041fc <gfx_line_fill+0x94>
		     }
	char_skip++;
 80042b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042b4:	3301      	adds	r3, #1
 80042b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <gfx_line_fill+0x188>)
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	3312      	adds	r3, #18
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <gfx_line_fill+0x188>)
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <gfx_line_fill+0x188>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	8bfa      	ldrh	r2, [r7, #30]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d891      	bhi.n	80041f4 <gfx_line_fill+0x8c>
    }
    }
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	372c      	adds	r7, #44	; 0x2c
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000220 	.word	0x20000220
 80042e4:	20004f20 	.word	0x20004f20
 80042e8:	20000904 	.word	0x20000904
 80042ec:	20003b02 	.word	0x20003b02
 80042f0:	20000902 	.word	0x20000902
 80042f4:	20000908 	.word	0x20000908
 80042f8:	200109e0 	.word	0x200109e0
 80042fc:	0800cf5c 	.word	0x0800cf5c
 8004300:	20003670 	.word	0x20003670
 8004304:	2000f76c 	.word	0x2000f76c

08004308 <encoder2>:


void encoder2(void){  // encoder pos and data input
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 800430e:	4b5f      	ldr	r3, [pc, #380]	; (800448c <encoder2+0x184>)
 8004310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004314:	461a      	mov	r2, r3
 8004316:	4b5e      	ldr	r3, [pc, #376]	; (8004490 <encoder2+0x188>)
 8004318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4a5b      	ldr	r2, [pc, #364]	; (8004494 <encoder2+0x18c>)
 8004326:	4413      	add	r3, r2
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b5b      	ldr	r3, [pc, #364]	; (8004498 <encoder2+0x190>)
 800432c:	6810      	ldr	r0, [r2, #0]
 800432e:	6851      	ldr	r1, [r2, #4]
 8004330:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004332:	4a5a      	ldr	r2, [pc, #360]	; (800449c <encoder2+0x194>)
 8004334:	1d3b      	adds	r3, r7, #4
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	4611      	mov	r1, r2
 800433a:	8019      	strh	r1, [r3, #0]
 800433c:	3302      	adds	r3, #2
 800433e:	0c12      	lsrs	r2, r2, #16
 8004340:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8004342:	4b52      	ldr	r3, [pc, #328]	; (800448c <encoder2+0x184>)
 8004344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	461a      	mov	r2, r3
 800434c:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <encoder2+0x198>)
 800434e:	4413      	add	r3, r2
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	4618      	mov	r0, r3
 800435a:	f007 fd1b 	bl	800bd94 <atoi>
 800435e:	4603      	mov	r3, r0
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <encoder2+0x19c>)
 8004364:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004366:	4b4f      	ldr	r3, [pc, #316]	; (80044a4 <encoder2+0x19c>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	4619      	mov	r1, r3
 800436c:	484a      	ldr	r0, [pc, #296]	; (8004498 <encoder2+0x190>)
 800436e:	f7fc fc13 	bl	8000b98 <menu_vars>
 8004372:	4603      	mov	r3, r0
 8004374:	4a4c      	ldr	r2, [pc, #304]	; (80044a8 <encoder2+0x1a0>)
 8004376:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004378:	4b4b      	ldr	r3, [pc, #300]	; (80044a8 <encoder2+0x1a0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <encoder2+0x1a4>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4b4a      	ldr	r3, [pc, #296]	; (80044b0 <encoder2+0x1a8>)
 8004386:	5c5b      	ldrb	r3, [r3, r1]
 8004388:	429a      	cmp	r2, r3
 800438a:	d907      	bls.n	800439c <encoder2+0x94>
 800438c:	4b47      	ldr	r3, [pc, #284]	; (80044ac <encoder2+0x1a4>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <encoder2+0x1a0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a46      	ldr	r2, [pc, #280]	; (80044b0 <encoder2+0x1a8>)
 8004398:	5c52      	ldrb	r2, [r2, r1]
 800439a:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 800439c:	4b45      	ldr	r3, [pc, #276]	; (80044b4 <encoder2+0x1ac>)
 800439e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a2:	461a      	mov	r2, r3
 80043a4:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <encoder2+0x1b0>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d024      	beq.n	80043f6 <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 80043ac:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <encoder2+0x1ac>)
 80043ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b2:	461a      	mov	r2, r3
 80043b4:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <encoder2+0x1b0>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	dd07      	ble.n	80043cc <encoder2+0xc4>
 80043bc:	4b3a      	ldr	r3, [pc, #232]	; (80044a8 <encoder2+0x1a0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <encoder2+0x1a0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3201      	adds	r2, #1
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 80043cc:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <encoder2+0x1ac>)
 80043ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <encoder2+0x1b0>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	da0c      	bge.n	80043f6 <encoder2+0xee>
 80043dc:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <encoder2+0x1a0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <encoder2+0xee>
 80043e6:	4b30      	ldr	r3, [pc, #192]	; (80044a8 <encoder2+0x1a0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <encoder2+0x1a0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3a01      	subs	r2, #1
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <encoder2+0x1ac>)
 80043f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <encoder2+0x1b0>)
 8004400:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8004402:	4b2e      	ldr	r3, [pc, #184]	; (80044bc <encoder2+0x1b4>)
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	4b2e      	ldr	r3, [pc, #184]	; (80044c0 <encoder2+0x1b8>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d01d      	beq.n	800444a <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 800440e:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <encoder2+0x1b4>)
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <encoder2+0x1b8>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d908      	bls.n	800442c <encoder2+0x124>
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <encoder2+0x184>)
 800441c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004420:	b29b      	uxth	r3, r3
 8004422:	3301      	adds	r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	b21a      	sxth	r2, r3
 8004428:	4b18      	ldr	r3, [pc, #96]	; (800448c <encoder2+0x184>)
 800442a:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 800442c:	4b23      	ldr	r3, [pc, #140]	; (80044bc <encoder2+0x1b4>)
 800442e:	881a      	ldrh	r2, [r3, #0]
 8004430:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <encoder2+0x1b8>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d208      	bcs.n	800444a <encoder2+0x142>
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <encoder2+0x184>)
 800443a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	b21a      	sxth	r2, r3
 8004446:	4b11      	ldr	r3, [pc, #68]	; (800448c <encoder2+0x184>)
 8004448:	801a      	strh	r2, [r3, #0]

	   	    }
	   	   if (enc_out1>menu_title_count) enc_out1=0;
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <encoder2+0x184>)
 800444c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004450:	461a      	mov	r2, r3
 8004452:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <encoder2+0x1bc>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	dd02      	ble.n	8004460 <encoder2+0x158>
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <encoder2+0x184>)
 800445c:	2200      	movs	r2, #0
 800445e:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <encoder2+0x184>)
 8004462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da04      	bge.n	8004474 <encoder2+0x16c>
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <encoder2+0x1bc>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	b21a      	sxth	r2, r3
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <encoder2+0x184>)
 8004472:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <encoder2+0x1b4>)
 8004476:	881a      	ldrh	r2, [r3, #0]
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <encoder2+0x1b8>)
 800447a:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <encoder2+0x1c0>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]

    }
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000220 	.word	0x20000220
 8004490:	20004f20 	.word	0x20004f20
 8004494:	2000022c 	.word	0x2000022c
 8004498:	20005524 	.word	0x20005524
 800449c:	0800c438 	.word	0x0800c438
 80044a0:	20005320 	.word	0x20005320
 80044a4:	2000552c 	.word	0x2000552c
 80044a8:	20005520 	.word	0x20005520
 80044ac:	2000755d 	.word	0x2000755d
 80044b0:	0800ceec 	.word	0x0800ceec
 80044b4:	20003144 	.word	0x20003144
 80044b8:	2000f768 	.word	0x2000f768
 80044bc:	20003142 	.word	0x20003142
 80044c0:	20005530 	.word	0x20005530
 80044c4:	20004f1d 	.word	0x20004f1d
 80044c8:	20003146 	.word	0x20003146

080044cc <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 80044d2:	4b4e      	ldr	r3, [pc, #312]	; (800460c <menu3_fill+0x140>)
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 80044d8:	4b4d      	ldr	r3, [pc, #308]	; (8004610 <menu3_fill+0x144>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	89fa      	ldrh	r2, [r7, #14]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d904      	bls.n	80044ee <menu3_fill+0x22>
 80044e4:	2300      	movs	r3, #0
 80044e6:	81fb      	strh	r3, [r7, #14]
 80044e8:	4b48      	ldr	r3, [pc, #288]	; (800460c <menu3_fill+0x140>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 80044ee:	89fb      	ldrh	r3, [r7, #14]
 80044f0:	4a48      	ldr	r2, [pc, #288]	; (8004614 <menu3_fill+0x148>)
 80044f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 80044fa:	7b7b      	ldrb	r3, [r7, #13]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4a46      	ldr	r2, [pc, #280]	; (8004618 <menu3_fill+0x14c>)
 8004500:	4413      	add	r3, r2
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <menu3_fill+0x150>)
 8004506:	6810      	ldr	r0, [r2, #0]
 8004508:	6851      	ldr	r1, [r2, #4]
 800450a:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 800450c:	4a44      	ldr	r2, [pc, #272]	; (8004620 <menu3_fill+0x154>)
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	4611      	mov	r1, r2
 8004514:	8019      	strh	r1, [r3, #0]
 8004516:	3302      	adds	r3, #2
 8004518:	0c12      	lsrs	r2, r2, #16
 800451a:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 800451c:	89fb      	ldrh	r3, [r7, #14]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	461a      	mov	r2, r3
 8004522:	4b40      	ldr	r3, [pc, #256]	; (8004624 <menu3_fill+0x158>)
 8004524:	4413      	add	r3, r2
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	4618      	mov	r0, r3
 8004530:	f007 fc30 	bl	800bd94 <atoi>
 8004534:	4603      	mov	r3, r0
 8004536:	b2da      	uxtb	r2, r3
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <menu3_fill+0x15c>)
 800453a:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800453c:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <menu3_fill+0x15c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	4619      	mov	r1, r3
 8004542:	4836      	ldr	r0, [pc, #216]	; (800461c <menu3_fill+0x150>)
 8004544:	f7fc fb28 	bl	8000b98 <menu_vars>
 8004548:	4603      	mov	r3, r0
 800454a:	4a38      	ldr	r2, [pc, #224]	; (800462c <menu3_fill+0x160>)
 800454c:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <menu3_fill+0x160>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b29a      	uxth	r2, r3
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <menu3_fill+0x164>)
 8004558:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;
 800455a:	4b36      	ldr	r3, [pc, #216]	; (8004634 <menu3_fill+0x168>)
 800455c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004560:	461a      	mov	r2, r3
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	429a      	cmp	r2, r3
 8004566:	d104      	bne.n	8004572 <menu3_fill+0xa6>
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <menu3_fill+0x164>)
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4b32      	ldr	r3, [pc, #200]	; (8004638 <menu3_fill+0x16c>)
 8004570:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 8004572:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <menu3_fill+0x164>)
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b2da      	uxtb	r2, r3
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <menu3_fill+0x170>)
 800457a:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 800457c:	4b2f      	ldr	r3, [pc, #188]	; (800463c <menu3_fill+0x170>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b09      	cmp	r3, #9
 8004582:	d902      	bls.n	800458a <menu3_fill+0xbe>
 8004584:	4b2d      	ldr	r3, [pc, #180]	; (800463c <menu3_fill+0x170>)
 8004586:	2209      	movs	r2, #9
 8004588:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	4a21      	ldr	r2, [pc, #132]	; (8004614 <menu3_fill+0x148>)
 800458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004592:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 8004594:	4b29      	ldr	r3, [pc, #164]	; (800463c <menu3_fill+0x170>)
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	897b      	ldrh	r3, [r7, #10]
 800459a:	3230      	adds	r2, #48	; 0x30
 800459c:	b2d1      	uxtb	r1, r2
 800459e:	4a28      	ldr	r2, [pc, #160]	; (8004640 <menu3_fill+0x174>)
 80045a0:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <menu3_fill+0x178>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b35      	cmp	r3, #53	; 0x35
 80045a8:	d105      	bne.n	80045b6 <menu3_fill+0xea>
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <menu3_fill+0x164>)
 80045ac:	881a      	ldrh	r2, [r3, #0]
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	b2d1      	uxtb	r1, r2
 80045b2:	4a23      	ldr	r2, [pc, #140]	; (8004640 <menu3_fill+0x174>)
 80045b4:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 80045b6:	4b23      	ldr	r3, [pc, #140]	; (8004644 <menu3_fill+0x178>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b18      	cmp	r3, #24
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <menu3_fill+0x178>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b19      	cmp	r3, #25
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <menu3_fill+0x120>
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <menu3_fill+0x164>)
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	f003 021f 	and.w	r2, r3, #31
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	4918      	ldr	r1, [pc, #96]	; (8004648 <menu3_fill+0x17c>)
 80045e6:	5c89      	ldrb	r1, [r1, r2]
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <menu3_fill+0x174>)
 80045ea:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <menu3_fill+0x140>)
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <menu3_fill+0x140>)
 80045f6:	801a      	strh	r2, [r3, #0]
				disp_up_counter=disp_up_counter&255;
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <menu3_fill+0x140>)
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	b29a      	uxth	r2, r3
 8004600:	4b02      	ldr	r3, [pc, #8]	; (800460c <menu3_fill+0x140>)
 8004602:	801a      	strh	r2, [r3, #0]

    }
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	2000f76a 	.word	0x2000f76a
 8004610:	20004f1d 	.word	0x20004f1d
 8004614:	20004f20 	.word	0x20004f20
 8004618:	2000022c 	.word	0x2000022c
 800461c:	20005524 	.word	0x20005524
 8004620:	0800c438 	.word	0x0800c438
 8004624:	20005320 	.word	0x20005320
 8004628:	2000552c 	.word	0x2000552c
 800462c:	20005520 	.word	0x20005520
 8004630:	20003b00 	.word	0x20003b00
 8004634:	20000220 	.word	0x20000220
 8004638:	20005532 	.word	0x20005532
 800463c:	2000755e 	.word	0x2000755e
 8004640:	200109e0 	.word	0x200109e0
 8004644:	2000755d 	.word	0x2000755d
 8004648:	0800c460 	.word	0x0800c460

0800464c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800464c:	b5b0      	push	{r4, r5, r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004652:	f001 fb5f 	bl	8005d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004656:	f000 fb1b 	bl	8004c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800465a:	f000 feb3 	bl	80053c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800465e:	f000 fe7b 	bl	8005358 <MX_DMA_Init>
  MX_ADC1_Init();
 8004662:	f000 fb7f 	bl	8004d64 <MX_ADC1_Init>
  MX_SPI2_Init();
 8004666:	f000 fc77 	bl	8004f58 <MX_SPI2_Init>
  MX_TIM3_Init();
 800466a:	f000 fcff 	bl	800506c <MX_TIM3_Init>
  MX_TIM4_Init();
 800466e:	f000 fd7f 	bl	8005170 <MX_TIM4_Init>
  MX_I2C2_Init();
 8004672:	f000 fc0d 	bl	8004e90 <MX_I2C2_Init>
  MX_SPI1_Init();
 8004676:	f000 fc39 	bl	8004eec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800467a:	f000 fe19 	bl	80052b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800467e:	f000 fe41 	bl	8005304 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8004682:	f000 fdcb 	bl	800521c <MX_TIM10_Init>
  MX_TIM2_Init();
 8004686:	f000 fc9d 	bl	8004fc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 800468a:	f7fd f92f 	bl	80018ec <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 800468e:	4ba6      	ldr	r3, [pc, #664]	; (8004928 <main+0x2dc>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4ba4      	ldr	r3, [pc, #656]	; (8004928 <main+0x2dc>)
 8004698:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 800469a:	4ba4      	ldr	r3, [pc, #656]	; (800492c <main+0x2e0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	4aa2      	ldr	r2, [pc, #648]	; (800492c <main+0x2e0>)
 80046a2:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

			  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 80046a4:	4ba1      	ldr	r3, [pc, #644]	; (800492c <main+0x2e0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d101      	bne.n	80046b4 <main+0x68>
 80046b0:	f7fd f84a 	bl	8001748 <analoginputloopb>


		if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 80046b4:	4b9d      	ldr	r3, [pc, #628]	; (800492c <main+0x2e0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f640 72b8 	movw	r2, #4024	; 0xfb8
 80046bc:	4293      	cmp	r3, r2
 80046be:	f040 80ed 	bne.w	800489c <main+0x250>
			  if (mem_count>512) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 80046c2:	4b9b      	ldr	r3, [pc, #620]	; (8004930 <main+0x2e4>)
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ca:	d903      	bls.n	80046d4 <main+0x88>
 80046cc:	4b98      	ldr	r3, [pc, #608]	; (8004930 <main+0x2e4>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	e005      	b.n	80046e0 <main+0x94>
 80046d4:	4b96      	ldr	r3, [pc, #600]	; (8004930 <main+0x2e4>)
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	4b94      	ldr	r3, [pc, #592]	; (8004930 <main+0x2e4>)
 80046de:	801a      	strh	r2, [r3, #0]
			//  cursor_partial=255;
		//	if (last_pos_hold)   default_menu3[32+seq.loop[0]]=" ";;
		//	default_menu3[32+seq.loop[0]]=48;
		//	  last_pos_hold=default_menu3[32+seq.loop[0]] ;

			  patch_target_parse(); //
 80046e0:	f7fc fdf8 	bl	80012d4 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 80046e4:	2300      	movs	r3, #0
 80046e6:	823b      	strh	r3, [r7, #16]


			memcpy(potSource,&seq,46); // about 35
 80046e8:	4a92      	ldr	r2, [pc, #584]	; (8004934 <main+0x2e8>)
 80046ea:	4b93      	ldr	r3, [pc, #588]	; (8004938 <main+0x2ec>)
 80046ec:	4614      	mov	r4, r2
 80046ee:	461d      	mov	r5, r3
 80046f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80046fc:	c407      	stmia	r4!, {r0, r1, r2}
 80046fe:	8023      	strh	r3, [r4, #0]

			for(i=0;i<10;i++){
 8004700:	4b8e      	ldr	r3, [pc, #568]	; (800493c <main+0x2f0>)
 8004702:	2200      	movs	r2, #0
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	e08b      	b.n	8004820 <main+0x1d4>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 8004708:	4b8c      	ldr	r3, [pc, #560]	; (800493c <main+0x2f0>)
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	339c      	adds	r3, #156	; 0x9c
 8004718:	4a86      	ldr	r2, [pc, #536]	; (8004934 <main+0x2e8>)
 800471a:	1898      	adds	r0, r3, r2
 800471c:	4b87      	ldr	r3, [pc, #540]	; (800493c <main+0x2f0>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4a85      	ldr	r2, [pc, #532]	; (8004940 <main+0x2f4>)
 800472c:	4413      	add	r3, r2
 800472e:	220e      	movs	r2, #14
 8004730:	4619      	mov	r1, r3
 8004732:	f007 fb5d 	bl	800bdf0 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8004736:	4b81      	ldr	r3, [pc, #516]	; (800493c <main+0x2f0>)
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	332e      	adds	r3, #46	; 0x2e
 8004746:	4a7b      	ldr	r2, [pc, #492]	; (8004934 <main+0x2e8>)
 8004748:	1898      	adds	r0, r3, r2
 800474a:	4b7c      	ldr	r3, [pc, #496]	; (800493c <main+0x2f0>)
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4a7a      	ldr	r2, [pc, #488]	; (8004944 <main+0x2f8>)
 800475a:	4413      	add	r3, r2
 800475c:	2206      	movs	r2, #6
 800475e:	4619      	mov	r1, r3
 8004760:	f007 fb46 	bl	800bdf0 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8004764:	4b75      	ldr	r3, [pc, #468]	; (800493c <main+0x2f0>)
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	336a      	adds	r3, #106	; 0x6a
 8004772:	4a70      	ldr	r2, [pc, #448]	; (8004934 <main+0x2e8>)
 8004774:	1898      	adds	r0, r3, r2
 8004776:	4b71      	ldr	r3, [pc, #452]	; (800493c <main+0x2f0>)
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	4a70      	ldr	r2, [pc, #448]	; (8004948 <main+0x2fc>)
 8004786:	4413      	add	r3, r2
 8004788:	2205      	movs	r2, #5
 800478a:	4619      	mov	r1, r3
 800478c:	f007 fb30 	bl	800bdf0 <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );
 8004790:	4b6a      	ldr	r3, [pc, #424]	; (800493c <main+0x2f0>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80047a2:	4a64      	ldr	r2, [pc, #400]	; (8004934 <main+0x2e8>)
 80047a4:	1898      	adds	r0, r3, r2
 80047a6:	4b65      	ldr	r3, [pc, #404]	; (800493c <main+0x2f0>)
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4a65      	ldr	r2, [pc, #404]	; (800494c <main+0x300>)
 80047b6:	4413      	add	r3, r2
 80047b8:	2206      	movs	r2, #6
 80047ba:	4619      	mov	r1, r3
 80047bc:	f007 fb18 	bl	800bdf0 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80047c0:	4b5e      	ldr	r3, [pc, #376]	; (800493c <main+0x2f0>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80047d2:	4a58      	ldr	r2, [pc, #352]	; (8004934 <main+0x2e8>)
 80047d4:	1898      	adds	r0, r3, r2
 80047d6:	4b59      	ldr	r3, [pc, #356]	; (800493c <main+0x2f0>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4a5a      	ldr	r2, [pc, #360]	; (8004950 <main+0x304>)
 80047e6:	4413      	add	r3, r2
 80047e8:	2206      	movs	r2, #6
 80047ea:	4619      	mov	r1, r3
 80047ec:	f007 fb00 	bl	800bdf0 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80047f0:	4b52      	ldr	r3, [pc, #328]	; (800493c <main+0x2f0>)
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80047fa:	4a4e      	ldr	r2, [pc, #312]	; (8004934 <main+0x2e8>)
 80047fc:	441a      	add	r2, r3
 80047fe:	4b4f      	ldr	r3, [pc, #316]	; (800493c <main+0x2f0>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4951      	ldr	r1, [pc, #324]	; (8004954 <main+0x308>)
 800480e:	440b      	add	r3, r1
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6013      	str	r3, [r2, #0]
			for(i=0;i<10;i++){
 8004814:	4b49      	ldr	r3, [pc, #292]	; (800493c <main+0x2f0>)
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	4b47      	ldr	r3, [pc, #284]	; (800493c <main+0x2f0>)
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	4b46      	ldr	r3, [pc, #280]	; (800493c <main+0x2f0>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	2b09      	cmp	r3, #9
 8004826:	f67f af6f 	bls.w	8004708 <main+0xbc>
			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 800482a:	2300      	movs	r3, #0
 800482c:	823b      	strh	r3, [r7, #16]
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now

						 mem_buf=potSource[mem_count];
 800482e:	4b40      	ldr	r3, [pc, #256]	; (8004930 <main+0x2e4>)
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <main+0x2e8>)
 8004836:	5c9a      	ldrb	r2, [r3, r2]
 8004838:	4b47      	ldr	r3, [pc, #284]	; (8004958 <main+0x30c>)
 800483a:	701a      	strb	r2, [r3, #0]
					//	 if (mem_buf>159) mem_buf=159;
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 800483c:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <main+0x2e4>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	b29b      	uxth	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	b29b      	uxth	r3, r3
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	b29a      	uxth	r2, r3
 800484c:	4b38      	ldr	r3, [pc, #224]	; (8004930 <main+0x2e4>)
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004854:	b29b      	uxth	r3, r3
 8004856:	4413      	add	r3, r2
 8004858:	823b      	strh	r3, [r7, #16]
						 //mem_count2=mem_count2+2048;   // Relocate mem for patch

						 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 800485a:	8a3a      	ldrh	r2, [r7, #16]
 800485c:	2364      	movs	r3, #100	; 0x64
 800485e:	9302      	str	r3, [sp, #8]
 8004860:	2301      	movs	r3, #1
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	4b3d      	ldr	r3, [pc, #244]	; (800495c <main+0x310>)
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2302      	movs	r3, #2
 800486a:	21a0      	movs	r1, #160	; 0xa0
 800486c:	483c      	ldr	r0, [pc, #240]	; (8004960 <main+0x314>)
 800486e:	f003 fc3d 	bl	80080ec <HAL_I2C_Mem_Read>
						 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 8004872:	4b3a      	ldr	r3, [pc, #232]	; (800495c <main+0x310>)
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	4b38      	ldr	r3, [pc, #224]	; (8004958 <main+0x30c>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d00b      	beq.n	8004896 <main+0x24a>
 800487e:	8a3a      	ldrh	r2, [r7, #16]
 8004880:	2364      	movs	r3, #100	; 0x64
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	2301      	movs	r3, #1
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <main+0x30c>)
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2302      	movs	r3, #2
 800488e:	21a0      	movs	r1, #160	; 0xa0
 8004890:	4833      	ldr	r0, [pc, #204]	; (8004960 <main+0x314>)
 8004892:	f003 fb31 	bl	8007ef8 <HAL_I2C_Mem_Write>



		//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

		loop_counter2=0; //reset
 8004896:	4b25      	ldr	r3, [pc, #148]	; (800492c <main+0x2e0>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <main+0x318>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80b0 	beq.w	8004a06 <main+0x3ba>
		uint16_t mem_counter=0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	82fb      	strh	r3, [r7, #22]
		  memcpy(serial_source,&seq,36); // copy bits
 80048aa:	2224      	movs	r2, #36	; 0x24
 80048ac:	4922      	ldr	r1, [pc, #136]	; (8004938 <main+0x2ec>)
 80048ae:	482e      	ldr	r0, [pc, #184]	; (8004968 <main+0x31c>)
 80048b0:	f007 fa9e 	bl	800bdf0 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80048b4:	4b2d      	ldr	r3, [pc, #180]	; (800496c <main+0x320>)
 80048b6:	492e      	ldr	r1, [pc, #184]	; (8004970 <main+0x324>)
 80048b8:	2240      	movs	r2, #64	; 0x40
 80048ba:	4618      	mov	r0, r3
 80048bc:	f007 fa98 	bl	800bdf0 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80048c0:	2300      	movs	r3, #0
 80048c2:	82fb      	strh	r3, [r7, #22]
 80048c4:	e02b      	b.n	800491e <main+0x2d2>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 80048c6:	8afb      	ldrh	r3, [r7, #22]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d812      	bhi.n	80048f2 <main+0x2a6>
 80048cc:	8afa      	ldrh	r2, [r7, #22]
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	3360      	adds	r3, #96	; 0x60
 80048d6:	4a24      	ldr	r2, [pc, #144]	; (8004968 <main+0x31c>)
 80048d8:	1898      	adds	r0, r3, r2
 80048da:	8afb      	ldrh	r3, [r7, #22]
 80048dc:	1d9a      	adds	r2, r3, #6
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4a16      	ldr	r2, [pc, #88]	; (8004940 <main+0x2f4>)
 80048e8:	4413      	add	r3, r2
 80048ea:	2207      	movs	r2, #7
 80048ec:	4619      	mov	r1, r3
 80048ee:	f007 fa7f 	bl	800bdf0 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 80048f2:	8afa      	ldrh	r2, [r7, #22]
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	3324      	adds	r3, #36	; 0x24
 80048fe:	4a1a      	ldr	r2, [pc, #104]	; (8004968 <main+0x31c>)
 8004900:	1898      	adds	r0, r3, r2
 8004902:	8afa      	ldrh	r2, [r7, #22]
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4a10      	ldr	r2, [pc, #64]	; (8004950 <main+0x304>)
 800490e:	4413      	add	r3, r2
 8004910:	2206      	movs	r2, #6
 8004912:	4619      	mov	r1, r3
 8004914:	f007 fa6c 	bl	800bdf0 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004918:	8afb      	ldrh	r3, [r7, #22]
 800491a:	3301      	adds	r3, #1
 800491c:	82fb      	strh	r3, [r7, #22]
 800491e:	8afb      	ldrh	r3, [r7, #22]
 8004920:	2b09      	cmp	r3, #9
 8004922:	d9d0      	bls.n	80048c6 <main+0x27a>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004924:	e02c      	b.n	8004980 <main+0x334>
 8004926:	bf00      	nop
 8004928:	20000904 	.word	0x20000904
 800492c:	20003160 	.word	0x20003160
 8004930:	2000315e 	.word	0x2000315e
 8004934:	2000069c 	.word	0x2000069c
 8004938:	20004d58 	.word	0x20004d58
 800493c:	20000908 	.word	0x20000908
 8004940:	20000158 	.word	0x20000158
 8004944:	20003f20 	.word	0x20003f20
 8004948:	200042cc 	.word	0x200042cc
 800494c:	20004d88 	.word	0x20004d88
 8004950:	200041c8 	.word	0x200041c8
 8004954:	20004204 	.word	0x20004204
 8004958:	20003164 	.word	0x20003164
 800495c:	20005537 	.word	0x20005537
 8004960:	20010e88 	.word	0x20010e88
 8004964:	20007761 	.word	0x20007761
 8004968:	20007560 	.word	0x20007560
 800496c:	200075c0 	.word	0x200075c0
 8004970:	20000798 	.word	0x20000798
			  serial_up++;
 8004974:	4b9c      	ldr	r3, [pc, #624]	; (8004be8 <main+0x59c>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	b2da      	uxtb	r2, r3
 800497c:	4b9a      	ldr	r3, [pc, #616]	; (8004be8 <main+0x59c>)
 800497e:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004980:	4b99      	ldr	r3, [pc, #612]	; (8004be8 <main+0x59c>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	4b99      	ldr	r3, [pc, #612]	; (8004bec <main+0x5a0>)
 8004988:	5c9a      	ldrb	r2, [r3, r2]
 800498a:	4b97      	ldr	r3, [pc, #604]	; (8004be8 <main+0x59c>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	4619      	mov	r1, r3
 8004990:	4b97      	ldr	r3, [pc, #604]	; (8004bf0 <main+0x5a4>)
 8004992:	5c5b      	ldrb	r3, [r3, r1]
 8004994:	429a      	cmp	r2, r3
 8004996:	d103      	bne.n	80049a0 <main+0x354>
 8004998:	4b93      	ldr	r3, [pc, #588]	; (8004be8 <main+0x59c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2ba0      	cmp	r3, #160	; 0xa0
 800499e:	d9e9      	bls.n	8004974 <main+0x328>
		  }

		  serial_send[6]=0;
 80049a0:	4b94      	ldr	r3, [pc, #592]	; (8004bf4 <main+0x5a8>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 80049a6:	4b94      	ldr	r3, [pc, #592]	; (8004bf8 <main+0x5ac>)
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <main+0x5a8>)
 80049ac:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 80049ae:	4b8e      	ldr	r3, [pc, #568]	; (8004be8 <main+0x59c>)
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	4b90      	ldr	r3, [pc, #576]	; (8004bf4 <main+0x5a8>)
 80049b4:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 80049b6:	4b8c      	ldr	r3, [pc, #560]	; (8004be8 <main+0x59c>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b8c      	ldr	r3, [pc, #560]	; (8004bf0 <main+0x5a4>)
 80049be:	5c9a      	ldrb	r2, [r3, r2]
 80049c0:	4b8c      	ldr	r3, [pc, #560]	; (8004bf4 <main+0x5a8>)
 80049c2:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 80049c4:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <main+0x59c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	4619      	mov	r1, r3
 80049ca:	4b87      	ldr	r3, [pc, #540]	; (8004be8 <main+0x59c>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b87      	ldr	r3, [pc, #540]	; (8004bf0 <main+0x5a4>)
 80049d2:	5c59      	ldrb	r1, [r3, r1]
 80049d4:	4b85      	ldr	r3, [pc, #532]	; (8004bec <main+0x5a0>)
 80049d6:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 80049d8:	4b83      	ldr	r3, [pc, #524]	; (8004be8 <main+0x59c>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2ba1      	cmp	r3, #161	; 0xa1
 80049de:	d903      	bls.n	80049e8 <main+0x39c>
 80049e0:	4b81      	ldr	r3, [pc, #516]	; (8004be8 <main+0x59c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	e005      	b.n	80049f4 <main+0x3a8>
 80049e8:	4b7f      	ldr	r3, [pc, #508]	; (8004be8 <main+0x59c>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	4b7d      	ldr	r3, [pc, #500]	; (8004be8 <main+0x59c>)
 80049f2:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 80049f4:	2364      	movs	r3, #100	; 0x64
 80049f6:	2208      	movs	r2, #8
 80049f8:	497e      	ldr	r1, [pc, #504]	; (8004bf4 <main+0x5a8>)
 80049fa:	4880      	ldr	r0, [pc, #512]	; (8004bfc <main+0x5b0>)
 80049fc:	f006 fe11 	bl	800b622 <HAL_UART_Transmit>
		  serial_tosend=0;
 8004a00:	4b7f      	ldr	r3, [pc, #508]	; (8004c00 <main+0x5b4>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 8004a06:	4b7f      	ldr	r3, [pc, #508]	; (8004c04 <main+0x5b8>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <main+0x3c6>
 8004a0e:	f7ff fb99 	bl	8004144 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8004a12:	4b7d      	ldr	r3, [pc, #500]	; (8004c08 <main+0x5bc>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d81b      	bhi.n	8004a52 <main+0x406>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8004a1a:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <main+0x5c0>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	801a      	strh	r2, [r3, #0]
 8004a20:	e007      	b.n	8004a32 <main+0x3e6>
 8004a22:	f7ff fa7d 	bl	8003f20 <display_init>
 8004a26:	4b79      	ldr	r3, [pc, #484]	; (8004c0c <main+0x5c0>)
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b77      	ldr	r3, [pc, #476]	; (8004c0c <main+0x5c0>)
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	4b76      	ldr	r3, [pc, #472]	; (8004c0c <main+0x5c0>)
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d9f3      	bls.n	8004a22 <main+0x3d6>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8004a3a:	4b73      	ldr	r3, [pc, #460]	; (8004c08 <main+0x5bc>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d107      	bne.n	8004a52 <main+0x406>
 8004a42:	4873      	ldr	r0, [pc, #460]	; (8004c10 <main+0x5c4>)
 8004a44:	f005 fcca 	bl	800a3dc <HAL_TIM_Base_Start_IT>
 8004a48:	4871      	ldr	r0, [pc, #452]	; (8004c10 <main+0x5c4>)
 8004a4a:	f005 fc6d 	bl	800a328 <HAL_TIM_Base_Start>
 8004a4e:	f7ff fabd 	bl	8003fcc <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8004a52:	4b6d      	ldr	r3, [pc, #436]	; (8004c08 <main+0x5bc>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	d903      	bls.n	8004a62 <main+0x416>


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8004a5a:	f7ff fd37 	bl	80044cc <menu3_fill>
 8004a5e:	f7ff fc53 	bl	8004308 <encoder2>
		}


		if (loop_counter2==4000){ // grab adc readings + 3ms , 32 step  // no freeze
 8004a62:	4b6c      	ldr	r3, [pc, #432]	; (8004c14 <main+0x5c8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004a6a:	d13d      	bne.n	8004ae8 <main+0x49c>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8004a6c:	486a      	ldr	r0, [pc, #424]	; (8004c18 <main+0x5cc>)
 8004a6e:	f001 ff6f 	bl	8006950 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	4866      	ldr	r0, [pc, #408]	; (8004c18 <main+0x5cc>)
 8004a7e:	f001 fad7 	bl	8006030 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8004a82:	2101      	movs	r1, #1
 8004a84:	4864      	ldr	r0, [pc, #400]	; (8004c18 <main+0x5cc>)
 8004a86:	f002 f879 	bl	8006b7c <HAL_ADCEx_InjectedGetValue>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	80bb      	strh	r3, [r7, #4]
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8004a90:	2102      	movs	r1, #2
 8004a92:	4861      	ldr	r0, [pc, #388]	; (8004c18 <main+0x5cc>)
 8004a94:	f002 f872 	bl	8006b7c <HAL_ADCEx_InjectedGetValue>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	80fb      	strh	r3, [r7, #6]
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8004a9e:	2103      	movs	r1, #3
 8004aa0:	485d      	ldr	r0, [pc, #372]	; (8004c18 <main+0x5cc>)
 8004aa2:	f002 f86b 	bl	8006b7c <HAL_ADCEx_InjectedGetValue>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	813b      	strh	r3, [r7, #8]
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8004aac:	485a      	ldr	r0, [pc, #360]	; (8004c18 <main+0x5cc>)
 8004aae:	f002 f819 	bl	8006ae4 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	31- ( adc_temp1[0]>>7);
 8004ab2:	88bb      	ldrh	r3, [r7, #4]
 8004ab4:	09db      	lsrs	r3, r3, #7
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f1c3 031f 	rsb	r3, r3, #31
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	4b57      	ldr	r3, [pc, #348]	; (8004c1c <main+0x5d0>)
 8004ac0:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 31-( adc_temp1[1]>>7);
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	09db      	lsrs	r3, r3, #7
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f1c3 031f 	rsb	r3, r3, #31
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <main+0x5d0>)
 8004ad0:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 31-( adc_temp1[2]>>7);
 8004ad2:	893b      	ldrh	r3, [r7, #8]
 8004ad4:	09db      	lsrs	r3, r3, #7
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f1c3 031f 	rsb	r3, r3, #31
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	4b4f      	ldr	r3, [pc, #316]	; (8004c1c <main+0x5d0>)
 8004ae0:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <main+0x5d4>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8004ae8:	4b43      	ldr	r3, [pc, #268]	; (8004bf8 <main+0x5ac>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b07      	cmp	r3, #7
 8004aee:	d106      	bne.n	8004afe <main+0x4b2>
 8004af0:	4b4c      	ldr	r3, [pc, #304]	; (8004c24 <main+0x5d8>)
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <main+0x4b2>
 8004af8:	4b4a      	ldr	r3, [pc, #296]	; (8004c24 <main+0x5d8>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8004afe:	4b3e      	ldr	r3, [pc, #248]	; (8004bf8 <main+0x5ac>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b0e:	4846      	ldr	r0, [pc, #280]	; (8004c28 <main+0x5dc>)
 8004b10:	f003 f87c 	bl	8007c0c <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8004b14:	4b45      	ldr	r3, [pc, #276]	; (8004c2c <main+0x5e0>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d056      	beq.n	8004bca <main+0x57e>


			uint16_t    adc_page=0; ;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	82bb      	strh	r3, [r7, #20]
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8004b20:	4b42      	ldr	r3, [pc, #264]	; (8004c2c <main+0x5e0>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <main+0x4e0>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	82bb      	strh	r3, [r7, #20]
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 8004b2c:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <main+0x5e0>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d102      	bne.n	8004b3a <main+0x4ee>
 8004b34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b38:	82bb      	strh	r3, [r7, #20]


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8004b3a:	4b34      	ldr	r3, [pc, #208]	; (8004c0c <main+0x5c0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	e02c      	b.n	8004b9c <main+0x550>
				adc_convert_count=(i*3)+adc_page;
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <main+0x5c0>)
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	0052      	lsls	r2, r2, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	8abb      	ldrh	r3, [r7, #20]
 8004b50:	4413      	add	r3, r2
 8004b52:	81fb      	strh	r3, [r7, #14]

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2];
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <main+0x5e4>)
 8004b58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004b5c:	89fb      	ldrh	r3, [r7, #14]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	4933      	ldr	r1, [pc, #204]	; (8004c30 <main+0x5e4>)
 8004b62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b66:	4413      	add	r3, r2
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	89fb      	ldrh	r3, [r7, #14]
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	4930      	ldr	r1, [pc, #192]	; (8004c30 <main+0x5e4>)
 8004b70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004b74:	4413      	add	r3, r2
 8004b76:	81bb      	strh	r3, [r7, #12]
				input_holder[i]=adc_convert_temp/3;
 8004b78:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <main+0x5c0>)
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	89bb      	ldrh	r3, [r7, #12]
 8004b80:	4a2c      	ldr	r2, [pc, #176]	; (8004c34 <main+0x5e8>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <main+0x5ec>)
 8004b8c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			for (i=0;i<512;i++){
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <main+0x5c0>)
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <main+0x5c0>)
 8004b9a:	801a      	strh	r2, [r3, #0]
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <main+0x5c0>)
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba4:	d3cd      	bcc.n	8004b42 <main+0x4f6>
				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}
 8004ba6:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <main+0x5f0>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <main+0x578>
 8004bae:	f7fc fa7b 	bl	80010a8 <sampler_ram_record>
 8004bb2:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <main+0x5f0>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	739a      	strb	r2, [r3, #14]
 8004bb8:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <main+0x5f0>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	73da      	strb	r2, [r3, #15]
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <main+0x5f0>)
 8004bc0:	223f      	movs	r2, #63	; 0x3f
 8004bc2:	741a      	strb	r2, [r3, #16]

			adc_flag=0;
 8004bc4:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <main+0x5e0>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <main+0x5f4>)
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d951      	bls.n	8004c7a <main+0x62e>
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <main+0x5f8>)
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bde:	d14c      	bne.n	8004c7a <main+0x62e>
 8004be0:	4b19      	ldr	r3, [pc, #100]	; (8004c48 <main+0x5fc>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8004be6:	e048      	b.n	8004c7a <main+0x62e>
 8004be8:	20007760 	.word	0x20007760
 8004bec:	20007660 	.word	0x20007660
 8004bf0:	20007560 	.word	0x20007560
 8004bf4:	20000224 	.word	0x20000224
 8004bf8:	20004d58 	.word	0x20004d58
 8004bfc:	2001110c 	.word	0x2001110c
 8004c00:	20007761 	.word	0x20007761
 8004c04:	20003b02 	.word	0x20003b02
 8004c08:	20003153 	.word	0x20003153
 8004c0c:	20000908 	.word	0x20000908
 8004c10:	200110c4 	.word	0x200110c4
 8004c14:	20003160 	.word	0x20003160
 8004c18:	20010de0 	.word	0x20010de0
 8004c1c:	20000144 	.word	0x20000144
 8004c20:	20000904 	.word	0x20000904
 8004c24:	2000314a 	.word	0x2000314a
 8004c28:	40020800 	.word	0x40020800
 8004c2c:	20003f04 	.word	0x20003f04
 8004c30:	2000191c 	.word	0x2000191c
 8004c34:	aaaaaaab 	.word	0xaaaaaaab
 8004c38:	20003b04 	.word	0x20003b04
 8004c3c:	20000204 	.word	0x20000204
 8004c40:	20001910 	.word	0x20001910
 8004c44:	20001916 	.word	0x20001916
 8004c48:	2000014e 	.word	0x2000014e

			sampling();
 8004c4c:	f7fd f9c0 	bl	8001fd0 <sampling>

			uint8_t up_counter2=0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	74fb      	strb	r3, [r7, #19]
			while ((up_counter2<8) && (init > 5) )								{
 8004c54:	e00a      	b.n	8004c6c <main+0x620>

			gfx_line_fill();   // just run 8 times between sampling , dont need more
 8004c56:	f7ff fa87 	bl	8004168 <gfx_line_fill>
			up_counter2++;
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	74fb      	strb	r3, [r7, #19]
			loop_counter++;
 8004c60:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <main+0x638>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <main+0x638>)
 8004c6a:	701a      	strb	r2, [r3, #0]
			while ((up_counter2<8) && (init > 5) )								{
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	2b07      	cmp	r3, #7
 8004c70:	d803      	bhi.n	8004c7a <main+0x62e>
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <main+0x63c>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d8ed      	bhi.n	8004c56 <main+0x60a>
		while  (bank_write)                         {							// wait for adc , priority
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <main+0x640>)
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e4      	bne.n	8004c4c <main+0x600>
	  loop_counter++ ;
 8004c82:	e504      	b.n	800468e <main+0x42>
 8004c84:	20000904 	.word	0x20000904
 8004c88:	20003153 	.word	0x20003153
 8004c8c:	2000014e 	.word	0x2000014e

08004c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b094      	sub	sp, #80	; 0x50
 8004c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c96:	f107 0320 	add.w	r3, r7, #32
 8004c9a:	2230      	movs	r2, #48	; 0x30
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f007 f8b4 	bl	800be0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <SystemClock_Config+0xcc>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	4a27      	ldr	r2, [pc, #156]	; (8004d5c <SystemClock_Config+0xcc>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc4:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <SystemClock_Config+0xcc>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <SystemClock_Config+0xd0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <SystemClock_Config+0xd0>)
 8004cda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b1f      	ldr	r3, [pc, #124]	; (8004d60 <SystemClock_Config+0xd0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cec:	2302      	movs	r3, #2
 8004cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004d00:	2308      	movs	r3, #8
 8004d02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004d04:	2364      	movs	r3, #100	; 0x64
 8004d06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d10:	f107 0320 	add.w	r3, r7, #32
 8004d14:	4618      	mov	r0, r3
 8004d16:	f003 ff6b 	bl	8008bf0 <HAL_RCC_OscConfig>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004d20:	f000 fc18 	bl	8005554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d24:	230f      	movs	r3, #15
 8004d26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	2103      	movs	r1, #3
 8004d42:	4618      	mov	r0, r3
 8004d44:	f004 f9cc 	bl	80090e0 <HAL_RCC_ClockConfig>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004d4e:	f000 fc01 	bl	8005554 <Error_Handler>
  }
}
 8004d52:	bf00      	nop
 8004d54:	3750      	adds	r7, #80	; 0x50
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40007000 	.word	0x40007000

08004d64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	; 0x30
 8004d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004d6a:	f107 0320 	add.w	r3, r7, #32
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004d78:	463b      	mov	r3, r7
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f007 f844 	bl	800be0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004d84:	4b3e      	ldr	r3, [pc, #248]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004d86:	4a3f      	ldr	r2, [pc, #252]	; (8004e84 <MX_ADC1_Init+0x120>)
 8004d88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8004d8a:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004d8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004d92:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004d98:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004da4:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004dac:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004db2:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004db4:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <MX_ADC1_Init+0x124>)
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004db8:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004dbe:	4b30      	ldr	r3, [pc, #192]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004dc4:	4b2e      	ldr	r3, [pc, #184]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004dd2:	482b      	ldr	r0, [pc, #172]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004dd4:	f001 f834 	bl	8005e40 <HAL_ADC_Init>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8004dde:	f000 fbb9 	bl	8005554 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004de2:	2309      	movs	r3, #9
 8004de4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004dea:	2306      	movs	r3, #6
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004dee:	f107 0320 	add.w	r3, r7, #32
 8004df2:	4619      	mov	r1, r3
 8004df4:	4822      	ldr	r0, [pc, #136]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004df6:	f001 fafb 	bl	80063f0 <HAL_ADC_ConfigChannel>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004e00:	f000 fba8 	bl	8005554 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004e10:	2303      	movs	r3, #3
 8004e12:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004e18:	4b1c      	ldr	r3, [pc, #112]	; (8004e8c <MX_ADC1_Init+0x128>)
 8004e1a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004e28:	463b      	mov	r3, r7
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4814      	ldr	r0, [pc, #80]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004e2e:	f001 fedd 	bl	8006bec <HAL_ADCEx_InjectedConfigChannel>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004e38:	f000 fb8c 	bl	8005554 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8004e40:	2302      	movs	r3, #2
 8004e42:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004e44:	463b      	mov	r3, r7
 8004e46:	4619      	mov	r1, r3
 8004e48:	480d      	ldr	r0, [pc, #52]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004e4a:	f001 fecf 	bl	8006bec <HAL_ADCEx_InjectedConfigChannel>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8004e54:	f000 fb7e 	bl	8005554 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004e58:	2308      	movs	r3, #8
 8004e5a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004e64:	463b      	mov	r3, r7
 8004e66:	4619      	mov	r1, r3
 8004e68:	4805      	ldr	r0, [pc, #20]	; (8004e80 <MX_ADC1_Init+0x11c>)
 8004e6a:	f001 febf 	bl	8006bec <HAL_ADCEx_InjectedConfigChannel>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8004e74:	f000 fb6e 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004e78:	bf00      	nop
 8004e7a:	3730      	adds	r7, #48	; 0x30
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20010de0 	.word	0x20010de0
 8004e84:	40012000 	.word	0x40012000
 8004e88:	0f000001 	.word	0x0f000001
 8004e8c:	000f0001 	.word	0x000f0001

08004e90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004e96:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <MX_I2C2_Init+0x54>)
 8004e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004e9c:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <MX_I2C2_Init+0x58>)
 8004e9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004eb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004eba:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004ecc:	4804      	ldr	r0, [pc, #16]	; (8004ee0 <MX_I2C2_Init+0x50>)
 8004ece:	f002 fecf 	bl	8007c70 <HAL_I2C_Init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004ed8:	f000 fb3c 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004edc:	bf00      	nop
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20010e88 	.word	0x20010e88
 8004ee4:	40005800 	.word	0x40005800
 8004ee8:	000186a0 	.word	0x000186a0

08004eec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <MX_SPI1_Init+0x68>)
 8004ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f04:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f0a:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f20:	2208      	movs	r2, #8
 8004f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f38:	220a      	movs	r2, #10
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f3c:	4804      	ldr	r0, [pc, #16]	; (8004f50 <MX_SPI1_Init+0x64>)
 8004f3e:	f004 faaf 	bl	80094a0 <HAL_SPI_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004f48:	f000 fb04 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f4c:	bf00      	nop
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20010edc 	.word	0x20010edc
 8004f54:	40013000 	.word	0x40013000

08004f58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004f5c:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f5e:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <MX_SPI2_Init+0x68>)
 8004f60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f70:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f8c:	2230      	movs	r2, #48	; 0x30
 8004f8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f9c:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004fa4:	220a      	movs	r2, #10
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004fa8:	4804      	ldr	r0, [pc, #16]	; (8004fbc <MX_SPI2_Init+0x64>)
 8004faa:	f004 fa79 	bl	80094a0 <HAL_SPI_Init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004fb4:	f000 face 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004fb8:	bf00      	nop
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20010f34 	.word	0x20010f34
 8004fc0:	40003800 	.word	0x40003800

08004fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004fca:	f107 030c 	add.w	r3, r7, #12
 8004fce:	2224      	movs	r2, #36	; 0x24
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f006 ff1a 	bl	800be0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fe0:	4b21      	ldr	r3, [pc, #132]	; (8005068 <MX_TIM2_Init+0xa4>)
 8004fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <MX_TIM2_Init+0xa4>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fee:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <MX_TIM2_Init+0xa4>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <MX_TIM2_Init+0xa4>)
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <MX_TIM2_Init+0xa4>)
 8004ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005002:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005004:	4b18      	ldr	r3, [pc, #96]	; (8005068 <MX_TIM2_Init+0xa4>)
 8005006:	2200      	movs	r2, #0
 8005008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800500a:	2301      	movs	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800500e:	2302      	movs	r3, #2
 8005010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005012:	2301      	movs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800501a:	2302      	movs	r3, #2
 800501c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800501e:	2302      	movs	r3, #2
 8005020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005022:	2301      	movs	r3, #1
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005026:	2300      	movs	r3, #0
 8005028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800502a:	2302      	movs	r3, #2
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800502e:	f107 030c 	add.w	r3, r7, #12
 8005032:	4619      	mov	r1, r3
 8005034:	480c      	ldr	r0, [pc, #48]	; (8005068 <MX_TIM2_Init+0xa4>)
 8005036:	f005 fb95 	bl	800a764 <HAL_TIM_Encoder_Init>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005040:	f000 fa88 	bl	8005554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005044:	2300      	movs	r3, #0
 8005046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005048:	2300      	movs	r3, #0
 800504a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800504c:	1d3b      	adds	r3, r7, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4805      	ldr	r0, [pc, #20]	; (8005068 <MX_TIM2_Init+0xa4>)
 8005052:	f006 fa0f 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800505c:	f000 fa7a 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005060:	bf00      	nop
 8005062:	3730      	adds	r7, #48	; 0x30
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20010fec 	.word	0x20010fec

0800506c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08e      	sub	sp, #56	; 0x38
 8005070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	605a      	str	r2, [r3, #4]
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005080:	f107 0320 	add.w	r3, r7, #32
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800508a:	1d3b      	adds	r3, r7, #4
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	605a      	str	r2, [r3, #4]
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	611a      	str	r2, [r3, #16]
 8005098:	615a      	str	r2, [r3, #20]
 800509a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800509c:	4b32      	ldr	r3, [pc, #200]	; (8005168 <MX_TIM3_Init+0xfc>)
 800509e:	4a33      	ldr	r2, [pc, #204]	; (800516c <MX_TIM3_Init+0x100>)
 80050a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80050a2:	4b31      	ldr	r3, [pc, #196]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050a8:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 80050ae:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050b0:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80050b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050bc:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80050c2:	4829      	ldr	r0, [pc, #164]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050c4:	f005 f8e0 	bl	800a288 <HAL_TIM_Base_Init>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80050ce:	f000 fa41 	bl	8005554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80050d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050dc:	4619      	mov	r1, r3
 80050de:	4822      	ldr	r0, [pc, #136]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050e0:	f005 fe0c 	bl	800acfc <HAL_TIM_ConfigClockSource>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80050ea:	f000 fa33 	bl	8005554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80050ee:	481e      	ldr	r0, [pc, #120]	; (8005168 <MX_TIM3_Init+0xfc>)
 80050f0:	f005 fa2f 	bl	800a552 <HAL_TIM_PWM_Init>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80050fa:	f000 fa2b 	bl	8005554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005102:	2300      	movs	r3, #0
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005106:	f107 0320 	add.w	r3, r7, #32
 800510a:	4619      	mov	r1, r3
 800510c:	4816      	ldr	r0, [pc, #88]	; (8005168 <MX_TIM3_Init+0xfc>)
 800510e:	f006 f9b1 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005118:	f000 fa1c 	bl	8005554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800511c:	2360      	movs	r3, #96	; 0x60
 800511e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005128:	2304      	movs	r3, #4
 800512a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800512c:	1d3b      	adds	r3, r7, #4
 800512e:	2200      	movs	r2, #0
 8005130:	4619      	mov	r1, r3
 8005132:	480d      	ldr	r0, [pc, #52]	; (8005168 <MX_TIM3_Init+0xfc>)
 8005134:	f005 fd20 	bl	800ab78 <HAL_TIM_PWM_ConfigChannel>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800513e:	f000 fa09 	bl	8005554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005142:	1d3b      	adds	r3, r7, #4
 8005144:	2204      	movs	r2, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4807      	ldr	r0, [pc, #28]	; (8005168 <MX_TIM3_Init+0xfc>)
 800514a:	f005 fd15 	bl	800ab78 <HAL_TIM_PWM_ConfigChannel>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005154:	f000 f9fe 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005158:	4803      	ldr	r0, [pc, #12]	; (8005168 <MX_TIM3_Init+0xfc>)
 800515a:	f000 fc89 	bl	8005a70 <HAL_TIM_MspPostInit>

}
 800515e:	bf00      	nop
 8005160:	3738      	adds	r7, #56	; 0x38
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20011034 	.word	0x20011034
 800516c:	40000400 	.word	0x40000400

08005170 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08c      	sub	sp, #48	; 0x30
 8005174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005176:	f107 030c 	add.w	r3, r7, #12
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f006 fe44 	bl	800be0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <MX_TIM4_Init+0xa4>)
 800518e:	4a22      	ldr	r2, [pc, #136]	; (8005218 <MX_TIM4_Init+0xa8>)
 8005190:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005192:	4b20      	ldr	r3, [pc, #128]	; (8005214 <MX_TIM4_Init+0xa4>)
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <MX_TIM4_Init+0xa4>)
 800519a:	2200      	movs	r2, #0
 800519c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <MX_TIM4_Init+0xa4>)
 80051a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80051a6:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <MX_TIM4_Init+0xa4>)
 80051a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051ae:	4b19      	ldr	r3, [pc, #100]	; (8005214 <MX_TIM4_Init+0xa4>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80051b4:	2302      	movs	r3, #2
 80051b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80051b8:	2302      	movs	r3, #2
 80051ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80051bc:	2301      	movs	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 80051c4:	2304      	movs	r3, #4
 80051c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80051c8:	2302      	movs	r3, #2
 80051ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80051cc:	2301      	movs	r3, #1
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 80051d4:	2304      	movs	r3, #4
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80051d8:	f107 030c 	add.w	r3, r7, #12
 80051dc:	4619      	mov	r1, r3
 80051de:	480d      	ldr	r0, [pc, #52]	; (8005214 <MX_TIM4_Init+0xa4>)
 80051e0:	f005 fac0 	bl	800a764 <HAL_TIM_Encoder_Init>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80051ea:	f000 f9b3 	bl	8005554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	4619      	mov	r1, r3
 80051fa:	4806      	ldr	r0, [pc, #24]	; (8005214 <MX_TIM4_Init+0xa4>)
 80051fc:	f006 f93a 	bl	800b474 <HAL_TIMEx_MasterConfigSynchronization>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005206:	f000 f9a5 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800520a:	bf00      	nop
 800520c:	3730      	adds	r7, #48	; 0x30
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	2001107c 	.word	0x2001107c
 8005218:	40000800 	.word	0x40000800

0800521c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	605a      	str	r2, [r3, #4]
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	611a      	str	r2, [r3, #16]
 8005230:	615a      	str	r2, [r3, #20]
 8005232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005234:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <MX_TIM10_Init+0x8c>)
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <MX_TIM10_Init+0x90>)
 8005238:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 800523a:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <MX_TIM10_Init+0x8c>)
 800523c:	2204      	movs	r2, #4
 800523e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005240:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <MX_TIM10_Init+0x8c>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <MX_TIM10_Init+0x8c>)
 8005248:	f24c 3250 	movw	r2, #50000	; 0xc350
 800524c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800524e:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <MX_TIM10_Init+0x8c>)
 8005250:	2200      	movs	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005254:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <MX_TIM10_Init+0x8c>)
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <MX_TIM10_Init+0x8c>)
 800525c:	f005 f814 	bl	800a288 <HAL_TIM_Base_Init>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005266:	f000 f975 	bl	8005554 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 800526a:	480f      	ldr	r0, [pc, #60]	; (80052a8 <MX_TIM10_Init+0x8c>)
 800526c:	f005 f918 	bl	800a4a0 <HAL_TIM_OC_Init>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005276:	f000 f96d 	bl	8005554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	2200      	movs	r2, #0
 800528e:	4619      	mov	r1, r3
 8005290:	4805      	ldr	r0, [pc, #20]	; (80052a8 <MX_TIM10_Init+0x8c>)
 8005292:	f005 fc15 	bl	800aac0 <HAL_TIM_OC_ConfigChannel>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800529c:	f000 f95a 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80052a0:	bf00      	nop
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	200110c4 	.word	0x200110c4
 80052ac:	40014400 	.word	0x40014400

080052b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052b4:	4b11      	ldr	r3, [pc, #68]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052b6:	4a12      	ldr	r2, [pc, #72]	; (8005300 <MX_USART1_UART_Init+0x50>)
 80052b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052ba:	4b10      	ldr	r3, [pc, #64]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052c2:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052ce:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052d6:	2208      	movs	r2, #8
 80052d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052da:	4b08      	ldr	r3, [pc, #32]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80052e6:	4805      	ldr	r0, [pc, #20]	; (80052fc <MX_USART1_UART_Init+0x4c>)
 80052e8:	f006 f946 	bl	800b578 <HAL_HalfDuplex_Init>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80052f2:	f000 f92f 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80052f6:	bf00      	nop
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	2001110c 	.word	0x2001110c
 8005300:	40011000 	.word	0x40011000

08005304 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005308:	4b11      	ldr	r3, [pc, #68]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 800530a:	4a12      	ldr	r2, [pc, #72]	; (8005354 <MX_USART6_UART_Init+0x50>)
 800530c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800530e:	4b10      	ldr	r3, [pc, #64]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 8005310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005314:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005316:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 8005318:	2200      	movs	r2, #0
 800531a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 800531e:	2200      	movs	r2, #0
 8005320:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 8005324:	2200      	movs	r2, #0
 8005326:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 800532a:	220c      	movs	r2, #12
 800532c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800532e:	4b08      	ldr	r3, [pc, #32]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 8005330:	2200      	movs	r2, #0
 8005332:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 800533a:	4805      	ldr	r0, [pc, #20]	; (8005350 <MX_USART6_UART_Init+0x4c>)
 800533c:	f006 f91c 	bl	800b578 <HAL_HalfDuplex_Init>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005346:	f000 f905 	bl	8005554 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20011150 	.word	0x20011150
 8005354:	40011400 	.word	0x40011400

08005358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	607b      	str	r3, [r7, #4]
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <MX_DMA_Init+0x68>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <MX_DMA_Init+0x68>)
 8005368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800536c:	6313      	str	r3, [r2, #48]	; 0x30
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <MX_DMA_Init+0x68>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005376:	607b      	str	r3, [r7, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800537a:	2300      	movs	r3, #0
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <MX_DMA_Init+0x68>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <MX_DMA_Init+0x68>)
 8005384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005388:	6313      	str	r3, [r2, #48]	; 0x30
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <MX_DMA_Init+0x68>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8005396:	2200      	movs	r2, #0
 8005398:	2100      	movs	r1, #0
 800539a:	200f      	movs	r0, #15
 800539c:	f001 fe9b 	bl	80070d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80053a0:	200f      	movs	r0, #15
 80053a2:	f001 feb4 	bl	800710e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80053a6:	2200      	movs	r2, #0
 80053a8:	2100      	movs	r1, #0
 80053aa:	203c      	movs	r0, #60	; 0x3c
 80053ac:	f001 fe93 	bl	80070d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80053b0:	203c      	movs	r0, #60	; 0x3c
 80053b2:	f001 feac 	bl	800710e <HAL_NVIC_EnableIRQ>

}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800

080053c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ca:	f107 030c 	add.w	r3, r7, #12
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	609a      	str	r2, [r3, #8]
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <MX_GPIO_Init+0xf0>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	4a34      	ldr	r2, [pc, #208]	; (80054b4 <MX_GPIO_Init+0xf0>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ea:	4b32      	ldr	r3, [pc, #200]	; (80054b4 <MX_GPIO_Init+0xf0>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <MX_GPIO_Init+0xf0>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4a2d      	ldr	r2, [pc, #180]	; (80054b4 <MX_GPIO_Init+0xf0>)
 8005400:	f043 0302 	orr.w	r3, r3, #2
 8005404:	6313      	str	r3, [r2, #48]	; 0x30
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <MX_GPIO_Init+0xf0>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <MX_GPIO_Init+0xf0>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4a26      	ldr	r2, [pc, #152]	; (80054b4 <MX_GPIO_Init+0xf0>)
 800541c:	f043 0304 	orr.w	r3, r3, #4
 8005420:	6313      	str	r3, [r2, #48]	; 0x30
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <MX_GPIO_Init+0xf0>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800542e:	2200      	movs	r2, #0
 8005430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005434:	4820      	ldr	r0, [pc, #128]	; (80054b8 <MX_GPIO_Init+0xf4>)
 8005436:	f002 fbe9 	bl	8007c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800543a:	2201      	movs	r2, #1
 800543c:	2110      	movs	r1, #16
 800543e:	481f      	ldr	r0, [pc, #124]	; (80054bc <MX_GPIO_Init+0xf8>)
 8005440:	f002 fbe4 	bl	8007c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800544a:	2301      	movs	r3, #1
 800544c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	4619      	mov	r1, r3
 800545c:	4816      	ldr	r0, [pc, #88]	; (80054b8 <MX_GPIO_Init+0xf4>)
 800545e:	f002 fa51 	bl	8007904 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 8005462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005468:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800546c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800546e:	2301      	movs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 8005472:	f107 030c 	add.w	r3, r7, #12
 8005476:	4619      	mov	r1, r3
 8005478:	4811      	ldr	r0, [pc, #68]	; (80054c0 <MX_GPIO_Init+0xfc>)
 800547a:	f002 fa43 	bl	8007904 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800547e:	2310      	movs	r3, #16
 8005480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005482:	2301      	movs	r3, #1
 8005484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800548a:	2303      	movs	r3, #3
 800548c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 800548e:	f107 030c 	add.w	r3, r7, #12
 8005492:	4619      	mov	r1, r3
 8005494:	4809      	ldr	r0, [pc, #36]	; (80054bc <MX_GPIO_Init+0xf8>)
 8005496:	f002 fa35 	bl	8007904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800549a:	2200      	movs	r2, #0
 800549c:	2104      	movs	r1, #4
 800549e:	2028      	movs	r0, #40	; 0x28
 80054a0:	f001 fe19 	bl	80070d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80054a4:	2028      	movs	r0, #40	; 0x28
 80054a6:	f001 fe32 	bl	800710e <HAL_NVIC_EnableIRQ>

}
 80054aa:	bf00      	nop
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40020800 	.word	0x40020800
 80054bc:	40020000 	.word	0x40020000
 80054c0:	40020400 	.word	0x40020400

080054c4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]

	}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20003f04 	.word	0x20003f04

080054e4 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 80054ec:	4b07      	ldr	r3, [pc, #28]	; (800550c <HAL_ADC_ConvCpltCallback+0x28>)
 80054ee:	2202      	movs	r2, #2
 80054f0:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 80054f2:	4807      	ldr	r0, [pc, #28]	; (8005510 <HAL_ADC_ConvCpltCallback+0x2c>)
 80054f4:	f000 ff18 	bl	8006328 <HAL_ADC_Stop_DMA>
 80054f8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80054fc:	4905      	ldr	r1, [pc, #20]	; (8005514 <HAL_ADC_ConvCpltCallback+0x30>)
 80054fe:	4804      	ldr	r0, [pc, #16]	; (8005510 <HAL_ADC_ConvCpltCallback+0x2c>)
 8005500:	f000 fe22 	bl	8006148 <HAL_ADC_Start_DMA>

	}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20003f04 	.word	0x20003f04
 8005510:	20010de0 	.word	0x20010de0
 8005514:	2000191c 	.word	0x2000191c

08005518 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553c:	d102      	bne.n	8005544 <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <HAL_GPIO_EXTI_Callback+0x24>)
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
  }
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000204 	.word	0x20000204

08005554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005558:	b672      	cpsid	i
}
 800555a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800555c:	e7fe      	b.n	800555c <Error_Handler+0x8>
	...

08005560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	4b10      	ldr	r3, [pc, #64]	; (80055ac <HAL_MspInit+0x4c>)
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	4a0f      	ldr	r2, [pc, #60]	; (80055ac <HAL_MspInit+0x4c>)
 8005570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005574:	6453      	str	r3, [r2, #68]	; 0x44
 8005576:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <HAL_MspInit+0x4c>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557e:	607b      	str	r3, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4b09      	ldr	r3, [pc, #36]	; (80055ac <HAL_MspInit+0x4c>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	4a08      	ldr	r2, [pc, #32]	; (80055ac <HAL_MspInit+0x4c>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005590:	6413      	str	r3, [r2, #64]	; 0x40
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_MspInit+0x4c>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800

080055b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3c      	ldr	r2, [pc, #240]	; (80056c0 <HAL_ADC_MspInit+0x110>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d171      	bne.n	80056b6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	4a3a      	ldr	r2, [pc, #232]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e0:	6453      	str	r3, [r2, #68]	; 0x44
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	4a33      	ldr	r2, [pc, #204]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	6313      	str	r3, [r2, #48]	; 0x30
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
 800561a:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <HAL_ADC_MspInit+0x114>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8005626:	2305      	movs	r3, #5
 8005628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800562a:	2303      	movs	r3, #3
 800562c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005632:	f107 0314 	add.w	r3, r7, #20
 8005636:	4619      	mov	r1, r3
 8005638:	4823      	ldr	r0, [pc, #140]	; (80056c8 <HAL_ADC_MspInit+0x118>)
 800563a:	f002 f963 	bl	8007904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800563e:	2303      	movs	r3, #3
 8005640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005642:	2303      	movs	r3, #3
 8005644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	4619      	mov	r1, r3
 8005650:	481e      	ldr	r0, [pc, #120]	; (80056cc <HAL_ADC_MspInit+0x11c>)
 8005652:	f002 f957 	bl	8007904 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8005656:	4b1e      	ldr	r3, [pc, #120]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005658:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <HAL_ADC_MspInit+0x124>)
 800565a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800565c:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 800565e:	2200      	movs	r2, #0
 8005660:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005662:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005664:	2200      	movs	r2, #0
 8005666:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005668:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 800566a:	2200      	movs	r2, #0
 800566c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005674:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005676:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800567e:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005680:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005684:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005686:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800568c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800568e:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005690:	2200      	movs	r2, #0
 8005692:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 8005696:	2200      	movs	r2, #0
 8005698:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800569a:	480d      	ldr	r0, [pc, #52]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 800569c:	f001 fd52 	bl	8007144 <HAL_DMA_Init>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80056a6:	f7ff ff55 	bl	8005554 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
 80056b0:	4a07      	ldr	r2, [pc, #28]	; (80056d0 <HAL_ADC_MspInit+0x120>)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80056b6:	bf00      	nop
 80056b8:	3728      	adds	r7, #40	; 0x28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40012000 	.word	0x40012000
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40020000 	.word	0x40020000
 80056cc:	40020400 	.word	0x40020400
 80056d0:	20010e28 	.word	0x20010e28
 80056d4:	40026470 	.word	0x40026470

080056d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e0:	f107 0314 	add.w	r3, r7, #20
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	605a      	str	r2, [r3, #4]
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a22      	ldr	r2, [pc, #136]	; (8005780 <HAL_I2C_MspInit+0xa8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d13d      	bne.n	8005776 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	4b21      	ldr	r3, [pc, #132]	; (8005784 <HAL_I2C_MspInit+0xac>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	4a20      	ldr	r2, [pc, #128]	; (8005784 <HAL_I2C_MspInit+0xac>)
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	6313      	str	r3, [r2, #48]	; 0x30
 800570a:	4b1e      	ldr	r3, [pc, #120]	; (8005784 <HAL_I2C_MspInit+0xac>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800571a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800571c:	2312      	movs	r3, #18
 800571e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005724:	2303      	movs	r3, #3
 8005726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005728:	2309      	movs	r3, #9
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4619      	mov	r1, r3
 8005732:	4815      	ldr	r0, [pc, #84]	; (8005788 <HAL_I2C_MspInit+0xb0>)
 8005734:	f002 f8e6 	bl	8007904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800573c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800573e:	2312      	movs	r3, #18
 8005740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005746:	2303      	movs	r3, #3
 8005748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800574a:	2304      	movs	r3, #4
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800574e:	f107 0314 	add.w	r3, r7, #20
 8005752:	4619      	mov	r1, r3
 8005754:	480c      	ldr	r0, [pc, #48]	; (8005788 <HAL_I2C_MspInit+0xb0>)
 8005756:	f002 f8d5 	bl	8007904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_I2C_MspInit+0xac>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <HAL_I2C_MspInit+0xac>)
 8005764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005768:	6413      	str	r3, [r2, #64]	; 0x40
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <HAL_I2C_MspInit+0xac>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005776:	bf00      	nop
 8005778:	3728      	adds	r7, #40	; 0x28
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40005800 	.word	0x40005800
 8005784:	40023800 	.word	0x40023800
 8005788:	40020400 	.word	0x40020400

0800578c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08c      	sub	sp, #48	; 0x30
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005794:	f107 031c 	add.w	r3, r7, #28
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a49      	ldr	r2, [pc, #292]	; (80058d0 <HAL_SPI_MspInit+0x144>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d12c      	bne.n	8005808 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	4b48      	ldr	r3, [pc, #288]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	4a47      	ldr	r2, [pc, #284]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 80057b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057bc:	6453      	str	r3, [r2, #68]	; 0x44
 80057be:	4b45      	ldr	r3, [pc, #276]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	4a40      	ldr	r2, [pc, #256]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	6313      	str	r3, [r2, #48]	; 0x30
 80057da:	4b3e      	ldr	r3, [pc, #248]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80057e6:	23e0      	movs	r3, #224	; 0xe0
 80057e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ea:	2302      	movs	r3, #2
 80057ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f2:	2303      	movs	r3, #3
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80057f6:	2305      	movs	r3, #5
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057fa:	f107 031c 	add.w	r3, r7, #28
 80057fe:	4619      	mov	r1, r3
 8005800:	4835      	ldr	r0, [pc, #212]	; (80058d8 <HAL_SPI_MspInit+0x14c>)
 8005802:	f002 f87f 	bl	8007904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005806:	e05e      	b.n	80058c6 <HAL_SPI_MspInit+0x13a>
  else if(hspi->Instance==SPI2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a33      	ldr	r2, [pc, #204]	; (80058dc <HAL_SPI_MspInit+0x150>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d159      	bne.n	80058c6 <HAL_SPI_MspInit+0x13a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	4a2e      	ldr	r2, [pc, #184]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 800581c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005820:	6413      	str	r3, [r2, #64]	; 0x40
 8005822:	4b2c      	ldr	r3, [pc, #176]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	6313      	str	r3, [r2, #48]	; 0x30
 800583e:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <HAL_SPI_MspInit+0x148>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800584a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800584e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005850:	2302      	movs	r3, #2
 8005852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005854:	2300      	movs	r3, #0
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005858:	2303      	movs	r3, #3
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800585c:	2305      	movs	r3, #5
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005860:	f107 031c 	add.w	r3, r7, #28
 8005864:	4619      	mov	r1, r3
 8005866:	481e      	ldr	r0, [pc, #120]	; (80058e0 <HAL_SPI_MspInit+0x154>)
 8005868:	f002 f84c 	bl	8007904 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 800586e:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <HAL_SPI_MspInit+0x15c>)
 8005870:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005872:	4b1c      	ldr	r3, [pc, #112]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005878:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 800587a:	2240      	movs	r2, #64	; 0x40
 800587c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800587e:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 8005880:	2200      	movs	r2, #0
 8005882:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 8005886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800588a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800588c:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 800588e:	2200      	movs	r2, #0
 8005890:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 8005894:	2200      	movs	r2, #0
 8005896:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 800589a:	2200      	movs	r2, #0
 800589c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80058aa:	480e      	ldr	r0, [pc, #56]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 80058ac:	f001 fc4a 	bl	8007144 <HAL_DMA_Init>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80058b6:	f7ff fe4d 	bl	8005554 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 80058be:	649a      	str	r2, [r3, #72]	; 0x48
 80058c0:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <HAL_SPI_MspInit+0x158>)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80058c6:	bf00      	nop
 80058c8:	3730      	adds	r7, #48	; 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40013000 	.word	0x40013000
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40020000 	.word	0x40020000
 80058dc:	40003800 	.word	0x40003800
 80058e0:	40020400 	.word	0x40020400
 80058e4:	20010f8c 	.word	0x20010f8c
 80058e8:	40026070 	.word	0x40026070

080058ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08c      	sub	sp, #48	; 0x30
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f4:	f107 031c 	add.w	r3, r7, #28
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	60da      	str	r2, [r3, #12]
 8005902:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d12d      	bne.n	800596a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6413      	str	r3, [r2, #64]	; 0x40
 800591e:	4b2d      	ldr	r3, [pc, #180]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6313      	str	r3, [r2, #48]	; 0x30
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8005946:	f248 0302 	movw	r3, #32770	; 0x8002
 800594a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594c:	2302      	movs	r3, #2
 800594e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005950:	2301      	movs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005954:	2300      	movs	r3, #0
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005958:	2301      	movs	r3, #1
 800595a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800595c:	f107 031c 	add.w	r3, r7, #28
 8005960:	4619      	mov	r1, r3
 8005962:	481d      	ldr	r0, [pc, #116]	; (80059d8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005964:	f001 ffce 	bl	8007904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005968:	e030      	b.n	80059cc <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d12b      	bne.n	80059cc <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800597e:	f043 0304 	orr.w	r3, r3, #4
 8005982:	6413      	str	r3, [r2, #64]	; 0x40
 8005984:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	4a0e      	ldr	r2, [pc, #56]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800599a:	f043 0302 	orr.w	r3, r3, #2
 800599e:	6313      	str	r3, [r2, #48]	; 0x30
 80059a0:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059ac:	23c0      	movs	r3, #192	; 0xc0
 80059ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b0:	2302      	movs	r3, #2
 80059b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059b4:	2301      	movs	r3, #1
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80059bc:	2302      	movs	r3, #2
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c0:	f107 031c 	add.w	r3, r7, #28
 80059c4:	4619      	mov	r1, r3
 80059c6:	4806      	ldr	r0, [pc, #24]	; (80059e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 80059c8:	f001 ff9c 	bl	8007904 <HAL_GPIO_Init>
}
 80059cc:	bf00      	nop
 80059ce:	3730      	adds	r7, #48	; 0x30
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40023800 	.word	0x40023800
 80059d8:	40020000 	.word	0x40020000
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40020400 	.word	0x40020400

080059e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_TIM_Base_MspInit+0x80>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d116      	bne.n	8005a24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <HAL_TIM_Base_MspInit+0x84>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_TIM_Base_MspInit+0x84>)
 8005a00:	f043 0302 	orr.w	r3, r3, #2
 8005a04:	6413      	str	r3, [r2, #64]	; 0x40
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_TIM_Base_MspInit+0x84>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005a12:	2200      	movs	r2, #0
 8005a14:	2101      	movs	r1, #1
 8005a16:	201d      	movs	r0, #29
 8005a18:	f001 fb5d 	bl	80070d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a1c:	201d      	movs	r0, #29
 8005a1e:	f001 fb76 	bl	800710e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005a22:	e01a      	b.n	8005a5a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <HAL_TIM_Base_MspInit+0x88>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d115      	bne.n	8005a5a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	4b0d      	ldr	r3, [pc, #52]	; (8005a68 <HAL_TIM_Base_MspInit+0x84>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	4a0c      	ldr	r2, [pc, #48]	; (8005a68 <HAL_TIM_Base_MspInit+0x84>)
 8005a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <HAL_TIM_Base_MspInit+0x84>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	2019      	movs	r0, #25
 8005a50:	f001 fb41 	bl	80070d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005a54:	2019      	movs	r0, #25
 8005a56:	f001 fb5a 	bl	800710e <HAL_NVIC_EnableIRQ>
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	40014400 	.word	0x40014400

08005a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a78:	f107 030c 	add.w	r3, r7, #12
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	605a      	str	r2, [r3, #4]
 8005a82:	609a      	str	r2, [r3, #8]
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <HAL_TIM_MspPostInit+0x68>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d11d      	bne.n	8005ace <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <HAL_TIM_MspPostInit+0x6c>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <HAL_TIM_MspPostInit+0x6c>)
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <HAL_TIM_MspPostInit+0x6c>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005aae:	2330      	movs	r3, #48	; 0x30
 8005ab0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ac2:	f107 030c 	add.w	r3, r7, #12
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4805      	ldr	r0, [pc, #20]	; (8005ae0 <HAL_TIM_MspPostInit+0x70>)
 8005aca:	f001 ff1b 	bl	8007904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005ace:	bf00      	nop
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40020400 	.word	0x40020400

08005ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08c      	sub	sp, #48	; 0x30
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aec:	f107 031c 	add.w	r3, r7, #28
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <HAL_UART_MspInit+0xec>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d12d      	bne.n	8005b62 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	4b32      	ldr	r3, [pc, #200]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	4a31      	ldr	r2, [pc, #196]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b10:	f043 0310 	orr.w	r3, r3, #16
 8005b14:	6453      	str	r3, [r2, #68]	; 0x44
 8005b16:	4b2f      	ldr	r3, [pc, #188]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	4b2b      	ldr	r3, [pc, #172]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	4a2a      	ldr	r2, [pc, #168]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	6313      	str	r3, [r2, #48]	; 0x30
 8005b32:	4b28      	ldr	r3, [pc, #160]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b44:	2302      	movs	r3, #2
 8005b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005b50:	2307      	movs	r3, #7
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b54:	f107 031c 	add.w	r3, r7, #28
 8005b58:	4619      	mov	r1, r3
 8005b5a:	481f      	ldr	r0, [pc, #124]	; (8005bd8 <HAL_UART_MspInit+0xf4>)
 8005b5c:	f001 fed2 	bl	8007904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005b60:	e031      	b.n	8005bc6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_UART_MspInit+0xf8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d12c      	bne.n	8005bc6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b76:	f043 0320 	orr.w	r3, r3, #32
 8005b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8005b7c:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6313      	str	r3, [r2, #48]	; 0x30
 8005b98:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <HAL_UART_MspInit+0xf0>)
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005baa:	2302      	movs	r3, #2
 8005bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bba:	f107 031c 	add.w	r3, r7, #28
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4805      	ldr	r0, [pc, #20]	; (8005bd8 <HAL_UART_MspInit+0xf4>)
 8005bc2:	f001 fe9f 	bl	8007904 <HAL_GPIO_Init>
}
 8005bc6:	bf00      	nop
 8005bc8:	3730      	adds	r7, #48	; 0x30
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40020000 	.word	0x40020000
 8005bdc:	40011400 	.word	0x40011400

08005be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005be4:	e7fe      	b.n	8005be4 <NMI_Handler+0x4>

08005be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005be6:	b480      	push	{r7}
 8005be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bea:	e7fe      	b.n	8005bea <HardFault_Handler+0x4>

08005bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bf0:	e7fe      	b.n	8005bf0 <MemManage_Handler+0x4>

08005bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bf6:	e7fe      	b.n	8005bf6 <BusFault_Handler+0x4>

08005bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bfc:	e7fe      	b.n	8005bfc <UsageFault_Handler+0x4>

08005bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c1e:	bf00      	nop
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c2c:	f000 f8c4 	bl	8005db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c30:	bf00      	nop
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005c38:	4802      	ldr	r0, [pc, #8]	; (8005c44 <DMA1_Stream4_IRQHandler+0x10>)
 8005c3a:	f001 fbf9 	bl	8007430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20010f8c 	.word	0x20010f8c

08005c48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005c4c:	4802      	ldr	r0, [pc, #8]	; (8005c58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005c4e:	f004 fe2f 	bl	800a8b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	200110c4 	.word	0x200110c4

08005c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005c60:	4802      	ldr	r0, [pc, #8]	; (8005c6c <TIM3_IRQHandler+0x10>)
 8005c62:	f004 fe25 	bl	800a8b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20011034 	.word	0x20011034

08005c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8005c74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005c78:	f001 ffe2 	bl	8007c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005c84:	4802      	ldr	r0, [pc, #8]	; (8005c90 <DMA2_Stream4_IRQHandler+0x10>)
 8005c86:	f001 fbd3 	bl	8007430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005c8a:	bf00      	nop
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20010e28 	.word	0x20010e28

08005c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <SystemInit+0x28>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <SystemInit+0x28>)
 8005ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <SystemInit+0x28>)
 8005caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cae:	609a      	str	r2, [r3, #8]
#endif
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005cc6:	e003      	b.n	8005cd0 <LoopCopyDataInit>

08005cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005cce:	3104      	adds	r1, #4

08005cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005cd0:	480b      	ldr	r0, [pc, #44]	; (8005d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cd8:	d3f6      	bcc.n	8005cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8005cda:	4a0b      	ldr	r2, [pc, #44]	; (8005d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005cdc:	e002      	b.n	8005ce4 <LoopFillZerobss>

08005cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ce0:	f842 3b04 	str.w	r3, [r2], #4

08005ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ce8:	d3f9      	bcc.n	8005cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cea:	f7ff ffd3 	bl	8005c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cee:	f006 f85b 	bl	800bda8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cf2:	f7fe fcab 	bl	800464c <main>
  bx  lr    
 8005cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005cf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005cfc:	0800dc94 	.word	0x0800dc94
  ldr  r0, =_sdata
 8005d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d04:	2000041c 	.word	0x2000041c
  ldr  r2, =_sbss
 8005d08:	2000041c 	.word	0x2000041c
  ldr  r3, = _ebss
 8005d0c:	20011198 	.word	0x20011198

08005d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d10:	e7fe      	b.n	8005d10 <ADC_IRQHandler>
	...

08005d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d18:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <HAL_Init+0x40>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a0d      	ldr	r2, [pc, #52]	; (8005d54 <HAL_Init+0x40>)
 8005d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_Init+0x40>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <HAL_Init+0x40>)
 8005d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d30:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <HAL_Init+0x40>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <HAL_Init+0x40>)
 8005d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d3c:	2003      	movs	r0, #3
 8005d3e:	f001 f9bf 	bl	80070c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d42:	2000      	movs	r0, #0
 8005d44:	f000 f808 	bl	8005d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d48:	f7ff fc0a 	bl	8005560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40023c00 	.word	0x40023c00

08005d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_InitTick+0x54>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <HAL_InitTick+0x58>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 f9d7 	bl	800712a <HAL_SYSTICK_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e00e      	b.n	8005da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b0f      	cmp	r3, #15
 8005d8a:	d80a      	bhi.n	8005da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	f001 f99f 	bl	80070d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d98:	4a06      	ldr	r2, [pc, #24]	; (8005db4 <HAL_InitTick+0x5c>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200003ac 	.word	0x200003ac
 8005db0:	200003b4 	.word	0x200003b4
 8005db4:	200003b0 	.word	0x200003b0

08005db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dbc:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_IncTick+0x20>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_IncTick+0x24>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <HAL_IncTick+0x24>)
 8005dca:	6013      	str	r3, [r2, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	200003b4 	.word	0x200003b4
 8005ddc:	20011194 	.word	0x20011194

08005de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return uwTick;
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <HAL_GetTick+0x14>)
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20011194 	.word	0x20011194

08005df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e00:	f7ff ffee 	bl	8005de0 <HAL_GetTick>
 8005e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d005      	beq.n	8005e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e12:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <HAL_Delay+0x44>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e1e:	bf00      	nop
 8005e20:	f7ff ffde 	bl	8005de0 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d8f7      	bhi.n	8005e20 <HAL_Delay+0x28>
  {
  }
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200003b4 	.word	0x200003b4

08005e40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e033      	b.n	8005ebe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fba6 	bl	80055b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d118      	bne.n	8005eb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e86:	f023 0302 	bic.w	r3, r3, #2
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fbde 	bl	8006654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	f043 0201 	orr.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
 8005eae:	e001      	b.n	8005eb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_ADC_Start+0x1a>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e097      	b.n	8006012 <HAL_ADC_Start+0x14a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d018      	beq.n	8005f2a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005f08:	4b45      	ldr	r3, [pc, #276]	; (8006020 <HAL_ADC_Start+0x158>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a45      	ldr	r2, [pc, #276]	; (8006024 <HAL_ADC_Start+0x15c>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	0c9a      	lsrs	r2, r3, #18
 8005f14:	4613      	mov	r3, r2
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4413      	add	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005f1c:	e002      	b.n	8005f24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f9      	bne.n	8005f1e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d15f      	bne.n	8005ff8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f40:	f023 0301 	bic.w	r3, r3, #1
 8005f44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d007      	beq.n	8005f6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d106      	bne.n	8005f86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	f023 0206 	bic.w	r2, r3, #6
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	645a      	str	r2, [r3, #68]	; 0x44
 8005f84:	e002      	b.n	8005f8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f94:	4b24      	ldr	r3, [pc, #144]	; (8006028 <HAL_ADC_Start+0x160>)
 8005f96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005fa0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10f      	bne.n	8005fce <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d129      	bne.n	8006010 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e020      	b.n	8006010 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	; (800602c <HAL_ADC_Start+0x164>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d11b      	bne.n	8006010 <HAL_ADC_Start+0x148>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d114      	bne.n	8006010 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ff4:	609a      	str	r2, [r3, #8]
 8005ff6:	e00b      	b.n	8006010 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f043 0210 	orr.w	r2, r3, #16
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	f043 0201 	orr.w	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	200003ac 	.word	0x200003ac
 8006024:	431bde83 	.word	0x431bde83
 8006028:	40012300 	.word	0x40012300
 800602c:	40012000 	.word	0x40012000

08006030 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604c:	d113      	bne.n	8006076 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605c:	d10b      	bne.n	8006076 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0220 	orr.w	r2, r3, #32
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e063      	b.n	800613e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006076:	f7ff feb3 	bl	8005de0 <HAL_GetTick>
 800607a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800607c:	e021      	b.n	80060c2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d01d      	beq.n	80060c2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_ADC_PollForConversion+0x6c>
 800608c:	f7ff fea8 	bl	8005de0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d212      	bcs.n	80060c2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d00b      	beq.n	80060c2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f043 0204 	orr.w	r2, r3, #4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e03d      	b.n	800613e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d1d6      	bne.n	800607e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0212 	mvn.w	r2, #18
 80060d8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d123      	bne.n	800613c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d11f      	bne.n	800613c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006114:	2b00      	cmp	r3, #0
 8006116:	d111      	bne.n	800613c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	f043 0201 	orr.w	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_ADC_Start_DMA+0x1e>
 8006162:	2302      	movs	r3, #2
 8006164:	e0ce      	b.n	8006304 <HAL_ADC_Start_DMA+0x1bc>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	d018      	beq.n	80061ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800618c:	4b5f      	ldr	r3, [pc, #380]	; (800630c <HAL_ADC_Start_DMA+0x1c4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5f      	ldr	r2, [pc, #380]	; (8006310 <HAL_ADC_Start_DMA+0x1c8>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	0c9a      	lsrs	r2, r3, #18
 8006198:	4613      	mov	r3, r2
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	4413      	add	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80061a0:	e002      	b.n	80061a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f9      	bne.n	80061a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061bc:	d107      	bne.n	80061ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	f040 8086 	bne.w	80062ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006208:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621c:	d106      	bne.n	800622c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	f023 0206 	bic.w	r2, r3, #6
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	645a      	str	r2, [r3, #68]	; 0x44
 800622a:	e002      	b.n	8006232 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800623a:	4b36      	ldr	r3, [pc, #216]	; (8006314 <HAL_ADC_Start_DMA+0x1cc>)
 800623c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	4a35      	ldr	r2, [pc, #212]	; (8006318 <HAL_ADC_Start_DMA+0x1d0>)
 8006244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	4a34      	ldr	r2, [pc, #208]	; (800631c <HAL_ADC_Start_DMA+0x1d4>)
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	4a33      	ldr	r2, [pc, #204]	; (8006320 <HAL_ADC_Start_DMA+0x1d8>)
 8006254:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800625e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800626e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800627e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	334c      	adds	r3, #76	; 0x4c
 800628a:	4619      	mov	r1, r3
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f001 f806 	bl	80072a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10f      	bne.n	80062c0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d129      	bne.n	8006302 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062bc:	609a      	str	r2, [r3, #8]
 80062be:	e020      	b.n	8006302 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a17      	ldr	r2, [pc, #92]	; (8006324 <HAL_ADC_Start_DMA+0x1dc>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d11b      	bne.n	8006302 <HAL_ADC_Start_DMA+0x1ba>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d114      	bne.n	8006302 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062e6:	609a      	str	r2, [r3, #8]
 80062e8:	e00b      	b.n	8006302 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f043 0210 	orr.w	r2, r3, #16
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	f043 0201 	orr.w	r2, r3, #1
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200003ac 	.word	0x200003ac
 8006310:	431bde83 	.word	0x431bde83
 8006314:	40012300 	.word	0x40012300
 8006318:	0800684d 	.word	0x0800684d
 800631c:	08006907 	.word	0x08006907
 8006320:	08006923 	.word	0x08006923
 8006324:	40012000 	.word	0x40012000

08006328 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_ADC_Stop_DMA+0x1a>
 800633e:	2302      	movs	r3, #2
 8006340:	e048      	b.n	80063d4 <HAL_ADC_Stop_DMA+0xac>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d130      	bne.n	80063ca <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006376:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d10f      	bne.n	80063a6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	4618      	mov	r0, r3
 800638c:	f000 ffe0 	bl	8007350 <HAL_DMA_Abort>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80063b4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_ADC_ConfigChannel+0x1c>
 8006408:	2302      	movs	r3, #2
 800640a:	e113      	b.n	8006634 <HAL_ADC_ConfigChannel+0x244>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b09      	cmp	r3, #9
 800641a:	d925      	bls.n	8006468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68d9      	ldr	r1, [r3, #12]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	4613      	mov	r3, r2
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4413      	add	r3, r2
 8006430:	3b1e      	subs	r3, #30
 8006432:	2207      	movs	r2, #7
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43da      	mvns	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	400a      	ands	r2, r1
 8006440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68d9      	ldr	r1, [r3, #12]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	4618      	mov	r0, r3
 8006454:	4603      	mov	r3, r0
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	4403      	add	r3, r0
 800645a:	3b1e      	subs	r3, #30
 800645c:	409a      	lsls	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	e022      	b.n	80064ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6919      	ldr	r1, [r3, #16]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	4613      	mov	r3, r2
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	4413      	add	r3, r2
 800647c:	2207      	movs	r2, #7
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43da      	mvns	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	400a      	ands	r2, r1
 800648a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6919      	ldr	r1, [r3, #16]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	4618      	mov	r0, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	4403      	add	r3, r0
 80064a4:	409a      	lsls	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d824      	bhi.n	8006500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	3b05      	subs	r3, #5
 80064c8:	221f      	movs	r2, #31
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43da      	mvns	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	400a      	ands	r2, r1
 80064d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4618      	mov	r0, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	3b05      	subs	r3, #5
 80064f2:	fa00 f203 	lsl.w	r2, r0, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	635a      	str	r2, [r3, #52]	; 0x34
 80064fe:	e04c      	b.n	800659a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d824      	bhi.n	8006552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	3b23      	subs	r3, #35	; 0x23
 800651a:	221f      	movs	r2, #31
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	43da      	mvns	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	400a      	ands	r2, r1
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	4618      	mov	r0, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	3b23      	subs	r3, #35	; 0x23
 8006544:	fa00 f203 	lsl.w	r2, r0, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
 8006550:	e023      	b.n	800659a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	3b41      	subs	r3, #65	; 0x41
 8006564:	221f      	movs	r2, #31
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	43da      	mvns	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	400a      	ands	r2, r1
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	4618      	mov	r0, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	3b41      	subs	r3, #65	; 0x41
 800658e:	fa00 f203 	lsl.w	r2, r0, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800659a:	4b29      	ldr	r3, [pc, #164]	; (8006640 <HAL_ADC_ConfigChannel+0x250>)
 800659c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a28      	ldr	r2, [pc, #160]	; (8006644 <HAL_ADC_ConfigChannel+0x254>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d10f      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x1d8>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b12      	cmp	r3, #18
 80065ae:	d10b      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <HAL_ADC_ConfigChannel+0x254>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d12b      	bne.n	800662a <HAL_ADC_ConfigChannel+0x23a>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1c      	ldr	r2, [pc, #112]	; (8006648 <HAL_ADC_ConfigChannel+0x258>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <HAL_ADC_ConfigChannel+0x1f4>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b11      	cmp	r3, #17
 80065e2:	d122      	bne.n	800662a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a11      	ldr	r2, [pc, #68]	; (8006648 <HAL_ADC_ConfigChannel+0x258>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d111      	bne.n	800662a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006606:	4b11      	ldr	r3, [pc, #68]	; (800664c <HAL_ADC_ConfigChannel+0x25c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a11      	ldr	r2, [pc, #68]	; (8006650 <HAL_ADC_ConfigChannel+0x260>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	0c9a      	lsrs	r2, r3, #18
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800661c:	e002      	b.n	8006624 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	3b01      	subs	r3, #1
 8006622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f9      	bne.n	800661e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012300 	.word	0x40012300
 8006644:	40012000 	.word	0x40012000
 8006648:	10000012 	.word	0x10000012
 800664c:	200003ac 	.word	0x200003ac
 8006650:	431bde83 	.word	0x431bde83

08006654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800665c:	4b79      	ldr	r3, [pc, #484]	; (8006844 <ADC_Init+0x1f0>)
 800665e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6859      	ldr	r1, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	021a      	lsls	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80066ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6899      	ldr	r1, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	4a58      	ldr	r2, [pc, #352]	; (8006848 <ADC_Init+0x1f4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6899      	ldr	r1, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800671c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6899      	ldr	r1, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	e00f      	b.n	8006752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0202 	bic.w	r2, r2, #2
 8006760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7e1b      	ldrb	r3, [r3, #24]
 800676c:	005a      	lsls	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01b      	beq.n	80067b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800679e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	3b01      	subs	r3, #1
 80067ac:	035a      	lsls	r2, r3, #13
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e007      	b.n	80067c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	051a      	lsls	r2, r3, #20
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6899      	ldr	r1, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800680a:	025a      	lsls	r2, r3, #9
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6899      	ldr	r1, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	029a      	lsls	r2, r3, #10
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	609a      	str	r2, [r3, #8]
}
 8006838:	bf00      	nop
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40012300 	.word	0x40012300
 8006848:	0f000001 	.word	0x0f000001

0800684c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006862:	2b00      	cmp	r3, #0
 8006864:	d13c      	bne.n	80068e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d12b      	bne.n	80068d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006884:	2b00      	cmp	r3, #0
 8006886:	d127      	bne.n	80068d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006892:	2b00      	cmp	r3, #0
 8006894:	d006      	beq.n	80068a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d119      	bne.n	80068d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0220 	bic.w	r2, r2, #32
 80068b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f043 0201 	orr.w	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7fe fe03 	bl	80054e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80068de:	e00e      	b.n	80068fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff fd75 	bl	80063dc <HAL_ADC_ErrorCallback>
}
 80068f2:	e004      	b.n	80068fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7fe fdd5 	bl	80054c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800691a:	bf00      	nop
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2240      	movs	r2, #64	; 0x40
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	f043 0204 	orr.w	r2, r3, #4
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff fd4a 	bl	80063dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_ADCEx_InjectedStart+0x22>
 800696e:	2302      	movs	r3, #2
 8006970:	e0aa      	b.n	8006ac8 <HAL_ADCEx_InjectedStart+0x178>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d018      	beq.n	80069ba <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006998:	4b4e      	ldr	r3, [pc, #312]	; (8006ad4 <HAL_ADCEx_InjectedStart+0x184>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a4e      	ldr	r2, [pc, #312]	; (8006ad8 <HAL_ADCEx_InjectedStart+0x188>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	0c9a      	lsrs	r2, r3, #18
 80069a4:	4613      	mov	r3, r2
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	4413      	add	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80069ac:	e002      	b.n	80069b4 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f9      	bne.n	80069ae <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d172      	bne.n	8006aae <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f06f 0204 	mvn.w	r2, #4
 80069fe:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a00:	4b36      	ldr	r3, [pc, #216]	; (8006adc <HAL_ADCEx_InjectedStart+0x18c>)
 8006a02:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d124      	bne.n	8006a5a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d041      	beq.n	8006ac6 <HAL_ADCEx_InjectedStart+0x176>
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d03e      	beq.n	8006ac6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006a56:	609a      	str	r2, [r3, #8]
 8006a58:	e035      	b.n	8006ac6 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bf0c      	ite	eq
 8006a7e:	2301      	moveq	r3, #1
 8006a80:	2300      	movne	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <HAL_ADCEx_InjectedStart+0x190>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d11a      	bne.n	8006ac6 <HAL_ADCEx_InjectedStart+0x176>
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d017      	beq.n	8006ac6 <HAL_ADCEx_InjectedStart+0x176>
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d014      	beq.n	8006ac6 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006aaa:	609a      	str	r2, [r3, #8]
 8006aac:	e00b      	b.n	8006ac6 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f043 0210 	orr.w	r2, r3, #16
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	f043 0201 	orr.w	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	200003ac 	.word	0x200003ac
 8006ad8:	431bde83 	.word	0x431bde83
 8006adc:	40012300 	.word	0x40012300
 8006ae0:	40012000 	.word	0x40012000

08006ae4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_ADCEx_InjectedStop+0x1a>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e037      	b.n	8006b6e <HAL_ADCEx_InjectedStop+0x8a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d120      	bne.n	8006b54 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d119      	bne.n	8006b54 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d112      	bne.n	8006b64 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	f043 0201 	orr.w	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b52:	e007      	b.n	8006b64 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	f043 0220 	orr.w	r2, r3, #32
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f06f 0204 	mvn.w	r2, #4
 8006b92:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d81f      	bhi.n	8006bdc <HAL_ADCEx_InjectedGetValue+0x60>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <HAL_ADCEx_InjectedGetValue+0x28>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bd3 	.word	0x08006bd3
 8006ba8:	08006bc9 	.word	0x08006bc9
 8006bac:	08006bbf 	.word	0x08006bbf
 8006bb0:	08006bb5 	.word	0x08006bb5
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bba:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8006bbc:	e00f      	b.n	8006bde <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc4:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8006bc6:	e00a      	b.n	8006bde <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	60fb      	str	r3, [r7, #12]
    }
    break;
 8006bd0:	e005      	b.n	8006bde <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd8:	60fb      	str	r3, [r7, #12]
    }
    break;
 8006bda:	e000      	b.n	8006bde <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8006bdc:	bf00      	nop
  }
  return tmp;
 8006bde:	68fb      	ldr	r3, [r7, #12]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e17e      	b.n	8006f02 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b09      	cmp	r3, #9
 8006c12:	d925      	bls.n	8006c60 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68d9      	ldr	r1, [r3, #12]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	3b1e      	subs	r3, #30
 8006c2a:	2207      	movs	r2, #7
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	43da      	mvns	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	400a      	ands	r2, r1
 8006c38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68d9      	ldr	r1, [r3, #12]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	4403      	add	r3, r0
 8006c52:	3b1e      	subs	r3, #30
 8006c54:	409a      	lsls	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	60da      	str	r2, [r3, #12]
 8006c5e:	e022      	b.n	8006ca6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6919      	ldr	r1, [r3, #16]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4613      	mov	r3, r2
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	4413      	add	r3, r2
 8006c74:	2207      	movs	r2, #7
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43da      	mvns	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	400a      	ands	r2, r1
 8006c82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6919      	ldr	r1, [r3, #16]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4618      	mov	r0, r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4403      	add	r3, r0
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	051a      	lsls	r2, r3, #20
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	3303      	adds	r3, #3
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	221f      	movs	r2, #31
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	43da      	mvns	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	400a      	ands	r2, r1
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	3303      	adds	r3, #3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	fa00 f203 	lsl.w	r2, r0, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	4a75      	ldr	r2, [pc, #468]	; (8006f10 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d022      	beq.n	8006d84 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6899      	ldr	r1, [r3, #8]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	699a      	ldr	r2, [r3, #24]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006d6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6899      	ldr	r1, [r3, #8]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]
 8006d82:	e00f      	b.n	8006da4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006da2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	7d5b      	ldrb	r3, [r3, #21]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d008      	beq.n	8006dbe <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dba:	605a      	str	r2, [r3, #4]
 8006dbc:	e007      	b.n	8006dce <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dcc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	7d1b      	ldrb	r3, [r3, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d008      	beq.n	8006de8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	e007      	b.n	8006df8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006df6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d02e      	beq.n	8006e5e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d840      	bhi.n	8006e86 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d002      	beq.n	8006e0e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d014      	beq.n	8006e36 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006e0c:	e03b      	b.n	8006e86 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6812      	ldr	r2, [r2, #0]
 8006e18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e1c:	f023 030f 	bic.w	r3, r3, #15
 8006e20:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6959      	ldr	r1, [r3, #20]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	615a      	str	r2, [r3, #20]
      break;
 8006e34:	e03b      	b.n	8006eae <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e44:	f023 030f 	bic.w	r3, r3, #15
 8006e48:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6999      	ldr	r1, [r3, #24]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	619a      	str	r2, [r3, #24]
      break;
 8006e5c:	e027      	b.n	8006eae <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e6c:	f023 030f 	bic.w	r3, r3, #15
 8006e70:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69d9      	ldr	r1, [r3, #28]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	61da      	str	r2, [r3, #28]
      break;
 8006e84:	e013      	b.n	8006eae <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e94:	f023 030f 	bic.w	r3, r3, #15
 8006e98:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a19      	ldr	r1, [r3, #32]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	621a      	str	r2, [r3, #32]
      break;
 8006eac:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006eae:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d109      	bne.n	8006ed0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b12      	cmp	r3, #18
 8006ec2:	d105      	bne.n	8006ed0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a10      	ldr	r2, [pc, #64]	; (8006f18 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a0f      	ldr	r2, [pc, #60]	; (8006f1c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d003      	beq.n	8006eec <HAL_ADCEx_InjectedConfigChannel+0x300>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b11      	cmp	r3, #17
 8006eea:	d105      	bne.n	8006ef8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	000f0001 	.word	0x000f0001
 8006f14:	40012300 	.word	0x40012300
 8006f18:	40012000 	.word	0x40012000
 8006f1c:	10000012 	.word	0x10000012

08006f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <__NVIC_SetPriorityGrouping+0x44>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f52:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <__NVIC_SetPriorityGrouping+0x44>)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	60d3      	str	r3, [r2, #12]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	e000ed00 	.word	0xe000ed00

08006f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <__NVIC_GetPriorityGrouping+0x18>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	0a1b      	lsrs	r3, r3, #8
 8006f72:	f003 0307 	and.w	r3, r3, #7
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	e000ed00 	.word	0xe000ed00

08006f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	db0b      	blt.n	8006fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	f003 021f 	and.w	r2, r3, #31
 8006f9c:	4907      	ldr	r1, [pc, #28]	; (8006fbc <__NVIC_EnableIRQ+0x38>)
 8006f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2001      	movs	r0, #1
 8006fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8006faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	e000e100 	.word	0xe000e100

08006fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	db0a      	blt.n	8006fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	490c      	ldr	r1, [pc, #48]	; (800700c <__NVIC_SetPriority+0x4c>)
 8006fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fde:	0112      	lsls	r2, r2, #4
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006fe8:	e00a      	b.n	8007000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4908      	ldr	r1, [pc, #32]	; (8007010 <__NVIC_SetPriority+0x50>)
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	3b04      	subs	r3, #4
 8006ff8:	0112      	lsls	r2, r2, #4
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	761a      	strb	r2, [r3, #24]
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	e000e100 	.word	0xe000e100
 8007010:	e000ed00 	.word	0xe000ed00

08007014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007014:	b480      	push	{r7}
 8007016:	b089      	sub	sp, #36	; 0x24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f1c3 0307 	rsb	r3, r3, #7
 800702e:	2b04      	cmp	r3, #4
 8007030:	bf28      	it	cs
 8007032:	2304      	movcs	r3, #4
 8007034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3304      	adds	r3, #4
 800703a:	2b06      	cmp	r3, #6
 800703c:	d902      	bls.n	8007044 <NVIC_EncodePriority+0x30>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3b03      	subs	r3, #3
 8007042:	e000      	b.n	8007046 <NVIC_EncodePriority+0x32>
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007048:	f04f 32ff 	mov.w	r2, #4294967295
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43da      	mvns	r2, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	401a      	ands	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800705c:	f04f 31ff 	mov.w	r1, #4294967295
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	43d9      	mvns	r1, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800706c:	4313      	orrs	r3, r2
         );
}
 800706e:	4618      	mov	r0, r3
 8007070:	3724      	adds	r7, #36	; 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3b01      	subs	r3, #1
 8007088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800708c:	d301      	bcc.n	8007092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800708e:	2301      	movs	r3, #1
 8007090:	e00f      	b.n	80070b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <SysTick_Config+0x40>)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3b01      	subs	r3, #1
 8007098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800709a:	210f      	movs	r1, #15
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	f7ff ff8e 	bl	8006fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <SysTick_Config+0x40>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070aa:	4b04      	ldr	r3, [pc, #16]	; (80070bc <SysTick_Config+0x40>)
 80070ac:	2207      	movs	r2, #7
 80070ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	e000e010 	.word	0xe000e010

080070c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff29 	bl	8006f20 <__NVIC_SetPriorityGrouping>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	4603      	mov	r3, r0
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80070e8:	f7ff ff3e 	bl	8006f68 <__NVIC_GetPriorityGrouping>
 80070ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	6978      	ldr	r0, [r7, #20]
 80070f4:	f7ff ff8e 	bl	8007014 <NVIC_EncodePriority>
 80070f8:	4602      	mov	r2, r0
 80070fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff ff5d 	bl	8006fc0 <__NVIC_SetPriority>
}
 8007106:	bf00      	nop
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	4603      	mov	r3, r0
 8007116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff ff31 	bl	8006f84 <__NVIC_EnableIRQ>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff ffa2 	bl	800707c <SysTick_Config>
 8007138:	4603      	mov	r3, r0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007150:	f7fe fe46 	bl	8005de0 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e099      	b.n	8007294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007180:	e00f      	b.n	80071a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007182:	f7fe fe2d 	bl	8005de0 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b05      	cmp	r3, #5
 800718e:	d908      	bls.n	80071a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2203      	movs	r2, #3
 800719a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e078      	b.n	8007294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e8      	bne.n	8007182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4b38      	ldr	r3, [pc, #224]	; (800729c <HAL_DMA_Init+0x158>)
 80071bc:	4013      	ands	r3, r2
 80071be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d107      	bne.n	800720c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	4313      	orrs	r3, r2
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 0307 	bic.w	r3, r3, #7
 8007222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	2b04      	cmp	r3, #4
 8007234:	d117      	bne.n	8007266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00e      	beq.n	8007266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fadf 	bl	800780c <DMA_CheckFifoParam>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2240      	movs	r2, #64	; 0x40
 8007258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007262:	2301      	movs	r3, #1
 8007264:	e016      	b.n	8007294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fa96 	bl	80077a0 <DMA_CalcBaseAndBitshift>
 8007274:	4603      	mov	r3, r0
 8007276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727c:	223f      	movs	r2, #63	; 0x3f
 800727e:	409a      	lsls	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	f010803f 	.word	0xf010803f

080072a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_DMA_Start_IT+0x26>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e040      	b.n	8007348 <HAL_DMA_Start_IT+0xa8>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d12f      	bne.n	800733a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2202      	movs	r2, #2
 80072de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fa28 	bl	8007744 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	223f      	movs	r2, #63	; 0x3f
 80072fa:	409a      	lsls	r2, r3
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0216 	orr.w	r2, r2, #22
 800730e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0208 	orr.w	r2, r2, #8
 8007326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	e005      	b.n	8007346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007342:	2302      	movs	r3, #2
 8007344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800735e:	f7fe fd3f 	bl	8005de0 <HAL_GetTick>
 8007362:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d008      	beq.n	8007382 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2280      	movs	r2, #128	; 0x80
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e052      	b.n	8007428 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0216 	bic.w	r2, r2, #22
 8007390:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695a      	ldr	r2, [r3, #20]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d103      	bne.n	80073b2 <HAL_DMA_Abort+0x62>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d007      	beq.n	80073c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0208 	bic.w	r2, r2, #8
 80073c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0201 	bic.w	r2, r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073d2:	e013      	b.n	80073fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073d4:	f7fe fd04 	bl	8005de0 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d90c      	bls.n	80073fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2203      	movs	r2, #3
 80073ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e015      	b.n	8007428 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e4      	bne.n	80073d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740e:	223f      	movs	r2, #63	; 0x3f
 8007410:	409a      	lsls	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800743c:	4b8e      	ldr	r3, [pc, #568]	; (8007678 <HAL_DMA_IRQHandler+0x248>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a8e      	ldr	r2, [pc, #568]	; (800767c <HAL_DMA_IRQHandler+0x24c>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	0a9b      	lsrs	r3, r3, #10
 8007448:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800745a:	2208      	movs	r2, #8
 800745c:	409a      	lsls	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4013      	ands	r3, r2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d01a      	beq.n	800749c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d013      	beq.n	800749c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0204 	bic.w	r2, r2, #4
 8007482:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007488:	2208      	movs	r2, #8
 800748a:	409a      	lsls	r2, r3
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007494:	f043 0201 	orr.w	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a0:	2201      	movs	r2, #1
 80074a2:	409a      	lsls	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4013      	ands	r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d012      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074be:	2201      	movs	r2, #1
 80074c0:	409a      	lsls	r2, r3
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	f043 0202 	orr.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d6:	2204      	movs	r2, #4
 80074d8:	409a      	lsls	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4013      	ands	r3, r2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d012      	beq.n	8007508 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f4:	2204      	movs	r2, #4
 80074f6:	409a      	lsls	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007500:	f043 0204 	orr.w	r2, r3, #4
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750c:	2210      	movs	r2, #16
 800750e:	409a      	lsls	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4013      	ands	r3, r2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d043      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d03c      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800752a:	2210      	movs	r2, #16
 800752c:	409a      	lsls	r2, r3
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d018      	beq.n	8007572 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d108      	bne.n	8007560 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	d024      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	e01f      	b.n	80075a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01b      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	4798      	blx	r3
 8007570:	e016      	b.n	80075a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d107      	bne.n	8007590 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0208 	bic.w	r2, r2, #8
 800758e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a4:	2220      	movs	r2, #32
 80075a6:	409a      	lsls	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 808f 	beq.w	80076d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0310 	and.w	r3, r3, #16
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8087 	beq.w	80076d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c6:	2220      	movs	r2, #32
 80075c8:	409a      	lsls	r2, r3
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	d136      	bne.n	8007648 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0216 	bic.w	r2, r2, #22
 80075e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <HAL_DMA_IRQHandler+0x1da>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0208 	bic.w	r2, r2, #8
 8007618:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761e:	223f      	movs	r2, #63	; 0x3f
 8007620:	409a      	lsls	r2, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763a:	2b00      	cmp	r3, #0
 800763c:	d07e      	beq.n	800773c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
        }
        return;
 8007646:	e079      	b.n	800773c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01d      	beq.n	8007692 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007668:	2b00      	cmp	r3, #0
 800766a:	d031      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
 8007674:	e02c      	b.n	80076d0 <HAL_DMA_IRQHandler+0x2a0>
 8007676:	bf00      	nop
 8007678:	200003ac 	.word	0x200003ac
 800767c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d023      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
 8007690:	e01e      	b.n	80076d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10f      	bne.n	80076c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0210 	bic.w	r2, r2, #16
 80076ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d032      	beq.n	800773e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d022      	beq.n	800772a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2205      	movs	r2, #5
 80076e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0201 	bic.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	3301      	adds	r3, #1
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	429a      	cmp	r2, r3
 8007706:	d307      	bcc.n	8007718 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f2      	bne.n	80076fc <HAL_DMA_IRQHandler+0x2cc>
 8007716:	e000      	b.n	800771a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007718:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
 800773a:	e000      	b.n	800773e <HAL_DMA_IRQHandler+0x30e>
        return;
 800773c:	bf00      	nop
    }
  }
}
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007760:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d108      	bne.n	8007784 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007782:	e007      	b.n	8007794 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	60da      	str	r2, [r3, #12]
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	3b10      	subs	r3, #16
 80077b0:	4a14      	ldr	r2, [pc, #80]	; (8007804 <DMA_CalcBaseAndBitshift+0x64>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	091b      	lsrs	r3, r3, #4
 80077b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80077ba:	4a13      	ldr	r2, [pc, #76]	; (8007808 <DMA_CalcBaseAndBitshift+0x68>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d909      	bls.n	80077e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	1d1a      	adds	r2, r3, #4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	659a      	str	r2, [r3, #88]	; 0x58
 80077e0:	e007      	b.n	80077f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	aaaaaaab 	.word	0xaaaaaaab
 8007808:	0800d374 	.word	0x0800d374

0800780c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d11f      	bne.n	8007866 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d856      	bhi.n	80078da <DMA_CheckFifoParam+0xce>
 800782c:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <DMA_CheckFifoParam+0x28>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	08007845 	.word	0x08007845
 8007838:	08007857 	.word	0x08007857
 800783c:	08007845 	.word	0x08007845
 8007840:	080078db 	.word	0x080078db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d046      	beq.n	80078de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007854:	e043      	b.n	80078de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800785e:	d140      	bne.n	80078e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007864:	e03d      	b.n	80078e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800786e:	d121      	bne.n	80078b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d837      	bhi.n	80078e6 <DMA_CheckFifoParam+0xda>
 8007876:	a201      	add	r2, pc, #4	; (adr r2, 800787c <DMA_CheckFifoParam+0x70>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	0800788d 	.word	0x0800788d
 8007880:	08007893 	.word	0x08007893
 8007884:	0800788d 	.word	0x0800788d
 8007888:	080078a5 	.word	0x080078a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
      break;
 8007890:	e030      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d025      	beq.n	80078ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078a2:	e022      	b.n	80078ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078ac:	d11f      	bne.n	80078ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078b2:	e01c      	b.n	80078ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d903      	bls.n	80078c2 <DMA_CheckFifoParam+0xb6>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d003      	beq.n	80078c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80078c0:	e018      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	73fb      	strb	r3, [r7, #15]
      break;
 80078c6:	e015      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00e      	beq.n	80078f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
      break;
 80078d8:	e00b      	b.n	80078f2 <DMA_CheckFifoParam+0xe6>
      break;
 80078da:	bf00      	nop
 80078dc:	e00a      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      break;
 80078de:	bf00      	nop
 80078e0:	e008      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      break;
 80078e2:	bf00      	nop
 80078e4:	e006      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      break;
 80078e6:	bf00      	nop
 80078e8:	e004      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      break;
 80078ea:	bf00      	nop
 80078ec:	e002      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <DMA_CheckFifoParam+0xe8>
      break;
 80078f2:	bf00      	nop
    }
  } 
  
  return status; 
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop

08007904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007904:	b480      	push	{r7}
 8007906:	b089      	sub	sp, #36	; 0x24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007916:	2300      	movs	r3, #0
 8007918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	e159      	b.n	8007bd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007920:	2201      	movs	r2, #1
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4013      	ands	r3, r2
 8007932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	429a      	cmp	r2, r3
 800793a:	f040 8148 	bne.w	8007bce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b01      	cmp	r3, #1
 8007948:	d005      	beq.n	8007956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007952:	2b02      	cmp	r3, #2
 8007954:	d130      	bne.n	80079b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	2203      	movs	r2, #3
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	43db      	mvns	r3, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4013      	ands	r3, r2
 800796c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	4313      	orrs	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800798c:	2201      	movs	r2, #1
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	43db      	mvns	r3, r3
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4013      	ands	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	091b      	lsrs	r3, r3, #4
 80079a2:	f003 0201 	and.w	r2, r3, #1
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	fa02 f303 	lsl.w	r3, r2, r3
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d017      	beq.n	80079f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	2203      	movs	r2, #3
 80079d0:	fa02 f303 	lsl.w	r3, r2, r3
 80079d4:	43db      	mvns	r3, r3
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	4013      	ands	r3, r2
 80079da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	fa02 f303 	lsl.w	r3, r2, r3
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d123      	bne.n	8007a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	08da      	lsrs	r2, r3, #3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3208      	adds	r2, #8
 8007a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	220f      	movs	r2, #15
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	43db      	mvns	r3, r3
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	4013      	ands	r3, r2
 8007a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	08da      	lsrs	r2, r3, #3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3208      	adds	r2, #8
 8007a42:	69b9      	ldr	r1, [r7, #24]
 8007a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	2203      	movs	r2, #3
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	69ba      	ldr	r2, [r7, #24]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f003 0203 	and.w	r2, r3, #3
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80a2 	beq.w	8007bce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	4b57      	ldr	r3, [pc, #348]	; (8007bec <HAL_GPIO_Init+0x2e8>)
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	4a56      	ldr	r2, [pc, #344]	; (8007bec <HAL_GPIO_Init+0x2e8>)
 8007a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a98:	6453      	str	r3, [r2, #68]	; 0x44
 8007a9a:	4b54      	ldr	r3, [pc, #336]	; (8007bec <HAL_GPIO_Init+0x2e8>)
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aa6:	4a52      	ldr	r2, [pc, #328]	; (8007bf0 <HAL_GPIO_Init+0x2ec>)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	089b      	lsrs	r3, r3, #2
 8007aac:	3302      	adds	r3, #2
 8007aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	220f      	movs	r2, #15
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	43db      	mvns	r3, r3
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a49      	ldr	r2, [pc, #292]	; (8007bf4 <HAL_GPIO_Init+0x2f0>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d019      	beq.n	8007b06 <HAL_GPIO_Init+0x202>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a48      	ldr	r2, [pc, #288]	; (8007bf8 <HAL_GPIO_Init+0x2f4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <HAL_GPIO_Init+0x1fe>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a47      	ldr	r2, [pc, #284]	; (8007bfc <HAL_GPIO_Init+0x2f8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00d      	beq.n	8007afe <HAL_GPIO_Init+0x1fa>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a46      	ldr	r2, [pc, #280]	; (8007c00 <HAL_GPIO_Init+0x2fc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d007      	beq.n	8007afa <HAL_GPIO_Init+0x1f6>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a45      	ldr	r2, [pc, #276]	; (8007c04 <HAL_GPIO_Init+0x300>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d101      	bne.n	8007af6 <HAL_GPIO_Init+0x1f2>
 8007af2:	2304      	movs	r3, #4
 8007af4:	e008      	b.n	8007b08 <HAL_GPIO_Init+0x204>
 8007af6:	2307      	movs	r3, #7
 8007af8:	e006      	b.n	8007b08 <HAL_GPIO_Init+0x204>
 8007afa:	2303      	movs	r3, #3
 8007afc:	e004      	b.n	8007b08 <HAL_GPIO_Init+0x204>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e002      	b.n	8007b08 <HAL_GPIO_Init+0x204>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <HAL_GPIO_Init+0x204>
 8007b06:	2300      	movs	r3, #0
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	f002 0203 	and.w	r2, r2, #3
 8007b0e:	0092      	lsls	r2, r2, #2
 8007b10:	4093      	lsls	r3, r2
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b18:	4935      	ldr	r1, [pc, #212]	; (8007bf0 <HAL_GPIO_Init+0x2ec>)
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	089b      	lsrs	r3, r3, #2
 8007b1e:	3302      	adds	r3, #2
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b26:	4b38      	ldr	r3, [pc, #224]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b4a:	4a2f      	ldr	r2, [pc, #188]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b50:	4b2d      	ldr	r3, [pc, #180]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b74:	4a24      	ldr	r2, [pc, #144]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007b7a:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	43db      	mvns	r3, r3
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	4013      	ands	r3, r2
 8007b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b9e:	4a1a      	ldr	r2, [pc, #104]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ba4:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	43db      	mvns	r3, r3
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007bc8:	4a0f      	ldr	r2, [pc, #60]	; (8007c08 <HAL_GPIO_Init+0x304>)
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	61fb      	str	r3, [r7, #28]
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	f67f aea2 	bls.w	8007920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	3724      	adds	r7, #36	; 0x24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40023800 	.word	0x40023800
 8007bf0:	40013800 	.word	0x40013800
 8007bf4:	40020000 	.word	0x40020000
 8007bf8:	40020400 	.word	0x40020400
 8007bfc:	40020800 	.word	0x40020800
 8007c00:	40020c00 	.word	0x40020c00
 8007c04:	40021000 	.word	0x40021000
 8007c08:	40013c00 	.word	0x40013c00

08007c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	807b      	strh	r3, [r7, #2]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c1c:	787b      	ldrb	r3, [r7, #1]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c22:	887a      	ldrh	r2, [r7, #2]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c28:	e003      	b.n	8007c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c2a:	887b      	ldrh	r3, [r7, #2]
 8007c2c:	041a      	lsls	r2, r3, #16
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	619a      	str	r2, [r3, #24]
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
	...

08007c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c4a:	4b08      	ldr	r3, [pc, #32]	; (8007c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c4c:	695a      	ldr	r2, [r3, #20]
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	4013      	ands	r3, r2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d006      	beq.n	8007c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c56:	4a05      	ldr	r2, [pc, #20]	; (8007c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c5c:	88fb      	ldrh	r3, [r7, #6]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fd fc64 	bl	800552c <HAL_GPIO_EXTI_Callback>
  }
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40013c00 	.word	0x40013c00

08007c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e12b      	b.n	8007eda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fd fd1e 	bl	80056d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2224      	movs	r2, #36	; 0x24
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007cd4:	f001 fbbc 	bl	8009450 <HAL_RCC_GetPCLK1Freq>
 8007cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	4a81      	ldr	r2, [pc, #516]	; (8007ee4 <HAL_I2C_Init+0x274>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d807      	bhi.n	8007cf4 <HAL_I2C_Init+0x84>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a80      	ldr	r2, [pc, #512]	; (8007ee8 <HAL_I2C_Init+0x278>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bf94      	ite	ls
 8007cec:	2301      	movls	r3, #1
 8007cee:	2300      	movhi	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e006      	b.n	8007d02 <HAL_I2C_Init+0x92>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a7d      	ldr	r2, [pc, #500]	; (8007eec <HAL_I2C_Init+0x27c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	bf94      	ite	ls
 8007cfc:	2301      	movls	r3, #1
 8007cfe:	2300      	movhi	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e0e7      	b.n	8007eda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4a78      	ldr	r2, [pc, #480]	; (8007ef0 <HAL_I2C_Init+0x280>)
 8007d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d12:	0c9b      	lsrs	r3, r3, #18
 8007d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4a6a      	ldr	r2, [pc, #424]	; (8007ee4 <HAL_I2C_Init+0x274>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d802      	bhi.n	8007d44 <HAL_I2C_Init+0xd4>
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3301      	adds	r3, #1
 8007d42:	e009      	b.n	8007d58 <HAL_I2C_Init+0xe8>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	4a69      	ldr	r2, [pc, #420]	; (8007ef4 <HAL_I2C_Init+0x284>)
 8007d50:	fba2 2303 	umull	r2, r3, r2, r3
 8007d54:	099b      	lsrs	r3, r3, #6
 8007d56:	3301      	adds	r3, #1
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	495c      	ldr	r1, [pc, #368]	; (8007ee4 <HAL_I2C_Init+0x274>)
 8007d74:	428b      	cmp	r3, r1
 8007d76:	d819      	bhi.n	8007dac <HAL_I2C_Init+0x13c>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	1e59      	subs	r1, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d86:	1c59      	adds	r1, r3, #1
 8007d88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d8c:	400b      	ands	r3, r1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_I2C_Init+0x138>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1e59      	subs	r1, r3, #1
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007da0:	3301      	adds	r3, #1
 8007da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da6:	e051      	b.n	8007e4c <HAL_I2C_Init+0x1dc>
 8007da8:	2304      	movs	r3, #4
 8007daa:	e04f      	b.n	8007e4c <HAL_I2C_Init+0x1dc>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d111      	bne.n	8007dd8 <HAL_I2C_Init+0x168>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	1e58      	subs	r0, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6859      	ldr	r1, [r3, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	440b      	add	r3, r1
 8007dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bf0c      	ite	eq
 8007dd0:	2301      	moveq	r3, #1
 8007dd2:	2300      	movne	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	e012      	b.n	8007dfe <HAL_I2C_Init+0x18e>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	1e58      	subs	r0, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6859      	ldr	r1, [r3, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	0099      	lsls	r1, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dee:	3301      	adds	r3, #1
 8007df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <HAL_I2C_Init+0x196>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e022      	b.n	8007e4c <HAL_I2C_Init+0x1dc>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10e      	bne.n	8007e2c <HAL_I2C_Init+0x1bc>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1e58      	subs	r0, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6859      	ldr	r1, [r3, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	440b      	add	r3, r1
 8007e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e20:	3301      	adds	r3, #1
 8007e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2a:	e00f      	b.n	8007e4c <HAL_I2C_Init+0x1dc>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	1e58      	subs	r0, r3, #1
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6859      	ldr	r1, [r3, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	0099      	lsls	r1, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e42:	3301      	adds	r3, #1
 8007e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	6809      	ldr	r1, [r1, #0]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6911      	ldr	r1, [r2, #16]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	68d2      	ldr	r2, [r2, #12]
 8007e86:	4311      	orrs	r1, r2
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695a      	ldr	r2, [r3, #20]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	000186a0 	.word	0x000186a0
 8007ee8:	001e847f 	.word	0x001e847f
 8007eec:	003d08ff 	.word	0x003d08ff
 8007ef0:	431bde83 	.word	0x431bde83
 8007ef4:	10624dd3 	.word	0x10624dd3

08007ef8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	461a      	mov	r2, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	817b      	strh	r3, [r7, #10]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	813b      	strh	r3, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f12:	f7fd ff65 	bl	8005de0 <HAL_GetTick>
 8007f16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	f040 80d9 	bne.w	80080d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	2319      	movs	r3, #25
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	496d      	ldr	r1, [pc, #436]	; (80080e4 <HAL_I2C_Mem_Write+0x1ec>)
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fc7f 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e0cc      	b.n	80080da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_I2C_Mem_Write+0x56>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e0c5      	b.n	80080da <HAL_I2C_Mem_Write+0x1e2>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d007      	beq.n	8007f74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2221      	movs	r2, #33	; 0x21
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2240      	movs	r2, #64	; 0x40
 8007f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a4d      	ldr	r2, [pc, #308]	; (80080e8 <HAL_I2C_Mem_Write+0x1f0>)
 8007fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fb6:	88f8      	ldrh	r0, [r7, #6]
 8007fb8:	893a      	ldrh	r2, [r7, #8]
 8007fba:	8979      	ldrh	r1, [r7, #10]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 fab6 	bl	8008538 <I2C_RequestMemoryWrite>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d052      	beq.n	8008078 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e081      	b.n	80080da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fd00 	bl	80089e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d107      	bne.n	8007ffe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e06b      	b.n	80080da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d11b      	bne.n	8008078 <HAL_I2C_Mem_Write+0x180>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d017      	beq.n	8008078 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1aa      	bne.n	8007fd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fcec 	bl	8008a62 <I2C_WaitOnBTFFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00d      	beq.n	80080ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	2b04      	cmp	r3, #4
 8008096:	d107      	bne.n	80080a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e016      	b.n	80080da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e000      	b.n	80080da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	00100002 	.word	0x00100002
 80080e8:	ffff0000 	.word	0xffff0000

080080ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08c      	sub	sp, #48	; 0x30
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	4608      	mov	r0, r1
 80080f6:	4611      	mov	r1, r2
 80080f8:	461a      	mov	r2, r3
 80080fa:	4603      	mov	r3, r0
 80080fc:	817b      	strh	r3, [r7, #10]
 80080fe:	460b      	mov	r3, r1
 8008100:	813b      	strh	r3, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008106:	f7fd fe6b 	bl	8005de0 <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b20      	cmp	r3, #32
 8008116:	f040 8208 	bne.w	800852a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	2319      	movs	r3, #25
 8008120:	2201      	movs	r2, #1
 8008122:	497b      	ldr	r1, [pc, #492]	; (8008310 <HAL_I2C_Mem_Read+0x224>)
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fb85 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008130:	2302      	movs	r3, #2
 8008132:	e1fb      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_I2C_Mem_Read+0x56>
 800813e:	2302      	movs	r3, #2
 8008140:	e1f4      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b01      	cmp	r3, #1
 8008156:	d007      	beq.n	8008168 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0201 	orr.w	r2, r2, #1
 8008166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2222      	movs	r2, #34	; 0x22
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4a5b      	ldr	r2, [pc, #364]	; (8008314 <HAL_I2C_Mem_Read+0x228>)
 80081a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081aa:	88f8      	ldrh	r0, [r7, #6]
 80081ac:	893a      	ldrh	r2, [r7, #8]
 80081ae:	8979      	ldrh	r1, [r7, #10]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	4603      	mov	r3, r0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 fa52 	bl	8008664 <I2C_RequestMemoryRead>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e1b0      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d113      	bne.n	80081fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081d2:	2300      	movs	r3, #0
 80081d4:	623b      	str	r3, [r7, #32]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	623b      	str	r3, [r7, #32]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	623b      	str	r3, [r7, #32]
 80081e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e184      	b.n	8008504 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d11b      	bne.n	800823a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	e164      	b.n	8008504 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823e:	2b02      	cmp	r3, #2
 8008240:	d11b      	bne.n	800827a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008250:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008262:	2300      	movs	r3, #0
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	e144      	b.n	8008504 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800827a:	2300      	movs	r3, #0
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008290:	e138      	b.n	8008504 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008296:	2b03      	cmp	r3, #3
 8008298:	f200 80f1 	bhi.w	800847e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d123      	bne.n	80082ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fc1b 	bl	8008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e139      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082ea:	e10b      	b.n	8008504 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d14e      	bne.n	8008392 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	2200      	movs	r2, #0
 80082fc:	4906      	ldr	r1, [pc, #24]	; (8008318 <HAL_I2C_Mem_Read+0x22c>)
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 fa98 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e10e      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
 800830e:	bf00      	nop
 8008310:	00100002 	.word	0x00100002
 8008314:	ffff0000 	.word	0xffff0000
 8008318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800832a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008348:	3b01      	subs	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837a:	3b01      	subs	r3, #1
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008386:	b29b      	uxth	r3, r3
 8008388:	3b01      	subs	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008390:	e0b8      	b.n	8008504 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	2200      	movs	r2, #0
 800839a:	4966      	ldr	r1, [pc, #408]	; (8008534 <HAL_I2C_Mem_Read+0x448>)
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fa49 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0bf      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	2200      	movs	r2, #0
 80083f6:	494f      	ldr	r1, [pc, #316]	; (8008534 <HAL_I2C_Mem_Read+0x448>)
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fa1b 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e091      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008434:	3b01      	subs	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008440:	b29b      	uxth	r3, r3
 8008442:	3b01      	subs	r3, #1
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008472:	b29b      	uxth	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800847c:	e042      	b.n	8008504 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800847e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fb2e 	bl	8008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e04c      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d118      	bne.n	8008504 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	b2d2      	uxtb	r2, r2
 80084de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008508:	2b00      	cmp	r3, #0
 800850a:	f47f aec2 	bne.w	8008292 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2220      	movs	r2, #32
 8008512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3728      	adds	r7, #40	; 0x28
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	00010004 	.word	0x00010004

08008538 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af02      	add	r7, sp, #8
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	4603      	mov	r3, r0
 8008548:	817b      	strh	r3, [r7, #10]
 800854a:	460b      	mov	r3, r1
 800854c:	813b      	strh	r3, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	2200      	movs	r2, #0
 800856a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f960 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008588:	d103      	bne.n	8008592 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e05f      	b.n	8008656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008596:	897b      	ldrh	r3, [r7, #10]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	461a      	mov	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	6a3a      	ldr	r2, [r7, #32]
 80085aa:	492d      	ldr	r1, [pc, #180]	; (8008660 <I2C_RequestMemoryWrite+0x128>)
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f998 	bl	80088e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e04c      	b.n	8008656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d4:	6a39      	ldr	r1, [r7, #32]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 fa02 	bl	80089e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00d      	beq.n	80085fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d107      	bne.n	80085fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e02b      	b.n	8008656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085fe:	88fb      	ldrh	r3, [r7, #6]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d105      	bne.n	8008610 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008604:	893b      	ldrh	r3, [r7, #8]
 8008606:	b2da      	uxtb	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	611a      	str	r2, [r3, #16]
 800860e:	e021      	b.n	8008654 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008610:	893b      	ldrh	r3, [r7, #8]
 8008612:	0a1b      	lsrs	r3, r3, #8
 8008614:	b29b      	uxth	r3, r3
 8008616:	b2da      	uxtb	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800861e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008620:	6a39      	ldr	r1, [r7, #32]
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f9dc 	bl	80089e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00d      	beq.n	800864a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	2b04      	cmp	r3, #4
 8008634:	d107      	bne.n	8008646 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e005      	b.n	8008656 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800864a:	893b      	ldrh	r3, [r7, #8]
 800864c:	b2da      	uxtb	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	00010002 	.word	0x00010002

08008664 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af02      	add	r7, sp, #8
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	461a      	mov	r2, r3
 8008672:	4603      	mov	r3, r0
 8008674:	817b      	strh	r3, [r7, #10]
 8008676:	460b      	mov	r3, r1
 8008678:	813b      	strh	r3, [r7, #8]
 800867a:	4613      	mov	r3, r2
 800867c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800868c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800869c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 f8c2 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00d      	beq.n	80086d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c4:	d103      	bne.n	80086ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e0aa      	b.n	8008828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086d2:	897b      	ldrh	r3, [r7, #10]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	6a3a      	ldr	r2, [r7, #32]
 80086e6:	4952      	ldr	r1, [pc, #328]	; (8008830 <I2C_RequestMemoryRead+0x1cc>)
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f8fa 	bl	80088e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e097      	b.n	8008828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800870e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008710:	6a39      	ldr	r1, [r7, #32]
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 f964 	bl	80089e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00d      	beq.n	800873a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	2b04      	cmp	r3, #4
 8008724:	d107      	bne.n	8008736 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e076      	b.n	8008828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d105      	bne.n	800874c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008740:	893b      	ldrh	r3, [r7, #8]
 8008742:	b2da      	uxtb	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	611a      	str	r2, [r3, #16]
 800874a:	e021      	b.n	8008790 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	b29b      	uxth	r3, r3
 8008752:	b2da      	uxtb	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875c:	6a39      	ldr	r1, [r7, #32]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f93e 	bl	80089e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00d      	beq.n	8008786 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	2b04      	cmp	r3, #4
 8008770:	d107      	bne.n	8008782 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e050      	b.n	8008828 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008786:	893b      	ldrh	r3, [r7, #8]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008792:	6a39      	ldr	r1, [r7, #32]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f923 	bl	80089e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00d      	beq.n	80087bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d107      	bne.n	80087b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e035      	b.n	8008828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f82b 	bl	8008834 <I2C_WaitOnFlagUntilTimeout>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00d      	beq.n	8008800 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f2:	d103      	bne.n	80087fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e013      	b.n	8008828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008800:	897b      	ldrh	r3, [r7, #10]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f043 0301 	orr.w	r3, r3, #1
 8008808:	b2da      	uxtb	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	6a3a      	ldr	r2, [r7, #32]
 8008814:	4906      	ldr	r1, [pc, #24]	; (8008830 <I2C_RequestMemoryRead+0x1cc>)
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 f863 	bl	80088e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	00010002 	.word	0x00010002

08008834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	4613      	mov	r3, r2
 8008842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008844:	e025      	b.n	8008892 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884c:	d021      	beq.n	8008892 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800884e:	f7fd fac7 	bl	8005de0 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d302      	bcc.n	8008864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d116      	bne.n	8008892 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2220      	movs	r2, #32
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f043 0220 	orr.w	r2, r3, #32
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e023      	b.n	80088da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	d10d      	bne.n	80088b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	43da      	mvns	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf0c      	ite	eq
 80088ae:	2301      	moveq	r3, #1
 80088b0:	2300      	movne	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	e00c      	b.n	80088d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	43da      	mvns	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4013      	ands	r3, r2
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bf0c      	ite	eq
 80088ca:	2301      	moveq	r3, #1
 80088cc:	2300      	movne	r3, #0
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d0b6      	beq.n	8008846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
 80088ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088f0:	e051      	b.n	8008996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008900:	d123      	bne.n	800894a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008910:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800891a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f043 0204 	orr.w	r2, r3, #4
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e046      	b.n	80089d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d021      	beq.n	8008996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008952:	f7fd fa45 	bl	8005de0 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	429a      	cmp	r2, r3
 8008960:	d302      	bcc.n	8008968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d116      	bne.n	8008996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2220      	movs	r2, #32
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	f043 0220 	orr.w	r2, r3, #32
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e020      	b.n	80089d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	0c1b      	lsrs	r3, r3, #16
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d10c      	bne.n	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	43da      	mvns	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4013      	ands	r3, r2
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf14      	ite	ne
 80089b2:	2301      	movne	r3, #1
 80089b4:	2300      	moveq	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	e00b      	b.n	80089d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	43da      	mvns	r2, r3
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	4013      	ands	r3, r2
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	bf14      	ite	ne
 80089cc:	2301      	movne	r3, #1
 80089ce:	2300      	moveq	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d18d      	bne.n	80088f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089ec:	e02d      	b.n	8008a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 f8ce 	bl	8008b90 <I2C_IsAcknowledgeFailed>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e02d      	b.n	8008a5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d021      	beq.n	8008a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a06:	f7fd f9eb 	bl	8005de0 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d302      	bcc.n	8008a1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d116      	bne.n	8008a4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f043 0220 	orr.w	r2, r3, #32
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e007      	b.n	8008a5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a54:	2b80      	cmp	r3, #128	; 0x80
 8008a56:	d1ca      	bne.n	80089ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a6e:	e02d      	b.n	8008acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f88d 	bl	8008b90 <I2C_IsAcknowledgeFailed>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e02d      	b.n	8008adc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a86:	d021      	beq.n	8008acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a88:	f7fd f9aa 	bl	8005de0 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d302      	bcc.n	8008a9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d116      	bne.n	8008acc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	f043 0220 	orr.w	r2, r3, #32
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e007      	b.n	8008adc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d1ca      	bne.n	8008a70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008af0:	e042      	b.n	8008b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b10      	cmp	r3, #16
 8008afe:	d119      	bne.n	8008b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0210 	mvn.w	r2, #16
 8008b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e029      	b.n	8008b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b34:	f7fd f954 	bl	8005de0 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d302      	bcc.n	8008b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d116      	bne.n	8008b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	f043 0220 	orr.w	r2, r3, #32
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e007      	b.n	8008b88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b82:	2b40      	cmp	r3, #64	; 0x40
 8008b84:	d1b5      	bne.n	8008af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ba6:	d11b      	bne.n	8008be0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	f043 0204 	orr.w	r2, r3, #4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
	...

08008bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e267      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d075      	beq.n	8008cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c0e:	4b88      	ldr	r3, [pc, #544]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f003 030c 	and.w	r3, r3, #12
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d00c      	beq.n	8008c34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c1a:	4b85      	ldr	r3, [pc, #532]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c22:	2b08      	cmp	r3, #8
 8008c24:	d112      	bne.n	8008c4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c26:	4b82      	ldr	r3, [pc, #520]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c32:	d10b      	bne.n	8008c4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c34:	4b7e      	ldr	r3, [pc, #504]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d05b      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x108>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d157      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e242      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c54:	d106      	bne.n	8008c64 <HAL_RCC_OscConfig+0x74>
 8008c56:	4b76      	ldr	r3, [pc, #472]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a75      	ldr	r2, [pc, #468]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	e01d      	b.n	8008ca0 <HAL_RCC_OscConfig+0xb0>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c6c:	d10c      	bne.n	8008c88 <HAL_RCC_OscConfig+0x98>
 8008c6e:	4b70      	ldr	r3, [pc, #448]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a6f      	ldr	r2, [pc, #444]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	4b6d      	ldr	r3, [pc, #436]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a6c      	ldr	r2, [pc, #432]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	e00b      	b.n	8008ca0 <HAL_RCC_OscConfig+0xb0>
 8008c88:	4b69      	ldr	r3, [pc, #420]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a68      	ldr	r2, [pc, #416]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	4b66      	ldr	r3, [pc, #408]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a65      	ldr	r2, [pc, #404]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d013      	beq.n	8008cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca8:	f7fd f89a 	bl	8005de0 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cb0:	f7fd f896 	bl	8005de0 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b64      	cmp	r3, #100	; 0x64
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e207      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cc2:	4b5b      	ldr	r3, [pc, #364]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0f0      	beq.n	8008cb0 <HAL_RCC_OscConfig+0xc0>
 8008cce:	e014      	b.n	8008cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cd0:	f7fd f886 	bl	8005de0 <HAL_GetTick>
 8008cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cd8:	f7fd f882 	bl	8005de0 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b64      	cmp	r3, #100	; 0x64
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e1f3      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cea:	4b51      	ldr	r3, [pc, #324]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f0      	bne.n	8008cd8 <HAL_RCC_OscConfig+0xe8>
 8008cf6:	e000      	b.n	8008cfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d063      	beq.n	8008dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d06:	4b4a      	ldr	r3, [pc, #296]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 030c 	and.w	r3, r3, #12
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d12:	4b47      	ldr	r3, [pc, #284]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d11c      	bne.n	8008d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d1e:	4b44      	ldr	r3, [pc, #272]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d116      	bne.n	8008d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d2a:	4b41      	ldr	r3, [pc, #260]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <HAL_RCC_OscConfig+0x152>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d001      	beq.n	8008d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e1c7      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d42:	4b3b      	ldr	r3, [pc, #236]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	4937      	ldr	r1, [pc, #220]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d56:	e03a      	b.n	8008dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d020      	beq.n	8008da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d60:	4b34      	ldr	r3, [pc, #208]	; (8008e34 <HAL_RCC_OscConfig+0x244>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d66:	f7fd f83b 	bl	8005de0 <HAL_GetTick>
 8008d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d6e:	f7fd f837 	bl	8005de0 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e1a8      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d80:	4b2b      	ldr	r3, [pc, #172]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0f0      	beq.n	8008d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d8c:	4b28      	ldr	r3, [pc, #160]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	4925      	ldr	r1, [pc, #148]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	600b      	str	r3, [r1, #0]
 8008da0:	e015      	b.n	8008dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008da2:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <HAL_RCC_OscConfig+0x244>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da8:	f7fd f81a 	bl	8005de0 <HAL_GetTick>
 8008dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dae:	e008      	b.n	8008dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008db0:	f7fd f816 	bl	8005de0 <HAL_GetTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d901      	bls.n	8008dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e187      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1f0      	bne.n	8008db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0308 	and.w	r3, r3, #8
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d036      	beq.n	8008e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d016      	beq.n	8008e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <HAL_RCC_OscConfig+0x248>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de8:	f7fc fffa 	bl	8005de0 <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008df0:	f7fc fff6 	bl	8005de0 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e167      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e02:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <HAL_RCC_OscConfig+0x240>)
 8008e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f0      	beq.n	8008df0 <HAL_RCC_OscConfig+0x200>
 8008e0e:	e01b      	b.n	8008e48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <HAL_RCC_OscConfig+0x248>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e16:	f7fc ffe3 	bl	8005de0 <HAL_GetTick>
 8008e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e1c:	e00e      	b.n	8008e3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e1e:	f7fc ffdf 	bl	8005de0 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d907      	bls.n	8008e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e150      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
 8008e30:	40023800 	.word	0x40023800
 8008e34:	42470000 	.word	0x42470000
 8008e38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e3c:	4b88      	ldr	r3, [pc, #544]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1ea      	bne.n	8008e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8097 	beq.w	8008f84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e5a:	4b81      	ldr	r3, [pc, #516]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10f      	bne.n	8008e86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
 8008e6a:	4b7d      	ldr	r3, [pc, #500]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	4a7c      	ldr	r2, [pc, #496]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e74:	6413      	str	r3, [r2, #64]	; 0x40
 8008e76:	4b7a      	ldr	r3, [pc, #488]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7e:	60bb      	str	r3, [r7, #8]
 8008e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e86:	4b77      	ldr	r3, [pc, #476]	; (8009064 <HAL_RCC_OscConfig+0x474>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d118      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e92:	4b74      	ldr	r3, [pc, #464]	; (8009064 <HAL_RCC_OscConfig+0x474>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a73      	ldr	r2, [pc, #460]	; (8009064 <HAL_RCC_OscConfig+0x474>)
 8008e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e9e:	f7fc ff9f 	bl	8005de0 <HAL_GetTick>
 8008ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ea4:	e008      	b.n	8008eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ea6:	f7fc ff9b 	bl	8005de0 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d901      	bls.n	8008eb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e10c      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb8:	4b6a      	ldr	r3, [pc, #424]	; (8009064 <HAL_RCC_OscConfig+0x474>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0f0      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d106      	bne.n	8008eda <HAL_RCC_OscConfig+0x2ea>
 8008ecc:	4b64      	ldr	r3, [pc, #400]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed0:	4a63      	ldr	r2, [pc, #396]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ed8:	e01c      	b.n	8008f14 <HAL_RCC_OscConfig+0x324>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d10c      	bne.n	8008efc <HAL_RCC_OscConfig+0x30c>
 8008ee2:	4b5f      	ldr	r3, [pc, #380]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee6:	4a5e      	ldr	r2, [pc, #376]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008ee8:	f043 0304 	orr.w	r3, r3, #4
 8008eec:	6713      	str	r3, [r2, #112]	; 0x70
 8008eee:	4b5c      	ldr	r3, [pc, #368]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef2:	4a5b      	ldr	r2, [pc, #364]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8008efa:	e00b      	b.n	8008f14 <HAL_RCC_OscConfig+0x324>
 8008efc:	4b58      	ldr	r3, [pc, #352]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f00:	4a57      	ldr	r2, [pc, #348]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f02:	f023 0301 	bic.w	r3, r3, #1
 8008f06:	6713      	str	r3, [r2, #112]	; 0x70
 8008f08:	4b55      	ldr	r3, [pc, #340]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0c:	4a54      	ldr	r2, [pc, #336]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f0e:	f023 0304 	bic.w	r3, r3, #4
 8008f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d015      	beq.n	8008f48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f1c:	f7fc ff60 	bl	8005de0 <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f22:	e00a      	b.n	8008f3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f24:	f7fc ff5c 	bl	8005de0 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e0cb      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f3a:	4b49      	ldr	r3, [pc, #292]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d0ee      	beq.n	8008f24 <HAL_RCC_OscConfig+0x334>
 8008f46:	e014      	b.n	8008f72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f48:	f7fc ff4a 	bl	8005de0 <HAL_GetTick>
 8008f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f4e:	e00a      	b.n	8008f66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f50:	f7fc ff46 	bl	8005de0 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e0b5      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f66:	4b3e      	ldr	r3, [pc, #248]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1ee      	bne.n	8008f50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d105      	bne.n	8008f84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f78:	4b39      	ldr	r3, [pc, #228]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7c:	4a38      	ldr	r2, [pc, #224]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80a1 	beq.w	80090d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f8e:	4b34      	ldr	r3, [pc, #208]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 030c 	and.w	r3, r3, #12
 8008f96:	2b08      	cmp	r3, #8
 8008f98:	d05c      	beq.n	8009054 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d141      	bne.n	8009026 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fa2:	4b31      	ldr	r3, [pc, #196]	; (8009068 <HAL_RCC_OscConfig+0x478>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fa8:	f7fc ff1a 	bl	8005de0 <HAL_GetTick>
 8008fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fae:	e008      	b.n	8008fc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fb0:	f7fc ff16 	bl	8005de0 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e087      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fc2:	4b27      	ldr	r3, [pc, #156]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f0      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	69da      	ldr	r2, [r3, #28]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	019b      	lsls	r3, r3, #6
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	041b      	lsls	r3, r3, #16
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	061b      	lsls	r3, r3, #24
 8008ff2:	491b      	ldr	r1, [pc, #108]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ff8:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <HAL_RCC_OscConfig+0x478>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffe:	f7fc feef 	bl	8005de0 <HAL_GetTick>
 8009002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009004:	e008      	b.n	8009018 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009006:	f7fc feeb 	bl	8005de0 <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e05c      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d0f0      	beq.n	8009006 <HAL_RCC_OscConfig+0x416>
 8009024:	e054      	b.n	80090d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009026:	4b10      	ldr	r3, [pc, #64]	; (8009068 <HAL_RCC_OscConfig+0x478>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902c:	f7fc fed8 	bl	8005de0 <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009034:	f7fc fed4 	bl	8005de0 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e045      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <HAL_RCC_OscConfig+0x470>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f0      	bne.n	8009034 <HAL_RCC_OscConfig+0x444>
 8009052:	e03d      	b.n	80090d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d107      	bne.n	800906c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e038      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
 8009060:	40023800 	.word	0x40023800
 8009064:	40007000 	.word	0x40007000
 8009068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800906c:	4b1b      	ldr	r3, [pc, #108]	; (80090dc <HAL_RCC_OscConfig+0x4ec>)
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d028      	beq.n	80090cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009084:	429a      	cmp	r2, r3
 8009086:	d121      	bne.n	80090cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009092:	429a      	cmp	r2, r3
 8009094:	d11a      	bne.n	80090cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800909c:	4013      	ands	r3, r2
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d111      	bne.n	80090cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b2:	085b      	lsrs	r3, r3, #1
 80090b4:	3b01      	subs	r3, #1
 80090b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d107      	bne.n	80090cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d001      	beq.n	80090d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	40023800 	.word	0x40023800

080090e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0cc      	b.n	800928e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090f4:	4b68      	ldr	r3, [pc, #416]	; (8009298 <HAL_RCC_ClockConfig+0x1b8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0307 	and.w	r3, r3, #7
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d90c      	bls.n	800911c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009102:	4b65      	ldr	r3, [pc, #404]	; (8009298 <HAL_RCC_ClockConfig+0x1b8>)
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800910a:	4b63      	ldr	r3, [pc, #396]	; (8009298 <HAL_RCC_ClockConfig+0x1b8>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d001      	beq.n	800911c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e0b8      	b.n	800928e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d020      	beq.n	800916a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b00      	cmp	r3, #0
 8009132:	d005      	beq.n	8009140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009134:	4b59      	ldr	r3, [pc, #356]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	4a58      	ldr	r2, [pc, #352]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 800913a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800913e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0308 	and.w	r3, r3, #8
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800914c:	4b53      	ldr	r3, [pc, #332]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	4a52      	ldr	r2, [pc, #328]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009158:	4b50      	ldr	r3, [pc, #320]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	494d      	ldr	r1, [pc, #308]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	4313      	orrs	r3, r2
 8009168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d044      	beq.n	8009200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d107      	bne.n	800918e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800917e:	4b47      	ldr	r3, [pc, #284]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d119      	bne.n	80091be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e07f      	b.n	800928e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2b02      	cmp	r3, #2
 8009194:	d003      	beq.n	800919e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800919a:	2b03      	cmp	r3, #3
 800919c:	d107      	bne.n	80091ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800919e:	4b3f      	ldr	r3, [pc, #252]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d109      	bne.n	80091be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e06f      	b.n	800928e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ae:	4b3b      	ldr	r3, [pc, #236]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e067      	b.n	800928e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091be:	4b37      	ldr	r3, [pc, #220]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f023 0203 	bic.w	r2, r3, #3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	4934      	ldr	r1, [pc, #208]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091d0:	f7fc fe06 	bl	8005de0 <HAL_GetTick>
 80091d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091d6:	e00a      	b.n	80091ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d8:	f7fc fe02 	bl	8005de0 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e04f      	b.n	800928e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ee:	4b2b      	ldr	r3, [pc, #172]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f003 020c 	and.w	r2, r3, #12
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d1eb      	bne.n	80091d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009200:	4b25      	ldr	r3, [pc, #148]	; (8009298 <HAL_RCC_ClockConfig+0x1b8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d20c      	bcs.n	8009228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800920e:	4b22      	ldr	r3, [pc, #136]	; (8009298 <HAL_RCC_ClockConfig+0x1b8>)
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009216:	4b20      	ldr	r3, [pc, #128]	; (8009298 <HAL_RCC_ClockConfig+0x1b8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d001      	beq.n	8009228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e032      	b.n	800928e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d008      	beq.n	8009246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009234:	4b19      	ldr	r3, [pc, #100]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	4916      	ldr	r1, [pc, #88]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009242:	4313      	orrs	r3, r2
 8009244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	2b00      	cmp	r3, #0
 8009250:	d009      	beq.n	8009266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	490e      	ldr	r1, [pc, #56]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 8009262:	4313      	orrs	r3, r2
 8009264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009266:	f000 f821 	bl	80092ac <HAL_RCC_GetSysClockFreq>
 800926a:	4602      	mov	r2, r0
 800926c:	4b0b      	ldr	r3, [pc, #44]	; (800929c <HAL_RCC_ClockConfig+0x1bc>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	091b      	lsrs	r3, r3, #4
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	490a      	ldr	r1, [pc, #40]	; (80092a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009278:	5ccb      	ldrb	r3, [r1, r3]
 800927a:	fa22 f303 	lsr.w	r3, r2, r3
 800927e:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009282:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <HAL_RCC_ClockConfig+0x1c8>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7fc fd66 	bl	8005d58 <HAL_InitTick>

  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	40023c00 	.word	0x40023c00
 800929c:	40023800 	.word	0x40023800
 80092a0:	0800d35c 	.word	0x0800d35c
 80092a4:	200003ac 	.word	0x200003ac
 80092a8:	200003b0 	.word	0x200003b0

080092ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092b0:	b090      	sub	sp, #64	; 0x40
 80092b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
 80092b8:	2300      	movs	r3, #0
 80092ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092bc:	2300      	movs	r3, #0
 80092be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092c4:	4b59      	ldr	r3, [pc, #356]	; (800942c <HAL_RCC_GetSysClockFreq+0x180>)
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f003 030c 	and.w	r3, r3, #12
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d00d      	beq.n	80092ec <HAL_RCC_GetSysClockFreq+0x40>
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	f200 80a1 	bhi.w	8009418 <HAL_RCC_GetSysClockFreq+0x16c>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <HAL_RCC_GetSysClockFreq+0x34>
 80092da:	2b04      	cmp	r3, #4
 80092dc:	d003      	beq.n	80092e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80092de:	e09b      	b.n	8009418 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092e0:	4b53      	ldr	r3, [pc, #332]	; (8009430 <HAL_RCC_GetSysClockFreq+0x184>)
 80092e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80092e4:	e09b      	b.n	800941e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092e6:	4b53      	ldr	r3, [pc, #332]	; (8009434 <HAL_RCC_GetSysClockFreq+0x188>)
 80092e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80092ea:	e098      	b.n	800941e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092ec:	4b4f      	ldr	r3, [pc, #316]	; (800942c <HAL_RCC_GetSysClockFreq+0x180>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092f6:	4b4d      	ldr	r3, [pc, #308]	; (800942c <HAL_RCC_GetSysClockFreq+0x180>)
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d028      	beq.n	8009354 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009302:	4b4a      	ldr	r3, [pc, #296]	; (800942c <HAL_RCC_GetSysClockFreq+0x180>)
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	099b      	lsrs	r3, r3, #6
 8009308:	2200      	movs	r2, #0
 800930a:	623b      	str	r3, [r7, #32]
 800930c:	627a      	str	r2, [r7, #36]	; 0x24
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009314:	2100      	movs	r1, #0
 8009316:	4b47      	ldr	r3, [pc, #284]	; (8009434 <HAL_RCC_GetSysClockFreq+0x188>)
 8009318:	fb03 f201 	mul.w	r2, r3, r1
 800931c:	2300      	movs	r3, #0
 800931e:	fb00 f303 	mul.w	r3, r0, r3
 8009322:	4413      	add	r3, r2
 8009324:	4a43      	ldr	r2, [pc, #268]	; (8009434 <HAL_RCC_GetSysClockFreq+0x188>)
 8009326:	fba0 1202 	umull	r1, r2, r0, r2
 800932a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800932c:	460a      	mov	r2, r1
 800932e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009332:	4413      	add	r3, r2
 8009334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009338:	2200      	movs	r2, #0
 800933a:	61bb      	str	r3, [r7, #24]
 800933c:	61fa      	str	r2, [r7, #28]
 800933e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009346:	f7f7 faa5 	bl	8000894 <__aeabi_uldivmod>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4613      	mov	r3, r2
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009352:	e053      	b.n	80093fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009354:	4b35      	ldr	r3, [pc, #212]	; (800942c <HAL_RCC_GetSysClockFreq+0x180>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	099b      	lsrs	r3, r3, #6
 800935a:	2200      	movs	r2, #0
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	617a      	str	r2, [r7, #20]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009366:	f04f 0b00 	mov.w	fp, #0
 800936a:	4652      	mov	r2, sl
 800936c:	465b      	mov	r3, fp
 800936e:	f04f 0000 	mov.w	r0, #0
 8009372:	f04f 0100 	mov.w	r1, #0
 8009376:	0159      	lsls	r1, r3, #5
 8009378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800937c:	0150      	lsls	r0, r2, #5
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	ebb2 080a 	subs.w	r8, r2, sl
 8009386:	eb63 090b 	sbc.w	r9, r3, fp
 800938a:	f04f 0200 	mov.w	r2, #0
 800938e:	f04f 0300 	mov.w	r3, #0
 8009392:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009396:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800939a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800939e:	ebb2 0408 	subs.w	r4, r2, r8
 80093a2:	eb63 0509 	sbc.w	r5, r3, r9
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	f04f 0300 	mov.w	r3, #0
 80093ae:	00eb      	lsls	r3, r5, #3
 80093b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093b4:	00e2      	lsls	r2, r4, #3
 80093b6:	4614      	mov	r4, r2
 80093b8:	461d      	mov	r5, r3
 80093ba:	eb14 030a 	adds.w	r3, r4, sl
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	eb45 030b 	adc.w	r3, r5, fp
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	f04f 0200 	mov.w	r2, #0
 80093ca:	f04f 0300 	mov.w	r3, #0
 80093ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093d2:	4629      	mov	r1, r5
 80093d4:	028b      	lsls	r3, r1, #10
 80093d6:	4621      	mov	r1, r4
 80093d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093dc:	4621      	mov	r1, r4
 80093de:	028a      	lsls	r2, r1, #10
 80093e0:	4610      	mov	r0, r2
 80093e2:	4619      	mov	r1, r3
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	2200      	movs	r2, #0
 80093e8:	60bb      	str	r3, [r7, #8]
 80093ea:	60fa      	str	r2, [r7, #12]
 80093ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093f0:	f7f7 fa50 	bl	8000894 <__aeabi_uldivmod>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4613      	mov	r3, r2
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093fc:	4b0b      	ldr	r3, [pc, #44]	; (800942c <HAL_RCC_GetSysClockFreq+0x180>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	0c1b      	lsrs	r3, r3, #16
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	3301      	adds	r3, #1
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800940c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	fbb2 f3f3 	udiv	r3, r2, r3
 8009414:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009416:	e002      	b.n	800941e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <HAL_RCC_GetSysClockFreq+0x184>)
 800941a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800941c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009420:	4618      	mov	r0, r3
 8009422:	3740      	adds	r7, #64	; 0x40
 8009424:	46bd      	mov	sp, r7
 8009426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942a:	bf00      	nop
 800942c:	40023800 	.word	0x40023800
 8009430:	00f42400 	.word	0x00f42400
 8009434:	017d7840 	.word	0x017d7840

08009438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009438:	b480      	push	{r7}
 800943a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800943c:	4b03      	ldr	r3, [pc, #12]	; (800944c <HAL_RCC_GetHCLKFreq+0x14>)
 800943e:	681b      	ldr	r3, [r3, #0]
}
 8009440:	4618      	mov	r0, r3
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	200003ac 	.word	0x200003ac

08009450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009454:	f7ff fff0 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8009458:	4602      	mov	r2, r0
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	0a9b      	lsrs	r3, r3, #10
 8009460:	f003 0307 	and.w	r3, r3, #7
 8009464:	4903      	ldr	r1, [pc, #12]	; (8009474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009466:	5ccb      	ldrb	r3, [r1, r3]
 8009468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40023800 	.word	0x40023800
 8009474:	0800d36c 	.word	0x0800d36c

08009478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800947c:	f7ff ffdc 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8009480:	4602      	mov	r2, r0
 8009482:	4b05      	ldr	r3, [pc, #20]	; (8009498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	0b5b      	lsrs	r3, r3, #13
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	4903      	ldr	r1, [pc, #12]	; (800949c <HAL_RCC_GetPCLK2Freq+0x24>)
 800948e:	5ccb      	ldrb	r3, [r1, r3]
 8009490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009494:	4618      	mov	r0, r3
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40023800 	.word	0x40023800
 800949c:	0800d36c 	.word	0x0800d36c

080094a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e07b      	b.n	80095aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d108      	bne.n	80094cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094c2:	d009      	beq.n	80094d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	61da      	str	r2, [r3, #28]
 80094ca:	e005      	b.n	80094d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fc f94a 	bl	800578c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800950e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	431a      	orrs	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	431a      	orrs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955c:	ea42 0103 	orr.w	r1, r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009564:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	0c1b      	lsrs	r3, r3, #16
 8009576:	f003 0104 	and.w	r1, r3, #4
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	f003 0210 	and.w	r2, r3, #16
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	69da      	ldr	r2, [r3, #28]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009598:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b088      	sub	sp, #32
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	603b      	str	r3, [r7, #0]
 80095be:	4613      	mov	r3, r2
 80095c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_SPI_Transmit+0x22>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e126      	b.n	8009822 <HAL_SPI_Transmit+0x270>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095dc:	f7fc fc00 	bl	8005de0 <HAL_GetTick>
 80095e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80095e2:	88fb      	ldrh	r3, [r7, #6]
 80095e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d002      	beq.n	80095f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80095f2:	2302      	movs	r3, #2
 80095f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095f6:	e10b      	b.n	8009810 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <HAL_SPI_Transmit+0x52>
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009608:	e102      	b.n	8009810 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2203      	movs	r2, #3
 800960e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	88fa      	ldrh	r2, [r7, #6]
 8009622:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	88fa      	ldrh	r2, [r7, #6]
 8009628:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009650:	d10f      	bne.n	8009672 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967c:	2b40      	cmp	r3, #64	; 0x40
 800967e:	d007      	beq.n	8009690 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800968e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009698:	d14b      	bne.n	8009732 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <HAL_SPI_Transmit+0xf6>
 80096a2:	8afb      	ldrh	r3, [r7, #22]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d13e      	bne.n	8009726 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ac:	881a      	ldrh	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	1c9a      	adds	r2, r3, #2
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80096cc:	e02b      	b.n	8009726 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d112      	bne.n	8009702 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e0:	881a      	ldrh	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ec:	1c9a      	adds	r2, r3, #2
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8009700:	e011      	b.n	8009726 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009702:	f7fc fb6d 	bl	8005de0 <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d803      	bhi.n	800971a <HAL_SPI_Transmit+0x168>
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d102      	bne.n	8009720 <HAL_SPI_Transmit+0x16e>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d102      	bne.n	8009726 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009724:	e074      	b.n	8009810 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800972a:	b29b      	uxth	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1ce      	bne.n	80096ce <HAL_SPI_Transmit+0x11c>
 8009730:	e04c      	b.n	80097cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <HAL_SPI_Transmit+0x18e>
 800973a:	8afb      	ldrh	r3, [r7, #22]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d140      	bne.n	80097c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	330c      	adds	r3, #12
 800974a:	7812      	ldrb	r2, [r2, #0]
 800974c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975c:	b29b      	uxth	r3, r3
 800975e:	3b01      	subs	r3, #1
 8009760:	b29a      	uxth	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009766:	e02c      	b.n	80097c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	2b02      	cmp	r3, #2
 8009774:	d113      	bne.n	800979e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	330c      	adds	r3, #12
 8009780:	7812      	ldrb	r2, [r2, #0]
 8009782:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009792:	b29b      	uxth	r3, r3
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	86da      	strh	r2, [r3, #54]	; 0x36
 800979c:	e011      	b.n	80097c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800979e:	f7fc fb1f 	bl	8005de0 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d803      	bhi.n	80097b6 <HAL_SPI_Transmit+0x204>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b4:	d102      	bne.n	80097bc <HAL_SPI_Transmit+0x20a>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097c0:	e026      	b.n	8009810 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1cd      	bne.n	8009768 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097cc:	69ba      	ldr	r2, [r7, #24]
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 fd17 	bl	800a204 <SPI_EndRxTxTransaction>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2220      	movs	r2, #32
 80097e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10a      	bne.n	8009800 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097ea:	2300      	movs	r3, #0
 80097ec:	613b      	str	r3, [r7, #16]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	613b      	str	r3, [r7, #16]
 80097fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	77fb      	strb	r3, [r7, #31]
 800980c:	e000      	b.n	8009810 <HAL_SPI_Transmit+0x25e>
  }

error:
 800980e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009820:	7ffb      	ldrb	r3, [r7, #31]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b088      	sub	sp, #32
 800982e:	af02      	add	r7, sp, #8
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	60b9      	str	r1, [r7, #8]
 8009834:	603b      	str	r3, [r7, #0]
 8009836:	4613      	mov	r3, r2
 8009838:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009846:	d112      	bne.n	800986e <HAL_SPI_Receive+0x44>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10e      	bne.n	800986e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2204      	movs	r2, #4
 8009854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009858:	88fa      	ldrh	r2, [r7, #6]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4613      	mov	r3, r2
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f8f1 	bl	8009a4c <HAL_SPI_TransmitReceive>
 800986a:	4603      	mov	r3, r0
 800986c:	e0ea      	b.n	8009a44 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_SPI_Receive+0x52>
 8009878:	2302      	movs	r3, #2
 800987a:	e0e3      	b.n	8009a44 <HAL_SPI_Receive+0x21a>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009884:	f7fc faac 	bl	8005de0 <HAL_GetTick>
 8009888:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b01      	cmp	r3, #1
 8009894:	d002      	beq.n	800989c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009896:	2302      	movs	r3, #2
 8009898:	75fb      	strb	r3, [r7, #23]
    goto error;
 800989a:	e0ca      	b.n	8009a32 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <HAL_SPI_Receive+0x7e>
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d102      	bne.n	80098ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098ac:	e0c1      	b.n	8009a32 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2204      	movs	r2, #4
 80098b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	88fa      	ldrh	r2, [r7, #6]
 80098c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	88fa      	ldrh	r2, [r7, #6]
 80098cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f4:	d10f      	bne.n	8009916 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009904:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009914:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009920:	2b40      	cmp	r3, #64	; 0x40
 8009922:	d007      	beq.n	8009934 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009932:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d162      	bne.n	8009a02 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800993c:	e02e      	b.n	800999c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b01      	cmp	r3, #1
 800994a:	d115      	bne.n	8009978 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f103 020c 	add.w	r2, r3, #12
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009958:	7812      	ldrb	r2, [r2, #0]
 800995a:	b2d2      	uxtb	r2, r2
 800995c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	b29a      	uxth	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009976:	e011      	b.n	800999c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009978:	f7fc fa32 	bl	8005de0 <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d803      	bhi.n	8009990 <HAL_SPI_Receive+0x166>
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d102      	bne.n	8009996 <HAL_SPI_Receive+0x16c>
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d102      	bne.n	800999c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	75fb      	strb	r3, [r7, #23]
          goto error;
 800999a:	e04a      	b.n	8009a32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1cb      	bne.n	800993e <HAL_SPI_Receive+0x114>
 80099a6:	e031      	b.n	8009a0c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d113      	bne.n	80099de <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68da      	ldr	r2, [r3, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	b292      	uxth	r2, r2
 80099c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	1c9a      	adds	r2, r3, #2
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099dc:	e011      	b.n	8009a02 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099de:	f7fc f9ff 	bl	8005de0 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d803      	bhi.n	80099f6 <HAL_SPI_Receive+0x1cc>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d102      	bne.n	80099fc <HAL_SPI_Receive+0x1d2>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009a00:	e017      	b.n	8009a32 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1cd      	bne.n	80099a8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 fb91 	bl	800a138 <SPI_EndRxTransaction>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	75fb      	strb	r3, [r7, #23]
 8009a2e:	e000      	b.n	8009a32 <HAL_SPI_Receive+0x208>
  }

error :
 8009a30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08c      	sub	sp, #48	; 0x30
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d101      	bne.n	8009a72 <HAL_SPI_TransmitReceive+0x26>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e18a      	b.n	8009d88 <HAL_SPI_TransmitReceive+0x33c>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a7a:	f7fc f9b1 	bl	8005de0 <HAL_GetTick>
 8009a7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009a90:	887b      	ldrh	r3, [r7, #2]
 8009a92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d00f      	beq.n	8009abc <HAL_SPI_TransmitReceive+0x70>
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aa2:	d107      	bne.n	8009ab4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <HAL_SPI_TransmitReceive+0x68>
 8009aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d003      	beq.n	8009abc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009aba:	e15b      	b.n	8009d74 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <HAL_SPI_TransmitReceive+0x82>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <HAL_SPI_TransmitReceive+0x82>
 8009ac8:	887b      	ldrh	r3, [r7, #2]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d103      	bne.n	8009ad6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009ad4:	e14e      	b.n	8009d74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d003      	beq.n	8009aea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	887a      	ldrh	r2, [r7, #2]
 8009afa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	887a      	ldrh	r2, [r7, #2]
 8009b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	887a      	ldrh	r2, [r7, #2]
 8009b0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	887a      	ldrh	r2, [r7, #2]
 8009b12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d007      	beq.n	8009b3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b46:	d178      	bne.n	8009c3a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <HAL_SPI_TransmitReceive+0x10a>
 8009b50:	8b7b      	ldrh	r3, [r7, #26]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d166      	bne.n	8009c24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	881a      	ldrh	r2, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b66:	1c9a      	adds	r2, r3, #2
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b7a:	e053      	b.n	8009c24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d11b      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x176>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d016      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x176>
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d113      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	881a      	ldrh	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	1c9a      	adds	r2, r3, #2
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d119      	bne.n	8009c04 <HAL_SPI_TransmitReceive+0x1b8>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d014      	beq.n	8009c04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	b292      	uxth	r2, r2
 8009be6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bec:	1c9a      	adds	r2, r3, #2
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c00:	2301      	movs	r3, #1
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c04:	f7fc f8ec 	bl	8005de0 <HAL_GetTick>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d807      	bhi.n	8009c24 <HAL_SPI_TransmitReceive+0x1d8>
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	d003      	beq.n	8009c24 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c22:	e0a7      	b.n	8009d74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1a6      	bne.n	8009b7c <HAL_SPI_TransmitReceive+0x130>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1a1      	bne.n	8009b7c <HAL_SPI_TransmitReceive+0x130>
 8009c38:	e07c      	b.n	8009d34 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <HAL_SPI_TransmitReceive+0x1fc>
 8009c42:	8b7b      	ldrh	r3, [r7, #26]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d16b      	bne.n	8009d20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	330c      	adds	r3, #12
 8009c52:	7812      	ldrb	r2, [r2, #0]
 8009c54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c6e:	e057      	b.n	8009d20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f003 0302 	and.w	r3, r3, #2
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d11c      	bne.n	8009cb8 <HAL_SPI_TransmitReceive+0x26c>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d017      	beq.n	8009cb8 <HAL_SPI_TransmitReceive+0x26c>
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d114      	bne.n	8009cb8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	330c      	adds	r3, #12
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d119      	bne.n	8009cfa <HAL_SPI_TransmitReceive+0x2ae>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d014      	beq.n	8009cfa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009cfa:	f7fc f871 	bl	8005de0 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d803      	bhi.n	8009d12 <HAL_SPI_TransmitReceive+0x2c6>
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d10:	d102      	bne.n	8009d18 <HAL_SPI_TransmitReceive+0x2cc>
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d103      	bne.n	8009d20 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009d1e:	e029      	b.n	8009d74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1a2      	bne.n	8009c70 <HAL_SPI_TransmitReceive+0x224>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d19d      	bne.n	8009c70 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 fa63 	bl	800a204 <SPI_EndRxTxTransaction>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d006      	beq.n	8009d52 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009d50:	e010      	b.n	8009d74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	617b      	str	r3, [r7, #20]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	e000      	b.n	8009d74 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3730      	adds	r7, #48	; 0x30
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_SPI_Transmit_DMA+0x20>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e09b      	b.n	8009ee8 <HAL_SPI_Transmit_DMA+0x158>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d002      	beq.n	8009dca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009dc8:	e089      	b.n	8009ede <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <HAL_SPI_Transmit_DMA+0x46>
 8009dd0:	88fb      	ldrh	r3, [r7, #6]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d102      	bne.n	8009ddc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009dda:	e080      	b.n	8009ede <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2203      	movs	r2, #3
 8009de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	88fa      	ldrh	r2, [r7, #6]
 8009df4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	88fa      	ldrh	r2, [r7, #6]
 8009dfa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e22:	d10f      	bne.n	8009e44 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e48:	4a29      	ldr	r2, [pc, #164]	; (8009ef0 <HAL_SPI_Transmit_DMA+0x160>)
 8009e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e50:	4a28      	ldr	r2, [pc, #160]	; (8009ef4 <HAL_SPI_Transmit_DMA+0x164>)
 8009e52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e58:	4a27      	ldr	r2, [pc, #156]	; (8009ef8 <HAL_SPI_Transmit_DMA+0x168>)
 8009e5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e60:	2200      	movs	r2, #0
 8009e62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	330c      	adds	r3, #12
 8009e74:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e7a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009e7c:	f7fd fa10 	bl	80072a0 <HAL_DMA_Start_IT>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00c      	beq.n	8009ea0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f043 0210 	orr.w	r2, r3, #16
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009e9e:	e01e      	b.n	8009ede <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b40      	cmp	r3, #64	; 0x40
 8009eac:	d007      	beq.n	8009ebe <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ebc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0220 	orr.w	r2, r2, #32
 8009ecc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 0202 	orr.w	r2, r2, #2
 8009edc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	08009fcd 	.word	0x08009fcd
 8009ef4:	08009f25 	.word	0x08009f25
 8009ef8:	08009fe9 	.word	0x08009fe9

08009efc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f32:	f7fb ff55 	bl	8005de0 <HAL_GetTick>
 8009f36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f46:	d03b      	beq.n	8009fc0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0220 	bic.w	r2, r2, #32
 8009f56:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0202 	bic.w	r2, r2, #2
 8009f66:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	2164      	movs	r1, #100	; 0x64
 8009f6c:	6978      	ldr	r0, [r7, #20]
 8009f6e:	f000 f949 	bl	800a204 <SPI_EndRxTxTransaction>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7c:	f043 0220 	orr.w	r2, r3, #32
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10a      	bne.n	8009fa2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009fb8:	6978      	ldr	r0, [r7, #20]
 8009fba:	f7ff ffa9 	bl	8009f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009fbe:	e002      	b.n	8009fc6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009fc0:	6978      	ldr	r0, [r7, #20]
 8009fc2:	f7fb faa9 	bl	8005518 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009fc6:	3718      	adds	r7, #24
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7ff ff8e 	bl	8009efc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009fe0:	bf00      	nop
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0203 	bic.w	r2, r2, #3
 800a004:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00a:	f043 0210 	orr.w	r2, r3, #16
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7ff ff78 	bl	8009f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b088      	sub	sp, #32
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	4613      	mov	r3, r2
 800a036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a038:	f7fb fed2 	bl	8005de0 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	1a9b      	subs	r3, r3, r2
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4413      	add	r3, r2
 800a046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a048:	f7fb feca 	bl	8005de0 <HAL_GetTick>
 800a04c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a04e:	4b39      	ldr	r3, [pc, #228]	; (800a134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	015b      	lsls	r3, r3, #5
 800a054:	0d1b      	lsrs	r3, r3, #20
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	fb02 f303 	mul.w	r3, r2, r3
 800a05c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a05e:	e054      	b.n	800a10a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a066:	d050      	beq.n	800a10a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a068:	f7fb feba 	bl	8005de0 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	69fa      	ldr	r2, [r7, #28]
 800a074:	429a      	cmp	r2, r3
 800a076:	d902      	bls.n	800a07e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d13d      	bne.n	800a0fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a08c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a096:	d111      	bne.n	800a0bc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0a0:	d004      	beq.n	800a0ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0aa:	d107      	bne.n	800a0bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c4:	d10f      	bne.n	800a0e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e017      	b.n	800a12a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	3b01      	subs	r3, #1
 800a108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	4013      	ands	r3, r2
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	429a      	cmp	r2, r3
 800a118:	bf0c      	ite	eq
 800a11a:	2301      	moveq	r3, #1
 800a11c:	2300      	movne	r3, #0
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	461a      	mov	r2, r3
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	429a      	cmp	r2, r3
 800a126:	d19b      	bne.n	800a060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	200003ac 	.word	0x200003ac

0800a138 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af02      	add	r7, sp, #8
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a14c:	d111      	bne.n	800a172 <SPI_EndRxTransaction+0x3a>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a156:	d004      	beq.n	800a162 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a160:	d107      	bne.n	800a172 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a170:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a17a:	d12a      	bne.n	800a1d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a184:	d012      	beq.n	800a1ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2200      	movs	r2, #0
 800a18e:	2180      	movs	r1, #128	; 0x80
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7ff ff49 	bl	800a028 <SPI_WaitFlagStateUntilTimeout>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d02d      	beq.n	800a1f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a0:	f043 0220 	orr.w	r2, r3, #32
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e026      	b.n	800a1fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7ff ff36 	bl	800a028 <SPI_WaitFlagStateUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01a      	beq.n	800a1f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c6:	f043 0220 	orr.w	r2, r3, #32
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e013      	b.n	800a1fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2101      	movs	r1, #1
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff ff23 	bl	800a028 <SPI_WaitFlagStateUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ec:	f043 0220 	orr.w	r2, r3, #32
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e000      	b.n	800a1fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af02      	add	r7, sp, #8
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a210:	4b1b      	ldr	r3, [pc, #108]	; (800a280 <SPI_EndRxTxTransaction+0x7c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1b      	ldr	r2, [pc, #108]	; (800a284 <SPI_EndRxTxTransaction+0x80>)
 800a216:	fba2 2303 	umull	r2, r3, r2, r3
 800a21a:	0d5b      	lsrs	r3, r3, #21
 800a21c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a220:	fb02 f303 	mul.w	r3, r2, r3
 800a224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a22e:	d112      	bne.n	800a256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2200      	movs	r2, #0
 800a238:	2180      	movs	r1, #128	; 0x80
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff fef4 	bl	800a028 <SPI_WaitFlagStateUntilTimeout>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d016      	beq.n	800a274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a24a:	f043 0220 	orr.w	r2, r3, #32
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e00f      	b.n	800a276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	3b01      	subs	r3, #1
 800a260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a26c:	2b80      	cmp	r3, #128	; 0x80
 800a26e:	d0f2      	beq.n	800a256 <SPI_EndRxTxTransaction+0x52>
 800a270:	e000      	b.n	800a274 <SPI_EndRxTxTransaction+0x70>
        break;
 800a272:	bf00      	nop
  }

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	200003ac 	.word	0x200003ac
 800a284:	165e9f81 	.word	0x165e9f81

0800a288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e041      	b.n	800a31e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7fb fb98 	bl	80059e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f000 fe08 	bl	800aedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d001      	beq.n	800a340 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e03c      	b.n	800a3ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2202      	movs	r2, #2
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a1e      	ldr	r2, [pc, #120]	; (800a3c8 <HAL_TIM_Base_Start+0xa0>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d018      	beq.n	800a384 <HAL_TIM_Base_Start+0x5c>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a35a:	d013      	beq.n	800a384 <HAL_TIM_Base_Start+0x5c>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a1a      	ldr	r2, [pc, #104]	; (800a3cc <HAL_TIM_Base_Start+0xa4>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d00e      	beq.n	800a384 <HAL_TIM_Base_Start+0x5c>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a19      	ldr	r2, [pc, #100]	; (800a3d0 <HAL_TIM_Base_Start+0xa8>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d009      	beq.n	800a384 <HAL_TIM_Base_Start+0x5c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a17      	ldr	r2, [pc, #92]	; (800a3d4 <HAL_TIM_Base_Start+0xac>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d004      	beq.n	800a384 <HAL_TIM_Base_Start+0x5c>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <HAL_TIM_Base_Start+0xb0>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d111      	bne.n	800a3a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f003 0307 	and.w	r3, r3, #7
 800a38e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b06      	cmp	r3, #6
 800a394:	d010      	beq.n	800a3b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f042 0201 	orr.w	r2, r2, #1
 800a3a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a6:	e007      	b.n	800a3b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f042 0201 	orr.w	r2, r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40000400 	.word	0x40000400
 800a3d0:	40000800 	.word	0x40000800
 800a3d4:	40000c00 	.word	0x40000c00
 800a3d8:	40014000 	.word	0x40014000

0800a3dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d001      	beq.n	800a3f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e044      	b.n	800a47e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f042 0201 	orr.w	r2, r2, #1
 800a40a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <HAL_TIM_Base_Start_IT+0xb0>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d018      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x6c>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a41e:	d013      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x6c>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a1a      	ldr	r2, [pc, #104]	; (800a490 <HAL_TIM_Base_Start_IT+0xb4>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00e      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x6c>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a19      	ldr	r2, [pc, #100]	; (800a494 <HAL_TIM_Base_Start_IT+0xb8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d009      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x6c>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a17      	ldr	r2, [pc, #92]	; (800a498 <HAL_TIM_Base_Start_IT+0xbc>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d004      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x6c>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a16      	ldr	r2, [pc, #88]	; (800a49c <HAL_TIM_Base_Start_IT+0xc0>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d111      	bne.n	800a46c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b06      	cmp	r3, #6
 800a458:	d010      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f042 0201 	orr.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a46a:	e007      	b.n	800a47c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	40010000 	.word	0x40010000
 800a490:	40000400 	.word	0x40000400
 800a494:	40000800 	.word	0x40000800
 800a498:	40000c00 	.word	0x40000c00
 800a49c:	40014000 	.word	0x40014000

0800a4a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e041      	b.n	800a536 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d106      	bne.n	800a4cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f839 	bl	800a53e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f000 fcfc 	bl	800aedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e041      	b.n	800a5e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f839 	bl	800a5f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2202      	movs	r2, #2
 800a582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3304      	adds	r3, #4
 800a58e:	4619      	mov	r1, r3
 800a590:	4610      	mov	r0, r2
 800a592:	f000 fca3 	bl	800aedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <HAL_TIM_PWM_Start+0x24>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	bf14      	ite	ne
 800a620:	2301      	movne	r3, #1
 800a622:	2300      	moveq	r3, #0
 800a624:	b2db      	uxtb	r3, r3
 800a626:	e022      	b.n	800a66e <HAL_TIM_PWM_Start+0x6a>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d109      	bne.n	800a642 <HAL_TIM_PWM_Start+0x3e>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b01      	cmp	r3, #1
 800a638:	bf14      	ite	ne
 800a63a:	2301      	movne	r3, #1
 800a63c:	2300      	moveq	r3, #0
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	e015      	b.n	800a66e <HAL_TIM_PWM_Start+0x6a>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b08      	cmp	r3, #8
 800a646:	d109      	bne.n	800a65c <HAL_TIM_PWM_Start+0x58>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	bf14      	ite	ne
 800a654:	2301      	movne	r3, #1
 800a656:	2300      	moveq	r3, #0
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	e008      	b.n	800a66e <HAL_TIM_PWM_Start+0x6a>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a662:	b2db      	uxtb	r3, r3
 800a664:	2b01      	cmp	r3, #1
 800a666:	bf14      	ite	ne
 800a668:	2301      	movne	r3, #1
 800a66a:	2300      	moveq	r3, #0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e068      	b.n	800a748 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d104      	bne.n	800a686 <HAL_TIM_PWM_Start+0x82>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2202      	movs	r2, #2
 800a680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a684:	e013      	b.n	800a6ae <HAL_TIM_PWM_Start+0xaa>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b04      	cmp	r3, #4
 800a68a:	d104      	bne.n	800a696 <HAL_TIM_PWM_Start+0x92>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2202      	movs	r2, #2
 800a690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a694:	e00b      	b.n	800a6ae <HAL_TIM_PWM_Start+0xaa>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d104      	bne.n	800a6a6 <HAL_TIM_PWM_Start+0xa2>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6a4:	e003      	b.n	800a6ae <HAL_TIM_PWM_Start+0xaa>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 feb6 	bl	800b428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a23      	ldr	r2, [pc, #140]	; (800a750 <HAL_TIM_PWM_Start+0x14c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d107      	bne.n	800a6d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a1d      	ldr	r2, [pc, #116]	; (800a750 <HAL_TIM_PWM_Start+0x14c>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d018      	beq.n	800a712 <HAL_TIM_PWM_Start+0x10e>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e8:	d013      	beq.n	800a712 <HAL_TIM_PWM_Start+0x10e>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a19      	ldr	r2, [pc, #100]	; (800a754 <HAL_TIM_PWM_Start+0x150>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d00e      	beq.n	800a712 <HAL_TIM_PWM_Start+0x10e>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a17      	ldr	r2, [pc, #92]	; (800a758 <HAL_TIM_PWM_Start+0x154>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d009      	beq.n	800a712 <HAL_TIM_PWM_Start+0x10e>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a16      	ldr	r2, [pc, #88]	; (800a75c <HAL_TIM_PWM_Start+0x158>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d004      	beq.n	800a712 <HAL_TIM_PWM_Start+0x10e>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a14      	ldr	r2, [pc, #80]	; (800a760 <HAL_TIM_PWM_Start+0x15c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d111      	bne.n	800a736 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f003 0307 	and.w	r3, r3, #7
 800a71c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2b06      	cmp	r3, #6
 800a722:	d010      	beq.n	800a746 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f042 0201 	orr.w	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a734:	e007      	b.n	800a746 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f042 0201 	orr.w	r2, r2, #1
 800a744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	40010000 	.word	0x40010000
 800a754:	40000400 	.word	0x40000400
 800a758:	40000800 	.word	0x40000800
 800a75c:	40000c00 	.word	0x40000c00
 800a760:	40014000 	.word	0x40014000

0800a764 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e097      	b.n	800a8a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d106      	bne.n	800a792 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7fb f8ad 	bl	80058ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2202      	movs	r2, #2
 800a796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	6812      	ldr	r2, [r2, #0]
 800a7a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7a8:	f023 0307 	bic.w	r3, r3, #7
 800a7ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	f000 fb8f 	bl	800aedc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e6:	f023 0303 	bic.w	r3, r3, #3
 800a7ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	021b      	lsls	r3, r3, #8
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a804:	f023 030c 	bic.w	r3, r3, #12
 800a808:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	68da      	ldr	r2, [r3, #12]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	4313      	orrs	r3, r2
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4313      	orrs	r3, r2
 800a826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	011a      	lsls	r2, r3, #4
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	031b      	lsls	r3, r3, #12
 800a834:	4313      	orrs	r3, r2
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	4313      	orrs	r3, r2
 800a83a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a842:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a84a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	011b      	lsls	r3, r3, #4
 800a856:	4313      	orrs	r3, r2
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d122      	bne.n	800a90c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d11b      	bne.n	800a90c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f06f 0202 	mvn.w	r2, #2
 800a8dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	f003 0303 	and.w	r3, r3, #3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fad3 	bl	800ae9e <HAL_TIM_IC_CaptureCallback>
 800a8f8:	e005      	b.n	800a906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fac5 	bl	800ae8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fad6 	bl	800aeb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d122      	bne.n	800a960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b04      	cmp	r3, #4
 800a926:	d11b      	bne.n	800a960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0204 	mvn.w	r2, #4
 800a930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2202      	movs	r2, #2
 800a936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 faa9 	bl	800ae9e <HAL_TIM_IC_CaptureCallback>
 800a94c:	e005      	b.n	800a95a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fa9b 	bl	800ae8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 faac 	bl	800aeb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f003 0308 	and.w	r3, r3, #8
 800a96a:	2b08      	cmp	r3, #8
 800a96c:	d122      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f003 0308 	and.w	r3, r3, #8
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d11b      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f06f 0208 	mvn.w	r2, #8
 800a984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2204      	movs	r2, #4
 800a98a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fa7f 	bl	800ae9e <HAL_TIM_IC_CaptureCallback>
 800a9a0:	e005      	b.n	800a9ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa71 	bl	800ae8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fa82 	bl	800aeb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d122      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0310 	and.w	r3, r3, #16
 800a9cc:	2b10      	cmp	r3, #16
 800a9ce:	d11b      	bne.n	800aa08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0210 	mvn.w	r2, #16
 800a9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2208      	movs	r2, #8
 800a9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fa55 	bl	800ae9e <HAL_TIM_IC_CaptureCallback>
 800a9f4:	e005      	b.n	800aa02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fa47 	bl	800ae8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fa58 	bl	800aeb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d10e      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d107      	bne.n	800aa34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f06f 0201 	mvn.w	r2, #1
 800aa2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7f6 fe10 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3e:	2b80      	cmp	r3, #128	; 0x80
 800aa40:	d10e      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4c:	2b80      	cmp	r3, #128	; 0x80
 800aa4e:	d107      	bne.n	800aa60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fd82 	bl	800b564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6a:	2b40      	cmp	r3, #64	; 0x40
 800aa6c:	d10e      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa78:	2b40      	cmp	r3, #64	; 0x40
 800aa7a:	d107      	bne.n	800aa8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fa1d 	bl	800aec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d10e      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b20      	cmp	r3, #32
 800aaa6:	d107      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f06f 0220 	mvn.w	r2, #32
 800aab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fd4c 	bl	800b550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d101      	bne.n	800aade <HAL_TIM_OC_ConfigChannel+0x1e>
 800aada:	2302      	movs	r3, #2
 800aadc:	e048      	b.n	800ab70 <HAL_TIM_OC_ConfigChannel+0xb0>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2b0c      	cmp	r3, #12
 800aaea:	d839      	bhi.n	800ab60 <HAL_TIM_OC_ConfigChannel+0xa0>
 800aaec:	a201      	add	r2, pc, #4	; (adr r2, 800aaf4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800aaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf2:	bf00      	nop
 800aaf4:	0800ab29 	.word	0x0800ab29
 800aaf8:	0800ab61 	.word	0x0800ab61
 800aafc:	0800ab61 	.word	0x0800ab61
 800ab00:	0800ab61 	.word	0x0800ab61
 800ab04:	0800ab37 	.word	0x0800ab37
 800ab08:	0800ab61 	.word	0x0800ab61
 800ab0c:	0800ab61 	.word	0x0800ab61
 800ab10:	0800ab61 	.word	0x0800ab61
 800ab14:	0800ab45 	.word	0x0800ab45
 800ab18:	0800ab61 	.word	0x0800ab61
 800ab1c:	0800ab61 	.word	0x0800ab61
 800ab20:	0800ab61 	.word	0x0800ab61
 800ab24:	0800ab53 	.word	0x0800ab53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68b9      	ldr	r1, [r7, #8]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fa54 	bl	800afdc <TIM_OC1_SetConfig>
      break;
 800ab34:	e017      	b.n	800ab66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68b9      	ldr	r1, [r7, #8]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 fab3 	bl	800b0a8 <TIM_OC2_SetConfig>
      break;
 800ab42:	e010      	b.n	800ab66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 fb18 	bl	800b180 <TIM_OC3_SetConfig>
      break;
 800ab50:	e009      	b.n	800ab66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fb7b 	bl	800b254 <TIM_OC4_SetConfig>
      break;
 800ab5e:	e002      	b.n	800ab66 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	75fb      	strb	r3, [r7, #23]
      break;
 800ab64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d101      	bne.n	800ab96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab92:	2302      	movs	r3, #2
 800ab94:	e0ae      	b.n	800acf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b0c      	cmp	r3, #12
 800aba2:	f200 809f 	bhi.w	800ace4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aba6:	a201      	add	r2, pc, #4	; (adr r2, 800abac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abac:	0800abe1 	.word	0x0800abe1
 800abb0:	0800ace5 	.word	0x0800ace5
 800abb4:	0800ace5 	.word	0x0800ace5
 800abb8:	0800ace5 	.word	0x0800ace5
 800abbc:	0800ac21 	.word	0x0800ac21
 800abc0:	0800ace5 	.word	0x0800ace5
 800abc4:	0800ace5 	.word	0x0800ace5
 800abc8:	0800ace5 	.word	0x0800ace5
 800abcc:	0800ac63 	.word	0x0800ac63
 800abd0:	0800ace5 	.word	0x0800ace5
 800abd4:	0800ace5 	.word	0x0800ace5
 800abd8:	0800ace5 	.word	0x0800ace5
 800abdc:	0800aca3 	.word	0x0800aca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 f9f8 	bl	800afdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	699a      	ldr	r2, [r3, #24]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f042 0208 	orr.w	r2, r2, #8
 800abfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	699a      	ldr	r2, [r3, #24]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0204 	bic.w	r2, r2, #4
 800ac0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6999      	ldr	r1, [r3, #24]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	691a      	ldr	r2, [r3, #16]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	619a      	str	r2, [r3, #24]
      break;
 800ac1e:	e064      	b.n	800acea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fa3e 	bl	800b0a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	699a      	ldr	r2, [r3, #24]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6999      	ldr	r1, [r3, #24]
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	021a      	lsls	r2, r3, #8
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	619a      	str	r2, [r3, #24]
      break;
 800ac60:	e043      	b.n	800acea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fa89 	bl	800b180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	69da      	ldr	r2, [r3, #28]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f042 0208 	orr.w	r2, r2, #8
 800ac7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	69da      	ldr	r2, [r3, #28]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f022 0204 	bic.w	r2, r2, #4
 800ac8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69d9      	ldr	r1, [r3, #28]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	691a      	ldr	r2, [r3, #16]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	61da      	str	r2, [r3, #28]
      break;
 800aca0:	e023      	b.n	800acea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68b9      	ldr	r1, [r7, #8]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fad3 	bl	800b254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69da      	ldr	r2, [r3, #28]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69da      	ldr	r2, [r3, #28]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800accc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	69d9      	ldr	r1, [r3, #28]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	021a      	lsls	r2, r3, #8
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	430a      	orrs	r2, r1
 800ace0:	61da      	str	r2, [r3, #28]
      break;
 800ace2:	e002      	b.n	800acea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	75fb      	strb	r3, [r7, #23]
      break;
 800ace8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_TIM_ConfigClockSource+0x1c>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e0b4      	b.n	800ae82 <HAL_TIM_ConfigClockSource+0x186>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2202      	movs	r2, #2
 800ad24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad50:	d03e      	beq.n	800add0 <HAL_TIM_ConfigClockSource+0xd4>
 800ad52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad56:	f200 8087 	bhi.w	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5e:	f000 8086 	beq.w	800ae6e <HAL_TIM_ConfigClockSource+0x172>
 800ad62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad66:	d87f      	bhi.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad68:	2b70      	cmp	r3, #112	; 0x70
 800ad6a:	d01a      	beq.n	800ada2 <HAL_TIM_ConfigClockSource+0xa6>
 800ad6c:	2b70      	cmp	r3, #112	; 0x70
 800ad6e:	d87b      	bhi.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad70:	2b60      	cmp	r3, #96	; 0x60
 800ad72:	d050      	beq.n	800ae16 <HAL_TIM_ConfigClockSource+0x11a>
 800ad74:	2b60      	cmp	r3, #96	; 0x60
 800ad76:	d877      	bhi.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad78:	2b50      	cmp	r3, #80	; 0x50
 800ad7a:	d03c      	beq.n	800adf6 <HAL_TIM_ConfigClockSource+0xfa>
 800ad7c:	2b50      	cmp	r3, #80	; 0x50
 800ad7e:	d873      	bhi.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad80:	2b40      	cmp	r3, #64	; 0x40
 800ad82:	d058      	beq.n	800ae36 <HAL_TIM_ConfigClockSource+0x13a>
 800ad84:	2b40      	cmp	r3, #64	; 0x40
 800ad86:	d86f      	bhi.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad88:	2b30      	cmp	r3, #48	; 0x30
 800ad8a:	d064      	beq.n	800ae56 <HAL_TIM_ConfigClockSource+0x15a>
 800ad8c:	2b30      	cmp	r3, #48	; 0x30
 800ad8e:	d86b      	bhi.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad90:	2b20      	cmp	r3, #32
 800ad92:	d060      	beq.n	800ae56 <HAL_TIM_ConfigClockSource+0x15a>
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	d867      	bhi.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d05c      	beq.n	800ae56 <HAL_TIM_ConfigClockSource+0x15a>
 800ad9c:	2b10      	cmp	r3, #16
 800ad9e:	d05a      	beq.n	800ae56 <HAL_TIM_ConfigClockSource+0x15a>
 800ada0:	e062      	b.n	800ae68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	6899      	ldr	r1, [r3, #8]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f000 fb19 	bl	800b3e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800adc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	609a      	str	r2, [r3, #8]
      break;
 800adce:	e04f      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6818      	ldr	r0, [r3, #0]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	6899      	ldr	r1, [r3, #8]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f000 fb02 	bl	800b3e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adf2:	609a      	str	r2, [r3, #8]
      break;
 800adf4:	e03c      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	6859      	ldr	r1, [r3, #4]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	461a      	mov	r2, r3
 800ae04:	f000 fa76 	bl	800b2f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2150      	movs	r1, #80	; 0x50
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 facf 	bl	800b3b2 <TIM_ITRx_SetConfig>
      break;
 800ae14:	e02c      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6818      	ldr	r0, [r3, #0]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	6859      	ldr	r1, [r3, #4]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f000 fa95 	bl	800b352 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2160      	movs	r1, #96	; 0x60
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fabf 	bl	800b3b2 <TIM_ITRx_SetConfig>
      break;
 800ae34:	e01c      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	6859      	ldr	r1, [r3, #4]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	461a      	mov	r2, r3
 800ae44:	f000 fa56 	bl	800b2f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2140      	movs	r1, #64	; 0x40
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 faaf 	bl	800b3b2 <TIM_ITRx_SetConfig>
      break;
 800ae54:	e00c      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f000 faa6 	bl	800b3b2 <TIM_ITRx_SetConfig>
      break;
 800ae66:	e003      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6c:	e000      	b.n	800ae70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae92:	bf00      	nop
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b083      	sub	sp, #12
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aeba:	bf00      	nop
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aece:	bf00      	nop
 800aed0:	370c      	adds	r7, #12
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
	...

0800aedc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a34      	ldr	r2, [pc, #208]	; (800afc0 <TIM_Base_SetConfig+0xe4>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d00f      	beq.n	800af14 <TIM_Base_SetConfig+0x38>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aefa:	d00b      	beq.n	800af14 <TIM_Base_SetConfig+0x38>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a31      	ldr	r2, [pc, #196]	; (800afc4 <TIM_Base_SetConfig+0xe8>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d007      	beq.n	800af14 <TIM_Base_SetConfig+0x38>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a30      	ldr	r2, [pc, #192]	; (800afc8 <TIM_Base_SetConfig+0xec>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d003      	beq.n	800af14 <TIM_Base_SetConfig+0x38>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a2f      	ldr	r2, [pc, #188]	; (800afcc <TIM_Base_SetConfig+0xf0>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d108      	bne.n	800af26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a25      	ldr	r2, [pc, #148]	; (800afc0 <TIM_Base_SetConfig+0xe4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d01b      	beq.n	800af66 <TIM_Base_SetConfig+0x8a>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af34:	d017      	beq.n	800af66 <TIM_Base_SetConfig+0x8a>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a22      	ldr	r2, [pc, #136]	; (800afc4 <TIM_Base_SetConfig+0xe8>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d013      	beq.n	800af66 <TIM_Base_SetConfig+0x8a>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a21      	ldr	r2, [pc, #132]	; (800afc8 <TIM_Base_SetConfig+0xec>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d00f      	beq.n	800af66 <TIM_Base_SetConfig+0x8a>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a20      	ldr	r2, [pc, #128]	; (800afcc <TIM_Base_SetConfig+0xf0>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d00b      	beq.n	800af66 <TIM_Base_SetConfig+0x8a>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a1f      	ldr	r2, [pc, #124]	; (800afd0 <TIM_Base_SetConfig+0xf4>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d007      	beq.n	800af66 <TIM_Base_SetConfig+0x8a>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a1e      	ldr	r2, [pc, #120]	; (800afd4 <TIM_Base_SetConfig+0xf8>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d003      	beq.n	800af66 <TIM_Base_SetConfig+0x8a>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a1d      	ldr	r2, [pc, #116]	; (800afd8 <TIM_Base_SetConfig+0xfc>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d108      	bne.n	800af78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	4313      	orrs	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a08      	ldr	r2, [pc, #32]	; (800afc0 <TIM_Base_SetConfig+0xe4>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d103      	bne.n	800afac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	691a      	ldr	r2, [r3, #16]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	615a      	str	r2, [r3, #20]
}
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40010000 	.word	0x40010000
 800afc4:	40000400 	.word	0x40000400
 800afc8:	40000800 	.word	0x40000800
 800afcc:	40000c00 	.word	0x40000c00
 800afd0:	40014000 	.word	0x40014000
 800afd4:	40014400 	.word	0x40014400
 800afd8:	40014800 	.word	0x40014800

0800afdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afdc:	b480      	push	{r7}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	f023 0201 	bic.w	r2, r3, #1
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f023 0303 	bic.w	r3, r3, #3
 800b012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f023 0302 	bic.w	r3, r3, #2
 800b024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a1c      	ldr	r2, [pc, #112]	; (800b0a4 <TIM_OC1_SetConfig+0xc8>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d10c      	bne.n	800b052 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	f023 0308 	bic.w	r3, r3, #8
 800b03e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	4313      	orrs	r3, r2
 800b048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f023 0304 	bic.w	r3, r3, #4
 800b050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <TIM_OC1_SetConfig+0xc8>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d111      	bne.n	800b07e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	4313      	orrs	r3, r2
 800b072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	621a      	str	r2, [r3, #32]
}
 800b098:	bf00      	nop
 800b09a:	371c      	adds	r7, #28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	40010000 	.word	0x40010000

0800b0a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	f023 0210 	bic.w	r2, r3, #16
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f023 0320 	bic.w	r3, r3, #32
 800b0f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	011b      	lsls	r3, r3, #4
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a1e      	ldr	r2, [pc, #120]	; (800b17c <TIM_OC2_SetConfig+0xd4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d10d      	bne.n	800b124 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b10e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	011b      	lsls	r3, r3, #4
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	4313      	orrs	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a15      	ldr	r2, [pc, #84]	; (800b17c <TIM_OC2_SetConfig+0xd4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d113      	bne.n	800b154 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b13a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	4313      	orrs	r3, r2
 800b146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	4313      	orrs	r3, r2
 800b152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	621a      	str	r2, [r3, #32]
}
 800b16e:	bf00      	nop
 800b170:	371c      	adds	r7, #28
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	40010000 	.word	0x40010000

0800b180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b180:	b480      	push	{r7}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a1d      	ldr	r2, [pc, #116]	; (800b250 <TIM_OC3_SetConfig+0xd0>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d10d      	bne.n	800b1fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a14      	ldr	r2, [pc, #80]	; (800b250 <TIM_OC3_SetConfig+0xd0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d113      	bne.n	800b22a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	011b      	lsls	r3, r3, #4
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	011b      	lsls	r3, r3, #4
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	4313      	orrs	r3, r2
 800b228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	621a      	str	r2, [r3, #32]
}
 800b244:	bf00      	nop
 800b246:	371c      	adds	r7, #28
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	40010000 	.word	0x40010000

0800b254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	021b      	lsls	r3, r3, #8
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4313      	orrs	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b29e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	031b      	lsls	r3, r3, #12
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a10      	ldr	r2, [pc, #64]	; (800b2f0 <TIM_OC4_SetConfig+0x9c>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d109      	bne.n	800b2c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	019b      	lsls	r3, r3, #6
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	621a      	str	r2, [r3, #32]
}
 800b2e2:	bf00      	nop
 800b2e4:	371c      	adds	r7, #28
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	40010000 	.word	0x40010000

0800b2f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b087      	sub	sp, #28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6a1b      	ldr	r3, [r3, #32]
 800b304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f023 0201 	bic.w	r2, r3, #1
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b31e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	693a      	ldr	r2, [r7, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f023 030a 	bic.w	r3, r3, #10
 800b330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b332:	697a      	ldr	r2, [r7, #20]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4313      	orrs	r3, r2
 800b338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	621a      	str	r2, [r3, #32]
}
 800b346:	bf00      	nop
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b352:	b480      	push	{r7}
 800b354:	b087      	sub	sp, #28
 800b356:	af00      	add	r7, sp, #0
 800b358:	60f8      	str	r0, [r7, #12]
 800b35a:	60b9      	str	r1, [r7, #8]
 800b35c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	f023 0210 	bic.w	r2, r3, #16
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b37c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	031b      	lsls	r3, r3, #12
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	4313      	orrs	r3, r2
 800b386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b38e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	4313      	orrs	r3, r2
 800b398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	621a      	str	r2, [r3, #32]
}
 800b3a6:	bf00      	nop
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	f043 0307 	orr.w	r3, r3, #7
 800b3d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	609a      	str	r2, [r3, #8]
}
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	021a      	lsls	r2, r3, #8
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4313      	orrs	r3, r2
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	4313      	orrs	r3, r2
 800b414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	609a      	str	r2, [r3, #8]
}
 800b41c:	bf00      	nop
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f003 031f 	and.w	r3, r3, #31
 800b43a:	2201      	movs	r2, #1
 800b43c:	fa02 f303 	lsl.w	r3, r2, r3
 800b440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6a1a      	ldr	r2, [r3, #32]
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	43db      	mvns	r3, r3
 800b44a:	401a      	ands	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6a1a      	ldr	r2, [r3, #32]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	f003 031f 	and.w	r3, r3, #31
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	fa01 f303 	lsl.w	r3, r1, r3
 800b460:	431a      	orrs	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	621a      	str	r2, [r3, #32]
}
 800b466:	bf00      	nop
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
	...

0800b474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b484:	2b01      	cmp	r3, #1
 800b486:	d101      	bne.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b488:	2302      	movs	r3, #2
 800b48a:	e050      	b.n	800b52e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2202      	movs	r2, #2
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a1c      	ldr	r2, [pc, #112]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d018      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4d8:	d013      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a18      	ldr	r2, [pc, #96]	; (800b540 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d00e      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a16      	ldr	r2, [pc, #88]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d009      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a15      	ldr	r2, [pc, #84]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d004      	beq.n	800b502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a13      	ldr	r2, [pc, #76]	; (800b54c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d10c      	bne.n	800b51c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	4313      	orrs	r3, r2
 800b512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	40010000 	.word	0x40010000
 800b540:	40000400 	.word	0x40000400
 800b544:	40000800 	.word	0x40000800
 800b548:	40000c00 	.word	0x40000c00
 800b54c:	40014000 	.word	0x40014000

0800b550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b56c:	bf00      	nop
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e047      	b.n	800b61a <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7fa faa0 	bl	8005ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2224      	movs	r2, #36	; 0x24
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68da      	ldr	r2, [r3, #12]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f931 	bl	800b824 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	691a      	ldr	r2, [r3, #16]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	695a      	ldr	r2, [r3, #20]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800b5e0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	695a      	ldr	r2, [r3, #20]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f042 0208 	orr.w	r2, r2, #8
 800b5f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68da      	ldr	r2, [r3, #12]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2220      	movs	r2, #32
 800b60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2220      	movs	r2, #32
 800b614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b08a      	sub	sp, #40	; 0x28
 800b626:	af02      	add	r7, sp, #8
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	603b      	str	r3, [r7, #0]
 800b62e:	4613      	mov	r3, r2
 800b630:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b632:	2300      	movs	r3, #0
 800b634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b20      	cmp	r3, #32
 800b640:	d17c      	bne.n	800b73c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <HAL_UART_Transmit+0x2c>
 800b648:	88fb      	ldrh	r3, [r7, #6]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e075      	b.n	800b73e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d101      	bne.n	800b660 <HAL_UART_Transmit+0x3e>
 800b65c:	2302      	movs	r3, #2
 800b65e:	e06e      	b.n	800b73e <HAL_UART_Transmit+0x11c>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2221      	movs	r2, #33	; 0x21
 800b672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b676:	f7fa fbb3 	bl	8005de0 <HAL_GetTick>
 800b67a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	88fa      	ldrh	r2, [r7, #6]
 800b680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	88fa      	ldrh	r2, [r7, #6]
 800b686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b690:	d108      	bne.n	800b6a4 <HAL_UART_Transmit+0x82>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d104      	bne.n	800b6a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b69a:	2300      	movs	r3, #0
 800b69c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	61bb      	str	r3, [r7, #24]
 800b6a2:	e003      	b.n	800b6ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b6b4:	e02a      	b.n	800b70c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2180      	movs	r1, #128	; 0x80
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f840 	bl	800b746 <UART_WaitOnFlagUntilTimeout>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e036      	b.n	800b73e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10b      	bne.n	800b6ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	3302      	adds	r3, #2
 800b6ea:	61bb      	str	r3, [r7, #24]
 800b6ec:	e007      	b.n	800b6fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	781a      	ldrb	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b702:	b29b      	uxth	r3, r3
 800b704:	3b01      	subs	r3, #1
 800b706:	b29a      	uxth	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b710:	b29b      	uxth	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1cf      	bne.n	800b6b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	2140      	movs	r1, #64	; 0x40
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 f810 	bl	800b746 <UART_WaitOnFlagUntilTimeout>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e006      	b.n	800b73e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2220      	movs	r2, #32
 800b734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	e000      	b.n	800b73e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b73c:	2302      	movs	r3, #2
  }
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b090      	sub	sp, #64	; 0x40
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	603b      	str	r3, [r7, #0]
 800b752:	4613      	mov	r3, r2
 800b754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b756:	e050      	b.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75e:	d04c      	beq.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b762:	2b00      	cmp	r3, #0
 800b764:	d007      	beq.n	800b776 <UART_WaitOnFlagUntilTimeout+0x30>
 800b766:	f7fa fb3b 	bl	8005de0 <HAL_GetTick>
 800b76a:	4602      	mov	r2, r0
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b772:	429a      	cmp	r2, r3
 800b774:	d241      	bcs.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	330c      	adds	r3, #12
 800b77c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	e853 3f00 	ldrex	r3, [r3]
 800b784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	330c      	adds	r3, #12
 800b794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b796:	637a      	str	r2, [r7, #52]	; 0x34
 800b798:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b79c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b79e:	e841 2300 	strex	r3, r2, [r1]
 800b7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1e5      	bne.n	800b776 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3314      	adds	r3, #20
 800b7b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	f023 0301 	bic.w	r3, r3, #1
 800b7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3314      	adds	r3, #20
 800b7c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7ca:	623a      	str	r2, [r7, #32]
 800b7cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	69f9      	ldr	r1, [r7, #28]
 800b7d0:	6a3a      	ldr	r2, [r7, #32]
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e5      	bne.n	800b7aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e00f      	b.n	800b81a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	4013      	ands	r3, r2
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	429a      	cmp	r2, r3
 800b808:	bf0c      	ite	eq
 800b80a:	2301      	moveq	r3, #1
 800b80c:	2300      	movne	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	461a      	mov	r2, r3
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	429a      	cmp	r2, r3
 800b816:	d09f      	beq.n	800b758 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3740      	adds	r7, #64	; 0x40
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b828:	b0c0      	sub	sp, #256	; 0x100
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b840:	68d9      	ldr	r1, [r3, #12]
 800b842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	ea40 0301 	orr.w	r3, r0, r1
 800b84c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b852:	689a      	ldr	r2, [r3, #8]
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	431a      	orrs	r2, r3
 800b85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	431a      	orrs	r2, r3
 800b864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b87c:	f021 010c 	bic.w	r1, r1, #12
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b88a:	430b      	orrs	r3, r1
 800b88c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89e:	6999      	ldr	r1, [r3, #24]
 800b8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	ea40 0301 	orr.w	r3, r0, r1
 800b8aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	4b8f      	ldr	r3, [pc, #572]	; (800baf0 <UART_SetConfig+0x2cc>)
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d005      	beq.n	800b8c4 <UART_SetConfig+0xa0>
 800b8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	4b8d      	ldr	r3, [pc, #564]	; (800baf4 <UART_SetConfig+0x2d0>)
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d104      	bne.n	800b8ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8c4:	f7fd fdd8 	bl	8009478 <HAL_RCC_GetPCLK2Freq>
 800b8c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b8cc:	e003      	b.n	800b8d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8ce:	f7fd fdbf 	bl	8009450 <HAL_RCC_GetPCLK1Freq>
 800b8d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8e0:	f040 810c 	bne.w	800bafc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b8f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	1891      	adds	r1, r2, r2
 800b8fc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8fe:	415b      	adcs	r3, r3
 800b900:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b906:	4621      	mov	r1, r4
 800b908:	eb12 0801 	adds.w	r8, r2, r1
 800b90c:	4629      	mov	r1, r5
 800b90e:	eb43 0901 	adc.w	r9, r3, r1
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b91e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b926:	4690      	mov	r8, r2
 800b928:	4699      	mov	r9, r3
 800b92a:	4623      	mov	r3, r4
 800b92c:	eb18 0303 	adds.w	r3, r8, r3
 800b930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b934:	462b      	mov	r3, r5
 800b936:	eb49 0303 	adc.w	r3, r9, r3
 800b93a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b93e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b94a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b94e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b952:	460b      	mov	r3, r1
 800b954:	18db      	adds	r3, r3, r3
 800b956:	653b      	str	r3, [r7, #80]	; 0x50
 800b958:	4613      	mov	r3, r2
 800b95a:	eb42 0303 	adc.w	r3, r2, r3
 800b95e:	657b      	str	r3, [r7, #84]	; 0x54
 800b960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b968:	f7f4 ff94 	bl	8000894 <__aeabi_uldivmod>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4b61      	ldr	r3, [pc, #388]	; (800baf8 <UART_SetConfig+0x2d4>)
 800b972:	fba3 2302 	umull	r2, r3, r3, r2
 800b976:	095b      	lsrs	r3, r3, #5
 800b978:	011c      	lsls	r4, r3, #4
 800b97a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b97e:	2200      	movs	r2, #0
 800b980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b984:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b98c:	4642      	mov	r2, r8
 800b98e:	464b      	mov	r3, r9
 800b990:	1891      	adds	r1, r2, r2
 800b992:	64b9      	str	r1, [r7, #72]	; 0x48
 800b994:	415b      	adcs	r3, r3
 800b996:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b99c:	4641      	mov	r1, r8
 800b99e:	eb12 0a01 	adds.w	sl, r2, r1
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	eb43 0b01 	adc.w	fp, r3, r1
 800b9a8:	f04f 0200 	mov.w	r2, #0
 800b9ac:	f04f 0300 	mov.w	r3, #0
 800b9b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b9b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b9b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9bc:	4692      	mov	sl, r2
 800b9be:	469b      	mov	fp, r3
 800b9c0:	4643      	mov	r3, r8
 800b9c2:	eb1a 0303 	adds.w	r3, sl, r3
 800b9c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9ca:	464b      	mov	r3, r9
 800b9cc:	eb4b 0303 	adc.w	r3, fp, r3
 800b9d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b9e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	18db      	adds	r3, r3, r3
 800b9ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	eb42 0303 	adc.w	r3, r2, r3
 800b9f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b9fe:	f7f4 ff49 	bl	8000894 <__aeabi_uldivmod>
 800ba02:	4602      	mov	r2, r0
 800ba04:	460b      	mov	r3, r1
 800ba06:	4611      	mov	r1, r2
 800ba08:	4b3b      	ldr	r3, [pc, #236]	; (800baf8 <UART_SetConfig+0x2d4>)
 800ba0a:	fba3 2301 	umull	r2, r3, r3, r1
 800ba0e:	095b      	lsrs	r3, r3, #5
 800ba10:	2264      	movs	r2, #100	; 0x64
 800ba12:	fb02 f303 	mul.w	r3, r2, r3
 800ba16:	1acb      	subs	r3, r1, r3
 800ba18:	00db      	lsls	r3, r3, #3
 800ba1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ba1e:	4b36      	ldr	r3, [pc, #216]	; (800baf8 <UART_SetConfig+0x2d4>)
 800ba20:	fba3 2302 	umull	r2, r3, r3, r2
 800ba24:	095b      	lsrs	r3, r3, #5
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba2c:	441c      	add	r4, r3
 800ba2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ba3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba40:	4642      	mov	r2, r8
 800ba42:	464b      	mov	r3, r9
 800ba44:	1891      	adds	r1, r2, r2
 800ba46:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba48:	415b      	adcs	r3, r3
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba50:	4641      	mov	r1, r8
 800ba52:	1851      	adds	r1, r2, r1
 800ba54:	6339      	str	r1, [r7, #48]	; 0x30
 800ba56:	4649      	mov	r1, r9
 800ba58:	414b      	adcs	r3, r1
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba5c:	f04f 0200 	mov.w	r2, #0
 800ba60:	f04f 0300 	mov.w	r3, #0
 800ba64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba68:	4659      	mov	r1, fp
 800ba6a:	00cb      	lsls	r3, r1, #3
 800ba6c:	4651      	mov	r1, sl
 800ba6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba72:	4651      	mov	r1, sl
 800ba74:	00ca      	lsls	r2, r1, #3
 800ba76:	4610      	mov	r0, r2
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	189b      	adds	r3, r3, r2
 800ba80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba84:	464b      	mov	r3, r9
 800ba86:	460a      	mov	r2, r1
 800ba88:	eb42 0303 	adc.w	r3, r2, r3
 800ba8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800baa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800baa4:	460b      	mov	r3, r1
 800baa6:	18db      	adds	r3, r3, r3
 800baa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800baaa:	4613      	mov	r3, r2
 800baac:	eb42 0303 	adc.w	r3, r2, r3
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800baba:	f7f4 feeb 	bl	8000894 <__aeabi_uldivmod>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <UART_SetConfig+0x2d4>)
 800bac4:	fba3 1302 	umull	r1, r3, r3, r2
 800bac8:	095b      	lsrs	r3, r3, #5
 800baca:	2164      	movs	r1, #100	; 0x64
 800bacc:	fb01 f303 	mul.w	r3, r1, r3
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	3332      	adds	r3, #50	; 0x32
 800bad6:	4a08      	ldr	r2, [pc, #32]	; (800baf8 <UART_SetConfig+0x2d4>)
 800bad8:	fba2 2303 	umull	r2, r3, r2, r3
 800badc:	095b      	lsrs	r3, r3, #5
 800bade:	f003 0207 	and.w	r2, r3, #7
 800bae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4422      	add	r2, r4
 800baea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800baec:	e105      	b.n	800bcfa <UART_SetConfig+0x4d6>
 800baee:	bf00      	nop
 800baf0:	40011000 	.word	0x40011000
 800baf4:	40011400 	.word	0x40011400
 800baf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bafc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb00:	2200      	movs	r2, #0
 800bb02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bb0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bb0e:	4642      	mov	r2, r8
 800bb10:	464b      	mov	r3, r9
 800bb12:	1891      	adds	r1, r2, r2
 800bb14:	6239      	str	r1, [r7, #32]
 800bb16:	415b      	adcs	r3, r3
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
 800bb1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb1e:	4641      	mov	r1, r8
 800bb20:	1854      	adds	r4, r2, r1
 800bb22:	4649      	mov	r1, r9
 800bb24:	eb43 0501 	adc.w	r5, r3, r1
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	00eb      	lsls	r3, r5, #3
 800bb32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb36:	00e2      	lsls	r2, r4, #3
 800bb38:	4614      	mov	r4, r2
 800bb3a:	461d      	mov	r5, r3
 800bb3c:	4643      	mov	r3, r8
 800bb3e:	18e3      	adds	r3, r4, r3
 800bb40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb44:	464b      	mov	r3, r9
 800bb46:	eb45 0303 	adc.w	r3, r5, r3
 800bb4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb5e:	f04f 0200 	mov.w	r2, #0
 800bb62:	f04f 0300 	mov.w	r3, #0
 800bb66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	008b      	lsls	r3, r1, #2
 800bb6e:	4621      	mov	r1, r4
 800bb70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb74:	4621      	mov	r1, r4
 800bb76:	008a      	lsls	r2, r1, #2
 800bb78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb7c:	f7f4 fe8a 	bl	8000894 <__aeabi_uldivmod>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4b60      	ldr	r3, [pc, #384]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bb86:	fba3 2302 	umull	r2, r3, r3, r2
 800bb8a:	095b      	lsrs	r3, r3, #5
 800bb8c:	011c      	lsls	r4, r3, #4
 800bb8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bba0:	4642      	mov	r2, r8
 800bba2:	464b      	mov	r3, r9
 800bba4:	1891      	adds	r1, r2, r2
 800bba6:	61b9      	str	r1, [r7, #24]
 800bba8:	415b      	adcs	r3, r3
 800bbaa:	61fb      	str	r3, [r7, #28]
 800bbac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbb0:	4641      	mov	r1, r8
 800bbb2:	1851      	adds	r1, r2, r1
 800bbb4:	6139      	str	r1, [r7, #16]
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	414b      	adcs	r3, r1
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	f04f 0200 	mov.w	r2, #0
 800bbc0:	f04f 0300 	mov.w	r3, #0
 800bbc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bbc8:	4659      	mov	r1, fp
 800bbca:	00cb      	lsls	r3, r1, #3
 800bbcc:	4651      	mov	r1, sl
 800bbce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbd2:	4651      	mov	r1, sl
 800bbd4:	00ca      	lsls	r2, r1, #3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4603      	mov	r3, r0
 800bbdc:	4642      	mov	r2, r8
 800bbde:	189b      	adds	r3, r3, r2
 800bbe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	460a      	mov	r2, r1
 800bbe8:	eb42 0303 	adc.w	r3, r2, r3
 800bbec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	f04f 0300 	mov.w	r3, #0
 800bc04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bc08:	4649      	mov	r1, r9
 800bc0a:	008b      	lsls	r3, r1, #2
 800bc0c:	4641      	mov	r1, r8
 800bc0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc12:	4641      	mov	r1, r8
 800bc14:	008a      	lsls	r2, r1, #2
 800bc16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bc1a:	f7f4 fe3b 	bl	8000894 <__aeabi_uldivmod>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4b39      	ldr	r3, [pc, #228]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bc24:	fba3 1302 	umull	r1, r3, r3, r2
 800bc28:	095b      	lsrs	r3, r3, #5
 800bc2a:	2164      	movs	r1, #100	; 0x64
 800bc2c:	fb01 f303 	mul.w	r3, r1, r3
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	3332      	adds	r3, #50	; 0x32
 800bc36:	4a34      	ldr	r2, [pc, #208]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bc38:	fba2 2303 	umull	r2, r3, r2, r3
 800bc3c:	095b      	lsrs	r3, r3, #5
 800bc3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc42:	441c      	add	r4, r3
 800bc44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc48:	2200      	movs	r2, #0
 800bc4a:	673b      	str	r3, [r7, #112]	; 0x70
 800bc4c:	677a      	str	r2, [r7, #116]	; 0x74
 800bc4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc52:	4642      	mov	r2, r8
 800bc54:	464b      	mov	r3, r9
 800bc56:	1891      	adds	r1, r2, r2
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	415b      	adcs	r3, r3
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc62:	4641      	mov	r1, r8
 800bc64:	1851      	adds	r1, r2, r1
 800bc66:	6039      	str	r1, [r7, #0]
 800bc68:	4649      	mov	r1, r9
 800bc6a:	414b      	adcs	r3, r1
 800bc6c:	607b      	str	r3, [r7, #4]
 800bc6e:	f04f 0200 	mov.w	r2, #0
 800bc72:	f04f 0300 	mov.w	r3, #0
 800bc76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc7a:	4659      	mov	r1, fp
 800bc7c:	00cb      	lsls	r3, r1, #3
 800bc7e:	4651      	mov	r1, sl
 800bc80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc84:	4651      	mov	r1, sl
 800bc86:	00ca      	lsls	r2, r1, #3
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4642      	mov	r2, r8
 800bc90:	189b      	adds	r3, r3, r2
 800bc92:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc94:	464b      	mov	r3, r9
 800bc96:	460a      	mov	r2, r1
 800bc98:	eb42 0303 	adc.w	r3, r2, r3
 800bc9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	663b      	str	r3, [r7, #96]	; 0x60
 800bca8:	667a      	str	r2, [r7, #100]	; 0x64
 800bcaa:	f04f 0200 	mov.w	r2, #0
 800bcae:	f04f 0300 	mov.w	r3, #0
 800bcb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	008b      	lsls	r3, r1, #2
 800bcba:	4641      	mov	r1, r8
 800bcbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcc0:	4641      	mov	r1, r8
 800bcc2:	008a      	lsls	r2, r1, #2
 800bcc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bcc8:	f7f4 fde4 	bl	8000894 <__aeabi_uldivmod>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4b0d      	ldr	r3, [pc, #52]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bcd2:	fba3 1302 	umull	r1, r3, r3, r2
 800bcd6:	095b      	lsrs	r3, r3, #5
 800bcd8:	2164      	movs	r1, #100	; 0x64
 800bcda:	fb01 f303 	mul.w	r3, r1, r3
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	011b      	lsls	r3, r3, #4
 800bce2:	3332      	adds	r3, #50	; 0x32
 800bce4:	4a08      	ldr	r2, [pc, #32]	; (800bd08 <UART_SetConfig+0x4e4>)
 800bce6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcea:	095b      	lsrs	r3, r3, #5
 800bcec:	f003 020f 	and.w	r2, r3, #15
 800bcf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4422      	add	r2, r4
 800bcf8:	609a      	str	r2, [r3, #8]
}
 800bcfa:	bf00      	nop
 800bcfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bd00:	46bd      	mov	sp, r7
 800bd02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd06:	bf00      	nop
 800bd08:	51eb851f 	.word	0x51eb851f

0800bd0c <arm_sin_f32>:
 800bd0c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800bd88 <arm_sin_f32+0x7c>
 800bd10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bd14:	ee20 7a07 	vmul.f32	s14, s0, s14
 800bd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd1c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800bd20:	d42c      	bmi.n	800bd7c <arm_sin_f32+0x70>
 800bd22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd26:	eddf 6a19 	vldr	s13, [pc, #100]	; 800bd8c <arm_sin_f32+0x80>
 800bd2a:	4a19      	ldr	r2, [pc, #100]	; (800bd90 <arm_sin_f32+0x84>)
 800bd2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd38:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd40:	bfa8      	it	ge
 800bd42:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800bd46:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800bd4a:	ee17 3a10 	vmov	r3, s14
 800bd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd52:	ee07 3a10 	vmov	s14, r3
 800bd56:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800bd5a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800bd5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd62:	edd1 6a01 	vldr	s13, [r1, #4]
 800bd66:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bd6a:	ed91 0a00 	vldr	s0, [r1]
 800bd6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd72:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bd76:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bd7a:	4770      	bx	lr
 800bd7c:	ee17 3a90 	vmov	r3, s15
 800bd80:	3b01      	subs	r3, #1
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	e7cc      	b.n	800bd22 <arm_sin_f32+0x16>
 800bd88:	3e22f983 	.word	0x3e22f983
 800bd8c:	44000000 	.word	0x44000000
 800bd90:	0800d37c 	.word	0x0800d37c

0800bd94 <atoi>:
 800bd94:	220a      	movs	r2, #10
 800bd96:	2100      	movs	r1, #0
 800bd98:	f000 b8d6 	b.w	800bf48 <strtol>

0800bd9c <__errno>:
 800bd9c:	4b01      	ldr	r3, [pc, #4]	; (800bda4 <__errno+0x8>)
 800bd9e:	6818      	ldr	r0, [r3, #0]
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	200003b8 	.word	0x200003b8

0800bda8 <__libc_init_array>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	4d0d      	ldr	r5, [pc, #52]	; (800bde0 <__libc_init_array+0x38>)
 800bdac:	4c0d      	ldr	r4, [pc, #52]	; (800bde4 <__libc_init_array+0x3c>)
 800bdae:	1b64      	subs	r4, r4, r5
 800bdb0:	10a4      	asrs	r4, r4, #2
 800bdb2:	2600      	movs	r6, #0
 800bdb4:	42a6      	cmp	r6, r4
 800bdb6:	d109      	bne.n	800bdcc <__libc_init_array+0x24>
 800bdb8:	4d0b      	ldr	r5, [pc, #44]	; (800bde8 <__libc_init_array+0x40>)
 800bdba:	4c0c      	ldr	r4, [pc, #48]	; (800bdec <__libc_init_array+0x44>)
 800bdbc:	f000 f8ce 	bl	800bf5c <_init>
 800bdc0:	1b64      	subs	r4, r4, r5
 800bdc2:	10a4      	asrs	r4, r4, #2
 800bdc4:	2600      	movs	r6, #0
 800bdc6:	42a6      	cmp	r6, r4
 800bdc8:	d105      	bne.n	800bdd6 <__libc_init_array+0x2e>
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
 800bdcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdd0:	4798      	blx	r3
 800bdd2:	3601      	adds	r6, #1
 800bdd4:	e7ee      	b.n	800bdb4 <__libc_init_array+0xc>
 800bdd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdda:	4798      	blx	r3
 800bddc:	3601      	adds	r6, #1
 800bdde:	e7f2      	b.n	800bdc6 <__libc_init_array+0x1e>
 800bde0:	0800dc8c 	.word	0x0800dc8c
 800bde4:	0800dc8c 	.word	0x0800dc8c
 800bde8:	0800dc8c 	.word	0x0800dc8c
 800bdec:	0800dc90 	.word	0x0800dc90

0800bdf0 <memcpy>:
 800bdf0:	440a      	add	r2, r1
 800bdf2:	4291      	cmp	r1, r2
 800bdf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdf8:	d100      	bne.n	800bdfc <memcpy+0xc>
 800bdfa:	4770      	bx	lr
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be06:	4291      	cmp	r1, r2
 800be08:	d1f9      	bne.n	800bdfe <memcpy+0xe>
 800be0a:	bd10      	pop	{r4, pc}

0800be0c <memset>:
 800be0c:	4402      	add	r2, r0
 800be0e:	4603      	mov	r3, r0
 800be10:	4293      	cmp	r3, r2
 800be12:	d100      	bne.n	800be16 <memset+0xa>
 800be14:	4770      	bx	lr
 800be16:	f803 1b01 	strb.w	r1, [r3], #1
 800be1a:	e7f9      	b.n	800be10 <memset+0x4>

0800be1c <strncmp>:
 800be1c:	b510      	push	{r4, lr}
 800be1e:	b17a      	cbz	r2, 800be40 <strncmp+0x24>
 800be20:	4603      	mov	r3, r0
 800be22:	3901      	subs	r1, #1
 800be24:	1884      	adds	r4, r0, r2
 800be26:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800be2e:	4290      	cmp	r0, r2
 800be30:	d101      	bne.n	800be36 <strncmp+0x1a>
 800be32:	42a3      	cmp	r3, r4
 800be34:	d101      	bne.n	800be3a <strncmp+0x1e>
 800be36:	1a80      	subs	r0, r0, r2
 800be38:	bd10      	pop	{r4, pc}
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d1f3      	bne.n	800be26 <strncmp+0xa>
 800be3e:	e7fa      	b.n	800be36 <strncmp+0x1a>
 800be40:	4610      	mov	r0, r2
 800be42:	e7f9      	b.n	800be38 <strncmp+0x1c>

0800be44 <_strtol_l.constprop.0>:
 800be44:	2b01      	cmp	r3, #1
 800be46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be4a:	d001      	beq.n	800be50 <_strtol_l.constprop.0+0xc>
 800be4c:	2b24      	cmp	r3, #36	; 0x24
 800be4e:	d906      	bls.n	800be5e <_strtol_l.constprop.0+0x1a>
 800be50:	f7ff ffa4 	bl	800bd9c <__errno>
 800be54:	2316      	movs	r3, #22
 800be56:	6003      	str	r3, [r0, #0]
 800be58:	2000      	movs	r0, #0
 800be5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf44 <_strtol_l.constprop.0+0x100>
 800be62:	460d      	mov	r5, r1
 800be64:	462e      	mov	r6, r5
 800be66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800be6e:	f017 0708 	ands.w	r7, r7, #8
 800be72:	d1f7      	bne.n	800be64 <_strtol_l.constprop.0+0x20>
 800be74:	2c2d      	cmp	r4, #45	; 0x2d
 800be76:	d132      	bne.n	800bede <_strtol_l.constprop.0+0x9a>
 800be78:	782c      	ldrb	r4, [r5, #0]
 800be7a:	2701      	movs	r7, #1
 800be7c:	1cb5      	adds	r5, r6, #2
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d05b      	beq.n	800bf3a <_strtol_l.constprop.0+0xf6>
 800be82:	2b10      	cmp	r3, #16
 800be84:	d109      	bne.n	800be9a <_strtol_l.constprop.0+0x56>
 800be86:	2c30      	cmp	r4, #48	; 0x30
 800be88:	d107      	bne.n	800be9a <_strtol_l.constprop.0+0x56>
 800be8a:	782c      	ldrb	r4, [r5, #0]
 800be8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800be90:	2c58      	cmp	r4, #88	; 0x58
 800be92:	d14d      	bne.n	800bf30 <_strtol_l.constprop.0+0xec>
 800be94:	786c      	ldrb	r4, [r5, #1]
 800be96:	2310      	movs	r3, #16
 800be98:	3502      	adds	r5, #2
 800be9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800be9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bea2:	f04f 0c00 	mov.w	ip, #0
 800bea6:	fbb8 f9f3 	udiv	r9, r8, r3
 800beaa:	4666      	mov	r6, ip
 800beac:	fb03 8a19 	mls	sl, r3, r9, r8
 800beb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800beb4:	f1be 0f09 	cmp.w	lr, #9
 800beb8:	d816      	bhi.n	800bee8 <_strtol_l.constprop.0+0xa4>
 800beba:	4674      	mov	r4, lr
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	dd24      	ble.n	800bf0a <_strtol_l.constprop.0+0xc6>
 800bec0:	f1bc 0f00 	cmp.w	ip, #0
 800bec4:	db1e      	blt.n	800bf04 <_strtol_l.constprop.0+0xc0>
 800bec6:	45b1      	cmp	r9, r6
 800bec8:	d31c      	bcc.n	800bf04 <_strtol_l.constprop.0+0xc0>
 800beca:	d101      	bne.n	800bed0 <_strtol_l.constprop.0+0x8c>
 800becc:	45a2      	cmp	sl, r4
 800bece:	db19      	blt.n	800bf04 <_strtol_l.constprop.0+0xc0>
 800bed0:	fb06 4603 	mla	r6, r6, r3, r4
 800bed4:	f04f 0c01 	mov.w	ip, #1
 800bed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bedc:	e7e8      	b.n	800beb0 <_strtol_l.constprop.0+0x6c>
 800bede:	2c2b      	cmp	r4, #43	; 0x2b
 800bee0:	bf04      	itt	eq
 800bee2:	782c      	ldrbeq	r4, [r5, #0]
 800bee4:	1cb5      	addeq	r5, r6, #2
 800bee6:	e7ca      	b.n	800be7e <_strtol_l.constprop.0+0x3a>
 800bee8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800beec:	f1be 0f19 	cmp.w	lr, #25
 800bef0:	d801      	bhi.n	800bef6 <_strtol_l.constprop.0+0xb2>
 800bef2:	3c37      	subs	r4, #55	; 0x37
 800bef4:	e7e2      	b.n	800bebc <_strtol_l.constprop.0+0x78>
 800bef6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800befa:	f1be 0f19 	cmp.w	lr, #25
 800befe:	d804      	bhi.n	800bf0a <_strtol_l.constprop.0+0xc6>
 800bf00:	3c57      	subs	r4, #87	; 0x57
 800bf02:	e7db      	b.n	800bebc <_strtol_l.constprop.0+0x78>
 800bf04:	f04f 3cff 	mov.w	ip, #4294967295
 800bf08:	e7e6      	b.n	800bed8 <_strtol_l.constprop.0+0x94>
 800bf0a:	f1bc 0f00 	cmp.w	ip, #0
 800bf0e:	da05      	bge.n	800bf1c <_strtol_l.constprop.0+0xd8>
 800bf10:	2322      	movs	r3, #34	; 0x22
 800bf12:	6003      	str	r3, [r0, #0]
 800bf14:	4646      	mov	r6, r8
 800bf16:	b942      	cbnz	r2, 800bf2a <_strtol_l.constprop.0+0xe6>
 800bf18:	4630      	mov	r0, r6
 800bf1a:	e79e      	b.n	800be5a <_strtol_l.constprop.0+0x16>
 800bf1c:	b107      	cbz	r7, 800bf20 <_strtol_l.constprop.0+0xdc>
 800bf1e:	4276      	negs	r6, r6
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	d0f9      	beq.n	800bf18 <_strtol_l.constprop.0+0xd4>
 800bf24:	f1bc 0f00 	cmp.w	ip, #0
 800bf28:	d000      	beq.n	800bf2c <_strtol_l.constprop.0+0xe8>
 800bf2a:	1e69      	subs	r1, r5, #1
 800bf2c:	6011      	str	r1, [r2, #0]
 800bf2e:	e7f3      	b.n	800bf18 <_strtol_l.constprop.0+0xd4>
 800bf30:	2430      	movs	r4, #48	; 0x30
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1b1      	bne.n	800be9a <_strtol_l.constprop.0+0x56>
 800bf36:	2308      	movs	r3, #8
 800bf38:	e7af      	b.n	800be9a <_strtol_l.constprop.0+0x56>
 800bf3a:	2c30      	cmp	r4, #48	; 0x30
 800bf3c:	d0a5      	beq.n	800be8a <_strtol_l.constprop.0+0x46>
 800bf3e:	230a      	movs	r3, #10
 800bf40:	e7ab      	b.n	800be9a <_strtol_l.constprop.0+0x56>
 800bf42:	bf00      	nop
 800bf44:	0800db81 	.word	0x0800db81

0800bf48 <strtol>:
 800bf48:	4613      	mov	r3, r2
 800bf4a:	460a      	mov	r2, r1
 800bf4c:	4601      	mov	r1, r0
 800bf4e:	4802      	ldr	r0, [pc, #8]	; (800bf58 <strtol+0x10>)
 800bf50:	6800      	ldr	r0, [r0, #0]
 800bf52:	f7ff bf77 	b.w	800be44 <_strtol_l.constprop.0>
 800bf56:	bf00      	nop
 800bf58:	200003b8 	.word	0x200003b8

0800bf5c <_init>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	bf00      	nop
 800bf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf62:	bc08      	pop	{r3}
 800bf64:	469e      	mov	lr, r3
 800bf66:	4770      	bx	lr

0800bf68 <_fini>:
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6a:	bf00      	nop
 800bf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6e:	bc08      	pop	{r3}
 800bf70:	469e      	mov	lr, r3
 800bf72:	4770      	bx	lr
