
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b414  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018a8  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce54  0800ce54  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce54  0800ce54  0001ce54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce5c  0800ce5c  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce5c  0800ce5c  0001ce5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800ce64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fed0  20000364  0800d1c8  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010234  0800d1c8  00030234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b0  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280c  00000000  00000000  00037c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d9d  00000000  00000000  0003cb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185f6  00000000  00000000  000558b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a166e  00000000  00000000  0006deab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010f519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005788  00000000  00000000  0010f5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00114d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000364 	.word	0x20000364
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b594 	.word	0x0800b594

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000368 	.word	0x20000368
 80001d4:	0800b594 	.word	0x0800b594

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000b74:	4bb9      	ldr	r3, [pc, #740]	; (8000e5c <menu_vars+0x304>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4bb7      	ldr	r3, [pc, #732]	; (8000e5c <menu_vars+0x304>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4bb7      	ldr	r3, [pc, #732]	; (8000e60 <menu_vars+0x308>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f00a fc5a 	bl	800b454 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4bad      	ldr	r3, [pc, #692]	; (8000e5c <menu_vars+0x304>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bab      	ldr	r3, [pc, #684]	; (8000e5c <menu_vars+0x304>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba9      	ldr	r3, [pc, #676]	; (8000e5c <menu_vars+0x304>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba8      	ldr	r3, [pc, #672]	; (8000e5c <menu_vars+0x304>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b31      	cmp	r3, #49	; 0x31
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bc0:	4aa8      	ldr	r2, [pc, #672]	; (8000e64 <menu_vars+0x30c>)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	4aa7      	ldr	r2, [pc, #668]	; (8000e68 <menu_vars+0x310>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d903      	bls.n	8000bda <menu_vars+0x82>
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	4aa4      	ldr	r2, [pc, #656]	; (8000e68 <menu_vars+0x310>)
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b30      	cmp	r3, #48	; 0x30
 8000bde:	f200 81ef 	bhi.w	8000fc0 <menu_vars+0x468>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <menu_vars+0x90>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000cad 	.word	0x08000cad
 8000bec:	08000cb3 	.word	0x08000cb3
 8000bf0:	08000cc5 	.word	0x08000cc5
 8000bf4:	08000cd9 	.word	0x08000cd9
 8000bf8:	08000ced 	.word	0x08000ced
 8000bfc:	08000d01 	.word	0x08000d01
 8000c00:	08000d15 	.word	0x08000d15
 8000c04:	08000d1b 	.word	0x08000d1b
 8000c08:	08000d2d 	.word	0x08000d2d
 8000c0c:	08000d41 	.word	0x08000d41
 8000c10:	08000d55 	.word	0x08000d55
 8000c14:	08000d69 	.word	0x08000d69
 8000c18:	08000d6f 	.word	0x08000d6f
 8000c1c:	08000d81 	.word	0x08000d81
 8000c20:	08000d95 	.word	0x08000d95
 8000c24:	08000da9 	.word	0x08000da9
 8000c28:	08000dbd 	.word	0x08000dbd
 8000c2c:	08000dd1 	.word	0x08000dd1
 8000c30:	08000de5 	.word	0x08000de5
 8000c34:	08000df9 	.word	0x08000df9
 8000c38:	08000e0d 	.word	0x08000e0d
 8000c3c:	08000e21 	.word	0x08000e21
 8000c40:	08000e27 	.word	0x08000e27
 8000c44:	08000e2d 	.word	0x08000e2d
 8000c48:	08000e33 	.word	0x08000e33
 8000c4c:	08000e3f 	.word	0x08000e3f
 8000c50:	08000e4d 	.word	0x08000e4d
 8000c54:	08000e85 	.word	0x08000e85
 8000c58:	08000e91 	.word	0x08000e91
 8000c5c:	08000e9f 	.word	0x08000e9f
 8000c60:	08000ead 	.word	0x08000ead
 8000c64:	08000ebb 	.word	0x08000ebb
 8000c68:	08000ec9 	.word	0x08000ec9
 8000c6c:	08000ed7 	.word	0x08000ed7
 8000c70:	08000ee5 	.word	0x08000ee5
 8000c74:	08000ef3 	.word	0x08000ef3
 8000c78:	08000f07 	.word	0x08000f07
 8000c7c:	08000f19 	.word	0x08000f19
 8000c80:	08000f2d 	.word	0x08000f2d
 8000c84:	08000f41 	.word	0x08000f41
 8000c88:	08000f55 	.word	0x08000f55
 8000c8c:	08000f67 	.word	0x08000f67
 8000c90:	08000f7b 	.word	0x08000f7b
 8000c94:	08000f8f 	.word	0x08000f8f
 8000c98:	08000fa3 	.word	0x08000fa3
 8000c9c:	08000fa9 	.word	0x08000fa9
 8000ca0:	08000faf 	.word	0x08000faf
 8000ca4:	08000fb5 	.word	0x08000fb5
 8000ca8:	08000fbb 	.word	0x08000fbb
	case 0:     menu_vars_var1= NULL; break;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	e189      	b.n	8000fc6 <menu_vars+0x46e>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000cb2:	78fa      	ldrb	r2, [r7, #3]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4a6b      	ldr	r2, [pc, #428]	; (8000e6c <menu_vars+0x314>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e180      	b.n	8000fc6 <menu_vars+0x46e>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a67      	ldr	r2, [pc, #412]	; (8000e6c <menu_vars+0x314>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e176      	b.n	8000fc6 <menu_vars+0x46e>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4a62      	ldr	r2, [pc, #392]	; (8000e6c <menu_vars+0x314>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e16c      	b.n	8000fc6 <menu_vars+0x46e>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4a5d      	ldr	r2, [pc, #372]	; (8000e6c <menu_vars+0x314>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	e162      	b.n	8000fc6 <menu_vars+0x46e>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;
 8000d00:	78fa      	ldrb	r2, [r7, #3]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4a59      	ldr	r2, [pc, #356]	; (8000e70 <menu_vars+0x318>)
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3304      	adds	r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	e158      	b.n	8000fc6 <menu_vars+0x46e>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	e155      	b.n	8000fc6 <menu_vars+0x46e>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	4a53      	ldr	r2, [pc, #332]	; (8000e74 <menu_vars+0x31c>)
 8000d26:	4413      	add	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e14c      	b.n	8000fc6 <menu_vars+0x46e>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <menu_vars+0x31c>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e142      	b.n	8000fc6 <menu_vars+0x46e>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <menu_vars+0x31c>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e138      	b.n	8000fc6 <menu_vars+0x46e>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	4a45      	ldr	r2, [pc, #276]	; (8000e74 <menu_vars+0x31c>)
 8000d60:	4413      	add	r3, r2
 8000d62:	3303      	adds	r3, #3
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	e12e      	b.n	8000fc6 <menu_vars+0x46e>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	e12b      	b.n	8000fc6 <menu_vars+0x46e>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d6e:	78fa      	ldrb	r2, [r7, #3]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4a3f      	ldr	r2, [pc, #252]	; (8000e78 <menu_vars+0x320>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e122      	b.n	8000fc6 <menu_vars+0x46e>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <menu_vars+0x320>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3301      	adds	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e118      	b.n	8000fc6 <menu_vars+0x46e>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4a36      	ldr	r2, [pc, #216]	; (8000e78 <menu_vars+0x320>)
 8000da0:	4413      	add	r3, r2
 8000da2:	3302      	adds	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e10e      	b.n	8000fc6 <menu_vars+0x46e>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <menu_vars+0x320>)
 8000db4:	4413      	add	r3, r2
 8000db6:	3303      	adds	r3, #3
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e104      	b.n	8000fc6 <menu_vars+0x46e>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <menu_vars+0x320>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	3304      	adds	r3, #4
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e0fa      	b.n	8000fc6 <menu_vars+0x46e>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <menu_vars+0x320>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	3305      	adds	r3, #5
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e0f0      	b.n	8000fc6 <menu_vars+0x46e>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <menu_vars+0x320>)
 8000df0:	4413      	add	r3, r2
 8000df2:	3306      	adds	r3, #6
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e0e6      	b.n	8000fc6 <menu_vars+0x46e>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <menu_vars+0x320>)
 8000e04:	4413      	add	r3, r2
 8000e06:	3307      	adds	r3, #7
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e0dc      	b.n	8000fc6 <menu_vars+0x46e>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e0c:	78fa      	ldrb	r2, [r7, #3]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	3308      	adds	r3, #8
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <menu_vars+0x320>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e0d2      	b.n	8000fc6 <menu_vars+0x46e>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	e0cf      	b.n	8000fc6 <menu_vars+0x46e>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <menu_vars+0x324>)
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	e0cc      	b.n	8000fc6 <menu_vars+0x46e>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <menu_vars+0x328>)
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	e0c9      	b.n	8000fc6 <menu_vars+0x46e>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <menu_vars+0x324>)
 8000e36:	4413      	add	r3, r2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	e0c3      	b.n	8000fc6 <menu_vars+0x46e>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	3310      	adds	r3, #16
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <menu_vars+0x324>)
 8000e44:	4413      	add	r3, r2
 8000e46:	3303      	adds	r3, #3
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	e0bc      	b.n	8000fc6 <menu_vars+0x46e>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	3320      	adds	r3, #32
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <menu_vars+0x324>)
 8000e52:	4413      	add	r3, r2
 8000e54:	3304      	adds	r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	e0b5      	b.n	8000fc6 <menu_vars+0x46e>
 8000e5a:	bf00      	nop
 8000e5c:	200007f0 	.word	0x200007f0
 8000e60:	2000022c 	.word	0x2000022c
 8000e64:	20007911 	.word	0x20007911
 8000e68:	0800c090 	.word	0x0800c090
 8000e6c:	20004398 	.word	0x20004398
 8000e70:	20005138 	.word	0x20005138
 8000e74:	2000467c 	.word	0x2000467c
 8000e78:	20000158 	.word	0x20000158
 8000e7c:	20005108 	.word	0x20005108
 8000e80:	20005109 	.word	0x20005109
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <menu_vars+0x478>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e09a      	b.n	8000fc6 <menu_vars+0x46e>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4a4e      	ldr	r2, [pc, #312]	; (8000fd0 <menu_vars+0x478>)
 8000e96:	4413      	add	r3, r2
 8000e98:	3301      	adds	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	e093      	b.n	8000fc6 <menu_vars+0x46e>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <menu_vars+0x478>)
 8000ea4:	4413      	add	r3, r2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	e08c      	b.n	8000fc6 <menu_vars+0x46e>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <menu_vars+0x478>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	e085      	b.n	8000fc6 <menu_vars+0x46e>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <menu_vars+0x478>)
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	e07e      	b.n	8000fc6 <menu_vars+0x46e>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4a40      	ldr	r2, [pc, #256]	; (8000fd0 <menu_vars+0x478>)
 8000ece:	4413      	add	r3, r2
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	e077      	b.n	8000fc6 <menu_vars+0x46e>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <menu_vars+0x478>)
 8000edc:	4413      	add	r3, r2
 8000ede:	3306      	adds	r3, #6
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	e070      	b.n	8000fc6 <menu_vars+0x46e>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4a39      	ldr	r2, [pc, #228]	; (8000fd0 <menu_vars+0x478>)
 8000eea:	4413      	add	r3, r2
 8000eec:	3305      	adds	r3, #5
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e069      	b.n	8000fc6 <menu_vars+0x46e>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <menu_vars+0x47c>)
 8000efe:	4413      	add	r3, r2
 8000f00:	3305      	adds	r3, #5
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	e05f      	b.n	8000fc6 <menu_vars+0x46e>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <menu_vars+0x47c>)
 8000f12:	4413      	add	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	e056      	b.n	8000fc6 <menu_vars+0x46e>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f18:	78fa      	ldrb	r2, [r7, #3]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <menu_vars+0x47c>)
 8000f24:	4413      	add	r3, r2
 8000f26:	3301      	adds	r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	e04c      	b.n	8000fc6 <menu_vars+0x46e>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <menu_vars+0x47c>)
 8000f38:	4413      	add	r3, r2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	e042      	b.n	8000fc6 <menu_vars+0x46e>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <menu_vars+0x47c>)
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3303      	adds	r3, #3
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	e038      	b.n	8000fc6 <menu_vars+0x46e>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f54:	78fa      	ldrb	r2, [r7, #3]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <menu_vars+0x480>)
 8000f60:	4413      	add	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	e02f      	b.n	8000fc6 <menu_vars+0x46e>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <menu_vars+0x480>)
 8000f72:	4413      	add	r3, r2
 8000f74:	3301      	adds	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	e025      	b.n	8000fc6 <menu_vars+0x46e>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000f7a:	78fa      	ldrb	r2, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <menu_vars+0x480>)
 8000f86:	4413      	add	r3, r2
 8000f88:	3304      	adds	r3, #4
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e01b      	b.n	8000fc6 <menu_vars+0x46e>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <menu_vars+0x480>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e011      	b.n	8000fc6 <menu_vars+0x46e>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <menu_vars+0x484>)
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e00e      	b.n	8000fc6 <menu_vars+0x46e>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <menu_vars+0x488>)
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	e00b      	b.n	8000fc6 <menu_vars+0x46e>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <menu_vars+0x48c>)
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	e008      	b.n	8000fc6 <menu_vars+0x46e>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <menu_vars+0x490>)
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e005      	b.n	8000fc6 <menu_vars+0x46e>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <menu_vars+0x494>)
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	e002      	b.n	8000fc6 <menu_vars+0x46e>

	default :		menu_vars_var1= NULL   ; break;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000fc6:	693b      	ldr	r3, [r7, #16]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200001e4 	.word	0x200001e4
 8000fd4:	20005138 	.word	0x20005138
 8000fd8:	20004640 	.word	0x20004640
 8000fdc:	20000212 	.word	0x20000212
 8000fe0:	20000213 	.word	0x20000213
 8000fe4:	20000214 	.word	0x20000214
 8000fe8:	20000215 	.word	0x20000215
 8000fec:	20000208 	.word	0x20000208

08000ff0 <sampler_ram_record>:

void sampler_ram_record(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

memcpy(	&RAM[sampler.ram_pos], input_holder,sizeof(input_holder));
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <sampler_ram_record+0x44>)
 8000ff6:	899b      	ldrh	r3, [r3, #12]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <sampler_ram_record+0x48>)
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <sampler_ram_record+0x4c>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00a fa0f 	bl	800b428 <memcpy>
	sampler.ram_pos =sampler.ram_pos+512;
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <sampler_ram_record+0x44>)
 800100c:	899b      	ldrh	r3, [r3, #12]
 800100e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <sampler_ram_record+0x44>)
 8001016:	819a      	strh	r2, [r3, #12]
if (sampler.ram_pos>16383) { sampler.ram_pos=0; sampler.record_enable=0; } // reset and stop record
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <sampler_ram_record+0x44>)
 800101a:	899b      	ldrh	r3, [r3, #12]
 800101c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001020:	d305      	bcc.n	800102e <sampler_ram_record+0x3e>
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <sampler_ram_record+0x44>)
 8001024:	2200      	movs	r2, #0
 8001026:	819a      	strh	r2, [r3, #12]
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <sampler_ram_record+0x44>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000204 	.word	0x20000204
 8001038:	20007b18 	.word	0x20007b18
 800103c:	20003f7c 	.word	0x20003f7c

08001040 <menu_parser>:

}



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8001046:	4a6c      	ldr	r2, [pc, #432]	; (80011f8 <menu_parser+0x1b8>)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001050:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8001054:	4a69      	ldr	r2, [pc, #420]	; (80011fc <menu_parser+0x1bc>)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001064:	f240 6336 	movw	r3, #1590	; 0x636
 8001068:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 800106a:	4b65      	ldr	r3, [pc, #404]	; (8001200 <menu_parser+0x1c0>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	8aba      	ldrh	r2, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f0c0 80bc 	bcc.w	80011ee <menu_parser+0x1ae>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8001076:	4b62      	ldr	r3, [pc, #392]	; (8001200 <menu_parser+0x1c0>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b61      	ldr	r3, [pc, #388]	; (8001204 <menu_parser+0x1c4>)
 800107e:	441a      	add	r2, r3
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	6810      	ldr	r0, [r2, #0]
 8001086:	6851      	ldr	r1, [r2, #4]
 8001088:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800108a:	2300      	movs	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]
 800108e:	e093      	b.n	80011b8 <menu_parser+0x178>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	4a5d      	ldr	r2, [pc, #372]	; (8001208 <menu_parser+0x1c8>)
 8001094:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	6810      	ldr	r0, [r2, #0]
 800109c:	6851      	ldr	r1, [r2, #4]
 800109e:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 80010a0:	1d39      	adds	r1, r7, #4
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2208      	movs	r2, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00a f9d3 	bl	800b454 <strncmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d17e      	bne.n	80011b2 <menu_parser+0x172>
		{

			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <menu_parser+0x1cc>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b6e      	cmp	r3, #110	; 0x6e
 80010ba:	d909      	bls.n	80010d0 <menu_parser+0x90>
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <menu_parser+0x1cc>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	2b7f      	cmp	r3, #127	; 0x7f
 80010c2:	d805      	bhi.n	80010d0 <menu_parser+0x90>
 80010c4:	4b51      	ldr	r3, [pc, #324]	; (800120c <menu_parser+0x1cc>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	3310      	adds	r3, #16
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <menu_parser+0x1cc>)
 80010ce:	801a      	strh	r2, [r3, #0]
			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 80010d0:	4b4e      	ldr	r3, [pc, #312]	; (800120c <menu_parser+0x1cc>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	2bed      	cmp	r3, #237	; 0xed
 80010d6:	d909      	bls.n	80010ec <menu_parser+0xac>
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <menu_parser+0x1cc>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d805      	bhi.n	80010ec <menu_parser+0xac>
 80010e0:	4b4a      	ldr	r3, [pc, #296]	; (800120c <menu_parser+0x1cc>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	3310      	adds	r3, #16
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <menu_parser+0x1cc>)
 80010ea:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <menu_parser+0x1cc>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 80010f4:	d30a      	bcc.n	800110c <menu_parser+0xcc>
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <menu_parser+0x1cc>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80010fe:	d205      	bcs.n	800110c <menu_parser+0xcc>
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <menu_parser+0x1cc>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	3310      	adds	r3, #16
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <menu_parser+0x1cc>)
 800110a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>493)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <menu_parser+0x1cc>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001114:	d30a      	bcc.n	800112c <menu_parser+0xec>
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <menu_parser+0x1cc>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111e:	d205      	bcs.n	800112c <menu_parser+0xec>
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <menu_parser+0x1cc>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	3310      	adds	r3, #16
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <menu_parser+0x1cc>)
 800112a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>621)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <menu_parser+0x1cc>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	f240 226d 	movw	r2, #621	; 0x26d
 8001134:	4293      	cmp	r3, r2
 8001136:	d90a      	bls.n	800114e <menu_parser+0x10e>
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <menu_parser+0x1cc>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001140:	d205      	bcs.n	800114e <menu_parser+0x10e>
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <menu_parser+0x1cc>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	3310      	adds	r3, #16
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <menu_parser+0x1cc>)
 800114c:	801a      	strh	r2, [r3, #0]
			menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <menu_parser+0x1cc>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800115a:	18d1      	adds	r1, r2, r3
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <menu_parser+0x1d0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <menu_parser+0x1d4>)
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <menu_parser+0x1d0>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	461a      	mov	r2, r3
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <menu_parser+0x1d8>)
 8001172:	18d0      	adds	r0, r2, r3
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <menu_parser+0x1c0>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	3b02      	subs	r3, #2
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <menu_parser+0x1c4>)
 800117c:	4413      	add	r3, r2
 800117e:	2202      	movs	r2, #2
 8001180:	4619      	mov	r1, r3
 8001182:	f00a f951 	bl	800b428 <memcpy>


			menu_title_count++;
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <menu_parser+0x1d0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <menu_parser+0x1d0>)
 8001190:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <menu_parser+0x1cc>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <menu_parser+0x1cc>)
 800119c:	801a      	strh	r2, [r3, #0]
			space_check=0;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <menu_parser+0x1dc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <menu_parser+0x1c0>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3308      	adds	r3, #8
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <menu_parser+0x1c0>)
 80011ae:	801a      	strh	r2, [r3, #0]

			return;}
 80011b0:	e01e      	b.n	80011f0 <menu_parser+0x1b0>
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	3301      	adds	r3, #1
 80011b6:	75fb      	strb	r3, [r7, #23]
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b31      	cmp	r3, #49	; 0x31
 80011bc:	f67f af68 	bls.w	8001090 <menu_parser+0x50>

	}

	if (space_check>1)  menu_counter++;   //this is ok
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <menu_parser+0x1dc>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d905      	bls.n	80011d4 <menu_parser+0x194>
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <menu_parser+0x1cc>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <menu_parser+0x1cc>)
 80011d2:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <menu_parser+0x1dc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <menu_parser+0x1dc>)
 80011de:	701a      	strb	r2, [r3, #0]
	string_search++;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <menu_parser+0x1c0>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <menu_parser+0x1c0>)
 80011ea:	801a      	strh	r2, [r3, #0]
	return;
 80011ec:	e000      	b.n	80011f0 <menu_parser+0x1b0>
		return;    }    // check if bigger than search area
 80011ee:	bf00      	nop


}
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800b97c 	.word	0x0800b97c
 80011fc:	0800b984 	.word	0x0800b984
 8001200:	200052c8 	.word	0x200052c8
 8001204:	0800ba50 	.word	0x0800ba50
 8001208:	2000022c 	.word	0x2000022c
 800120c:	200052ca 	.word	0x200052ca
 8001210:	200052cd 	.word	0x200052cd
 8001214:	200052d0 	.word	0x200052d0
 8001218:	200056d0 	.word	0x200056d0
 800121c:	200052cc 	.word	0x200052cc

08001220 <patch_target_parse>:
void patch_target_parse(void){    // records ptr for target options , works ok
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
uint8_t skip=0;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 800122a:	4b91      	ldr	r3, [pc, #580]	; (8001470 <patch_target_parse+0x250>)
 800122c:	2200      	movs	r2, #0
 800122e:	801a      	strh	r2, [r3, #0]
 8001230:	e113      	b.n	800145a <patch_target_parse+0x23a>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 8001232:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <patch_target_parse+0x250>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	4a8e      	ldr	r2, [pc, #568]	; (8001474 <patch_target_parse+0x254>)
 800123a:	460b      	mov	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	717b      	strb	r3, [r7, #5]

			if (patch[n].input1>=menu_lookup_count) patch[n].input1=0;    // limit
 8001248:	4b89      	ldr	r3, [pc, #548]	; (8001470 <patch_target_parse+0x250>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	4a89      	ldr	r2, [pc, #548]	; (8001474 <patch_target_parse+0x254>)
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b31      	cmp	r3, #49	; 0x31
 800125e:	d90a      	bls.n	8001276 <patch_target_parse+0x56>
 8001260:	4b83      	ldr	r3, [pc, #524]	; (8001470 <patch_target_parse+0x250>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4a83      	ldr	r2, [pc, #524]	; (8001474 <patch_target_parse+0x254>)
 8001268:	460b      	mov	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b03      	cmp	r3, #3
 800127e:	d842      	bhi.n	8001306 <patch_target_parse+0xe6>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <patch_target_parse+0x68>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	08001299 	.word	0x08001299
 800128c:	080012b3 	.word	0x080012b3
 8001290:	080012cf 	.word	0x080012cf
 8001294:	080012eb 	.word	0x080012eb

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4a73      	ldr	r2, [pc, #460]	; (8001478 <patch_target_parse+0x258>)
 80012aa:	4413      	add	r3, r2
 80012ac:	3306      	adds	r3, #6
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	e029      	b.n	8001306 <patch_target_parse+0xe6>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 80012b2:	797b      	ldrb	r3, [r7, #5]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4613      	mov	r3, r2
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	3318      	adds	r3, #24
 80012c4:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <patch_target_parse+0x258>)
 80012c6:	4413      	add	r3, r2
 80012c8:	3302      	adds	r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	e01b      	b.n	8001306 <patch_target_parse+0xe6>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 80012ce:	797b      	ldrb	r3, [r7, #5]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4613      	mov	r3, r2
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3328      	adds	r3, #40	; 0x28
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <patch_target_parse+0x258>)
 80012e2:	4413      	add	r3, r2
 80012e4:	3306      	adds	r3, #6
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	e00d      	b.n	8001306 <patch_target_parse+0xe6>
						case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4613      	mov	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	3328      	adds	r3, #40	; 0x28
 80012fc:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <patch_target_parse+0x258>)
 80012fe:	4413      	add	r3, r2
 8001300:	3306      	adds	r3, #6
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	bf00      	nop
						}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <patch_target_parse+0x250>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	4a59      	ldr	r2, [pc, #356]	; (8001474 <patch_target_parse+0x254>)
 800130e:	460b      	mov	r3, r1
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4413      	add	r3, r2
 8001318:	3320      	adds	r3, #32
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	601a      	str	r2, [r3, #0]


			if (patch[n].target) {  // test if above zero
 800131e:	4b54      	ldr	r3, [pc, #336]	; (8001470 <patch_target_parse+0x250>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4a53      	ldr	r2, [pc, #332]	; (8001474 <patch_target_parse+0x254>)
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	3304      	adds	r3, #4
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 808a 	beq.w	800144e <patch_target_parse+0x22e>


				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 800133a:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <patch_target_parse+0x250>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4a4c      	ldr	r2, [pc, #304]	; (8001474 <patch_target_parse+0x254>)
 8001342:	460b      	mov	r3, r1
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	3304      	adds	r3, #4
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e00a      	b.n	800136e <patch_target_parse+0x14e>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	4a48      	ldr	r2, [pc, #288]	; (800147c <patch_target_parse+0x25c>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <patch_target_parse+0x148>
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	3301      	adds	r3, #1
 8001366:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b31      	cmp	r3, #49	; 0x31
 8001372:	d9f1      	bls.n	8001358 <patch_target_parse+0x138>

				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b31      	cmp	r3, #49	; 0x31
 8001378:	d901      	bls.n	800137e <patch_target_parse+0x15e>
 800137a:	2331      	movs	r3, #49	; 0x31
 800137c:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b23      	cmp	r3, #35	; 0x23
 8001382:	d058      	beq.n	8001436 <patch_target_parse+0x216>


			patch[n].target=target_input; // write back corrected value
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <patch_target_parse+0x250>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <patch_target_parse+0x254>)
 800138c:	460b      	mov	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4413      	add	r3, r2
 8001396:	3304      	adds	r3, #4
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[n].target_index;
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <patch_target_parse+0x250>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	4a34      	ldr	r2, [pc, #208]	; (8001474 <patch_target_parse+0x254>)
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	3305      	adds	r3, #5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	71bb      	strb	r3, [r7, #6]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	4a32      	ldr	r2, [pc, #200]	; (8001480 <patch_target_parse+0x260>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	79ba      	ldrb	r2, [r7, #6]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d903      	bls.n	80013c8 <patch_target_parse+0x1a8>
			{	target_index=menu_vars_index_limit[target_index]; }
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <patch_target_parse+0x260>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <patch_target_parse+0x250>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4a29      	ldr	r2, [pc, #164]	; (8001474 <patch_target_parse+0x254>)
 80013d0:	460b      	mov	r3, r1
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	3305      	adds	r3, #5
 80013dc:	79ba      	ldrb	r2, [r7, #6]
 80013de:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4a28      	ldr	r2, [pc, #160]	; (8001484 <patch_target_parse+0x264>)
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	79ba      	ldrb	r2, [r7, #6]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fbb3 	bl	8000b58 <menu_vars>
 80013f2:	6038      	str	r0, [r7, #0]

			if (target_out_ptr)           {patch[n].out_ptr =target_out_ptr;     // write ptr
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d029      	beq.n	800144e <patch_target_parse+0x22e>
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <patch_target_parse+0x250>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <patch_target_parse+0x254>)
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	331c      	adds	r3, #28
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	601a      	str	r2, [r3, #0]
			patch[n].limiter=menu_vars_limiter[menu_vars_ref]; }
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <patch_target_parse+0x268>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <patch_target_parse+0x250>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <patch_target_parse+0x26c>)
 8001420:	5c98      	ldrb	r0, [r3, r2]
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <patch_target_parse+0x254>)
 8001424:	460b      	mov	r3, r1
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	3324      	adds	r3, #36	; 0x24
 8001430:	4602      	mov	r2, r0
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e00b      	b.n	800144e <patch_target_parse+0x22e>
				}
				else patch[n].target=0;  // write back 0 if failed
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <patch_target_parse+0x250>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <patch_target_parse+0x254>)
 800143e:	460b      	mov	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	3304      	adds	r3, #4
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <patch_target_parse+0x250>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <patch_target_parse+0x250>)
 8001458:	801a      	strh	r2, [r3, #0]
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <patch_target_parse+0x250>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b09      	cmp	r3, #9
 8001460:	f67f aee7 	bls.w	8001232 <patch_target_parse+0x12>


			}
		}

	}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200007ea 	.word	0x200007ea
 8001474:	20005138 	.word	0x20005138
 8001478:	20004398 	.word	0x20004398
 800147c:	0800c0f8 	.word	0x0800c0f8
 8001480:	0800c090 	.word	0x0800c090
 8001484:	2000022c 	.word	0x2000022c
 8001488:	20007911 	.word	0x20007911
 800148c:	0800c0c4 	.word	0x0800c0c4

08001490 <patch_target_replace>:


	}

}
void patch_target_replace(void){					// sttaight value replace  ,ok
 8001490:	b490      	push	{r4, r7}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <patch_target_replace+0x104>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	73bb      	strb	r3, [r7, #14]

	for (n=0;n<10;n++){
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <patch_target_replace+0x108>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	e06b      	b.n	8001580 <patch_target_replace+0xf0>



		if (patch[n].target) {         // check first for enable
 80014a8:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <patch_target_replace+0x108>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <patch_target_replace+0x10c>)
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	3304      	adds	r3, #4
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d058      	beq.n	8001574 <patch_target_replace+0xe4>

			patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <patch_target_replace+0x108>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4a34      	ldr	r2, [pc, #208]	; (800159c <patch_target_replace+0x10c>)
 80014ca:	460b      	mov	r3, r1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	3320      	adds	r3, #32
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <patch_target_replace+0x108>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	4610      	mov	r0, r2
 80014e4:	7bba      	ldrb	r2, [r7, #14]
 80014e6:	881c      	ldrh	r4, [r3, #0]
 80014e8:	492c      	ldr	r1, [pc, #176]	; (800159c <patch_target_replace+0x10c>)
 80014ea:	4603      	mov	r3, r0
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4403      	add	r3, r0
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	440b      	add	r3, r1
 80014f8:	4622      	mov	r2, r4
 80014fa:	80da      	strh	r2, [r3, #6]


			uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <patch_target_replace+0x108>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <patch_target_replace+0x10c>)
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	331c      	adds	r3, #28
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60bb      	str	r3, [r7, #8]
			uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <patch_target_replace+0x108>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	7bba      	ldrb	r2, [r7, #14]
 800151c:	491f      	ldr	r1, [pc, #124]	; (800159c <patch_target_replace+0x10c>)
 800151e:	4603      	mov	r3, r0
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4403      	add	r3, r0
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	440b      	add	r3, r1
 800152c:	88db      	ldrh	r3, [r3, #6]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	80fb      	strh	r3, [r7, #6]
			uint8_t lfo_mod1=ptr_to_modify; //ok
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	717b      	strb	r3, [r7, #5]

			uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	73fb      	strb	r3, [r7, #15]

			if (var_replaced>patch[n].limiter) var_replaced=patch[n].limiter;  // limit lfo output
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <patch_target_replace+0x108>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4619      	mov	r1, r3
 8001540:	4a16      	ldr	r2, [pc, #88]	; (800159c <patch_target_replace+0x10c>)
 8001542:	460b      	mov	r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	3324      	adds	r3, #36	; 0x24
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	429a      	cmp	r2, r3
 8001554:	d90b      	bls.n	800156e <patch_target_replace+0xde>
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <patch_target_replace+0x108>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <patch_target_replace+0x10c>)
 800155e:	460b      	mov	r3, r1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	3324      	adds	r3, #36	; 0x24
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	73fb      	strb	r3, [r7, #15]

			*ptr_to_modify =var_replaced;   // replace original value,ok
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <patch_target_replace+0x108>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <patch_target_replace+0x108>)
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <patch_target_replace+0x108>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	2b09      	cmp	r3, #9
 8001586:	d98f      	bls.n	80014a8 <patch_target_replace+0x18>
		}


	}

}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bc90      	pop	{r4, r7}
 8001592:	4770      	bx	lr
 8001594:	200058e7 	.word	0x200058e7
 8001598:	200007ea 	.word	0x200007ea
 800159c:	20005138 	.word	0x20005138

080015a0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
		time_proc++;
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015b2:	801a      	strh	r2, [r3, #0]
//		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
//		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
//		sample_point=sample_point & 1023;// this is 1


		if(TIM3==htim->Instance)			// nothing here is consistent ?
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d131      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x82>
	{

			play_hold=play_sample[sample_point<<1]; // this is 2
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015ce:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3301      	adds	r3, #1
 80015da:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015e2:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d906      	bls.n	8001600 <HAL_TIM_PeriodElapsedCallback+0x60>
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	e006      	b.n	800160e <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	3301      	adds	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800160c:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001616:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001620:	639a      	str	r2, [r3, #56]	; 0x38



	}

	}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20004394 	.word	0x20004394
 8001634:	40000400 	.word	0x40000400
 8001638:	200017f8 	.word	0x200017f8
 800163c:	200007f4 	.word	0x200007f4
 8001640:	200017fa 	.word	0x200017fa
 8001644:	200017fc 	.word	0x200017fc
 8001648:	2000014e 	.word	0x2000014e

0800164c <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0


	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001652:	4b51      	ldr	r3, [pc, #324]	; (8001798 <analoginputloopb+0x14c>)
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <analoginputloopb+0x150>)
 800165e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <analoginputloopb+0x14c>)
 8001662:	889b      	ldrh	r3, [r3, #4]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <analoginputloopb+0x154>)
 800166e:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 8001670:	4b49      	ldr	r3, [pc, #292]	; (8001798 <analoginputloopb+0x14c>)
 8001672:	2200      	movs	r2, #0
 8001674:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <analoginputloopb+0x158>)
 8001678:	881a      	ldrh	r2, [r3, #0]
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <analoginputloopb+0x14c>)
 800167c:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 800167e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <analoginputloopb+0x15c>)
 800168a:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 800168c:	4b47      	ldr	r3, [pc, #284]	; (80017ac <analoginputloopb+0x160>)
 800168e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001690:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <analoginputloopb+0x164>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	b2c9      	uxtb	r1, r1
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <analoginputloopb+0x168>)
 800169a:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 800169c:	2300      	movs	r3, #0
 800169e:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <analoginputloopb+0x164>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d103      	bne.n	80016b4 <analoginputloopb+0x68>
 80016ac:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <analoginputloopb+0x164>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e005      	b.n	80016c0 <analoginputloopb+0x74>
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <analoginputloopb+0x164>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <analoginputloopb+0x164>)
 80016be:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80016c0:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <analoginputloopb+0x168>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <analoginputloopb+0x168>)
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <analoginputloopb+0x168>)
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <analoginputloopb+0x168>)
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	08db      	lsrs	r3, r3, #3
 80016e8:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 80016ea:	4a33      	ldr	r2, [pc, #204]	; (80017b8 <analoginputloopb+0x16c>)
 80016ec:	88bb      	ldrh	r3, [r7, #4]
 80016ee:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <analoginputloopb+0x15c>)
 80016f2:	881a      	ldrh	r2, [r3, #0]
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <analoginputloopb+0x170>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d908      	bls.n	800170e <analoginputloopb+0xc2>
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <analoginputloopb+0x174>)
 80016fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29b      	uxth	r3, r3
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <analoginputloopb+0x174>)
 800170c:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <analoginputloopb+0x15c>)
 8001710:	881a      	ldrh	r2, [r3, #0]
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <analoginputloopb+0x170>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d208      	bcs.n	800172c <analoginputloopb+0xe0>
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <analoginputloopb+0x174>)
 800171c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001720:	b29b      	uxth	r3, r3
 8001722:	3301      	adds	r3, #1
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <analoginputloopb+0x174>)
 800172a:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <analoginputloopb+0x16c>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001734:	d303      	bcc.n	800173e <analoginputloopb+0xf2>
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <analoginputloopb+0x16c>)
 8001738:	f240 12ff 	movw	r2, #511	; 0x1ff
 800173c:	801a      	strh	r2, [r3, #0]
	if (enc_dir>255) enc_dir=255;
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <analoginputloopb+0x174>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	dd02      	ble.n	800174e <analoginputloopb+0x102>
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <analoginputloopb+0x174>)
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <analoginputloopb+0x174>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	2b00      	cmp	r3, #0
 8001756:	da02      	bge.n	800175e <analoginputloopb+0x112>
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <analoginputloopb+0x174>)
 800175a:	2200      	movs	r2, #0
 800175c:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <analoginputloopb+0x15c>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <analoginputloopb+0x170>)
 8001764:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <analoginputloopb+0x16c>)
 8001768:	881a      	ldrh	r2, [r3, #0]
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <analoginputloopb+0x158>)
 800176c:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <analoginputloopb+0x16c>)
 8001770:	881a      	ldrh	r2, [r3, #0]
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <analoginputloopb+0x178>)
 8001774:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <analoginputloopb+0x17c>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <analoginputloopb+0x180>)
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <analoginputloopb+0x17c>)
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	b2d9      	uxtb	r1, r3
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <analoginputloopb+0x184>)
 800178a:	5499      	strb	r1, [r3, r2]


}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	20003440 	.word	0x20003440
 800179c:	200007e4 	.word	0x200007e4
 80017a0:	200007e5 	.word	0x200007e5
 80017a4:	2000342a 	.word	0x2000342a
 80017a8:	20003422 	.word	0x20003422
 80017ac:	40000800 	.word	0x40000800
 80017b0:	200058e5 	.word	0x200058e5
 80017b4:	200058e0 	.word	0x200058e0
 80017b8:	20003426 	.word	0x20003426
 80017bc:	20003424 	.word	0x20003424
 80017c0:	2000342c 	.word	0x2000342c
 80017c4:	20003428 	.word	0x20003428
 80017c8:	200007e8 	.word	0x200007e8
 80017cc:	20000584 	.word	0x20000584
 80017d0:	20000384 	.word	0x20000384

080017d4 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <note_reset+0x78>)
 80017da:	22ff      	movs	r2, #255	; 0xff
 80017dc:	71da      	strb	r2, [r3, #7]
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <note_reset+0x78>)
 80017e0:	22ff      	movs	r2, #255	; 0xff
 80017e2:	755a      	strb	r2, [r3, #21]
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <note_reset+0x78>)
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <note_reset+0x78>)
 80017ee:	22ff      	movs	r2, #255	; 0xff
 80017f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <note_reset+0x78>)
 80017f6:	22ff      	movs	r2, #255	; 0xff
 80017f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <note_reset+0x78>)
 80017fe:	22ff      	movs	r2, #255	; 0xff
 8001800:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <note_reset+0x78>)
 8001806:	22ff      	movs	r2, #255	; 0xff
 8001808:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=127;note[1].detune=127;note[2].detune=127;note[3].detune=127;note[4].detune=127;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <note_reset+0x78>)
 800180e:	227f      	movs	r2, #127	; 0x7f
 8001810:	721a      	strb	r2, [r3, #8]
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <note_reset+0x78>)
 8001814:	227f      	movs	r2, #127	; 0x7f
 8001816:	759a      	strb	r2, [r3, #22]
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <note_reset+0x78>)
 800181a:	227f      	movs	r2, #127	; 0x7f
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <note_reset+0x78>)
 8001822:	227f      	movs	r2, #127	; 0x7f
 8001824:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <note_reset+0x78>)
 800182a:	227f      	movs	r2, #127	; 0x7f
 800182c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=127;note[6].detune=127;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <note_reset+0x78>)
 8001832:	227f      	movs	r2, #127	; 0x7f
 8001834:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <note_reset+0x78>)
 800183a:	227f      	movs	r2, #127	; 0x7f
 800183c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000158 	.word	0x20000158

08001850 <main_initial>:

void main_initial(void){
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b0a0      	sub	sp, #128	; 0x80
 8001854:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8001856:	4ba5      	ldr	r3, [pc, #660]	; (8001aec <main_initial+0x29c>)
 8001858:	66bb      	str	r3, [r7, #104]	; 0x68



	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 800185a:	48a5      	ldr	r0, [pc, #660]	; (8001af0 <main_initial+0x2a0>)
 800185c:	f007 fb3c 	bl	8008ed8 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001860:	48a4      	ldr	r0, [pc, #656]	; (8001af4 <main_initial+0x2a4>)
 8001862:	f007 fb39 	bl	8008ed8 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001866:	48a4      	ldr	r0, [pc, #656]	; (8001af8 <main_initial+0x2a8>)
 8001868:	f008 f988 	bl	8009b7c <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 800186c:	4ba3      	ldr	r3, [pc, #652]	; (8001afc <main_initial+0x2ac>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8001872:	48a3      	ldr	r0, [pc, #652]	; (8001b00 <main_initial+0x2b0>)
 8001874:	f008 f928 	bl	8009ac8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001878:	48a2      	ldr	r0, [pc, #648]	; (8001b04 <main_initial+0x2b4>)
 800187a:	f008 f925 	bl	8009ac8 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800187e:	2100      	movs	r1, #0
 8001880:	489d      	ldr	r0, [pc, #628]	; (8001af8 <main_initial+0x2a8>)
 8001882:	f008 fa37 	bl	8009cf4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001886:	2104      	movs	r1, #4
 8001888:	489b      	ldr	r0, [pc, #620]	; (8001af8 <main_initial+0x2a8>)
 800188a:	f008 fa33 	bl	8009cf4 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 800188e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001892:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001898:	489b      	ldr	r0, [pc, #620]	; (8001b08 <main_initial+0x2b8>)
 800189a:	f004 f831 	bl	8005900 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 800189e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80018a2:	499a      	ldr	r1, [pc, #616]	; (8001b0c <main_initial+0x2bc>)
 80018a4:	4898      	ldr	r0, [pc, #608]	; (8001b08 <main_initial+0x2b8>)
 80018a6:	f004 f96b 	bl	8005b80 <HAL_ADC_Start_DMA>
	//HAL_DMA_Init(&hdma_spi2_tx);

	HAL_I2C_MspInit(&hi2c2);
 80018aa:	4899      	ldr	r0, [pc, #612]	; (8001b10 <main_initial+0x2c0>)
 80018ac:	f003 fc94 	bl	80051d8 <HAL_I2C_MspInit>
	uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 80018b0:	4a98      	ldr	r2, [pc, #608]	; (8001b14 <main_initial+0x2c4>)
 80018b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ba:	6018      	str	r0, [r3, #0]
 80018bc:	3304      	adds	r3, #4
 80018be:	7019      	strb	r1, [r3, #0]
	HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

	*/


	HAL_Delay(5);
 80018c0:	2005      	movs	r0, #5
 80018c2:	f003 ffb5 	bl	8005830 <HAL_Delay>

	//               ----                  16Mbyte   flash   , w25q128   -----  16M (24bit) * 8bits   ( 1 page 256 bytes)
		send_spi1[0]=0x06; //enable write  , only lasts for single operation
 80018c6:	2306      	movs	r3, #6
 80018c8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2110      	movs	r1, #16
 80018d0:	4891      	ldr	r0, [pc, #580]	; (8001b18 <main_initial+0x2c8>)
 80018d2:	f005 feb7 	bl	8007644 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80018d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	2201      	movs	r2, #1
 80018e0:	4884      	ldr	r0, [pc, #528]	; (8001af4 <main_initial+0x2a4>)
 80018e2:	f007 fb82 	bl	8008fea <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2110      	movs	r1, #16
 80018ea:	488b      	ldr	r0, [pc, #556]	; (8001b18 <main_initial+0x2c8>)
 80018ec:	f005 feaa 	bl	8007644 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80018f0:	2005      	movs	r0, #5
 80018f2:	f003 ff9d 	bl	8005830 <HAL_Delay>
		send_spi1[0]=0x20; //sector erase
 80018f6:	2320      	movs	r3, #32
 80018f8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		send_spi1[2]=0; //24bit address
 8001902:	2300      	movs	r3, #0
 8001904:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		send_spi1[3]=1; //24bit address lsb
 8001908:	2301      	movs	r3, #1
 800190a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 800190e:	2200      	movs	r2, #0
 8001910:	2110      	movs	r1, #16
 8001912:	4881      	ldr	r0, [pc, #516]	; (8001b18 <main_initial+0x2c8>)
 8001914:	f005 fe96 	bl	8007644 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8001918:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800191c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001920:	2204      	movs	r2, #4
 8001922:	4874      	ldr	r0, [pc, #464]	; (8001af4 <main_initial+0x2a4>)
 8001924:	f007 fb61 	bl	8008fea <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001928:	2201      	movs	r2, #1
 800192a:	2110      	movs	r1, #16
 800192c:	487a      	ldr	r0, [pc, #488]	; (8001b18 <main_initial+0x2c8>)
 800192e:	f005 fe89 	bl	8007644 <HAL_GPIO_WritePin>


		send_spi1[0]=0x05; //read status register  if writing
 8001932:	2305      	movs	r3, #5
 8001934:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		status_reg[1]=1; // set busy on
 800193e:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <main_initial+0x2cc>)
 8001940:	2201      	movs	r2, #1
 8001942:	705a      	strb	r2, [r3, #1]

		while (status_reg[1]&1){								// check if write busy
 8001944:	e012      	b.n	800196c <main_initial+0x11c>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2110      	movs	r1, #16
 800194a:	4873      	ldr	r0, [pc, #460]	; (8001b18 <main_initial+0x2c8>)
 800194c:	f005 fe7a 	bl	8007644 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8001950:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001954:	23c8      	movs	r3, #200	; 0xc8
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2302      	movs	r3, #2
 800195a:	4a70      	ldr	r2, [pc, #448]	; (8001b1c <main_initial+0x2cc>)
 800195c:	4865      	ldr	r0, [pc, #404]	; (8001af4 <main_initial+0x2a4>)
 800195e:	f007 fd91 	bl	8009484 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001962:	2201      	movs	r2, #1
 8001964:	2110      	movs	r1, #16
 8001966:	486c      	ldr	r0, [pc, #432]	; (8001b18 <main_initial+0x2c8>)
 8001968:	f005 fe6c 	bl	8007644 <HAL_GPIO_WritePin>
		while (status_reg[1]&1){								// check if write busy
 800196c:	4b6b      	ldr	r3, [pc, #428]	; (8001b1c <main_initial+0x2cc>)
 800196e:	785b      	ldrb	r3, [r3, #1]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e6      	bne.n	8001946 <main_initial+0xf6>
		}

		send_spi1[0]=0x06; //enable write again
 8001978:	2306      	movs	r3, #6
 800197a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2110      	movs	r1, #16
 8001982:	4865      	ldr	r0, [pc, #404]	; (8001b18 <main_initial+0x2c8>)
 8001984:	f005 fe5e 	bl	8007644 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001988:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800198c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001990:	2201      	movs	r2, #1
 8001992:	4858      	ldr	r0, [pc, #352]	; (8001af4 <main_initial+0x2a4>)
 8001994:	f007 fb29 	bl	8008fea <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	2110      	movs	r1, #16
 800199c:	485e      	ldr	r0, [pc, #376]	; (8001b18 <main_initial+0x2c8>)
 800199e:	f005 fe51 	bl	8007644 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80019a2:	2005      	movs	r0, #5
 80019a4:	f003 ff44 	bl	8005830 <HAL_Delay>

		//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
		uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 80019a8:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <main_initial+0x2d0>)
 80019aa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80019ae:	461d      	mov	r5, r3
 80019b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b4:	682b      	ldr	r3, [r5, #0]
 80019b6:	8023      	strh	r3, [r4, #0]
		memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 80019b8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80019bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019c0:	220e      	movs	r2, #14
 80019c2:	4618      	mov	r0, r3
 80019c4:	f009 fd30 	bl	800b428 <memcpy>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2110      	movs	r1, #16
 80019cc:	4852      	ldr	r0, [pc, #328]	; (8001b18 <main_initial+0x2c8>)
 80019ce:	f005 fe39 	bl	8007644 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 80019d2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	220e      	movs	r2, #14
 80019dc:	4845      	ldr	r0, [pc, #276]	; (8001af4 <main_initial+0x2a4>)
 80019de:	f007 fb04 	bl	8008fea <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	2110      	movs	r1, #16
 80019e6:	484c      	ldr	r0, [pc, #304]	; (8001b18 <main_initial+0x2c8>)
 80019e8:	f005 fe2c 	bl	8007644 <HAL_GPIO_WritePin>

		HAL_Delay(25);
 80019ec:	2019      	movs	r0, #25
 80019ee:	f003 ff1f 	bl	8005830 <HAL_Delay>
		send_spi1[0]=0x04; //disable write
 80019f2:	2304      	movs	r3, #4
 80019f4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2110      	movs	r1, #16
 80019fc:	4846      	ldr	r0, [pc, #280]	; (8001b18 <main_initial+0x2c8>)
 80019fe:	f005 fe21 	bl	8007644 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001a02:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4839      	ldr	r0, [pc, #228]	; (8001af4 <main_initial+0x2a4>)
 8001a0e:	f007 faec 	bl	8008fea <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2110      	movs	r1, #16
 8001a16:	4840      	ldr	r0, [pc, #256]	; (8001b18 <main_initial+0x2c8>)
 8001a18:	f005 fe14 	bl	8007644 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8001a1c:	2005      	movs	r0, #5
 8001a1e:	f003 ff07 	bl	8005830 <HAL_Delay>
		memcpy  (send_spi1,return_spi1, 14);   // clear out
 8001a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a26:	220e      	movs	r2, #14
 8001a28:	493e      	ldr	r1, [pc, #248]	; (8001b24 <main_initial+0x2d4>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f009 fcfc 	bl	800b428 <memcpy>
		send_spi1[0]=0x03; //read page 1
 8001a30:	2303      	movs	r3, #3
 8001a32:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		send_spi1[1]=0; //24bit address msb
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
		send_spi1[2]=0; //24bit address
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		send_spi1[3]=1; //24bit address lsb
 8001a42:	2301      	movs	r3, #1
 8001a44:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4832      	ldr	r0, [pc, #200]	; (8001b18 <main_initial+0x2c8>)
 8001a4e:	f005 fdf9 	bl	8007644 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8001a52:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	2204      	movs	r2, #4
 8001a5a:	4826      	ldr	r0, [pc, #152]	; (8001af4 <main_initial+0x2a4>)
 8001a5c:	f007 fac5 	bl	8008fea <HAL_SPI_Transmit>
		HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8001a60:	2364      	movs	r3, #100	; 0x64
 8001a62:	220a      	movs	r2, #10
 8001a64:	492f      	ldr	r1, [pc, #188]	; (8001b24 <main_initial+0x2d4>)
 8001a66:	4823      	ldr	r0, [pc, #140]	; (8001af4 <main_initial+0x2a4>)
 8001a68:	f007 fbfb 	bl	8009262 <HAL_SPI_Receive>

		//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
		//HAL_Delay(5);

		//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4829      	ldr	r0, [pc, #164]	; (8001b18 <main_initial+0x2c8>)
 8001a72:	f005 fde7 	bl	8007644 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001a76:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	2201      	movs	r2, #1
 8001a80:	481c      	ldr	r0, [pc, #112]	; (8001af4 <main_initial+0x2a4>)
 8001a82:	f007 fab2 	bl	8008fea <HAL_SPI_Transmit>


	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	223c      	movs	r2, #60	; 0x3c
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f009 fcd6 	bl	800b444 <memset>
	uint16_t mem_count2=0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <main_initial+0x2d8>)
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	2240      	movs	r2, #64	; 0x40
 8001ab2:	21a0      	movs	r1, #160	; 0xa0
 8001ab4:	4816      	ldr	r0, [pc, #88]	; (8001b10 <main_initial+0x2c0>)
 8001ab6:	f006 f835 	bl	8007b24 <HAL_I2C_Mem_Read>

		uint16_t mem_counter=0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <main_initial+0x2dc>)
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <main_initial+0x2d8>)
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ad4:	c407      	stmia	r4!, {r0, r1, r2}
 8001ad6:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <main_initial+0x2e0>)
 8001ada:	22a0      	movs	r2, #160	; 0xa0
 8001adc:	4619      	mov	r1, r3
 8001ade:	4815      	ldr	r0, [pc, #84]	; (8001b34 <main_initial+0x2e4>)
 8001ae0:	f009 fca2 	bl	800b428 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001aea:	e07f      	b.n	8001bec <main_initial+0x39c>
 8001aec:	0800d2f0 	.word	0x0800d2f0
 8001af0:	20010078 	.word	0x20010078
 8001af4:	20010020 	.word	0x20010020
 8001af8:	20010118 	.word	0x20010118
 8001afc:	40000400 	.word	0x40000400
 8001b00:	200100d0 	.word	0x200100d0
 8001b04:	20010160 	.word	0x20010160
 8001b08:	2000ff24 	.word	0x2000ff24
 8001b0c:	20001804 	.word	0x20001804
 8001b10:	2000ffcc 	.word	0x2000ffcc
 8001b14:	0800b960 	.word	0x0800b960
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	20000154 	.word	0x20000154
 8001b20:	0800b968 	.word	0x0800b968
 8001b24:	20004380 	.word	0x20004380
 8001b28:	20000584 	.word	0x20000584
 8001b2c:	20005108 	.word	0x20005108
 8001b30:	20000620 	.word	0x20000620
 8001b34:	20000158 	.word	0x20000158

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001b38:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4aa9      	ldr	r2, [pc, #676]	; (8001dec <main_initial+0x59c>)
 8001b46:	1898      	adds	r0, r3, r2
 8001b48:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	332e      	adds	r3, #46	; 0x2e
 8001b56:	4aa6      	ldr	r2, [pc, #664]	; (8001df0 <main_initial+0x5a0>)
 8001b58:	4413      	add	r3, r2
 8001b5a:	2206      	movs	r2, #6
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f009 fc63 	bl	800b428 <memcpy>

			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001b62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b66:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	4aa1      	ldr	r2, [pc, #644]	; (8001df4 <main_initial+0x5a4>)
 8001b70:	1898      	adds	r0, r3, r2
 8001b72:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	336a      	adds	r3, #106	; 0x6a
 8001b7e:	4a9c      	ldr	r2, [pc, #624]	; (8001df0 <main_initial+0x5a0>)
 8001b80:	4413      	add	r3, r2
 8001b82:	2205      	movs	r2, #5
 8001b84:	4619      	mov	r1, r3
 8001b86:	f009 fc4f 	bl	800b428 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001b8a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4a98      	ldr	r2, [pc, #608]	; (8001df8 <main_initial+0x5a8>)
 8001b98:	1898      	adds	r0, r3, r2
 8001b9a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001baa:	4a91      	ldr	r2, [pc, #580]	; (8001df0 <main_initial+0x5a0>)
 8001bac:	4413      	add	r3, r2
 8001bae:	2206      	movs	r2, #6
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f009 fc39 	bl	800b428 <memcpy>
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001bb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4a8e      	ldr	r2, [pc, #568]	; (8001dfc <main_initial+0x5ac>)
 8001bc4:	1898      	adds	r0, r3, r2
 8001bc6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001bd6:	4a86      	ldr	r2, [pc, #536]	; (8001df0 <main_initial+0x5a0>)
 8001bd8:	4413      	add	r3, r2
 8001bda:	2206      	movs	r2, #6
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f009 fc23 	bl	800b428 <memcpy>
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001be2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001be6:	3301      	adds	r3, #1
 8001be8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001bec:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001bf0:	2b09      	cmp	r3, #9
 8001bf2:	d9a1      	bls.n	8001b38 <main_initial+0x2e8>

	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001bf4:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <main_initial+0x5b0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	801a      	strh	r2, [r3, #0]
 8001bfa:	e057      	b.n	8001cac <main_initial+0x45c>

		for 	(n=0;n<18;n++){					// this is ok
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <main_initial+0x5b4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	e049      	b.n	8001c98 <main_initial+0x448>
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001c04:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <main_initial+0x5b4>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d114      	bne.n	8001c36 <main_initial+0x3e6>
 8001c0c:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <main_initial+0x5b0>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <main_initial+0x5b0>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	460b      	mov	r3, r1
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4619      	mov	r1, r3
 8001c28:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <main_initial+0x5b4>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3a80      	subs	r2, #128	; 0x80
 8001c30:	b2d1      	uxtb	r1, r2
 8001c32:	4a75      	ldr	r2, [pc, #468]	; (8001e08 <main_initial+0x5b8>)
 8001c34:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <main_initial+0x5b4>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d114      	bne.n	8001c68 <main_initial+0x418>
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <main_initial+0x5b0>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3310      	adds	r3, #16
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <main_initial+0x5b0>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	460b      	mov	r3, r1
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <main_initial+0x5b4>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	440b      	add	r3, r1
 8001c60:	00d2      	lsls	r2, r2, #3
 8001c62:	b2d1      	uxtb	r1, r2
 8001c64:	4a68      	ldr	r2, [pc, #416]	; (8001e08 <main_initial+0x5b8>)
 8001c66:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <main_initial+0x5b4>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d90d      	bls.n	8001c8c <main_initial+0x43c>
 8001c70:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <main_initial+0x5b0>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <main_initial+0x5b4>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a60      	ldr	r2, [pc, #384]	; (8001e08 <main_initial+0x5b8>)
 8001c88:	21ff      	movs	r1, #255	; 0xff
 8001c8a:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001c8c:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <main_initial+0x5b4>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <main_initial+0x5b4>)
 8001c96:	801a      	strh	r2, [r3, #0]
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <main_initial+0x5b4>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	2b11      	cmp	r3, #17
 8001c9e:	d9b1      	bls.n	8001c04 <main_initial+0x3b4>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <main_initial+0x5b0>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <main_initial+0x5b0>)
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <main_initial+0x5b0>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b3f      	cmp	r3, #63	; 0x3f
 8001cb2:	d9a3      	bls.n	8001bfc <main_initial+0x3ac>

		}

		}
	seq.pos=0;
 8001cb4:	4b55      	ldr	r3, [pc, #340]	; (8001e0c <main_initial+0x5bc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001cba:	2301      	movs	r3, #1
 8001cbc:	663b      	str	r3, [r7, #96]	; 0x60


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <main_initial+0x5b0>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	801a      	strh	r2, [r3, #0]
 8001cc4:	e016      	b.n	8001cf4 <main_initial+0x4a4>
	  		tempo_hold=i;
 8001cc6:	4b4e      	ldr	r3, [pc, #312]	; (8001e00 <main_initial+0x5b0>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <main_initial+0x5c0>)
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	663b      	str	r3, [r7, #96]	; 0x60

	  	tempo_lut[i]=tempo_hold;
 8001cd8:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <main_initial+0x5b0>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <main_initial+0x5c4>)
 8001ce4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001ce8:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <main_initial+0x5b0>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <main_initial+0x5b0>)
 8001cf2:	801a      	strh	r2, [r3, #0]
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <main_initial+0x5b0>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	2bff      	cmp	r3, #255	; 0xff
 8001cfa:	d9e4      	bls.n	8001cc6 <main_initial+0x476>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001cfc:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <main_initial+0x5c8>)
 8001cfe:	2218      	movs	r2, #24
 8001d00:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001d02:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <main_initial+0x5b0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	801a      	strh	r2, [r3, #0]
 8001d08:	e00b      	b.n	8001d22 <main_initial+0x4d2>
			spell[i]=67;
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <main_initial+0x5b0>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <main_initial+0x5cc>)
 8001d12:	2143      	movs	r1, #67	; 0x43
 8001d14:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <main_initial+0x5b0>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <main_initial+0x5b0>)
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <main_initial+0x5b0>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d2a:	d3ee      	bcc.n	8001d0a <main_initial+0x4ba>

		}

		gfx_clear();
 8001d2c:	f001 ffa6 	bl	8003c7c <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001d36:	e006      	b.n	8001d46 <main_initial+0x4f6>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001d38:	f7ff f982 	bl	8001040 <menu_parser>
	for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001d3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001d40:	3301      	adds	r3, #1
 8001d42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001d46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001d4a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d4e:	d3f3      	bcc.n	8001d38 <main_initial+0x4e8>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <main_initial+0x5b0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]
 8001d56:	e00c      	b.n	8001d72 <main_initial+0x522>
	RAM[i]=0;
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <main_initial+0x5b0>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <main_initial+0x5d0>)
 8001d60:	2100      	movs	r1, #0
 8001d62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <main_initial+0x5b0>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <main_initial+0x5b0>)
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <main_initial+0x5b0>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d7a:	d3ed      	bcc.n	8001d58 <main_initial+0x508>
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <main_initial+0x5b0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e005      	b.n	8001d90 <main_initial+0x540>
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <main_initial+0x5b0>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <main_initial+0x5b0>)
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <main_initial+0x5b0>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d98:	d3f4      	bcc.n	8001d84 <main_initial+0x534>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001da0:	e00c      	b.n	8001dbc <main_initial+0x56c>
 8001da2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <main_initial+0x5d4>)
 8001dae:	2140      	movs	r1, #64	; 0x40
 8001db0:	5499      	strb	r1, [r3, r2]
 8001db2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001db6:	3301      	adds	r3, #1
 8001db8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001dbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc4:	d3ed      	bcc.n	8001da2 <main_initial+0x552>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001dc6:	4817      	ldr	r0, [pc, #92]	; (8001e24 <main_initial+0x5d4>)
 8001dc8:	f7fe fa06 	bl	80001d8 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <main_initial+0x5d8>)
 8001dd2:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <main_initial+0x5dc>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <main_initial+0x5dc>)
 8001dde:	701a      	strb	r2, [r3, #0]
			display_clear ();
 8001de0:	f001 ff8e 	bl	8003d00 <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001dea:	e030      	b.n	8001e4e <main_initial+0x5fe>
 8001dec:	20004398 	.word	0x20004398
 8001df0:	20000584 	.word	0x20000584
 8001df4:	2000467c 	.word	0x2000467c
 8001df8:	20005138 	.word	0x20005138
 8001dfc:	20004640 	.word	0x20004640
 8001e00:	200007f0 	.word	0x200007f0
 8001e04:	200007ea 	.word	0x200007ea
 8001e08:	20003ae8 	.word	0x20003ae8
 8001e0c:	20005108 	.word	0x20005108
 8001e10:	001d4c00 	.word	0x001d4c00
 8001e14:	200036e4 	.word	0x200036e4
 8001e18:	20000380 	.word	0x20000380
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20007b18 	.word	0x20007b18
 8001e24:	2000fb24 	.word	0x2000fb24
 8001e28:	200058de 	.word	0x200058de
 8001e2c:	200052cd 	.word	0x200052cd
 8001e30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e34:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <main_initial+0x620>)
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <main_initial+0x624>)
 8001e40:	2130      	movs	r1, #48	; 0x30
 8001e42:	54d1      	strb	r1, [r2, r3]
 8001e44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <main_initial+0x628>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3e9      	bcc.n	8001e30 <main_initial+0x5e0>

		menuSelect=0;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <main_initial+0x62c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <main_initial+0x630>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8001e68:	bf00      	nop
 8001e6a:	3770      	adds	r7, #112	; 0x70
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e70:	200052d0 	.word	0x200052d0
 8001e74:	2000fb24 	.word	0x2000fb24
 8001e78:	200052cd 	.word	0x200052cd
 8001e7c:	200007e4 	.word	0x200007e4
 8001e80:	200007e6 	.word	0x200007e6
 8001e84:	00000000 	.word	0x00000000

08001e88 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b0d4      	sub	sp, #336	; 0x150
 8001e8c:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8001e8e:	4b80      	ldr	r3, [pc, #512]	; (8002090 <sampling+0x208>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 8001e94:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e98:	2228      	movs	r2, #40	; 0x28
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f009 fad1 	bl	800b444 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 8001ea2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ea6:	2228      	movs	r2, #40	; 0x28
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f009 faca 	bl	800b444 <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8001eb0:	4b78      	ldr	r3, [pc, #480]	; (8002094 <sampling+0x20c>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d104      	bne.n	8001ec2 <sampling+0x3a>
 8001eb8:	4b77      	ldr	r3, [pc, #476]	; (8002098 <sampling+0x210>)
 8001eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	e002      	b.n	8001ec8 <sampling+0x40>
 8001ec2:	4b75      	ldr	r3, [pc, #468]	; (8002098 <sampling+0x210>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]

bank_write=0;
 8001ec8:	4b72      	ldr	r3, [pc, #456]	; (8002094 <sampling+0x20c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4972      	ldr	r1, [pc, #456]	; (800209c <sampling+0x214>)
 8001ed2:	4873      	ldr	r0, [pc, #460]	; (80020a0 <sampling+0x218>)
 8001ed4:	f009 faa8 	bl	800b428 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 8001ed8:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <sampling+0x21c>)
 8001eda:	2210      	movs	r2, #16
 8001edc:	4972      	ldr	r1, [pc, #456]	; (80020a8 <sampling+0x220>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f009 faa2 	bl	800b428 <memcpy>
sample_pointB=sample_pointD;
 8001ee4:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <sampling+0x210>)
 8001ee6:	881a      	ldrh	r2, [r3, #0]
 8001ee8:	4b70      	ldr	r3, [pc, #448]	; (80020ac <sampling+0x224>)
 8001eea:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <sampling+0x228>)
 8001ef4:	785b      	ldrb	r3, [r3, #1]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <sampling+0x22c>)
 8001efa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001efe:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001f02:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da00      	bge.n	8001f0c <sampling+0x84>
 8001f0a:	331f      	adds	r3, #31
 8001f0c:	115b      	asrs	r3, r3, #5
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f20:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <sampling+0x230>)
 8001f22:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001f26:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <sampling+0x230>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	eddf 6a63 	vldr	s13, [pc, #396]	; 80020bc <sampling+0x234>
 8001f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f34:	4b60      	ldr	r3, [pc, #384]	; (80020b8 <sampling+0x230>)
 8001f36:	edc3 7a00 	vstr	s15, [r3]

uint8_t looper_dat[8]={1,3,7,15};
 8001f3a:	4a61      	ldr	r2, [pc, #388]	; (80020c0 <sampling+0x238>)
 8001f3c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f44:	6018      	str	r0, [r3, #0]
 8001f46:	3304      	adds	r3, #4
 8001f48:	7019      	strb	r1, [r3, #0]
 8001f4a:	f107 03a5 	add.w	r3, r7, #165	; 0xa5
 8001f4e:	2200      	movs	r2, #0
 8001f50:	801a      	strh	r2, [r3, #0]
 8001f52:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 8001f54:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <sampling+0x23c>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d036      	beq.n	8001fce <sampling+0x146>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note
 8001f60:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <sampling+0x240>)
 8001f66:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138


						for (i=0;i<256;i++){								// 128 is 1 note
 8001f76:	4b55      	ldr	r3, [pc, #340]	; (80020cc <sampling+0x244>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	e023      	b.n	8001fc6 <sampling+0x13e>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 8001f7e:	4b53      	ldr	r3, [pc, #332]	; (80020cc <sampling+0x244>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8001f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80020d0 <sampling+0x248>
 8001f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa0:	ee17 3a90 	vmov	r3, s15
 8001fa4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8001fa8:	4b48      	ldr	r3, [pc, #288]	; (80020cc <sampling+0x244>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <sampling+0x24c>)
 8001fb6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <sampling+0x244>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b42      	ldr	r3, [pc, #264]	; (80020cc <sampling+0x244>)
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <sampling+0x244>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	d9d7      	bls.n	8001f7e <sampling+0xf6>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 8001fce:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <sampling+0x23c>)
 8001fd0:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8001fd4:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001fd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fda:	2244      	movs	r2, #68	; 0x44
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f009 fa30 	bl	800b444 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <sampling+0x244>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	e00e      	b.n	800200a <sampling+0x182>
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <sampling+0x244>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ff6:	443b      	add	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f843 2cf4 	str.w	r2, [r3, #-244]
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <sampling+0x244>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <sampling+0x244>)
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	4b30      	ldr	r3, [pc, #192]	; (80020cc <sampling+0x244>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d9ec      	bls.n	8001fec <sampling+0x164>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <sampling+0x250>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4a31      	ldr	r2, [pc, #196]	; (80020dc <sampling+0x254>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3330      	adds	r3, #48	; 0x30
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <sampling+0x258>)
 8002026:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <sampling+0x250>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <sampling+0x254>)
 8002030:	fba2 1203 	umull	r1, r2, r2, r3
 8002034:	0952      	lsrs	r2, r2, #5
 8002036:	2164      	movs	r1, #100	; 0x64
 8002038:	fb01 f202 	mul.w	r2, r1, r2
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <sampling+0x25c>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	08db      	lsrs	r3, r3, #3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3330      	adds	r3, #48	; 0x30
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <sampling+0x258>)
 8002050:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_temp%10)+48;
 8002054:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <sampling+0x250>)
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <sampling+0x25c>)
 800205a:	fba3 1302 	umull	r1, r3, r3, r2
 800205e:	08d9      	lsrs	r1, r3, #3
 8002060:	460b      	mov	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3330      	adds	r3, #48	; 0x30
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <sampling+0x258>)
 8002072:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <sampling+0x260>)
 8002078:	8b1b      	ldrh	r3, [r3, #24]
 800207a:	f5b3 5f78 	cmp.w	r3, #15872	; 0x3e00
 800207e:	d302      	bcc.n	8002086 <sampling+0x1fe>
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <sampling+0x260>)
 8002082:	2200      	movs	r2, #0
 8002084:	831a      	strh	r2, [r3, #24]
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002086:	2300      	movs	r3, #0
 8002088:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 800208c:	e12c      	b.n	80022e8 <sampling+0x460>
 800208e:	bf00      	nop
 8002090:	20004394 	.word	0x20004394
 8002094:	2000014e 	.word	0x2000014e
 8002098:	200017fe 	.word	0x200017fe
 800209c:	2000510a 	.word	0x2000510a
 80020a0:	200078f0 	.word	0x200078f0
 80020a4:	20007900 	.word	0x20007900
 80020a8:	2000511b 	.word	0x2000511b
 80020ac:	200007ee 	.word	0x200007ee
 80020b0:	20005108 	.word	0x20005108
 80020b4:	200036e4 	.word	0x200036e4
 80020b8:	20003f70 	.word	0x20003f70
 80020bc:	42a00000 	.word	0x42a00000
 80020c0:	0800b98c 	.word	0x0800b98c
 80020c4:	20003ae4 	.word	0x20003ae4
 80020c8:	006487ec 	.word	0x006487ec
 80020cc:	200007f0 	.word	0x200007f0
 80020d0:	42800000 	.word	0x42800000
 80020d4:	200038e4 	.word	0x200038e4
 80020d8:	200058e6 	.word	0x200058e6
 80020dc:	51eb851f 	.word	0x51eb851f
 80020e0:	20000584 	.word	0x20000584
 80020e4:	cccccccd 	.word	0xcccccccd
 80020e8:	20000204 	.word	0x20000204


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 80020ec:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80020f0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80020f4:	49b4      	ldr	r1, [pc, #720]	; (80023c8 <sampling+0x540>)
 80020f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002100:	443b      	add	r3, r7
 8002102:	f843 2c64 	str.w	r2, [r3, #-100]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 8002106:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800210a:	49b0      	ldr	r1, [pc, #704]	; (80023cc <sampling+0x544>)
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	440b      	add	r3, r1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <sampling+0x2aa>
 800211c:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002120:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002124:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002128:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800212c:	3114      	adds	r1, #20
 800212e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 8002132:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002136:	49a5      	ldr	r1, [pc, #660]	; (80023cc <sampling+0x544>)
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	440b      	add	r3, r1
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10d      	bne.n	8002164 <sampling+0x2dc>
 8002148:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800214c:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002150:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4419      	add	r1, r3
 8002158:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800215c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 8002164:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002168:	4998      	ldr	r1, [pc, #608]	; (80023cc <sampling+0x544>)
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	440b      	add	r3, r1
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d10d      	bne.n	8002196 <sampling+0x30e>
 800217a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800217e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002182:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4419      	add	r1, r3
 800218a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800218e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 8002196:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800219a:	498c      	ldr	r1, [pc, #560]	; (80023cc <sampling+0x544>)
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	440b      	add	r3, r1
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d11c      	bne.n	80021e6 <sampling+0x35e>
 80021ac:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80021b0:	3306      	adds	r3, #6
 80021b2:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80021b6:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4419      	add	r1, r3
 80021be:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80021c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80021ca:	4b81      	ldr	r3, [pc, #516]	; (80023d0 <sampling+0x548>)
 80021cc:	78db      	ldrb	r3, [r3, #3]
 80021ce:	b25a      	sxtb	r2, r3
 80021d0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <sampling+0x548>)
 80021e4:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 80021e6:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80021ea:	4978      	ldr	r1, [pc, #480]	; (80023cc <sampling+0x544>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	440b      	add	r3, r1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d11e      	bne.n	800223a <sampling+0x3b2>
 80021fc:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002200:	3306      	adds	r3, #6
 8002202:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002206:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4419      	add	r1, r3
 800220e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002212:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <sampling+0x548>)
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	b25a      	sxtb	r2, r3
 8002220:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	b25b      	sxtb	r3, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	b25b      	sxtb	r3, r3
 8002230:	4013      	ands	r3, r2
 8002232:	b25b      	sxtb	r3, r3
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b66      	ldr	r3, [pc, #408]	; (80023d0 <sampling+0x548>)
 8002238:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 800223a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800223e:	4963      	ldr	r1, [pc, #396]	; (80023cc <sampling+0x544>)
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	440b      	add	r3, r1
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d109      	bne.n	8002264 <sampling+0x3dc>
 8002250:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002254:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002258:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800225c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 8002264:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002268:	4958      	ldr	r1, [pc, #352]	; (80023cc <sampling+0x544>)
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	440b      	add	r3, r1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b06      	cmp	r3, #6
 8002278:	d109      	bne.n	800228e <sampling+0x406>
 800227a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800227e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002282:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002286:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800228a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>6) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800228e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002292:	494e      	ldr	r1, [pc, #312]	; (80023cc <sampling+0x544>)
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	440b      	add	r3, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d90a      	bls.n	80022ba <sampling+0x432>
 80022a4:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80022a8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80022ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022b0:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80022b4:	3114      	adds	r1, #20
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			tuned_list[pars_counter]=note[pars_counter].tuned;   // this needs to run here as well
 80022ba:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80022be:	f897 114b 	ldrb.w	r1, [r7, #331]	; 0x14b
 80022c2:	4842      	ldr	r0, [pc, #264]	; (80023cc <sampling+0x544>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4403      	add	r3, r0
 80022ce:	330c      	adds	r3, #12
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	004b      	lsls	r3, r1, #1
 80022d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022d8:	443b      	add	r3, r7
 80022da:	f823 2ca0 	strh.w	r2, [r3, #-160]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80022de:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 80022e8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	f67f aefd 	bls.w	80020ec <sampling+0x264>

 }

note_holdA=0;
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <sampling+0x54c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 80022f8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80022fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002300:	2200      	movs	r2, #0
 8002302:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002304:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002308:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800230c:	4a32      	ldr	r2, [pc, #200]	; (80023d8 <sampling+0x550>)
 800230e:	461c      	mov	r4, r3
 8002310:	4615      	mov	r5, r2
 8002312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002316:	682b      	ldr	r3, [r5, #0]
 8002318:	7023      	strb	r3, [r4, #0]
//adc_values[2]= 15; //force for now
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <sampling+0x554>)
 800231c:	791b      	ldrb	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d146      	bne.n	80023b0 <sampling+0x528>
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <sampling+0x554>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f9d8 	bl	80006e0 <__aeabi_i2d>
 8002330:	a321      	add	r3, pc, #132	; (adr r3, 80023b8 <sampling+0x530>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fd ff57 	bl	80001e8 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fa37 	bl	80007b4 <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <sampling+0x558>)
 800234a:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <sampling+0x554>)
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f9c3 	bl	80006e0 <__aeabi_i2d>
 800235a:	a319      	add	r3, pc, #100	; (adr r3, 80023c0 <sampling+0x538>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fd ff42 	bl	80001e8 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fa22 	bl	80007b4 <__aeabi_d2f>
 8002370:	4603      	mov	r3, r0
 8002372:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <sampling+0x554>)
 8002374:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <sampling+0x558>)
 8002378:	ed93 7a00 	vldr	s14, [r3]
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <sampling+0x558>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <sampling+0x558>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <sampling+0x554>)
 800238e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <sampling+0x554>)
 8002394:	edd3 7a04 	vldr	s15, [r3, #16]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <sampling+0x554>)
 800239e:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <sampling+0x554>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <sampling+0x554>)
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <sampling+0x55c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	801a      	strh	r2, [r3, #0]
 80023b6:	e0d7      	b.n	8002568 <sampling+0x6e0>
 80023b8:	47ae147b 	.word	0x47ae147b
 80023bc:	3f947ae1 	.word	0x3f947ae1
 80023c0:	47ae147b 	.word	0x47ae147b
 80023c4:	3f847ae1 	.word	0x3f847ae1
 80023c8:	20003408 	.word	0x20003408
 80023cc:	20000158 	.word	0x20000158
 80023d0:	20000204 	.word	0x20000204
 80023d4:	20003406 	.word	0x20003406
 80023d8:	0800b994 	.word	0x0800b994
 80023dc:	2000467c 	.word	0x2000467c
 80023e0:	20003f74 	.word	0x20003f74
 80023e4:	200007f0 	.word	0x200007f0

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 80023e8:	4b8b      	ldr	r3, [pc, #556]	; (8002618 <sampling+0x790>)
 80023ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ee:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800261c <sampling+0x794>
 80023f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	d50e      	bpl.n	800241a <sampling+0x592>
 80023fc:	4b86      	ldr	r3, [pc, #536]	; (8002618 <sampling+0x790>)
 80023fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002402:	4b87      	ldr	r3, [pc, #540]	; (8002620 <sampling+0x798>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	4b82      	ldr	r3, [pc, #520]	; (8002618 <sampling+0x790>)
 800240e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002412:	4b81      	ldr	r3, [pc, #516]	; (8002618 <sampling+0x790>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4a80      	ldr	r2, [pc, #512]	; (8002618 <sampling+0x790>)
 8002418:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <sampling+0x790>)
 800241c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002420:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002624 <sampling+0x79c>
 8002424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d522      	bpl.n	8002474 <sampling+0x5ec>
 800242e:	4b7a      	ldr	r3, [pc, #488]	; (8002618 <sampling+0x790>)
 8002430:	edd3 7a02 	vldr	s15, [r3, #8]
 8002434:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002628 <sampling+0x7a0>
 8002438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	dd18      	ble.n	8002474 <sampling+0x5ec>
 8002442:	4b75      	ldr	r3, [pc, #468]	; (8002618 <sampling+0x790>)
 8002444:	ed93 7a02 	vldr	s14, [r3, #8]
 8002448:	4b75      	ldr	r3, [pc, #468]	; (8002620 <sampling+0x798>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002452:	4b71      	ldr	r3, [pc, #452]	; (8002618 <sampling+0x790>)
 8002454:	edc3 7a02 	vstr	s15, [r3, #8]
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <sampling+0x790>)
 800245a:	edd3 7a02 	vldr	s15, [r3, #8]
 800245e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800262c <sampling+0x7a4>
 8002462:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002466:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002624 <sampling+0x79c>
 800246a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246e:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <sampling+0x790>)
 8002470:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <sampling+0x790>)
 8002476:	edd3 7a02 	vldr	s15, [r3, #8]
 800247a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002630 <sampling+0x7a8>
 800247e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	dd17      	ble.n	80024b8 <sampling+0x630>
 8002488:	4b63      	ldr	r3, [pc, #396]	; (8002618 <sampling+0x790>)
 800248a:	edd3 7a02 	vldr	s15, [r3, #8]
 800248e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002634 <sampling+0x7ac>
 8002492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	d50d      	bpl.n	80024b8 <sampling+0x630>
 800249c:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <sampling+0x790>)
 800249e:	4a66      	ldr	r2, [pc, #408]	; (8002638 <sampling+0x7b0>)
 80024a0:	619a      	str	r2, [r3, #24]
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <sampling+0x790>)
 80024a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80024a8:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <sampling+0x790>)
 80024aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80024ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b2:	4b59      	ldr	r3, [pc, #356]	; (8002618 <sampling+0x790>)
 80024b4:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 80024b8:	4b57      	ldr	r3, [pc, #348]	; (8002618 <sampling+0x790>)
 80024ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80024be:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800263c <sampling+0x7b4>
 80024c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	dd1e      	ble.n	800250a <sampling+0x682>
 80024cc:	4b52      	ldr	r3, [pc, #328]	; (8002618 <sampling+0x790>)
 80024ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80024d2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002640 <sampling+0x7b8>
 80024d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	d514      	bpl.n	800250a <sampling+0x682>
 80024e0:	4b4d      	ldr	r3, [pc, #308]	; (8002618 <sampling+0x790>)
 80024e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <sampling+0x790>)
 80024e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	4b49      	ldr	r3, [pc, #292]	; (8002618 <sampling+0x790>)
 80024f2:	edc3 7a02 	vstr	s15, [r3, #8]
 80024f6:	4b48      	ldr	r3, [pc, #288]	; (8002618 <sampling+0x790>)
 80024f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80024fc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002640 <sampling+0x7b8>
 8002500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <sampling+0x790>)
 8002506:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <sampling+0x790>)
 800250c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002510:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002644 <sampling+0x7bc>
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	dd06      	ble.n	800252c <sampling+0x6a4>
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <sampling+0x790>)
 8002520:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002524:	619a      	str	r2, [r3, #24]
 8002526:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <sampling+0x790>)
 8002528:	4a47      	ldr	r2, [pc, #284]	; (8002648 <sampling+0x7c0>)
 800252a:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <sampling+0x790>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f8e7 	bl	8000704 <__aeabi_f2d>
 8002536:	a336      	add	r3, pc, #216	; (adr r3, 8002610 <sampling+0x788>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fd fe54 	bl	80001e8 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4941      	ldr	r1, [pc, #260]	; (800264c <sampling+0x7c4>)
 8002546:	8809      	ldrh	r1, [r1, #0]
 8002548:	460c      	mov	r4, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe f931 	bl	80007b4 <__aeabi_d2f>
 8002552:	4602      	mov	r2, r0
 8002554:	493e      	ldr	r1, [pc, #248]	; (8002650 <sampling+0x7c8>)
 8002556:	00a3      	lsls	r3, r4, #2
 8002558:	440b      	add	r3, r1
 800255a:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <sampling+0x7c4>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b39      	ldr	r3, [pc, #228]	; (800264c <sampling+0x7c4>)
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <sampling+0x7c4>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2bff      	cmp	r3, #255	; 0xff
 800256e:	f67f af3b 	bls.w	80023e8 <sampling+0x560>
}

uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <sampling+0x7cc>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	b29b      	uxth	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	2201      	movs	r2, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <sampling+0x7c4>)
 800258c:	2200      	movs	r2, #0
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	e1f8      	b.n	8002984 <sampling+0xafc>

	i_total=i+sample_pointB;
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <sampling+0x7c4>)
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <sampling+0x7d0>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	sampling_position=i>>6;   //   0-8 steps
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <sampling+0x7c4>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b2c      	ldr	r3, [pc, #176]	; (800265c <sampling+0x7d4>)
 80025ac:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <sampling+0x7d4>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3307      	adds	r3, #7
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <sampling+0x7d8>)
 80025be:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <sampling+0x7dc>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <sampling+0x7dc>)
 80025ca:	4413      	add	r3, r2
 80025cc:	789b      	ldrb	r3, [r3, #2]
 80025ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <sampling+0x7c4>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4a23      	ldr	r2, [pc, #140]	; (8002668 <sampling+0x7e0>)
 80025da:	5cd2      	ldrb	r2, [r2, r3]
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <sampling+0x7c4>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	0912      	lsrs	r2, r2, #4
 80025e4:	b2d1      	uxtb	r1, r2
 80025e6:	4a21      	ldr	r2, [pc, #132]	; (800266c <sampling+0x7e4>)
 80025e8:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <sampling+0x7e8>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d840      	bhi.n	8002678 <sampling+0x7f0>
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <sampling+0x7ec>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <sampling+0x7ec>)
 8002606:	801a      	strh	r2, [r3, #0]
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <sampling+0x7e8>)
 800260a:	2200      	movs	r2, #0
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	e039      	b.n	8002684 <sampling+0x7fc>
 8002610:	d2f1a9fc 	.word	0xd2f1a9fc
 8002614:	3f50624d 	.word	0x3f50624d
 8002618:	2000467c 	.word	0x2000467c
 800261c:	447a0000 	.word	0x447a0000
 8002620:	20003f74 	.word	0x20003f74
 8002624:	44bb8000 	.word	0x44bb8000
 8002628:	4479c000 	.word	0x4479c000
 800262c:	43fa0000 	.word	0x43fa0000
 8002630:	44bb6000 	.word	0x44bb6000
 8002634:	44fa0000 	.word	0x44fa0000
 8002638:	43fa0000 	.word	0x43fa0000
 800263c:	44f9e000 	.word	0x44f9e000
 8002640:	451c4000 	.word	0x451c4000
 8002644:	453b8000 	.word	0x453b8000
 8002648:	457a0000 	.word	0x457a0000
 800264c:	200007f0 	.word	0x200007f0
 8002650:	20003004 	.word	0x20003004
 8002654:	20000144 	.word	0x20000144
 8002658:	200007ee 	.word	0x200007ee
 800265c:	200058e7 	.word	0x200058e7
 8002660:	200058e8 	.word	0x200058e8
 8002664:	20005108 	.word	0x20005108
 8002668:	20000584 	.word	0x20000584
 800266c:	20000384 	.word	0x20000384
 8002670:	20003430 	.word	0x20003430
 8002674:	20003404 	.word	0x20003404
 8002678:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <sampling+0x9b0>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <sampling+0x9b0>)
 8002682:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002684:	2300      	movs	r3, #0
 8002686:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800268a:	4b6c      	ldr	r3, [pc, #432]	; (800283c <sampling+0x9b4>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b6b      	ldr	r3, [pc, #428]	; (8002840 <sampling+0x9b8>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	429a      	cmp	r2, r3
 800269a:	d009      	beq.n	80026b0 <sampling+0x828>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800269c:	4b67      	ldr	r3, [pc, #412]	; (800283c <sampling+0x9b4>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b66      	ldr	r3, [pc, #408]	; (8002840 <sampling+0x9b8>)
 80026a8:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 80026b0:	f8b7 314c 	ldrh.w	r3, [r7, #332]	; 0x14c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8157 	beq.w	8002968 <sampling+0xae0>
	{
		serial_tosend=1;
 80026ba:	4b62      	ldr	r3, [pc, #392]	; (8002844 <sampling+0x9bc>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
		note_reset();
 80026c0:	f7ff f888 	bl	80017d4 <note_reset>
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works

	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80026c4:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <sampling+0x9b8>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80026d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026d6:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 80026d8:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <sampling+0x9c0>)
 80026da:	885b      	ldrh	r3, [r3, #2]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80026e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026ea:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 80026ec:	4b56      	ldr	r3, [pc, #344]	; (8002848 <sampling+0x9c0>)
 80026ee:	889b      	ldrh	r3, [r3, #4]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80026fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026fe:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 8002700:	4b51      	ldr	r3, [pc, #324]	; (8002848 <sampling+0x9c0>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	b29b      	uxth	r3, r3
 8002708:	b2da      	uxtb	r2, r3
 800270a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800270e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002712:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 8002714:	4b4d      	ldr	r3, [pc, #308]	; (800284c <sampling+0x9c4>)
 8002716:	799a      	ldrb	r2, [r3, #6]
 8002718:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800271c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	b2da      	uxtb	r2, r3
 8002726:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800272a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	4413      	add	r3, r2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <sampling+0x9b8>)
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <sampling+0x9c4>)
 8002742:	7d1a      	ldrb	r2, [r3, #20]
 8002744:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002748:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002756:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800275a:	789b      	ldrb	r3, [r3, #2]
 800275c:	4413      	add	r3, r2
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b36      	ldr	r3, [pc, #216]	; (8002840 <sampling+0x9b8>)
 8002768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 800276c:	4b37      	ldr	r3, [pc, #220]	; (800284c <sampling+0x9c4>)
 800276e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002772:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002776:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4413      	add	r3, r2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <sampling+0x9b8>)
 8002788:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <sampling+0x9c4>)
 800278e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002792:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002796:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4413      	add	r3, r2
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80027a4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027a8:	78db      	ldrb	r3, [r3, #3]
 80027aa:	4413      	add	r3, r2
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <sampling+0x9b8>)
 80027b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <sampling+0x9b8>)
 80027bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <sampling+0x9c8>)
 80027c4:	5c9a      	ldrb	r2, [r3, r2]
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <sampling+0x9c4>)
 80027c8:	795b      	ldrb	r3, [r3, #5]
 80027ca:	4413      	add	r3, r2
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <sampling+0x9c4>)
 80027d0:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <sampling+0x9b8>)
 80027d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027d8:	461a      	mov	r2, r3
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <sampling+0x9c8>)
 80027dc:	5c9a      	ldrb	r2, [r3, r2]
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <sampling+0x9c4>)
 80027e0:	7cdb      	ldrb	r3, [r3, #19]
 80027e2:	4413      	add	r3, r2
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <sampling+0x9c4>)
 80027e8:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <sampling+0x9b8>)
 80027ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <sampling+0x9c8>)
 80027f4:	5c9a      	ldrb	r2, [r3, r2]
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <sampling+0x9c4>)
 80027f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027fc:	4413      	add	r3, r2
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <sampling+0x9c4>)
 8002802:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <sampling+0x9b8>)
 8002806:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800280a:	461a      	mov	r2, r3
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <sampling+0x9c8>)
 800280e:	5c9a      	ldrb	r2, [r3, r2]
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <sampling+0x9c4>)
 8002812:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002816:	4413      	add	r3, r2
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <sampling+0x9c4>)
 800281c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

//	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
		patch_target_replace();
 8002820:	f7fe fe36 	bl	8001490 <patch_target_replace>
		uint8_t detune_temp=0;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <sampling+0x9cc>)
 800282c:	2200      	movs	r2, #0
 800282e:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002830:	2300      	movs	r3, #0
 8002832:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8002836:	e092      	b.n	800295e <sampling+0xad6>
 8002838:	20003430 	.word	0x20003430
 800283c:	20003404 	.word	0x20003404
 8002840:	20005108 	.word	0x20005108
 8002844:	20007b15 	.word	0x20007b15
 8002848:	20000144 	.word	0x20000144
 800284c:	20000158 	.word	0x20000158
 8002850:	200078f0 	.word	0x200078f0
 8002854:	20001800 	.word	0x20001800

if (note[mask_i].pitch) {
 8002858:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 800285c:	49a6      	ldr	r1, [pc, #664]	; (8002af8 <sampling+0xc70>)
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	440b      	add	r3, r1
 8002868:	3302      	adds	r3, #2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d071      	beq.n	8002954 <sampling+0xacc>

	//	note[mask_i].pitch=(note[mask_i].pitch ;

		detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
 8002870:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002874:	49a0      	ldr	r1, [pc, #640]	; (8002af8 <sampling+0xc70>)
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	440b      	add	r3, r1
 8002880:	3302      	adds	r3, #2
 8002882:	7819      	ldrb	r1, [r3, #0]
 8002884:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002888:	489b      	ldr	r0, [pc, #620]	; (8002af8 <sampling+0xc70>)
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4403      	add	r3, r0
 8002894:	3308      	adds	r3, #8
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	440b      	add	r3, r1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
		if(detune_temp>27) detune_temp=27;
 80028a4:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80028a8:	2b1b      	cmp	r3, #27
 80028aa:	d902      	bls.n	80028b2 <sampling+0xa2a>
 80028ac:	231b      	movs	r3, #27
 80028ae:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a


		note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]*126)>>7;   // put unit tune here
 80028b2:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80028b6:	4a91      	ldr	r2, [pc, #580]	; (8002afc <sampling+0xc74>)
 80028b8:	5cd3      	ldrb	r3, [r2, r3]
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b90      	ldr	r3, [pc, #576]	; (8002b00 <sampling+0xc78>)
 80028be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4613      	mov	r3, r2
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	11db      	asrs	r3, r3, #7
 80028ce:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 80028d2:	b298      	uxth	r0, r3
 80028d4:	4988      	ldr	r1, [pc, #544]	; (8002af8 <sampling+0xc70>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	440b      	add	r3, r1
 80028e0:	330c      	adds	r3, #12
 80028e2:	4602      	mov	r2, r0
 80028e4:	801a      	strh	r2, [r3, #0]
		//tuned_list[mask_i]=note[mask_i].tuned;
		if (note[mask_i].osc>=3)  note[mask_i].tuned=note[mask_i].tuned>>1;
 80028e6:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 80028ea:	4983      	ldr	r1, [pc, #524]	; (8002af8 <sampling+0xc70>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	440b      	add	r3, r1
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d916      	bls.n	800292a <sampling+0xaa2>
 80028fc:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002900:	497d      	ldr	r1, [pc, #500]	; (8002af8 <sampling+0xc70>)
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	440b      	add	r3, r1
 800290c:	330c      	adds	r3, #12
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	b298      	uxth	r0, r3
 8002918:	4977      	ldr	r1, [pc, #476]	; (8002af8 <sampling+0xc70>)
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	440b      	add	r3, r1
 8002924:	330c      	adds	r3, #12
 8002926:	4602      	mov	r2, r0
 8002928:	801a      	strh	r2, [r3, #0]
		if (sampler.one_shot &(1<<mask_i))  sine_counter[4+(mask_i*3)]=0;  // clear if one shto enabled
 800292a:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <sampling+0xc7c>)
 800292c:	78db      	ldrb	r3, [r3, #3]
 800292e:	461a      	mov	r2, r3
 8002930:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002934:	fa42 f303 	asr.w	r3, r2, r3
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d009      	beq.n	8002954 <sampling+0xacc>
 8002940:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	3304      	adds	r3, #4
 800294c:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <sampling+0xc80>)
 800294e:	2100      	movs	r1, #0
 8002950:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002954:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002958:	3301      	adds	r3, #1
 800295a:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 800295e:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002962:	2b04      	cmp	r3, #4
 8002964:	f67f af78 	bls.w	8002858 <sampling+0x9d0>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <sampling+0xc84>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <sampling+0xaf0>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 8002974:	f000 fe70 	bl	8003658 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002978:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <sampling+0xc84>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	4b62      	ldr	r3, [pc, #392]	; (8002b0c <sampling+0xc84>)
 8002982:	801a      	strh	r2, [r3, #0]
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <sampling+0xc84>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298c:	f4ff ae01 	bcc.w	8002592 <sampling+0x70a>
int32_t  sample_temp4;
int32_t  sample_temp5;


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002990:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <sampling+0xc7c>)
 8002992:	7b9b      	ldrb	r3, [r3, #14]
 8002994:	b29b      	uxth	r3, r3
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	b29a      	uxth	r2, r3
 800299a:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <sampling+0xc7c>)
 800299c:	7bdb      	ldrb	r3, [r3, #15]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <sampling+0xc7c>)
 80029a6:	80da      	strh	r2, [r3, #6]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 80029a8:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <sampling+0xc7c>)
 80029aa:	7c1b      	ldrb	r3, [r3, #16]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <sampling+0xc7c>)
 80029b4:	7c5b      	ldrb	r3, [r3, #17]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <sampling+0xc7c>)
 80029be:	811a      	strh	r2, [r3, #8]

	if ((sampler.one_shot&1) && (sine_counter[4]>(sampler.end-1000)) && (note[0].osc==3))   {note[0].tuned=0; sine_counter[4] =0;} //stop at the end
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <sampling+0xc7c>)
 80029c2:	78db      	ldrb	r3, [r3, #3]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d011      	beq.n	80029f0 <sampling+0xb68>
 80029cc:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <sampling+0xc80>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <sampling+0xc7c>)
 80029d2:	8912      	ldrh	r2, [r2, #8]
 80029d4:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 80029d8:	4293      	cmp	r3, r2
 80029da:	d909      	bls.n	80029f0 <sampling+0xb68>
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <sampling+0xc70>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d105      	bne.n	80029f0 <sampling+0xb68>
 80029e4:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <sampling+0xc70>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	819a      	strh	r2, [r3, #12]
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <sampling+0xc80>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))    note[1].tuned=0;
 80029f0:	4b44      	ldr	r3, [pc, #272]	; (8002b04 <sampling+0xc7c>)
 80029f2:	78db      	ldrb	r3, [r3, #3]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <sampling+0xb92>
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <sampling+0xc80>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a40      	ldr	r2, [pc, #256]	; (8002b04 <sampling+0xc7c>)
 8002a02:	8912      	ldrh	r2, [r2, #8]
 8002a04:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d906      	bls.n	8002a1a <sampling+0xb92>
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <sampling+0xc70>)
 8002a0e:	7b9b      	ldrb	r3, [r3, #14]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d102      	bne.n	8002a1a <sampling+0xb92>
 8002a14:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <sampling+0xc70>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	835a      	strh	r2, [r3, #26]
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))    note[2].tuned=0;
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <sampling+0xc7c>)
 8002a1c:	78db      	ldrb	r3, [r3, #3]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00e      	beq.n	8002a44 <sampling+0xbbc>
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <sampling+0xc80>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	4a36      	ldr	r2, [pc, #216]	; (8002b04 <sampling+0xc7c>)
 8002a2c:	8912      	ldrh	r2, [r2, #8]
 8002a2e:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d906      	bls.n	8002a44 <sampling+0xbbc>
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <sampling+0xc70>)
 8002a38:	7f1b      	ldrb	r3, [r3, #28]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d102      	bne.n	8002a44 <sampling+0xbbc>
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <sampling+0xc70>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))   note[3].tuned=0;
 8002a44:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <sampling+0xc7c>)
 8002a46:	78db      	ldrb	r3, [r3, #3]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00f      	beq.n	8002a70 <sampling+0xbe8>
 8002a50:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <sampling+0xc80>)
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <sampling+0xc7c>)
 8002a56:	8912      	ldrh	r2, [r2, #8]
 8002a58:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d907      	bls.n	8002a70 <sampling+0xbe8>
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <sampling+0xc70>)
 8002a62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d102      	bne.n	8002a70 <sampling+0xbe8>
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <sampling+0xc70>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	86da      	strh	r2, [r3, #54]	; 0x36

	sine_ptr_temp[0]=&sine_counter[3];
 8002a70:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <sampling+0xc88>)
 8002a7a:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002a7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a84:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <sampling+0xc8c>)
 8002a86:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002a88:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a90:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <sampling+0xc90>)
 8002a92:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002a94:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002a98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	; (8002b1c <sampling+0xc94>)
 8002a9e:	60da      	str	r2, [r3, #12]


	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002aa0:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <sampling+0xc7c>)
 8002aa2:	7b9a      	ldrb	r2, [r3, #14]
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <sampling+0xc7c>)
 8002aa6:	7c1b      	ldrb	r3, [r3, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d902      	bls.n	8002ab2 <sampling+0xc2a>
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <sampling+0xc7c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	739a      	strb	r2, [r3, #14]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <sampling+0xc7c>)
 8002ab4:	8b1a      	ldrh	r2, [r3, #24]
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <sampling+0xc7c>)
 8002ab8:	88db      	ldrh	r3, [r3, #6]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d203      	bcs.n	8002ac6 <sampling+0xc3e>
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <sampling+0xc7c>)
 8002ac0:	88da      	ldrh	r2, [r3, #6]
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <sampling+0xc7c>)
 8002ac4:	831a      	strh	r2, [r3, #24]
	if ((sampler.ram_seq+512)>sampler.end) sampler.ram_seq=sampler.start;
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <sampling+0xc7c>)
 8002ac8:	8b1b      	ldrh	r3, [r3, #24]
 8002aca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ace:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <sampling+0xc7c>)
 8002ad0:	8912      	ldrh	r2, [r2, #8]
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	db03      	blt.n	8002ade <sampling+0xc56>
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <sampling+0xc7c>)
 8002ad8:	88da      	ldrh	r2, [r3, #6]
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <sampling+0xc7c>)
 8002adc:	831a      	strh	r2, [r3, #24]

	sampler.length=sampler.end-sampler.start;
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <sampling+0xc7c>)
 8002ae0:	891a      	ldrh	r2, [r3, #8]
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <sampling+0xc7c>)
 8002ae4:	88db      	ldrh	r3, [r3, #6]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <sampling+0xc7c>)
 8002aec:	815a      	strh	r2, [r3, #10]
	 if(!note[2].tuned)	sampler_offset=(sampler.offset&15)*1024;
 8002aee:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <sampling+0xc70>)
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	e014      	b.n	8002b20 <sampling+0xc98>
 8002af6:	bf00      	nop
 8002af8:	20000158 	.word	0x20000158
 8002afc:	0800b9d0 	.word	0x0800b9d0
 8002b00:	0800b9ec 	.word	0x0800b9ec
 8002b04:	20000204 	.word	0x20000204
 8002b08:	20000784 	.word	0x20000784
 8002b0c:	200007f0 	.word	0x200007f0
 8002b10:	20000790 	.word	0x20000790
 8002b14:	2000079c 	.word	0x2000079c
 8002b18:	200007a8 	.word	0x200007a8
 8002b1c:	200007b4 	.word	0x200007b4
 8002b20:	d107      	bne.n	8002b32 <sampling+0xcaa>
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <sampling+0xd28>)
 8002b24:	791b      	ldrb	r3, [r3, #4]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <sampling+0xd2c>)
 8002b30:	601a      	str	r2, [r3, #0]

	if(sine_counter[9]<=sampler.start) sine_counter[9]=sampler.start;
 8002b32:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <sampling+0xd30>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <sampling+0xd28>)
 8002b38:	88d2      	ldrh	r2, [r2, #6]
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d804      	bhi.n	8002b48 <sampling+0xcc0>
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <sampling+0xd28>)
 8002b40:	88db      	ldrh	r3, [r3, #6]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <sampling+0xd30>)
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
	 if(note[2].tuned)		sine_counter[9]=sine_counter[9]+512;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <sampling+0xd34>)
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <sampling+0xcd4>
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <sampling+0xd30>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b58:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <sampling+0xd30>)
 8002b5a:	6253      	str	r3, [r2, #36]	; 0x24

	if (sine_counter[9]>((sampler.length+sampler.start+sampler_offset)-512))   {sine_counter[9]=sampler.start+sampler_offset; note[2].tuned=0;}
 8002b5c:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <sampling+0xd30>)
 8002b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <sampling+0xd28>)
 8002b62:	895b      	ldrh	r3, [r3, #10]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <sampling+0xd28>)
 8002b68:	88db      	ldrh	r3, [r3, #6]
 8002b6a:	440b      	add	r3, r1
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <sampling+0xd2c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	440b      	add	r3, r1
 8002b74:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d90a      	bls.n	8002b92 <sampling+0xd0a>
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <sampling+0xd28>)
 8002b7e:	88db      	ldrh	r3, [r3, #6]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <sampling+0xd2c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <sampling+0xd30>)
 8002b8a:	6253      	str	r3, [r2, #36]	; 0x24
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <sampling+0xd34>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28

	sampler.start_ptr=&RAM[sine_counter[9]-sampler_offset];
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <sampling+0xd30>)
 8002b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b96:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <sampling+0xd2c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <sampling+0xd38>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a03      	ldr	r2, [pc, #12]	; (8002bb0 <sampling+0xd28>)
 8002ba4:	6153      	str	r3, [r2, #20]
//	sampler_offset=(sampler.offset&15)*(sampler.length>>4);


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <sampling+0xd3c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e1e1      	b.n	8002f72 <sampling+0x10ea>
 8002bae:	bf00      	nop
 8002bb0:	20000204 	.word	0x20000204
 8002bb4:	2000fb18 	.word	0x2000fb18
 8002bb8:	20000784 	.word	0x20000784
 8002bbc:	20000158 	.word	0x20000158
 8002bc0:	20007b18 	.word	0x20007b18
 8002bc4:	200007f0 	.word	0x200007f0
	i_total=i+sample_pointB;
 8002bc8:	4bcf      	ldr	r3, [pc, #828]	; (8002f08 <sampling+0x1080>)
 8002bca:	881a      	ldrh	r2, [r3, #0]
 8002bcc:	4bcf      	ldr	r3, [pc, #828]	; (8002f0c <sampling+0x1084>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	sampling_position=(i>>6);
 8002bd6:	4bcc      	ldr	r3, [pc, #816]	; (8002f08 <sampling+0x1080>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4bcb      	ldr	r3, [pc, #812]	; (8002f10 <sampling+0x1088>)
 8002be2:	701a      	strb	r2, [r3, #0]
	sample_adc=input_holder[i];
 8002be4:	4bc8      	ldr	r3, [pc, #800]	; (8002f08 <sampling+0x1080>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4bca      	ldr	r3, [pc, #808]	; (8002f14 <sampling+0x108c>)
 8002bec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sample_adc=(sample_adc-2040)<<12;
 8002bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf8:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002bfc:	031b      	lsls	r3, r3, #12
 8002bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	ram_temp=((RAM[sampler.ram_seq])); // grab data
 8002c02:	4bc5      	ldr	r3, [pc, #788]	; (8002f18 <sampling+0x1090>)
 8002c04:	8b1b      	ldrh	r3, [r3, #24]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4bc4      	ldr	r3, [pc, #784]	; (8002f1c <sampling+0x1094>)
 8002c0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	ram_temp=(ram_temp-2040)<<12;
 8002c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c16:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002c1a:	031b      	lsls	r3, r3, #12
 8002c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sampler.ram_seq++;
 8002c20:	4bbd      	ldr	r3, [pc, #756]	; (8002f18 <sampling+0x1090>)
 8002c22:	8b1b      	ldrh	r3, [r3, #24]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4bbb      	ldr	r3, [pc, #748]	; (8002f18 <sampling+0x1090>)
 8002c2a:	831a      	strh	r2, [r3, #24]


	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 8002c2c:	4bb6      	ldr	r3, [pc, #728]	; (8002f08 <sampling+0x1080>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f040 8095 	bne.w	8002d64 <sampling+0xedc>
 8002c3a:	f7fe fc29 	bl	8001490 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002c3e:	4bb8      	ldr	r3, [pc, #736]	; (8002f20 <sampling+0x1098>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fd4c 	bl	80006e0 <__aeabi_i2d>
 8002c48:	a3ab      	add	r3, pc, #684	; (adr r3, 8002ef8 <sampling+0x1070>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd facb 	bl	80001e8 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7fd fdab 	bl	80007b4 <__aeabi_d2f>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	ee00 3a10 	vmov	s0, r3
 8002c64:	f008 fb6e 	bl	800b344 <arm_sin_f32>
 8002c68:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002c6c:	4ba8      	ldr	r3, [pc, #672]	; (8002f10 <sampling+0x1088>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c74:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7c:	4aa9      	ldr	r2, [pc, #676]	; (8002f24 <sampling+0x109c>)
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002c86:	4ba6      	ldr	r3, [pc, #664]	; (8002f20 <sampling+0x1098>)
 8002c88:	7a1b      	ldrb	r3, [r3, #8]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fd28 	bl	80006e0 <__aeabi_i2d>
 8002c90:	a39b      	add	r3, pc, #620	; (adr r3, 8002f00 <sampling+0x1078>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd faa7 	bl	80001e8 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f7fd fd87 	bl	80007b4 <__aeabi_d2f>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	ee00 3a10 	vmov	s0, r3
 8002cac:	f008 fb4a 	bl	800b344 <arm_sin_f32>
 8002cb0:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002cb4:	4b96      	ldr	r3, [pc, #600]	; (8002f10 <sampling+0x1088>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cbc:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc4:	4a97      	ldr	r2, [pc, #604]	; (8002f24 <sampling+0x109c>)
 8002cc6:	3309      	adds	r3, #9
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002cd0:	4b93      	ldr	r3, [pc, #588]	; (8002f20 <sampling+0x1098>)
 8002cd2:	7c1b      	ldrb	r3, [r3, #16]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fd03 	bl	80006e0 <__aeabi_i2d>
 8002cda:	a389      	add	r3, pc, #548	; (adr r3, 8002f00 <sampling+0x1078>)
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f7fd fa82 	bl	80001e8 <__aeabi_dmul>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	f7fd fd62 	bl	80007b4 <__aeabi_d2f>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	ee00 3a10 	vmov	s0, r3
 8002cf6:	f008 fb25 	bl	800b344 <arm_sin_f32>
 8002cfa:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002cfe:	4b84      	ldr	r3, [pc, #528]	; (8002f10 <sampling+0x1088>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d06:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0e:	4a85      	ldr	r2, [pc, #532]	; (8002f24 <sampling+0x109c>)
 8002d10:	3312      	adds	r3, #18
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <sampling+0x1098>)
 8002d1c:	7e1b      	ldrb	r3, [r3, #24]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fcde 	bl	80006e0 <__aeabi_i2d>
 8002d24:	a376      	add	r3, pc, #472	; (adr r3, 8002f00 <sampling+0x1078>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fa5d 	bl	80001e8 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd fd3d 	bl	80007b4 <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	ee00 3a10 	vmov	s0, r3
 8002d40:	f008 fb00 	bl	800b344 <arm_sin_f32>
 8002d44:	ed87 0a4b 	vstr	s0, [r7, #300]	; 0x12c
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002d48:	4b71      	ldr	r3, [pc, #452]	; (8002f10 <sampling+0x1088>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d50:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d58:	4a72      	ldr	r2, [pc, #456]	; (8002f24 <sampling+0x109c>)
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + tuned_list[0];  // normal adder full volume
 8002d64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002d68:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		sample_accus[1] = sample_accus[1] + tuned_list[1];
 8002d72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002d76:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		sample_accus[2] = sample_accus[2] + tuned_list[2]; // bouncing somewhere
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8002d88:	4413      	add	r3, r2
 8002d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		sample_accus[3] = sample_accus[3] + tuned_list[3];  // 7 cycles
 8002d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d92:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8002d96:	4413      	add	r3, r2
 8002d98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	if (sample_accus[0]>524287) sample_accus[0] =-1048576+sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002d9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002da0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da4:	db05      	blt.n	8002db2 <sampling+0xf2a>
 8002da6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002daa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002dae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (sample_accus[1]>524287) sample_accus[1] =-1048576+sample_accus[1] ; // faster >  than &  ,strange
 8002db2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002db6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dba:	db05      	blt.n	8002dc8 <sampling+0xf40>
 8002dbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002dc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002dc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	if (sample_accus[2]>524287) sample_accus[2] =-1048576+sample_accus[2] ; //
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dd0:	db05      	blt.n	8002dde <sampling+0xf56>
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002dda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	if (sample_accus[3]>524287) sample_accus[3] =-1048576+sample_accus[3] ; //
 8002dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002de2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002de6:	db05      	blt.n	8002df4 <sampling+0xf6c>
 8002de8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8


	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8002df4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bfb8      	it	lt
 8002dfc:	425b      	neglt	r3, r3
 8002dfe:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8002e08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bfb8      	it	lt
 8002e10:	425b      	neglt	r3, r3
 8002e12:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bfb8      	it	lt
 8002e24:	425b      	neglt	r3, r3
 8002e26:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8002e30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bfb8      	it	lt
 8002e38:	425b      	neglt	r3, r3
 8002e3a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


					//sample_Accu[6]=sine_count2(0,sine_ptr_temp[0],sine_ptr_temp[0]);  // might unroll later
				//	sample_Accu[6]=sampler_oneshot(0,sine_ptr_temp[0],sine_ptr_temp[0]);  // might unroll later
					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 8002e44:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002e48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <sampling+0x10a0>)
 8002e52:	79d2      	ldrb	r2, [r2, #7]
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp2=(sample_temp1)>>2;
 8002e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e60:	109b      	asrs	r3, r3, #2
 8002e62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				    //sample_Accu[0] =(sample_accus[0]+sample_accus[1])>>8;
					//sample_Accu[7]=sine_count2(1,sine_ptr_temp[1],sine_ptr_temp[1]);  // might unroll later // might unroll later
				//	sample_Accu[7]=sampler_oneshot(1,sine_ptr_temp[1],sine_ptr_temp[1]);  // might unroll later // might unroll later
					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8002e66:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002e6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <sampling+0x10a0>)
 8002e74:	7d52      	ldrb	r2, [r2, #21]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp3=sample_temp1>>2; // 20+8
 8002e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e82:	109b      	asrs	r3, r3, #2
 8002e84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
					//sample_Accu[1] =sample_accus[2]>>8;

					//sample_Accu[8]=sine_count2(2,sine_ptr_temp[2],sine_ptr_temp[2]);  // might unroll later // might unroll later
			//		sample_Accu[8]=sampler_oneshot(2,sine_ptr_temp[2],sine_ptr_temp[2]);  // might unroll later // might unroll later

					if (note[2].tuned) sample_Accu[8]=(*(sampler.start_ptr+i)-2040)<<11;
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <sampling+0x10a0>)
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <sampling+0x1020>
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <sampling+0x1090>)
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <sampling+0x1080>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002ea2:	02db      	lsls	r3, r3, #11
 8002ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8002ea8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002eac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <sampling+0x10a0>)
 8002eb6:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 8002ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ec6:	109b      	asrs	r3, r3, #2
 8002ec8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c


					//sample_Accu[9]=sine_count2(3,sine_ptr_temp[3],sine_ptr_temp[3]);  // might unroll later // might unroll later
				//	sample_Accu[9]=sampler_oneshot(3,sine_ptr_temp[3],sine_ptr_temp[3]);  // might unroll later // might unroll later
					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8002ecc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <sampling+0x10a0>)
 8002eda:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					sample_temp5 =sample_temp1>>2;
 8002ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002eea:	109b      	asrs	r3, r3, #2
 8002eec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <sampling+0x1080>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	e019      	b.n	8002f2c <sampling+0x10a4>
 8002ef8:	f9378ee3 	.word	0xf9378ee3
 8002efc:	3f793a2d 	.word	0x3f793a2d
 8002f00:	bc6a7efa 	.word	0xbc6a7efa
 8002f04:	3f789374 	.word	0x3f789374
 8002f08:	200007f0 	.word	0x200007f0
 8002f0c:	200007ee 	.word	0x200007ee
 8002f10:	200058e7 	.word	0x200058e7
 8002f14:	20003f7c 	.word	0x20003f7c
 8002f18:	20000204 	.word	0x20000204
 8002f1c:	20007b18 	.word	0x20007b18
 8002f20:	200001e4 	.word	0x200001e4
 8002f24:	200034c0 	.word	0x200034c0
 8002f28:	20000158 	.word	0x20000158
 8002f2c:	4a90      	ldr	r2, [pc, #576]	; (8003170 <sampling+0x12e8>)
 8002f2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 8002f36:	4b8f      	ldr	r3, [pc, #572]	; (8003174 <sampling+0x12ec>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4a8e      	ldr	r2, [pc, #568]	; (8003178 <sampling+0x12f0>)
 8002f3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 8002f46:	4b8b      	ldr	r3, [pc, #556]	; (8003174 <sampling+0x12ec>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4a8b      	ldr	r2, [pc, #556]	; (800317c <sampling+0x12f4>)
 8002f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 8002f56:	4b87      	ldr	r3, [pc, #540]	; (8003174 <sampling+0x12ec>)
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4a88      	ldr	r2, [pc, #544]	; (8003180 <sampling+0x12f8>)
 8002f5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002f66:	4b83      	ldr	r3, [pc, #524]	; (8003174 <sampling+0x12ec>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	4b81      	ldr	r3, [pc, #516]	; (8003174 <sampling+0x12ec>)
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	4b80      	ldr	r3, [pc, #512]	; (8003174 <sampling+0x12ec>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7a:	f4ff ae25 	bcc.w	8002bc8 <sampling+0xd40>
	} // end of osc , doing some sound

for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8002f84:	e011      	b.n	8002faa <sampling+0x1122>

	sample_accus_hold[pars_counter]=sample_accus[pars_counter];
 8002f86:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002f8a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002f94:	443b      	add	r3, r7
 8002f96:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8002f9a:	497a      	ldr	r1, [pc, #488]	; (8003184 <sampling+0x12fc>)
 8002f9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
for (pars_counter=0;pars_counter<4;pars_counter++)	{   // save sample_accu data
 8002fa0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8002faa:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d9e9      	bls.n	8002f86 <sampling+0x10fe>
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002fb2:	4b70      	ldr	r3, [pc, #448]	; (8003174 <sampling+0x12ec>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	801a      	strh	r2, [r3, #0]
 8002fb8:	e31e      	b.n	80035f8 <sampling+0x1770>
				i_total=i+sample_pointB;
 8002fba:	4b6e      	ldr	r3, [pc, #440]	; (8003174 <sampling+0x12ec>)
 8002fbc:	881a      	ldrh	r2, [r3, #0]
 8002fbe:	4b72      	ldr	r3, [pc, #456]	; (8003188 <sampling+0x1300>)
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

			sampling_position=(i>>6);
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <sampling+0x12ec>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b6e      	ldr	r3, [pc, #440]	; (800318c <sampling+0x1304>)
 8002fd4:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <sampling+0x12ec>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002fe4:	443b      	add	r3, r7
 8002fe6:	f853 3cf4 	ldr.w	r3, [r3, #-244]
 8002fea:	4a62      	ldr	r2, [pc, #392]	; (8003174 <sampling+0x12ec>)
 8002fec:	8812      	ldrh	r2, [r2, #0]
 8002fee:	f002 021f 	and.w	r2, r2, #31
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d10f      	bne.n	800301c <sampling+0x1194>
 8002ffc:	4b64      	ldr	r3, [pc, #400]	; (8003190 <sampling+0x1308>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	711a      	strb	r2, [r3, #4]
 8003002:	4b64      	ldr	r3, [pc, #400]	; (8003194 <sampling+0x130c>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	4b62      	ldr	r3, [pc, #392]	; (8003194 <sampling+0x130c>)
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	4b61      	ldr	r3, [pc, #388]	; (8003194 <sampling+0x130c>)
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003016:	b29a      	uxth	r2, r3
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <sampling+0x130c>)
 800301a:	801a      	strh	r2, [r3, #0]

			sample_Accu[0]=play_holder0[i];
 800301c:	4b55      	ldr	r3, [pc, #340]	; (8003174 <sampling+0x12ec>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <sampling+0x12e8>)
 8003024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003028:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			sample_Accu[1]=play_holder1[i] ; // saw
 800302c:	4b51      	ldr	r3, [pc, #324]	; (8003174 <sampling+0x12ec>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b51      	ldr	r3, [pc, #324]	; (8003178 <sampling+0x12f0>)
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			sample_Accu[2]=play_holder2[i];  // sine input
 800303c:	4b4d      	ldr	r3, [pc, #308]	; (8003174 <sampling+0x12ec>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	4b4e      	ldr	r3, [pc, #312]	; (800317c <sampling+0x12f4>)
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			sample_Accu[3]=play_holder3[i] ;
 800304c:	4b49      	ldr	r3, [pc, #292]	; (8003174 <sampling+0x12ec>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <sampling+0x12f8>)
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

			// this section is about 100 tmr cycles
			if ((i&63)==0){
 800305c:	4b45      	ldr	r3, [pc, #276]	; (8003174 <sampling+0x12ec>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 811b 	bne.w	80032a0 <sampling+0x1418>
			freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 800306a:	4b48      	ldr	r3, [pc, #288]	; (800318c <sampling+0x1304>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4a4a      	ldr	r2, [pc, #296]	; (8003198 <sampling+0x1310>)
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a49      	ldr	r2, [pc, #292]	; (800319c <sampling+0x1314>)
 8003078:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 800307a:	4b44      	ldr	r3, [pc, #272]	; (800318c <sampling+0x1304>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4a46      	ldr	r2, [pc, #280]	; (8003198 <sampling+0x1310>)
 8003080:	3309      	adds	r3, #9
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a44      	ldr	r2, [pc, #272]	; (800319c <sampling+0x1314>)
 800308a:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 800308c:	4b3f      	ldr	r3, [pc, #252]	; (800318c <sampling+0x1304>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4a41      	ldr	r2, [pc, #260]	; (8003198 <sampling+0x1310>)
 8003092:	3312      	adds	r3, #18
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a40      	ldr	r2, [pc, #256]	; (800319c <sampling+0x1314>)
 800309c:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <sampling+0x1304>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4a3d      	ldr	r2, [pc, #244]	; (8003198 <sampling+0x1310>)
 80030a4:	331b      	adds	r3, #27
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3b      	ldr	r2, [pc, #236]	; (800319c <sampling+0x1314>)
 80030ae:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 80030b0:	4b3a      	ldr	r3, [pc, #232]	; (800319c <sampling+0x1314>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	dd04      	ble.n	80030ce <sampling+0x1246>
 80030c4:	4b35      	ldr	r3, [pc, #212]	; (800319c <sampling+0x1314>)
 80030c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e00b      	b.n	80030e6 <sampling+0x125e>
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <sampling+0x1314>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030dc:	d503      	bpl.n	80030e6 <sampling+0x125e>
 80030de:	4b2f      	ldr	r3, [pc, #188]	; (800319c <sampling+0x1314>)
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 80030e6:	4b2d      	ldr	r3, [pc, #180]	; (800319c <sampling+0x1314>)
 80030e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80030ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f8:	dd04      	ble.n	8003104 <sampling+0x127c>
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <sampling+0x1314>)
 80030fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	e00b      	b.n	800311c <sampling+0x1294>
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <sampling+0x1314>)
 8003106:	edd3 7a04 	vldr	s15, [r3, #16]
 800310a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	d503      	bpl.n	800311c <sampling+0x1294>
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <sampling+0x1314>)
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <sampling+0x1314>)
 800311e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	dd04      	ble.n	800313a <sampling+0x12b2>
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <sampling+0x1314>)
 8003132:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	e00b      	b.n	8003152 <sampling+0x12ca>
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <sampling+0x1314>)
 800313c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003148:	d503      	bpl.n	8003152 <sampling+0x12ca>
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <sampling+0x1314>)
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <sampling+0x1314>)
 8003154:	edd3 7a06 	vldr	s15, [r3, #24]
 8003158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800315c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	dd1c      	ble.n	80031a0 <sampling+0x1318>
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <sampling+0x1314>)
 8003168:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800316c:	619a      	str	r2, [r3, #24]
 800316e:	e023      	b.n	80031b8 <sampling+0x1330>
 8003170:	200070ec 	.word	0x200070ec
 8003174:	200007f0 	.word	0x200007f0
 8003178:	200058ec 	.word	0x200058ec
 800317c:	200060ec 	.word	0x200060ec
 8003180:	200068ec 	.word	0x200068ec
 8003184:	20003408 	.word	0x20003408
 8003188:	200007ee 	.word	0x200007ee
 800318c:	200058e7 	.word	0x200058e7
 8003190:	2000467c 	.word	0x2000467c
 8003194:	20003550 	.word	0x20003550
 8003198:	200034c0 	.word	0x200034c0
 800319c:	200034a0 	.word	0x200034a0
 80031a0:	4bcb      	ldr	r3, [pc, #812]	; (80034d0 <sampling+0x1648>)
 80031a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80031a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ae:	d503      	bpl.n	80031b8 <sampling+0x1330>
 80031b0:	4bc7      	ldr	r3, [pc, #796]	; (80034d0 <sampling+0x1648>)
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 80031b8:	4bc5      	ldr	r3, [pc, #788]	; (80034d0 <sampling+0x1648>)
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c6:	4bc2      	ldr	r3, [pc, #776]	; (80034d0 <sampling+0x1648>)
 80031c8:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 80031cc:	4bc0      	ldr	r3, [pc, #768]	; (80034d0 <sampling+0x1648>)
 80031ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80031d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031da:	4bbd      	ldr	r3, [pc, #756]	; (80034d0 <sampling+0x1648>)
 80031dc:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 80031e0:	4bbb      	ldr	r3, [pc, #748]	; (80034d0 <sampling+0x1648>)
 80031e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80031e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ee:	4bb8      	ldr	r3, [pc, #736]	; (80034d0 <sampling+0x1648>)
 80031f0:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 80031f4:	4bb6      	ldr	r3, [pc, #728]	; (80034d0 <sampling+0x1648>)
 80031f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80031fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003202:	4bb3      	ldr	r3, [pc, #716]	; (80034d0 <sampling+0x1648>)
 8003204:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003208:	4bb1      	ldr	r3, [pc, #708]	; (80034d0 <sampling+0x1648>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fa79 	bl	8000704 <__aeabi_f2d>
 8003212:	a3ad      	add	r3, pc, #692	; (adr r3, 80034c8 <sampling+0x1640>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fc ffe6 	bl	80001e8 <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f7fd fac6 	bl	80007b4 <__aeabi_d2f>
 8003228:	4603      	mov	r3, r0
 800322a:	4aaa      	ldr	r2, [pc, #680]	; (80034d4 <sampling+0x164c>)
 800322c:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 800322e:	4ba8      	ldr	r3, [pc, #672]	; (80034d0 <sampling+0x1648>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd fa66 	bl	8000704 <__aeabi_f2d>
 8003238:	a3a3      	add	r3, pc, #652	; (adr r3, 80034c8 <sampling+0x1640>)
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f7fc ffd3 	bl	80001e8 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f7fd fab3 	bl	80007b4 <__aeabi_d2f>
 800324e:	4603      	mov	r3, r0
 8003250:	4aa0      	ldr	r2, [pc, #640]	; (80034d4 <sampling+0x164c>)
 8003252:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003254:	4b9e      	ldr	r3, [pc, #632]	; (80034d0 <sampling+0x1648>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fa53 	bl	8000704 <__aeabi_f2d>
 800325e:	a39a      	add	r3, pc, #616	; (adr r3, 80034c8 <sampling+0x1640>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fc ffc0 	bl	80001e8 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f7fd faa0 	bl	80007b4 <__aeabi_d2f>
 8003274:	4603      	mov	r3, r0
 8003276:	4a97      	ldr	r2, [pc, #604]	; (80034d4 <sampling+0x164c>)
 8003278:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 800327a:	4b95      	ldr	r3, [pc, #596]	; (80034d0 <sampling+0x1648>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd fa40 	bl	8000704 <__aeabi_f2d>
 8003284:	a390      	add	r3, pc, #576	; (adr r3, 80034c8 <sampling+0x1640>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fc ffad 	bl	80001e8 <__aeabi_dmul>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f7fd fa8d 	bl	80007b4 <__aeabi_d2f>
 800329a:	4603      	mov	r3, r0
 800329c:	4a8d      	ldr	r2, [pc, #564]	; (80034d4 <sampling+0x164c>)
 800329e:	60d3      	str	r3, [r2, #12]
		//freq_point[0]=0.50;

   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 80032a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ac:	4b8a      	ldr	r3, [pc, #552]	; (80034d8 <sampling+0x1650>)
 80032ae:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 80032b2:	4b89      	ldr	r3, [pc, #548]	; (80034d8 <sampling+0x1650>)
 80032b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80032b8:	4b87      	ldr	r3, [pc, #540]	; (80034d8 <sampling+0x1650>)
 80032ba:	edd3 6a03 	vldr	s13, [r3, #12]
 80032be:	4b85      	ldr	r3, [pc, #532]	; (80034d4 <sampling+0x164c>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032cc:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <sampling+0x1650>)
 80032ce:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 80032d2:	4b81      	ldr	r3, [pc, #516]	; (80034d8 <sampling+0x1650>)
 80032d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80032d8:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <sampling+0x1648>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e2:	4b7d      	ldr	r3, [pc, #500]	; (80034d8 <sampling+0x1650>)
 80032e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80032e8:	4b79      	ldr	r3, [pc, #484]	; (80034d0 <sampling+0x1648>)
 80032ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f6:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <sampling+0x1650>)
 80032f8:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80032fc:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <sampling+0x1650>)
 80032fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8003302:	4b73      	ldr	r3, [pc, #460]	; (80034d0 <sampling+0x1648>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330c:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <sampling+0x1650>)
 800330e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003312:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <sampling+0x1648>)
 8003314:	edd3 7a01 	vldr	s15, [r3, #4]
 8003318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800331c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003320:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <sampling+0x1650>)
 8003322:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 8003326:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <sampling+0x1650>)
 8003328:	edd3 7a03 	vldr	s15, [r3, #12]
 800332c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003330:	ee17 3a90 	vmov	r3, s15
 8003334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 8003338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003344:	4b64      	ldr	r3, [pc, #400]	; (80034d8 <sampling+0x1650>)
 8003346:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <sampling+0x1650>)
 800334c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003350:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <sampling+0x1650>)
 8003352:	edd3 6a06 	vldr	s13, [r3, #24]
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <sampling+0x164c>)
 8003358:	edd3 7a01 	vldr	s15, [r3, #4]
 800335c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003364:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <sampling+0x1650>)
 8003366:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800336a:	4b5b      	ldr	r3, [pc, #364]	; (80034d8 <sampling+0x1650>)
 800336c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003370:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <sampling+0x1648>)
 8003372:	edd3 7a02 	vldr	s15, [r3, #8]
 8003376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800337a:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <sampling+0x1650>)
 800337c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <sampling+0x1648>)
 8003382:	edd3 7a03 	vldr	s15, [r3, #12]
 8003386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800338a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338e:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <sampling+0x1650>)
 8003390:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003394:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <sampling+0x1650>)
 8003396:	ed93 7a05 	vldr	s14, [r3, #20]
 800339a:	4b4d      	ldr	r3, [pc, #308]	; (80034d0 <sampling+0x1648>)
 800339c:	edd3 7a02 	vldr	s15, [r3, #8]
 80033a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a4:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <sampling+0x1650>)
 80033a6:	edd3 6a06 	vldr	s13, [r3, #24]
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <sampling+0x1648>)
 80033ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80033b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b8:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <sampling+0x1650>)
 80033ba:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 80033be:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <sampling+0x1650>)
 80033c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80033c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033c8:	ee17 3a90 	vmov	r3, s15
 80033cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		filter_accus[7]=sample_Accu[2];
 80033d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033dc:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <sampling+0x1650>)
 80033de:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <sampling+0x1650>)
 80033e4:	ed93 7a07 	vldr	s14, [r3, #28]
 80033e8:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <sampling+0x1650>)
 80033ea:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80033ee:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <sampling+0x164c>)
 80033f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <sampling+0x1650>)
 80033fe:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 8003402:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <sampling+0x1650>)
 8003404:	ed93 7a07 	vldr	s14, [r3, #28]
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <sampling+0x1648>)
 800340a:	edd3 7a04 	vldr	s15, [r3, #16]
 800340e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003412:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <sampling+0x1650>)
 8003414:	edd3 6a08 	vldr	s13, [r3, #32]
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <sampling+0x1648>)
 800341a:	edd3 7a05 	vldr	s15, [r3, #20]
 800341e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <sampling+0x1650>)
 8003428:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 800342c:	4b2a      	ldr	r3, [pc, #168]	; (80034d8 <sampling+0x1650>)
 800342e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003432:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <sampling+0x1648>)
 8003434:	edd3 7a04 	vldr	s15, [r3, #16]
 8003438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800343c:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <sampling+0x1650>)
 800343e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003442:	4b23      	ldr	r3, [pc, #140]	; (80034d0 <sampling+0x1648>)
 8003444:	edd3 7a05 	vldr	s15, [r3, #20]
 8003448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <sampling+0x1650>)
 8003452:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <sampling+0x1650>)
 8003458:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800345c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003460:	ee17 3a90 	vmov	r3, s15
 8003464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

				filter_accus[10]=sample_Accu[3];
 8003468:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <sampling+0x1650>)
 8003476:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <sampling+0x1650>)
 800347c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <sampling+0x1650>)
 8003482:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <sampling+0x164c>)
 8003488:	edd3 7a03 	vldr	s15, [r3, #12]
 800348c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <sampling+0x1650>)
 8003496:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <sampling+0x1650>)
 800349c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <sampling+0x1648>)
 80034a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80034a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <sampling+0x1650>)
 80034ac:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <sampling+0x1648>)
 80034b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80034b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <sampling+0x1650>)
 80034c0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80034c4:	e00a      	b.n	80034dc <sampling+0x1654>
 80034c6:	bf00      	nop
 80034c8:	9999999a 	.word	0x9999999a
 80034cc:	3fc99999 	.word	0x3fc99999
 80034d0:	200034a0 	.word	0x200034a0
 80034d4:	20003450 	.word	0x20003450
 80034d8:	20003464 	.word	0x20003464
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <sampling+0x17a4>)
 80034de:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80034e2:	4b53      	ldr	r3, [pc, #332]	; (8003630 <sampling+0x17a8>)
 80034e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80034e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ec:	4b4f      	ldr	r3, [pc, #316]	; (800362c <sampling+0x17a4>)
 80034ee:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80034f2:	4b4f      	ldr	r3, [pc, #316]	; (8003630 <sampling+0x17a8>)
 80034f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80034f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003500:	4b4a      	ldr	r3, [pc, #296]	; (800362c <sampling+0x17a4>)
 8003502:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 8003506:	4b49      	ldr	r3, [pc, #292]	; (800362c <sampling+0x17a4>)
 8003508:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800350c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003510:	ee17 3a90 	vmov	r3, s15
 8003514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


		filter_Accu=filter_Accu2=0;
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800351e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003522:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 8003526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800352a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800352e:	4413      	add	r3, r2
 8003530:	141b      	asrs	r3, r3, #16
 8003532:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 8003536:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800353a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800353e:	4413      	add	r3, r2
 8003540:	141b      	asrs	r3, r3, #16
 8003542:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <sampling+0x17ac>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2bc7      	cmp	r3, #199	; 0xc7
 800354c:	d005      	beq.n	800355a <sampling+0x16d2>
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <sampling+0x17ac>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <sampling+0x17ac>)
 8003558:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 800355a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003562:	db0a      	blt.n	800357a <sampling+0x16f2>
 8003564:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003568:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <sampling+0x17b0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	4b30      	ldr	r3, [pc, #192]	; (8003638 <sampling+0x17b0>)
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e007      	b.n	800358a <sampling+0x1702>
 800357a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800357e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003582:	dc02      	bgt.n	800358a <sampling+0x1702>
 8003584:	4b2d      	ldr	r3, [pc, #180]	; (800363c <sampling+0x17b4>)
 8003586:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 800358a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	db0a      	blt.n	80035aa <sampling+0x1722>
 8003594:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003598:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <sampling+0x17b0>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <sampling+0x17b0>)
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e007      	b.n	80035ba <sampling+0x1732>
 80035aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80035ae:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80035b2:	dc02      	bgt.n	80035ba <sampling+0x1732>
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <sampling+0x17b4>)
 80035b6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 80035ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035be:	b29a      	uxth	r2, r3
 80035c0:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80035ca:	b291      	uxth	r1, r2
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <sampling+0x17b8>)
 80035ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80035d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	3301      	adds	r3, #1
 80035e0:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80035e4:	b291      	uxth	r1, r2
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <sampling+0x17b8>)
 80035e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <sampling+0x17bc>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <sampling+0x17bc>)
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <sampling+0x17bc>)
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	f4ff acdb 	bcc.w	8002fba <sampling+0x1132>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8003604:	4b10      	ldr	r3, [pc, #64]	; (8003648 <sampling+0x17c0>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <sampling+0x1790>
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <sampling+0x17c4>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <sampling+0x17c4>)
 8003616:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <sampling+0x17c8>)
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <sampling+0x17cc>)
 800361e:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 8003620:	bf00      	nop
 8003622:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8003626:	46bd      	mov	sp, r7
 8003628:	bdb0      	pop	{r4, r5, r7, pc}
 800362a:	bf00      	nop
 800362c:	20003464 	.word	0x20003464
 8003630:	200034a0 	.word	0x200034a0
 8003634:	20003420 	.word	0x20003420
 8003638:	200078ec 	.word	0x200078ec
 800363c:	fffffc01 	.word	0xfffffc01
 8003640:	200007f4 	.word	0x200007f4
 8003644:	200007f0 	.word	0x200007f0
 8003648:	2000014e 	.word	0x2000014e
 800364c:	20004396 	.word	0x20004396
 8003650:	20004394 	.word	0x20004394
 8003654:	20004390 	.word	0x20004390

08003658 <LFO_source>:
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }


void LFO_source(void){     // lfo
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b08d      	sub	sp, #52	; 0x34
 800365c:	af00      	add	r7, sp, #0


float	freq_temp=0;
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
float 	freq2_temp=0;
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t 	freq_saw=0;
 800366a:	2300      	movs	r3, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
uint8_t lfo_c ;
float offset=0;
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800367a:	e15a      	b.n	8003932 <LFO_source+0x2da>

	lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
 800367c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003680:	4bb3      	ldr	r3, [pc, #716]	; (8003950 <LFO_source+0x2f8>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	49b3      	ldr	r1, [pc, #716]	; (8003954 <LFO_source+0x2fc>)
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4403      	add	r3, r0
 8003692:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003696:	623b      	str	r3, [r7, #32]

	freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate] ;  // rate. this needs a little log
 8003698:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800369c:	49ae      	ldr	r1, [pc, #696]	; (8003958 <LFO_source+0x300>)
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	4bab      	ldr	r3, [pc, #684]	; (800395c <LFO_source+0x304>)
 80036ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80036b2:	60fb      	str	r3, [r7, #12]
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 really
	delay_value=(freq3_temp*8)*(LFO[lfo_c].delay&15);
 80036b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80036b8:	49a7      	ldr	r1, [pc, #668]	; (8003958 <LFO_source+0x300>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3304      	adds	r3, #4
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	60bb      	str	r3, [r7, #8]

			freq3_temp=lfo_accu_temp+ freq3_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	4413      	add	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>(1647099+delay_value)) lfo_accu_temp=0+delay_value ; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f503 13c9 	add.w	r3, r3, #1646592	; 0x192000
 80036e4:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d902      	bls.n	80036f4 <LFO_source+0x9c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	e001      	b.n	80036f8 <LFO_source+0xa0>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	623b      	str	r3, [r7, #32]


		if((!next_isr) && (!sampling_position))  lfo_accu_temp=20000;   // tempo sync, mediocre
 80036f8:	4b99      	ldr	r3, [pc, #612]	; (8003960 <LFO_source+0x308>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <LFO_source+0xb6>
 8003700:	4b98      	ldr	r3, [pc, #608]	; (8003964 <LFO_source+0x30c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <LFO_source+0xb6>
 8003708:	f644 6320 	movw	r3, #20000	; 0x4e20
 800370c:	623b      	str	r3, [r7, #32]
		lfo_accu[lfo_c][sampling_position]=lfo_accu_temp;
 800370e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003712:	4b94      	ldr	r3, [pc, #592]	; (8003964 <LFO_source+0x30c>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	498e      	ldr	r1, [pc, #568]	; (8003954 <LFO_source+0x2fc>)
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4403      	add	r3, r0
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp-delay_value;
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003738:	edc7 7a05 	vstr	s15, [r7, #20]
		freq2_temp=(freq_temp*0.000003814697);  //0-360  , <<18
 800373c:	6978      	ldr	r0, [r7, #20]
 800373e:	f7fc ffe1 	bl	8000704 <__aeabi_f2d>
 8003742:	a381      	add	r3, pc, #516	; (adr r3, 8003948 <LFO_source+0x2f0>)
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f7fc fd4e 	bl	80001e8 <__aeabi_dmul>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd f82e 	bl	80007b4 <__aeabi_d2f>
 8003758:	4603      	mov	r3, r0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
		freq_temp_saw=freq2_temp*10430;
 800375c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003760:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003968 <LFO_source+0x310>
 8003764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376c:	ee17 3a90 	vmov	r3, s15
 8003770:	61bb      	str	r3, [r7, #24]
		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 8003772:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003776:	f007 fde5 	bl	800b344 <arm_sin_f32>
 800377a:	ed87 0a05 	vstr	s0, [r7, #20]
		freq2_temp=freq_temp*LFO[lfo_c].depth*204;
 800377e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003782:	4975      	ldr	r1, [pc, #468]	; (8003958 <LFO_source+0x300>)
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	3301      	adds	r3, #1
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800379a:	edd7 7a05 	vldr	s15, [r7, #20]
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800396c <LFO_source+0x314>
 80037a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	//	if (!LFO[lfo_c].offset)    LFO[lfo_c].offset=0;   // se
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 80037ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037b2:	4969      	ldr	r1, [pc, #420]	; (8003958 <LFO_source+0x300>)
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3303      	adds	r3, #3
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037cc:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 80037d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80037d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037d8:	ee17 3a90 	vmov	r3, s15
 80037dc:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq2_temp+offset);
 80037de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80037e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>32766)  freq2_temp=32767;
 80037ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037f2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003970 <LFO_source+0x318>
 80037f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fe:	dd01      	ble.n	8003804 <LFO_source+0x1ac>
 8003800:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <LFO_source+0x31c>)
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000
 8003804:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003808:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003978 <LFO_source+0x320>
 800380c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003814:	d501      	bpl.n	800381a <LFO_source+0x1c2>
 8003816:	4b59      	ldr	r3, [pc, #356]	; (800397c <LFO_source+0x324>)
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c

						output_hold=freq2_temp;
 800381a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800381e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003822:	ee17 3a90 	vmov	r3, s15
 8003826:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800382e:	4293      	cmp	r3, r2
 8003830:	d902      	bls.n	8003838 <LFO_source+0x1e0>
 8003832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003836:	61bb      	str	r3, [r7, #24]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003838:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800383c:	4946      	ldr	r1, [pc, #280]	; (8003958 <LFO_source+0x300>)
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3301      	adds	r3, #1
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003862:	4293      	cmp	r3, r2
 8003864:	d902      	bls.n	800386c <LFO_source+0x214>
 8003866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold+32767; // sine out
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003872:	493c      	ldr	r1, [pc, #240]	; (8003964 <LFO_source+0x30c>)
 8003874:	7809      	ldrb	r1, [r1, #0]
 8003876:	460c      	mov	r4, r1
 8003878:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800387c:	337f      	adds	r3, #127	; 0x7f
 800387e:	b298      	uxth	r0, r3
 8003880:	4935      	ldr	r1, [pc, #212]	; (8003958 <LFO_source+0x300>)
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	4413      	add	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4423      	add	r3, r4
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	440b      	add	r3, r1
 8003890:	4602      	mov	r2, r0
 8003892:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003894:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003898:	4b32      	ldr	r3, [pc, #200]	; (8003964 <LFO_source+0x30c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	461c      	mov	r4, r3
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	b298      	uxth	r0, r3
 80038a2:	492d      	ldr	r1, [pc, #180]	; (8003958 <LFO_source+0x300>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4423      	add	r3, r4
 80038ae:	330c      	adds	r3, #12
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	440b      	add	r3, r1
 80038b4:	4602      	mov	r2, r0
 80038b6:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038be:	d202      	bcs.n	80038c6 <LFO_source+0x26e>
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	e003      	b.n	80038ce <LFO_source+0x276>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80038cc:	61fb      	str	r3, [r7, #28]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 80038ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80038d2:	4921      	ldr	r1, [pc, #132]	; (8003958 <LFO_source+0x300>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3301      	adds	r3, #1
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	11db      	asrs	r3, r3, #7
 80038ec:	461a      	mov	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	61fb      	str	r3, [r7, #28]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038fa:	4293      	cmp	r3, r2
 80038fc:	dd02      	ble.n	8003904 <LFO_source+0x2ac>
 80038fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003902:	61fb      	str	r3, [r7, #28]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003904:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <LFO_source+0x30c>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461c      	mov	r4, r3
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	b298      	uxth	r0, r3
 8003912:	4911      	ldr	r1, [pc, #68]	; (8003958 <LFO_source+0x300>)
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	4413      	add	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4423      	add	r3, r4
 800391e:	3314      	adds	r3, #20
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	4602      	mov	r2, r0
 8003926:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800392c:	3301      	adds	r3, #1
 800392e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003936:	2b09      	cmp	r3, #9
 8003938:	f67f aea0 	bls.w	800367c <LFO_source+0x24>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3734      	adds	r7, #52	; 0x34
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	da9dd9cd 	.word	0xda9dd9cd
 800394c:	3ecfffff 	.word	0x3ecfffff
 8003950:	200058e8 	.word	0x200058e8
 8003954:	20003554 	.word	0x20003554
 8003958:	20004398 	.word	0x20004398
 800395c:	200038e4 	.word	0x200038e4
 8003960:	20003404 	.word	0x20003404
 8003964:	200058e7 	.word	0x200058e7
 8003968:	4622f800 	.word	0x4622f800
 800396c:	434c0000 	.word	0x434c0000
 8003970:	46fffc00 	.word	0x46fffc00
 8003974:	46fffe00 	.word	0x46fffe00
 8003978:	c6fffc00 	.word	0xc6fffc00
 800397c:	c6fffe00 	.word	0xc6fffe00

08003980 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
		default_menu3[feedback_loc+18]=potSource[380]+48;
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
*/


}   // end o void
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003996:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <displayBuffer2+0xe8>)
 8003998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399c:	461a      	mov	r2, r3
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <displayBuffer2+0xec>)
 80039a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	336b      	adds	r3, #107	; 0x6b
 80039ae:	80fb      	strh	r3, [r7, #6]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 80039b0:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <displayBuffer2+0xe8>)
 80039b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <displayBuffer2+0xec>)
 80039ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	717b      	strb	r3, [r7, #5]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 80039c2:	797b      	ldrb	r3, [r7, #5]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4a2e      	ldr	r2, [pc, #184]	; (8003a80 <displayBuffer2+0xf0>)
 80039c8:	4413      	add	r3, r2
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <displayBuffer2+0xf4>)
 80039ce:	6810      	ldr	r0, [r2, #0]
 80039d0:	6851      	ldr	r1, [r2, #4]
 80039d2:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80039d4:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <displayBuffer2+0xf8>)
 80039d6:	463b      	mov	r3, r7
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	4611      	mov	r1, r2
 80039dc:	8019      	strh	r1, [r3, #0]
 80039de:	3302      	adds	r3, #2
 80039e0:	0c12      	lsrs	r2, r2, #16
 80039e2:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <displayBuffer2+0xe8>)
 80039e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <displayBuffer2+0xfc>)
 80039f0:	4413      	add	r3, r2
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80039f8:	463b      	mov	r3, r7
 80039fa:	4618      	mov	r0, r3
 80039fc:	f007 fce6 	bl	800b3cc <atoi>
 8003a00:	4603      	mov	r3, r0
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <displayBuffer2+0x100>)
 8003a06:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <displayBuffer2+0x100>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	481d      	ldr	r0, [pc, #116]	; (8003a84 <displayBuffer2+0xf4>)
 8003a10:	f7fd f8a2 	bl	8000b58 <menu_vars>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <displayBuffer2+0x104>)
 8003a18:	6013      	str	r3, [r2, #0]

	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <displayBuffer2+0x108>)
 8003a20:	1898      	adds	r0, r3, r2
 8003a22:	797b      	ldrb	r3, [r7, #5]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <displayBuffer2+0xf0>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f007 fcfa 	bl	800b428 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	3311      	adds	r3, #17
 8003a38:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <displayBuffer2+0x108>)
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4917      	ldr	r1, [pc, #92]	; (8003a9c <displayBuffer2+0x10c>)
 8003a3e:	2203      	movs	r2, #3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f007 fcf1 	bl	800b428 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	3305      	adds	r3, #5
 8003a4a:	4a13      	ldr	r2, [pc, #76]	; (8003a98 <displayBuffer2+0x108>)
 8003a4c:	4413      	add	r3, r2
 8003a4e:	883a      	ldrh	r2, [r7, #0]
 8003a50:	801a      	strh	r2, [r3, #0]

	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <displayBuffer2+0x110>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b11      	cmp	r3, #17
 8003a58:	d103      	bne.n	8003a62 <displayBuffer2+0xd2>
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <displayBuffer2+0x110>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8003a60:	e005      	b.n	8003a6e <displayBuffer2+0xde>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003a62:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <displayBuffer2+0x110>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <displayBuffer2+0x110>)
 8003a6c:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000220 	.word	0x20000220
 8003a7c:	200052d0 	.word	0x200052d0
 8003a80:	2000022c 	.word	0x2000022c
 8003a84:	200058d4 	.word	0x200058d4
 8003a88:	0800b9a8 	.word	0x0800b9a8
 8003a8c:	200056d0 	.word	0x200056d0
 8003a90:	200058dc 	.word	0x200058dc
 8003a94:	200058d0 	.word	0x200058d0
 8003a98:	2000fb24 	.word	0x2000fb24
 8003a9c:	20000700 	.word	0x20000700
 8003aa0:	20000151 	.word	0x20000151

08003aa4 <SPI_command>:

void SPI_command(void){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <SPI_command+0x68>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d128      	bne.n	8003b04 <SPI_command+0x60>
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <SPI_command+0x6c>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d124      	bne.n	8003b04 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003aba:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <SPI_command+0x70>)
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <SPI_command+0x2a>
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <SPI_command+0x74>)
 8003ac8:	22f8      	movs	r2, #248	; 0xf8
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <SPI_command+0x30>
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <SPI_command+0x74>)
 8003ad0:	22fa      	movs	r2, #250	; 0xfa
 8003ad2:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8003ad4:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <SPI_command+0x74>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <SPI_command+0x70>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <SPI_command+0x70>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8003af2:	4639      	mov	r1, r7
 8003af4:	2303      	movs	r3, #3
 8003af6:	2203      	movs	r2, #3
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <SPI_command+0x78>)
 8003afa:	f005 fa76 	bl	8008fea <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8003afe:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <SPI_command+0x68>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	801a      	strh	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20003434 	.word	0x20003434
 8003b10:	2000343a 	.word	0x2000343a
 8003b14:	20003438 	.word	0x20003438
 8003b18:	20003436 	.word	0x20003436
 8003b1c:	20010078 	.word	0x20010078

08003b20 <display_init>:

void display_init(void){
 8003b20:	b5b0      	push	{r4, r5, r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <display_init+0x90>)
 8003b28:	1d3c      	adds	r4, r7, #4
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <display_init+0x94>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d132      	bne.n	8003ba6 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <display_init+0x98>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b06      	subs	r3, #6
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <display_init+0x9c>)
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	f7ff ff1f 	bl	8003990 <displayBuffer2>
 8003b52:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <display_init+0x9c>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <display_init+0xa0>)
 8003b5a:	5c9b      	ldrb	r3, [r3, r2]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <display_init+0xa4>)
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <display_init+0x98>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d80b      	bhi.n	8003b84 <display_init+0x64>
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f001 fe5f 	bl	8005830 <HAL_Delay>
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <display_init+0x98>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	3328      	adds	r3, #40	; 0x28
 8003b7a:	443b      	add	r3, r7
 8003b7c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <display_init+0xa4>)
 8003b82:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <display_init+0x98>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <display_init+0x98>)
 8003b8e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <display_init+0x94>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	f7ff ff85 	bl	8003aa4 <SPI_command>
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <display_init+0x94>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <display_init+0xa8>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bdb0      	pop	{r4, r5, r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	0800b9ac 	.word	0x0800b9ac
 8003bb4:	2000343a 	.word	0x2000343a
 8003bb8:	2000343b 	.word	0x2000343b
 8003bbc:	2000343c 	.word	0x2000343c
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	20003438 	.word	0x20003438
 8003bc8:	20003434 	.word	0x20003434

08003bcc <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <gfx_send+0x9c>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <gfx_send+0xa0>)
 8003bde:	5c9b      	ldrb	r3, [r3, r2]
 8003be0:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <gfx_send+0xa4>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d902      	bls.n	8003bf0 <gfx_send+0x24>
 8003bea:	23fa      	movs	r3, #250	; 0xfa
 8003bec:	71fb      	strb	r3, [r7, #7]
 8003bee:	e001      	b.n	8003bf4 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003bf0:	23f8      	movs	r3, #248	; 0xf8
 8003bf2:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 8003bf8:	79bb      	ldrb	r3, [r7, #6]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 8003c04:	79bb      	ldrb	r3, [r7, #6]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 8003c0c:	4639      	mov	r1, r7
 8003c0e:	2303      	movs	r3, #3
 8003c10:	2203      	movs	r2, #3
 8003c12:	4818      	ldr	r0, [pc, #96]	; (8003c74 <gfx_send+0xa8>)
 8003c14:	f005 f9e9 	bl	8008fea <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 8003c18:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <gfx_send+0xa4>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b11      	cmp	r3, #17
 8003c1e:	d103      	bne.n	8003c28 <gfx_send+0x5c>
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <gfx_send+0xa4>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e005      	b.n	8003c34 <gfx_send+0x68>
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <gfx_send+0xa4>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <gfx_send+0xa4>)
 8003c32:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <gfx_send+0x9c>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f240 427f 	movw	r2, #1151	; 0x47f
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d109      	bne.n	8003c54 <gfx_send+0x88>
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <gfx_send+0x9c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <gfx_send+0xac>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <gfx_send+0xa4>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]

		}
 8003c52:	e005      	b.n	8003c60 <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <gfx_send+0x9c>)
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <gfx_send+0x9c>)
 8003c5e:	801a      	strh	r2, [r3, #0]
		}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20003f6a 	.word	0x20003f6a
 8003c6c:	20003ae8 	.word	0x20003ae8
 8003c70:	20003f6c 	.word	0x20003f6c
 8003c74:	20010078 	.word	0x20010078
 8003c78:	20003f7a 	.word	0x20003f7a

08003c7c <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <gfx_clear+0x6c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e01c      	b.n	8003cc2 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8003c88:	4b18      	ldr	r3, [pc, #96]	; (8003cec <gfx_clear+0x70>)
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	e00e      	b.n	8003cae <gfx_clear+0x32>
 8003c90:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <gfx_clear+0x6c>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <gfx_clear+0x70>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <gfx_clear+0x74>)
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	54d1      	strb	r1, [r2, r3]
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <gfx_clear+0x70>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <gfx_clear+0x70>)
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <gfx_clear+0x70>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b11      	cmp	r3, #17
 8003cb4:	d9ec      	bls.n	8003c90 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <gfx_clear+0x6c>)
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	3312      	adds	r3, #18
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <gfx_clear+0x6c>)
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <gfx_clear+0x6c>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003cca:	d3dd      	bcc.n	8003c88 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <gfx_clear+0x78>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8003cd2:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <gfx_clear+0x7c>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <gfx_clear+0x80>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]

}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	200007ea 	.word	0x200007ea
 8003cec:	200007f0 	.word	0x200007f0
 8003cf0:	20003ae8 	.word	0x20003ae8
 8003cf4:	20003f6d 	.word	0x20003f6d
 8003cf8:	20003f6a 	.word	0x20003f6a
 8003cfc:	20003f7a 	.word	0x20003f7a

08003d00 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	80fb      	strh	r3, [r7, #6]
 8003d0e:	e006      	b.n	8003d1e <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <display_clear+0x34>)
 8003d14:	212f      	movs	r1, #47	; 0x2f
 8003d16:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	80fb      	strh	r3, [r7, #6]
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d24:	d3f4      	bcc.n	8003d10 <display_clear+0x10>
	}


}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	2000fb24 	.word	0x2000fb24

08003d38 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <display_generate+0x1c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 8003d42:	f7ff fe1d 	bl	8003980 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8003d46:	f7ff fe23 	bl	8003990 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8003d4a:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <display_generate+0x20>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200058e9 	.word	0x200058e9
 8003d58:	20003f7a 	.word	0x20003f7a

08003d5c <gfx_reverse>:
	 disp_end=0;     //  should disable display process till one page


	}

void gfx_reverse(uint8_t cursor_pos,uint8_t cursor_partial){					 // does what it supposed to
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	460a      	mov	r2, r1
 8003d66:	71fb      	strb	r3, [r7, #7]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	71bb      	strb	r3, [r7, #6]

   uint16_t cursor_loc= (cursor_pos&15)+2;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3302      	adds	r3, #2
 8003d78:	81bb      	strh	r3, [r7, #12]

   uint16_t start_line=(cursor_pos>>4)*144;
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	00d2      	lsls	r2, r2, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	817b      	strh	r3, [r7, #10]
    uint16_t end_line=start_line+144;
 8003d8c:	897b      	ldrh	r3, [r7, #10]
 8003d8e:	3390      	adds	r3, #144	; 0x90
 8003d90:	813b      	strh	r3, [r7, #8]
    uint8_t partial_counter=0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]

    for (n=start_line;n<end_line ;n=n+18)    {
 8003d96:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <gfx_reverse+0xa0>)
 8003d98:	897b      	ldrh	r3, [r7, #10]
 8003d9a:	8013      	strh	r3, [r2, #0]
 8003d9c:	e021      	b.n	8003de2 <gfx_reverse+0x86>
    				//for (i=2;i<18;i++)
    		if (cursor_partial&(1<<partial_counter))		     gfx_ram[n+cursor_loc] =gfx_ram[n+cursor_loc]^127;
 8003d9e:	79ba      	ldrb	r2, [r7, #6]
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	fa42 f303 	asr.w	r3, r2, r3
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d010      	beq.n	8003dd0 <gfx_reverse+0x74>
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <gfx_reverse+0xa0>)
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	89bb      	ldrh	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <gfx_reverse+0xa4>)
 8003dba:	5cd2      	ldrb	r2, [r2, r3]
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <gfx_reverse+0xa0>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	89bb      	ldrh	r3, [r7, #12]
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f082 027f 	eor.w	r2, r2, #127	; 0x7f
 8003dca:	b2d1      	uxtb	r1, r2
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <gfx_reverse+0xa4>)
 8003dce:	54d1      	strb	r1, [r2, r3]
    		partial_counter++;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
    for (n=start_line;n<end_line ;n=n+18)    {
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <gfx_reverse+0xa0>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	3312      	adds	r3, #18
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <gfx_reverse+0xa0>)
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <gfx_reverse+0xa0>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	893a      	ldrh	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d8d8      	bhi.n	8003d9e <gfx_reverse+0x42>
    				 }



}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200007ea 	.word	0x200007ea
 8003e00:	20003ae8 	.word	0x20003ae8

08003e04 <gfx_line_fill>:

void gfx_line_fill (uint8_t line_selected){   // fills a line to gfx_ram from default_menu3
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]

    uint16_t start_line=(line_selected&7)*144;
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	00d2      	lsls	r2, r2, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	81bb      	strh	r3, [r7, #12]
     uint16_t end_line=start_line+144;
 8003e22:	89bb      	ldrh	r3, [r7, #12]
 8003e24:	3390      	adds	r3, #144	; 0x90
 8003e26:	817b      	strh	r3, [r7, #10]

   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]
     uint16_t character;

     for (n=start_line;n<end_line ;n=n+18)    {
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <gfx_line_fill+0xb4>)
 8003e2e:	89bb      	ldrh	r3, [r7, #12]
 8003e30:	8013      	strh	r3, [r2, #0]
 8003e32:	e035      	b.n	8003ea0 <gfx_line_fill+0x9c>

	 for (i=0;i<16;i++){
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <gfx_line_fill+0xb8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	e024      	b.n	8003e86 <gfx_line_fill+0x82>
	     character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <gfx_line_fill+0xb8>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	4413      	add	r3, r2
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <gfx_line_fill+0xbc>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	3b2f      	subs	r3, #47	; 0x2f
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4413      	add	r3, r2
 8003e5a:	813b      	strh	r3, [r7, #8]

	     gfx_ram[n+i+2] = gfx_char[   character ]&31;
 8003e5c:	893b      	ldrh	r3, [r7, #8]
 8003e5e:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <gfx_line_fill+0xc0>)
 8003e60:	5cd2      	ldrb	r2, [r2, r3]
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <gfx_line_fill+0xb4>)
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <gfx_line_fill+0xb8>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3302      	adds	r3, #2
 8003e70:	f002 021f 	and.w	r2, r2, #31
 8003e74:	b2d1      	uxtb	r1, r2
 8003e76:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <gfx_line_fill+0xc4>)
 8003e78:	54d1      	strb	r1, [r2, r3]
	 for (i=0;i<16;i++){
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <gfx_line_fill+0xb8>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <gfx_line_fill+0xb8>)
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <gfx_line_fill+0xb8>)
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	2b0f      	cmp	r3, #15
 8003e8c:	d9d6      	bls.n	8003e3c <gfx_line_fill+0x38>

	 }
    char_skip++;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3301      	adds	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
     for (n=start_line;n<end_line ;n=n+18)    {
 8003e94:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <gfx_line_fill+0xb4>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	3312      	adds	r3, #18
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <gfx_line_fill+0xb4>)
 8003e9e:	801a      	strh	r2, [r3, #0]
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <gfx_line_fill+0xb4>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	897a      	ldrh	r2, [r7, #10]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d8c4      	bhi.n	8003e34 <gfx_line_fill+0x30>
}
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	200007ea 	.word	0x200007ea
 8003ebc:	200007f0 	.word	0x200007f0
 8003ec0:	2000fb24 	.word	0x2000fb24
 8003ec4:	0800c12c 	.word	0x0800c12c
 8003ec8:	20003ae8 	.word	0x20003ae8

08003ecc <encoder2>:


void encoder2(void){  // encoder pos and data input
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0


    uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003ed2:	4b68      	ldr	r3, [pc, #416]	; (8004074 <encoder2+0x1a8>)
 8003ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b67      	ldr	r3, [pc, #412]	; (8004078 <encoder2+0x1ac>)
 8003edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	71fb      	strb	r3, [r7, #7]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4a64      	ldr	r2, [pc, #400]	; (800407c <encoder2+0x1b0>)
 8003eea:	4413      	add	r3, r2
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b64      	ldr	r3, [pc, #400]	; (8004080 <encoder2+0x1b4>)
 8003ef0:	6810      	ldr	r0, [r2, #0]
 8003ef2:	6851      	ldr	r1, [r2, #4]
 8003ef4:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003ef6:	4a63      	ldr	r2, [pc, #396]	; (8004084 <encoder2+0x1b8>)
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	4611      	mov	r1, r2
 8003efe:	8019      	strh	r1, [r3, #0]
 8003f00:	3302      	adds	r3, #2
 8003f02:	0c12      	lsrs	r2, r2, #16
 8003f04:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003f06:	4b5b      	ldr	r3, [pc, #364]	; (8004074 <encoder2+0x1a8>)
 8003f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <encoder2+0x1bc>)
 8003f12:	4413      	add	r3, r2
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f007 fa55 	bl	800b3cc <atoi>
 8003f22:	4603      	mov	r3, r0
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4b59      	ldr	r3, [pc, #356]	; (800408c <encoder2+0x1c0>)
 8003f28:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003f2a:	4b58      	ldr	r3, [pc, #352]	; (800408c <encoder2+0x1c0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4853      	ldr	r0, [pc, #332]	; (8004080 <encoder2+0x1b4>)
 8003f32:	f7fc fe11 	bl	8000b58 <menu_vars>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <encoder2+0x1c4>)
 8003f3a:	6013      	str	r3, [r2, #0]
	 if ((enc_dir!=enc_mem_dir)  ) *menu_vars_var=enc_dir;   ///write back value if encoder changed ;
 8003f3c:	4b55      	ldr	r3, [pc, #340]	; (8004094 <encoder2+0x1c8>)
 8003f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b54      	ldr	r3, [pc, #336]	; (8004098 <encoder2+0x1cc>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d006      	beq.n	8003f5a <encoder2+0x8e>
 8003f4c:	4b51      	ldr	r3, [pc, #324]	; (8004094 <encoder2+0x1c8>)
 8003f4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f52:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <encoder2+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    			enc_mem_dir=enc_dir;
 8003f5a:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <encoder2+0x1c8>)
 8003f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b4d      	ldr	r3, [pc, #308]	; (8004098 <encoder2+0x1cc>)
 8003f64:	701a      	strb	r2, [r3, #0]


    if ( (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8003f66:	4b4d      	ldr	r3, [pc, #308]	; (800409c <encoder2+0x1d0>)
 8003f68:	f993 3000 	ldrsb.w	r3, [r3]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <encoder2+0x1d4>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d079      	beq.n	800406a <encoder2+0x19e>
 8003f76:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <encoder2+0x1d8>)
 8003f78:	f993 3000 	ldrsb.w	r3, [r3]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d174      	bne.n	800406a <encoder2+0x19e>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <encoder2+0x1d0>)
 8003f82:	f993 3000 	ldrsb.w	r3, [r3]
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <encoder2+0x1d4>)
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	da02      	bge.n	8003f96 <encoder2+0xca>
 8003f90:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <encoder2+0x1d8>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 8003f96:	4b41      	ldr	r3, [pc, #260]	; (800409c <encoder2+0x1d0>)
 8003f98:	f993 3000 	ldrsb.w	r3, [r3]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <encoder2+0x1d4>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	dd02      	ble.n	8003fac <encoder2+0xe0>
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <encoder2+0x1d8>)
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 8003fac:	4b3b      	ldr	r3, [pc, #236]	; (800409c <encoder2+0x1d0>)
 8003fae:	f993 3000 	ldrsb.w	r3, [r3]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b3a      	ldr	r3, [pc, #232]	; (80040a0 <encoder2+0x1d4>)
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	da0b      	bge.n	8003fd4 <encoder2+0x108>
 8003fbc:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <encoder2+0x1d4>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b36      	ldr	r3, [pc, #216]	; (800409c <encoder2+0x1d0>)
 8003fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	b25a      	sxtb	r2, r3
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <encoder2+0x1d8>)
 8003fd2:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <encoder2+0x1d0>)
 8003fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <encoder2+0x1d4>)
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	dd0b      	ble.n	8003ffc <encoder2+0x130>
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	; (80040a0 <encoder2+0x1d4>)
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	4b2c      	ldr	r3, [pc, #176]	; (800409c <encoder2+0x1d0>)
 8003fec:	f993 3000 	ldrsb.w	r3, [r3]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	b25a      	sxtb	r2, r3
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <encoder2+0x1d8>)
 8003ffa:	701a      	strb	r2, [r3, #0]
		enc2_tempC=enc2_dir;	   // loop back until change
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <encoder2+0x1d4>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b25a      	sxtb	r2, r3
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <encoder2+0x1d0>)
 8004004:	701a      	strb	r2, [r3, #0]

		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <encoder2+0x1a8>)
 8004008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800400c:	2b00      	cmp	r3, #0
 800400e:	db14      	blt.n	800403a <encoder2+0x16e>
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <encoder2+0x1a8>)
 8004012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004016:	461a      	mov	r2, r3
 8004018:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <encoder2+0x1dc>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	dc0c      	bgt.n	800403a <encoder2+0x16e>
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <encoder2+0x1d8>)
 8004022:	f993 3000 	ldrsb.w	r3, [r3]
 8004026:	b29a      	uxth	r2, r3
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <encoder2+0x1a8>)
 800402a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800402e:	b29b      	uxth	r3, r3
 8004030:	4413      	add	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	b21a      	sxth	r2, r3
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <encoder2+0x1a8>)
 8004038:	801a      	strh	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 800403a:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <encoder2+0x1a8>)
 800403c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004040:	2b00      	cmp	r3, #0
 8004042:	da04      	bge.n	800404e <encoder2+0x182>
 8004044:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <encoder2+0x1dc>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	b21a      	sxth	r2, r3
 800404a:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <encoder2+0x1a8>)
 800404c:	801a      	strh	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <encoder2+0x1a8>)
 8004050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004054:	461a      	mov	r2, r3
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <encoder2+0x1dc>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	dd02      	ble.n	8004064 <encoder2+0x198>
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <encoder2+0x1a8>)
 8004060:	2200      	movs	r2, #0
 8004062:	801a      	strh	r2, [r3, #0]
		enc2_add=0;
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <encoder2+0x1d8>)
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
	}
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000220 	.word	0x20000220
 8004078:	200052d0 	.word	0x200052d0
 800407c:	2000022c 	.word	0x2000022c
 8004080:	200058d4 	.word	0x200058d4
 8004084:	0800b9a8 	.word	0x0800b9a8
 8004088:	200056d0 	.word	0x200056d0
 800408c:	200058dc 	.word	0x200058dc
 8004090:	200058d0 	.word	0x200058d0
 8004094:	2000342c 	.word	0x2000342c
 8004098:	2000fb1c 	.word	0x2000fb1c
 800409c:	20000150 	.word	0x20000150
 80040a0:	2000342a 	.word	0x2000342a
 80040a4:	2000342e 	.word	0x2000342e
 80040a8:	200052cd 	.word	0x200052cd

080040ac <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 80040b2:	4b3a      	ldr	r3, [pc, #232]	; (800419c <menu3_fill+0xf0>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 80040b8:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <menu3_fill+0xf4>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	89fa      	ldrh	r2, [r7, #14]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d904      	bls.n	80040ce <menu3_fill+0x22>
 80040c4:	2300      	movs	r3, #0
 80040c6:	81fb      	strh	r3, [r7, #14]
 80040c8:	4b34      	ldr	r3, [pc, #208]	; (800419c <menu3_fill+0xf0>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 80040ce:	89fb      	ldrh	r3, [r7, #14]
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <menu3_fill+0xf8>)
 80040d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 80040da:	7b7b      	ldrb	r3, [r7, #13]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <menu3_fill+0xfc>)
 80040e0:	4413      	add	r3, r2
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b31      	ldr	r3, [pc, #196]	; (80041ac <menu3_fill+0x100>)
 80040e6:	6810      	ldr	r0, [r2, #0]
 80040e8:	6851      	ldr	r1, [r2, #4]
 80040ea:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <menu3_fill+0x104>)
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4611      	mov	r1, r2
 80040f4:	8019      	strh	r1, [r3, #0]
 80040f6:	3302      	adds	r3, #2
 80040f8:	0c12      	lsrs	r2, r2, #16
 80040fa:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	461a      	mov	r2, r3
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <menu3_fill+0x108>)
 8004104:	4413      	add	r3, r2
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	4618      	mov	r0, r3
 8004110:	f007 f95c 	bl	800b3cc <atoi>
 8004114:	4603      	mov	r3, r0
 8004116:	b2da      	uxtb	r2, r3
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <menu3_fill+0x10c>)
 800411a:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <menu3_fill+0x10c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	4822      	ldr	r0, [pc, #136]	; (80041ac <menu3_fill+0x100>)
 8004124:	f7fc fd18 	bl	8000b58 <menu_vars>
 8004128:	4603      	mov	r3, r0
 800412a:	4a24      	ldr	r2, [pc, #144]	; (80041bc <menu3_fill+0x110>)
 800412c:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <menu3_fill+0x110>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b29a      	uxth	r2, r3
 8004136:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <menu3_fill+0x114>)
 8004138:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <menu3_fill+0x118>)
 800413c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004140:	461a      	mov	r2, r3
 8004142:	89fb      	ldrh	r3, [r7, #14]
 8004144:	429a      	cmp	r2, r3
 8004146:	d104      	bne.n	8004152 <menu3_fill+0xa6>
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <menu3_fill+0x114>)
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <menu3_fill+0x11c>)
 8004150:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3&7;
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <menu3_fill+0x114>)
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <menu3_fill+0x120>)
 8004160:	701a      	strb	r2, [r3, #0]
			    /*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 8004162:	89fb      	ldrh	r3, [r7, #14]
 8004164:	4a0f      	ldr	r2, [pc, #60]	; (80041a4 <menu3_fill+0xf8>)
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	817b      	strh	r3, [r7, #10]
				default_menu3[crap8]=div_limit+48;
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <menu3_fill+0x120>)
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	3230      	adds	r2, #48	; 0x30
 8004174:	b2d1      	uxtb	r1, r2
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <menu3_fill+0x124>)
 8004178:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 800417a:	4b08      	ldr	r3, [pc, #32]	; (800419c <menu3_fill+0xf0>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <menu3_fill+0xf0>)
 8004184:	801a      	strh	r2, [r3, #0]
				disp_up_counter=disp_up_counter&255;
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <menu3_fill+0xf0>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	b29a      	uxth	r2, r3
 800418e:	4b03      	ldr	r3, [pc, #12]	; (800419c <menu3_fill+0xf0>)
 8004190:	801a      	strh	r2, [r3, #0]

    }
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	2000fb20 	.word	0x2000fb20
 80041a0:	200052cd 	.word	0x200052cd
 80041a4:	200052d0 	.word	0x200052d0
 80041a8:	2000022c 	.word	0x2000022c
 80041ac:	200058d4 	.word	0x200058d4
 80041b0:	0800b9a8 	.word	0x0800b9a8
 80041b4:	200056d0 	.word	0x200056d0
 80041b8:	200058dc 	.word	0x200058dc
 80041bc:	200058d0 	.word	0x200058d0
 80041c0:	20003f78 	.word	0x20003f78
 80041c4:	20000220 	.word	0x20000220
 80041c8:	200058e6 	.word	0x200058e6
 80041cc:	20007912 	.word	0x20007912
 80041d0:	2000fb24 	.word	0x2000fb24

080041d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041da:	f001 fab7 	bl	800574c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041de:	f000 fb43 	bl	8004868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041e2:	f000 fe79 	bl	8004ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 80041e6:	f000 fe57 	bl	8004e98 <MX_DMA_Init>
  MX_ADC1_Init();
 80041ea:	f000 fba7 	bl	800493c <MX_ADC1_Init>
  MX_SPI2_Init();
 80041ee:	f000 fc9f 	bl	8004b30 <MX_SPI2_Init>
  MX_TIM3_Init();
 80041f2:	f000 fd27 	bl	8004c44 <MX_TIM3_Init>
  MX_TIM4_Init();
 80041f6:	f000 fda7 	bl	8004d48 <MX_TIM4_Init>
  MX_I2C2_Init();
 80041fa:	f000 fc35 	bl	8004a68 <MX_I2C2_Init>
  MX_TIM2_Init();
 80041fe:	f000 fccd 	bl	8004b9c <MX_TIM2_Init>
  MX_SPI1_Init();
 8004202:	f000 fc5f 	bl	8004ac4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004206:	f000 fdf3 	bl	8004df0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800420a:	f000 fe1b 	bl	8004e44 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 800420e:	f7fd fb1f 	bl	8001850 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8004212:	4bad      	ldr	r3, [pc, #692]	; (80044c8 <main+0x2f4>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4bab      	ldr	r3, [pc, #684]	; (80044c8 <main+0x2f4>)
 800421c:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 800421e:	4bab      	ldr	r3, [pc, #684]	; (80044cc <main+0x2f8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	4aa9      	ldr	r2, [pc, #676]	; (80044cc <main+0x2f8>)
 8004226:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

			  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8004228:	4ba8      	ldr	r3, [pc, #672]	; (80044cc <main+0x2f8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	2b06      	cmp	r3, #6
 8004232:	d101      	bne.n	8004238 <main+0x64>
 8004234:	f7fd fa0a 	bl	800164c <analoginputloopb>


		if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8004238:	4ba4      	ldr	r3, [pc, #656]	; (80044cc <main+0x2f8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8004240:	4293      	cmp	r3, r2
 8004242:	f040 80fb 	bne.w	800443c <main+0x268>
			  if (mem_count>512) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8004246:	4ba2      	ldr	r3, [pc, #648]	; (80044d0 <main+0x2fc>)
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424e:	d903      	bls.n	8004258 <main+0x84>
 8004250:	4b9f      	ldr	r3, [pc, #636]	; (80044d0 <main+0x2fc>)
 8004252:	2200      	movs	r2, #0
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	e005      	b.n	8004264 <main+0x90>
 8004258:	4b9d      	ldr	r3, [pc, #628]	; (80044d0 <main+0x2fc>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	4b9b      	ldr	r3, [pc, #620]	; (80044d0 <main+0x2fc>)
 8004262:	801a      	strh	r2, [r3, #0]

			  cursor_partial=240;
 8004264:	4b9b      	ldr	r3, [pc, #620]	; (80044d4 <main+0x300>)
 8004266:	22f0      	movs	r2, #240	; 0xf0
 8004268:	701a      	strb	r2, [r3, #0]
			if (last_pos_hold)   gfx_reverse(last_pos_hold,cursor_partial);
 800426a:	4b9b      	ldr	r3, [pc, #620]	; (80044d8 <main+0x304>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <main+0xae>
 8004272:	4b99      	ldr	r3, [pc, #612]	; (80044d8 <main+0x304>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4a97      	ldr	r2, [pc, #604]	; (80044d4 <main+0x300>)
 8004278:	7812      	ldrb	r2, [r2, #0]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fd6d 	bl	8003d5c <gfx_reverse>
			  gfx_reverse(seq.loop[0]+32,cursor_partial);
 8004282:	4b96      	ldr	r3, [pc, #600]	; (80044dc <main+0x308>)
 8004284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004288:	3320      	adds	r3, #32
 800428a:	b2db      	uxtb	r3, r3
 800428c:	4a91      	ldr	r2, [pc, #580]	; (80044d4 <main+0x300>)
 800428e:	7812      	ldrb	r2, [r2, #0]
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff fd62 	bl	8003d5c <gfx_reverse>
			  last_pos_hold=seq.loop[0]+32;
 8004298:	4b90      	ldr	r3, [pc, #576]	; (80044dc <main+0x308>)
 800429a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800429e:	3320      	adds	r3, #32
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b8d      	ldr	r3, [pc, #564]	; (80044d8 <main+0x304>)
 80042a4:	701a      	strb	r2, [r3, #0]

			  patch_target_parse(); //
 80042a6:	f7fc ffbb 	bl	8001220 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 80042aa:	2300      	movs	r3, #0
 80042ac:	827b      	strh	r3, [r7, #18]


			memcpy(potSource,&seq,46); // about 35
 80042ae:	4a8c      	ldr	r2, [pc, #560]	; (80044e0 <main+0x30c>)
 80042b0:	4b8a      	ldr	r3, [pc, #552]	; (80044dc <main+0x308>)
 80042b2:	4614      	mov	r4, r2
 80042b4:	461d      	mov	r5, r3
 80042b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042c2:	c407      	stmia	r4!, {r0, r1, r2}
 80042c4:	8023      	strh	r3, [r4, #0]

			for(i=0;i<10;i++){
 80042c6:	4b87      	ldr	r3, [pc, #540]	; (80044e4 <main+0x310>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	e079      	b.n	80043c2 <main+0x1ee>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 80042ce:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <main+0x310>)
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	339c      	adds	r3, #156	; 0x9c
 80042de:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <main+0x30c>)
 80042e0:	1898      	adds	r0, r3, r2
 80042e2:	4b80      	ldr	r3, [pc, #512]	; (80044e4 <main+0x310>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4a7d      	ldr	r2, [pc, #500]	; (80044e8 <main+0x314>)
 80042f2:	4413      	add	r3, r2
 80042f4:	220e      	movs	r2, #14
 80042f6:	4619      	mov	r1, r3
 80042f8:	f007 f896 	bl	800b428 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 80042fc:	4b79      	ldr	r3, [pc, #484]	; (80044e4 <main+0x310>)
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	332e      	adds	r3, #46	; 0x2e
 800430c:	4a74      	ldr	r2, [pc, #464]	; (80044e0 <main+0x30c>)
 800430e:	1898      	adds	r0, r3, r2
 8004310:	4b74      	ldr	r3, [pc, #464]	; (80044e4 <main+0x310>)
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a73      	ldr	r2, [pc, #460]	; (80044ec <main+0x318>)
 8004320:	4413      	add	r3, r2
 8004322:	2206      	movs	r2, #6
 8004324:	4619      	mov	r1, r3
 8004326:	f007 f87f 	bl	800b428 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 800432a:	4b6e      	ldr	r3, [pc, #440]	; (80044e4 <main+0x310>)
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	336a      	adds	r3, #106	; 0x6a
 8004338:	4a69      	ldr	r2, [pc, #420]	; (80044e0 <main+0x30c>)
 800433a:	1898      	adds	r0, r3, r2
 800433c:	4b69      	ldr	r3, [pc, #420]	; (80044e4 <main+0x310>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	4a69      	ldr	r2, [pc, #420]	; (80044f0 <main+0x31c>)
 800434c:	4413      	add	r3, r2
 800434e:	2205      	movs	r2, #5
 8004350:	4619      	mov	r1, r3
 8004352:	f007 f869 	bl	800b428 <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );
 8004356:	4b63      	ldr	r3, [pc, #396]	; (80044e4 <main+0x310>)
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	4613      	mov	r3, r2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4413      	add	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004368:	4a5d      	ldr	r2, [pc, #372]	; (80044e0 <main+0x30c>)
 800436a:	1898      	adds	r0, r3, r2
 800436c:	4b5d      	ldr	r3, [pc, #372]	; (80044e4 <main+0x310>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4a5e      	ldr	r2, [pc, #376]	; (80044f4 <main+0x320>)
 800437c:	4413      	add	r3, r2
 800437e:	2206      	movs	r2, #6
 8004380:	4619      	mov	r1, r3
 8004382:	f007 f851 	bl	800b428 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8004386:	4b57      	ldr	r3, [pc, #348]	; (80044e4 <main+0x310>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	4613      	mov	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004398:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <main+0x30c>)
 800439a:	1898      	adds	r0, r3, r2
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <main+0x310>)
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4a53      	ldr	r2, [pc, #332]	; (80044f8 <main+0x324>)
 80043ac:	4413      	add	r3, r2
 80043ae:	2206      	movs	r2, #6
 80043b0:	4619      	mov	r1, r3
 80043b2:	f007 f839 	bl	800b428 <memcpy>
			for(i=0;i<10;i++){
 80043b6:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <main+0x310>)
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	4b49      	ldr	r3, [pc, #292]	; (80044e4 <main+0x310>)
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	4b48      	ldr	r3, [pc, #288]	; (80044e4 <main+0x310>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d981      	bls.n	80042ce <main+0xfa>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	827b      	strh	r3, [r7, #18]
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now

						 mem_buf=potSource[mem_count];
 80043ce:	4b40      	ldr	r3, [pc, #256]	; (80044d0 <main+0x2fc>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b42      	ldr	r3, [pc, #264]	; (80044e0 <main+0x30c>)
 80043d6:	5c9a      	ldrb	r2, [r3, r2]
 80043d8:	4b48      	ldr	r3, [pc, #288]	; (80044fc <main+0x328>)
 80043da:	701a      	strb	r2, [r3, #0]
					//	 if (mem_buf>159) mem_buf=159;
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 80043dc:	4b3c      	ldr	r3, [pc, #240]	; (80044d0 <main+0x2fc>)
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	099b      	lsrs	r3, r3, #6
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <main+0x2fc>)
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	827b      	strh	r3, [r7, #18]
						 //mem_count2=mem_count2+2048;   // Relocate mem for patch

						 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 80043fa:	8a7a      	ldrh	r2, [r7, #18]
 80043fc:	2364      	movs	r3, #100	; 0x64
 80043fe:	9302      	str	r3, [sp, #8]
 8004400:	2301      	movs	r3, #1
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <main+0x32c>)
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	2302      	movs	r3, #2
 800440a:	21a0      	movs	r1, #160	; 0xa0
 800440c:	483d      	ldr	r0, [pc, #244]	; (8004504 <main+0x330>)
 800440e:	f003 fb89 	bl	8007b24 <HAL_I2C_Mem_Read>
						 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <main+0x32c>)
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <main+0x328>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d00b      	beq.n	8004436 <main+0x262>
 800441e:	8a7a      	ldrh	r2, [r7, #18]
 8004420:	2364      	movs	r3, #100	; 0x64
 8004422:	9302      	str	r3, [sp, #8]
 8004424:	2301      	movs	r3, #1
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	4b34      	ldr	r3, [pc, #208]	; (80044fc <main+0x328>)
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2302      	movs	r3, #2
 800442e:	21a0      	movs	r1, #160	; 0xa0
 8004430:	4834      	ldr	r0, [pc, #208]	; (8004504 <main+0x330>)
 8004432:	f003 fa7d 	bl	8007930 <HAL_I2C_Mem_Write>



		//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

		loop_counter2=0; //reset
 8004436:	4b25      	ldr	r3, [pc, #148]	; (80044cc <main+0x2f8>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <main+0x334>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80b2 	beq.w	80045aa <main+0x3d6>
		uint16_t mem_counter=0;
 8004446:	2300      	movs	r3, #0
 8004448:	82fb      	strh	r3, [r7, #22]
		  memcpy(serial_source,&seq,36); // copy bits
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	4923      	ldr	r1, [pc, #140]	; (80044dc <main+0x308>)
 800444e:	482f      	ldr	r0, [pc, #188]	; (800450c <main+0x338>)
 8004450:	f006 ffea 	bl	800b428 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8004454:	4b2e      	ldr	r3, [pc, #184]	; (8004510 <main+0x33c>)
 8004456:	492f      	ldr	r1, [pc, #188]	; (8004514 <main+0x340>)
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	4618      	mov	r0, r3
 800445c:	f006 ffe4 	bl	800b428 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004460:	2300      	movs	r3, #0
 8004462:	82fb      	strh	r3, [r7, #22]
 8004464:	e02b      	b.n	80044be <main+0x2ea>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8004466:	8afb      	ldrh	r3, [r7, #22]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d812      	bhi.n	8004492 <main+0x2be>
 800446c:	8afa      	ldrh	r2, [r7, #22]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	3360      	adds	r3, #96	; 0x60
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <main+0x338>)
 8004478:	1898      	adds	r0, r3, r2
 800447a:	8afb      	ldrh	r3, [r7, #22]
 800447c:	1d9a      	adds	r2, r3, #6
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <main+0x314>)
 8004488:	4413      	add	r3, r2
 800448a:	2207      	movs	r2, #7
 800448c:	4619      	mov	r1, r3
 800448e:	f006 ffcb 	bl	800b428 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8004492:	8afa      	ldrh	r2, [r7, #22]
 8004494:	4613      	mov	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	3324      	adds	r3, #36	; 0x24
 800449e:	4a1b      	ldr	r2, [pc, #108]	; (800450c <main+0x338>)
 80044a0:	1898      	adds	r0, r3, r2
 80044a2:	8afa      	ldrh	r2, [r7, #22]
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <main+0x324>)
 80044ae:	4413      	add	r3, r2
 80044b0:	2206      	movs	r2, #6
 80044b2:	4619      	mov	r1, r3
 80044b4:	f006 ffb8 	bl	800b428 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80044b8:	8afb      	ldrh	r3, [r7, #22]
 80044ba:	3301      	adds	r3, #1
 80044bc:	82fb      	strh	r3, [r7, #22]
 80044be:	8afb      	ldrh	r3, [r7, #22]
 80044c0:	2b09      	cmp	r3, #9
 80044c2:	d9d0      	bls.n	8004466 <main+0x292>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 80044c4:	e02e      	b.n	8004524 <main+0x350>
 80044c6:	bf00      	nop
 80044c8:	200007ec 	.word	0x200007ec
 80044cc:	20003448 	.word	0x20003448
 80044d0:	20003446 	.word	0x20003446
 80044d4:	2000fb1e 	.word	0x2000fb1e
 80044d8:	2000fb1d 	.word	0x2000fb1d
 80044dc:	20005108 	.word	0x20005108
 80044e0:	20000584 	.word	0x20000584
 80044e4:	200007f0 	.word	0x200007f0
 80044e8:	20000158 	.word	0x20000158
 80044ec:	20004398 	.word	0x20004398
 80044f0:	2000467c 	.word	0x2000467c
 80044f4:	20005138 	.word	0x20005138
 80044f8:	20004640 	.word	0x20004640
 80044fc:	2000344c 	.word	0x2000344c
 8004500:	200058ea 	.word	0x200058ea
 8004504:	2000ffcc 	.word	0x2000ffcc
 8004508:	20007b15 	.word	0x20007b15
 800450c:	20007914 	.word	0x20007914
 8004510:	20007974 	.word	0x20007974
 8004514:	20000680 	.word	0x20000680
			  serial_up++;
 8004518:	4b87      	ldr	r3, [pc, #540]	; (8004738 <main+0x564>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	4b85      	ldr	r3, [pc, #532]	; (8004738 <main+0x564>)
 8004522:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004524:	4b84      	ldr	r3, [pc, #528]	; (8004738 <main+0x564>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	4b84      	ldr	r3, [pc, #528]	; (800473c <main+0x568>)
 800452c:	5c9a      	ldrb	r2, [r3, r2]
 800452e:	4b82      	ldr	r3, [pc, #520]	; (8004738 <main+0x564>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	4619      	mov	r1, r3
 8004534:	4b82      	ldr	r3, [pc, #520]	; (8004740 <main+0x56c>)
 8004536:	5c5b      	ldrb	r3, [r3, r1]
 8004538:	429a      	cmp	r2, r3
 800453a:	d103      	bne.n	8004544 <main+0x370>
 800453c:	4b7e      	ldr	r3, [pc, #504]	; (8004738 <main+0x564>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2ba0      	cmp	r3, #160	; 0xa0
 8004542:	d9e9      	bls.n	8004518 <main+0x344>
		  }

		  serial_send[6]=0;
 8004544:	4b7f      	ldr	r3, [pc, #508]	; (8004744 <main+0x570>)
 8004546:	2200      	movs	r2, #0
 8004548:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 800454a:	4b7f      	ldr	r3, [pc, #508]	; (8004748 <main+0x574>)
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	4b7d      	ldr	r3, [pc, #500]	; (8004744 <main+0x570>)
 8004550:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8004552:	4b79      	ldr	r3, [pc, #484]	; (8004738 <main+0x564>)
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	4b7b      	ldr	r3, [pc, #492]	; (8004744 <main+0x570>)
 8004558:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 800455a:	4b77      	ldr	r3, [pc, #476]	; (8004738 <main+0x564>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	4b77      	ldr	r3, [pc, #476]	; (8004740 <main+0x56c>)
 8004562:	5c9a      	ldrb	r2, [r3, r2]
 8004564:	4b77      	ldr	r3, [pc, #476]	; (8004744 <main+0x570>)
 8004566:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 8004568:	4b73      	ldr	r3, [pc, #460]	; (8004738 <main+0x564>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	4619      	mov	r1, r3
 800456e:	4b72      	ldr	r3, [pc, #456]	; (8004738 <main+0x564>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	4b72      	ldr	r3, [pc, #456]	; (8004740 <main+0x56c>)
 8004576:	5c59      	ldrb	r1, [r3, r1]
 8004578:	4b70      	ldr	r3, [pc, #448]	; (800473c <main+0x568>)
 800457a:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 800457c:	4b6e      	ldr	r3, [pc, #440]	; (8004738 <main+0x564>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2ba1      	cmp	r3, #161	; 0xa1
 8004582:	d903      	bls.n	800458c <main+0x3b8>
 8004584:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <main+0x564>)
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e005      	b.n	8004598 <main+0x3c4>
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <main+0x564>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	b2da      	uxtb	r2, r3
 8004594:	4b68      	ldr	r3, [pc, #416]	; (8004738 <main+0x564>)
 8004596:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8004598:	2364      	movs	r3, #100	; 0x64
 800459a:	2208      	movs	r2, #8
 800459c:	4969      	ldr	r1, [pc, #420]	; (8004744 <main+0x570>)
 800459e:	486b      	ldr	r0, [pc, #428]	; (800474c <main+0x578>)
 80045a0:	f006 fb5b 	bl	800ac5a <HAL_UART_Transmit>
		  serial_tosend=0;
 80045a4:	4b6a      	ldr	r3, [pc, #424]	; (8004750 <main+0x57c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 80045aa:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <main+0x580>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <main+0x3e2>
 80045b2:	f7ff fbc1 	bl	8003d38 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 80045b6:	4b68      	ldr	r3, [pc, #416]	; (8004758 <main+0x584>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d80f      	bhi.n	80045de <main+0x40a>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 80045be:	4b67      	ldr	r3, [pc, #412]	; (800475c <main+0x588>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e007      	b.n	80045d6 <main+0x402>
 80045c6:	f7ff faab 	bl	8003b20 <display_init>
 80045ca:	4b64      	ldr	r3, [pc, #400]	; (800475c <main+0x588>)
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	4b62      	ldr	r3, [pc, #392]	; (800475c <main+0x588>)
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	4b61      	ldr	r3, [pc, #388]	; (800475c <main+0x588>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	2b05      	cmp	r3, #5
 80045dc:	d9f3      	bls.n	80045c6 <main+0x3f2>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 80045de:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <main+0x584>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d937      	bls.n	8004656 <main+0x482>




		    //   fills one char line on current page
		    if(gfx_send_counter==0) gfx_send_counter4=0;
 80045e6:	4b5e      	ldr	r3, [pc, #376]	; (8004760 <main+0x58c>)
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <main+0x420>
 80045ee:	4b5d      	ldr	r3, [pc, #372]	; (8004764 <main+0x590>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
		    if (!gfx_send_counter2){
 80045f4:	4b5c      	ldr	r3, [pc, #368]	; (8004768 <main+0x594>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d126      	bne.n	800464a <main+0x476>

		    if ((gfx_send_counter4&7)==0)  {gfx_line_fill((gfx_send_counter4>>3)+((menu_title_lut[enc_out1]>>7)*8));  }  // fills current page
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <main+0x590>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	2b00      	cmp	r3, #0
 8004606:	d113      	bne.n	8004630 <main+0x45c>
 8004608:	4b56      	ldr	r3, [pc, #344]	; (8004764 <main+0x590>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	b2da      	uxtb	r2, r3
 8004610:	4b56      	ldr	r3, [pc, #344]	; (800476c <main+0x598>)
 8004612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004616:	4619      	mov	r1, r3
 8004618:	4b55      	ldr	r3, [pc, #340]	; (8004770 <main+0x59c>)
 800461a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800461e:	09db      	lsrs	r3, r3, #7
 8004620:	b2db      	uxtb	r3, r3
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4413      	add	r3, r2
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fbea 	bl	8003e04 <gfx_line_fill>
		    gfx_send_counter4++;
 8004630:	4b4c      	ldr	r3, [pc, #304]	; (8004764 <main+0x590>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <main+0x590>)
 800463a:	701a      	strb	r2, [r3, #0]
		    if (gfx_send_counter4>63) gfx_send_counter4=0;
 800463c:	4b49      	ldr	r3, [pc, #292]	; (8004764 <main+0x590>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b3f      	cmp	r3, #63	; 0x3f
 8004642:	d902      	bls.n	800464a <main+0x476>
 8004644:	4b47      	ldr	r3, [pc, #284]	; (8004764 <main+0x590>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
		    }

		    gfx_send();    // don't loop this without using dma  , just makes things really slow
 800464a:	f7ff fabf 	bl	8003bcc <gfx_send>
			 menu3_fill();encoder2();
 800464e:	f7ff fd2d 	bl	80040ac <menu3_fill>
 8004652:	f7ff fc3b 	bl	8003ecc <encoder2>
		}


		if (loop_counter2==2024){ // grab adc readings + 3ms , 32 step  // no freeze
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <main+0x5a0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 800465e:	d13d      	bne.n	80046dc <main+0x508>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8004660:	4845      	ldr	r0, [pc, #276]	; (8004778 <main+0x5a4>)
 8004662:	f001 fe91 	bl	8006388 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 800466e:	2101      	movs	r1, #1
 8004670:	4841      	ldr	r0, [pc, #260]	; (8004778 <main+0x5a4>)
 8004672:	f001 f9f9 	bl	8005a68 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8004676:	2101      	movs	r1, #1
 8004678:	483f      	ldr	r0, [pc, #252]	; (8004778 <main+0x5a4>)
 800467a:	f001 ff9b 	bl	80065b4 <HAL_ADCEx_InjectedGetValue>
 800467e:	4603      	mov	r3, r0
 8004680:	b29b      	uxth	r3, r3
 8004682:	80bb      	strh	r3, [r7, #4]
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8004684:	2102      	movs	r1, #2
 8004686:	483c      	ldr	r0, [pc, #240]	; (8004778 <main+0x5a4>)
 8004688:	f001 ff94 	bl	80065b4 <HAL_ADCEx_InjectedGetValue>
 800468c:	4603      	mov	r3, r0
 800468e:	b29b      	uxth	r3, r3
 8004690:	80fb      	strh	r3, [r7, #6]
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8004692:	2103      	movs	r1, #3
 8004694:	4838      	ldr	r0, [pc, #224]	; (8004778 <main+0x5a4>)
 8004696:	f001 ff8d 	bl	80065b4 <HAL_ADCEx_InjectedGetValue>
 800469a:	4603      	mov	r3, r0
 800469c:	b29b      	uxth	r3, r3
 800469e:	813b      	strh	r3, [r7, #8]
			HAL_ADCEx_InjectedStop(&hadc1) ;
 80046a0:	4835      	ldr	r0, [pc, #212]	; (8004778 <main+0x5a4>)
 80046a2:	f001 ff3b 	bl	800651c <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	31- ( adc_temp1[0]>>7);
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	09db      	lsrs	r3, r3, #7
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f1c3 031f 	rsb	r3, r3, #31
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	4b32      	ldr	r3, [pc, #200]	; (800477c <main+0x5a8>)
 80046b4:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 31-( adc_temp1[1]>>7);
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	09db      	lsrs	r3, r3, #7
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f1c3 031f 	rsb	r3, r3, #31
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	4b2e      	ldr	r3, [pc, #184]	; (800477c <main+0x5a8>)
 80046c4:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 31-( adc_temp1[2]>>7);
 80046c6:	893b      	ldrh	r3, [r7, #8]
 80046c8:	09db      	lsrs	r3, r3, #7
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f1c3 031f 	rsb	r3, r3, #31
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <main+0x5a8>)
 80046d4:	809a      	strh	r2, [r3, #4]


			//HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


			loop_counter=0;
 80046d6:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <main+0x5ac>)
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <main+0x574>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b07      	cmp	r3, #7
 80046e2:	d106      	bne.n	80046f2 <main+0x51e>
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <main+0x5b0>)
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d102      	bne.n	80046f2 <main+0x51e>
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <main+0x5b0>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	801a      	strh	r2, [r3, #0]


		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <main+0x574>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004702:	4821      	ldr	r0, [pc, #132]	; (8004788 <main+0x5b4>)
 8004704:	f002 ff9e 	bl	8007644 <HAL_GPIO_WritePin>


		//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8004708:	4b20      	ldr	r3, [pc, #128]	; (800478c <main+0x5b8>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8083 	beq.w	8004818 <main+0x644>


			uint16_t    adc_page=0; ;
 8004712:	2300      	movs	r3, #0
 8004714:	82bb      	strh	r3, [r7, #20]
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <main+0x5b8>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <main+0x54e>
 800471e:	2300      	movs	r3, #0
 8004720:	82bb      	strh	r3, [r7, #20]
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <main+0x5b8>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d102      	bne.n	8004730 <main+0x55c>
 800472a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800472e:	82bb      	strh	r3, [r7, #20]


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <main+0x588>)
 8004732:	2200      	movs	r2, #0
 8004734:	801a      	strh	r2, [r3, #0]
 8004736:	e058      	b.n	80047ea <main+0x616>
 8004738:	20007b14 	.word	0x20007b14
 800473c:	20007a14 	.word	0x20007a14
 8004740:	20007914 	.word	0x20007914
 8004744:	20000224 	.word	0x20000224
 8004748:	20005108 	.word	0x20005108
 800474c:	200101a8 	.word	0x200101a8
 8004750:	20007b15 	.word	0x20007b15
 8004754:	20003f7a 	.word	0x20003f7a
 8004758:	2000343b 	.word	0x2000343b
 800475c:	200007f0 	.word	0x200007f0
 8004760:	20003f6a 	.word	0x20003f6a
 8004764:	2000fb22 	.word	0x2000fb22
 8004768:	20003f6c 	.word	0x20003f6c
 800476c:	20000220 	.word	0x20000220
 8004770:	200052d0 	.word	0x200052d0
 8004774:	20003448 	.word	0x20003448
 8004778:	2000ff24 	.word	0x2000ff24
 800477c:	20000144 	.word	0x20000144
 8004780:	200007ec 	.word	0x200007ec
 8004784:	20003432 	.word	0x20003432
 8004788:	40020800 	.word	0x40020800
 800478c:	2000437c 	.word	0x2000437c
				adc_convert_count=(i*3)+adc_page;
 8004790:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <main+0x670>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	0052      	lsls	r2, r2, #1
 8004798:	4413      	add	r3, r2
 800479a:	b29a      	uxth	r2, r3
 800479c:	8abb      	ldrh	r3, [r7, #20]
 800479e:	4413      	add	r3, r2
 80047a0:	823b      	strh	r3, [r7, #16]

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2];
 80047a2:	8a3b      	ldrh	r3, [r7, #16]
 80047a4:	4a28      	ldr	r2, [pc, #160]	; (8004848 <main+0x674>)
 80047a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80047aa:	8a3b      	ldrh	r3, [r7, #16]
 80047ac:	3301      	adds	r3, #1
 80047ae:	4926      	ldr	r1, [pc, #152]	; (8004848 <main+0x674>)
 80047b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047b4:	4413      	add	r3, r2
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	8a3b      	ldrh	r3, [r7, #16]
 80047ba:	3302      	adds	r3, #2
 80047bc:	4922      	ldr	r1, [pc, #136]	; (8004848 <main+0x674>)
 80047be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80047c2:	4413      	add	r3, r2
 80047c4:	81fb      	strh	r3, [r7, #14]
				input_holder[i]=adc_convert_temp/3;
 80047c6:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <main+0x670>)
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	89fb      	ldrh	r3, [r7, #14]
 80047ce:	4a1f      	ldr	r2, [pc, #124]	; (800484c <main+0x678>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <main+0x67c>)
 80047da:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			for (i=0;i<512;i++){
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <main+0x670>)
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <main+0x670>)
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	4b16      	ldr	r3, [pc, #88]	; (8004844 <main+0x670>)
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f2:	d3cd      	bcc.n	8004790 <main+0x5bc>
				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}
 80047f4:	4b17      	ldr	r3, [pc, #92]	; (8004854 <main+0x680>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <main+0x63e>
 80047fc:	f7fc fbf8 	bl	8000ff0 <sampler_ram_record>
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <main+0x680>)
 8004802:	2200      	movs	r2, #0
 8004804:	739a      	strb	r2, [r3, #14]
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <main+0x680>)
 8004808:	2200      	movs	r2, #0
 800480a:	73da      	strb	r2, [r3, #15]
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <main+0x680>)
 800480e:	223f      	movs	r2, #63	; 0x3f
 8004810:	741a      	strb	r2, [r3, #16]

			adc_flag=0;
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <main+0x684>)
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8004818:	4b10      	ldr	r3, [pc, #64]	; (800485c <main+0x688>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004822:	d90a      	bls.n	800483a <main+0x666>
 8004824:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <main+0x68c>)
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d105      	bne.n	800483a <main+0x666>
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <main+0x690>)
 8004830:	2201      	movs	r2, #1
 8004832:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8004834:	e001      	b.n	800483a <main+0x666>

			sampling();
 8004836:	f7fd fb27 	bl	8001e88 <sampling>
		while  (bank_write)                         {							// wait for adc , priority
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <main+0x690>)
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f9      	bne.n	8004836 <main+0x662>
	  loop_counter++ ;
 8004842:	e4e6      	b.n	8004212 <main+0x3e>
 8004844:	200007f0 	.word	0x200007f0
 8004848:	20001804 	.word	0x20001804
 800484c:	aaaaaaab 	.word	0xaaaaaaab
 8004850:	20003f7c 	.word	0x20003f7c
 8004854:	20000204 	.word	0x20000204
 8004858:	2000437c 	.word	0x2000437c
 800485c:	200017f8 	.word	0x200017f8
 8004860:	200017fe 	.word	0x200017fe
 8004864:	2000014e 	.word	0x2000014e

08004868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b094      	sub	sp, #80	; 0x50
 800486c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800486e:	f107 0320 	add.w	r3, r7, #32
 8004872:	2230      	movs	r2, #48	; 0x30
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f006 fde4 	bl	800b444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800487c:	f107 030c 	add.w	r3, r7, #12
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <SystemClock_Config+0xcc>)
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4a27      	ldr	r2, [pc, #156]	; (8004934 <SystemClock_Config+0xcc>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	6413      	str	r3, [r2, #64]	; 0x40
 800489c:	4b25      	ldr	r3, [pc, #148]	; (8004934 <SystemClock_Config+0xcc>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a8:	2300      	movs	r3, #0
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	4b22      	ldr	r3, [pc, #136]	; (8004938 <SystemClock_Config+0xd0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a21      	ldr	r2, [pc, #132]	; (8004938 <SystemClock_Config+0xd0>)
 80048b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <SystemClock_Config+0xd0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048c4:	2302      	movs	r3, #2
 80048c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048c8:	2301      	movs	r3, #1
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048cc:	2310      	movs	r3, #16
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048d0:	2302      	movs	r3, #2
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048d4:	2300      	movs	r3, #0
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80048d8:	2308      	movs	r3, #8
 80048da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80048dc:	2364      	movs	r3, #100	; 0x64
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048e0:	2302      	movs	r3, #2
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048e4:	2304      	movs	r3, #4
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048e8:	f107 0320 	add.w	r3, r7, #32
 80048ec:	4618      	mov	r0, r3
 80048ee:	f003 fe9b 	bl	8008628 <HAL_RCC_OscConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80048f8:	f000 fbac 	bl	8005054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048fc:	230f      	movs	r3, #15
 80048fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004900:	2302      	movs	r3, #2
 8004902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800490c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800490e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004914:	f107 030c 	add.w	r3, r7, #12
 8004918:	2103      	movs	r1, #3
 800491a:	4618      	mov	r0, r3
 800491c:	f004 f8fc 	bl	8008b18 <HAL_RCC_ClockConfig>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004926:	f000 fb95 	bl	8005054 <Error_Handler>
  }
}
 800492a:	bf00      	nop
 800492c:	3750      	adds	r7, #80	; 0x50
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	40007000 	.word	0x40007000

0800493c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08c      	sub	sp, #48	; 0x30
 8004940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004942:	f107 0320 	add.w	r3, r7, #32
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	609a      	str	r2, [r3, #8]
 800494e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004950:	463b      	mov	r3, r7
 8004952:	2220      	movs	r2, #32
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f006 fd74 	bl	800b444 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800495c:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <MX_ADC1_Init+0x11c>)
 800495e:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <MX_ADC1_Init+0x120>)
 8004960:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004962:	4b3d      	ldr	r3, [pc, #244]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800496a:	4b3b      	ldr	r3, [pc, #236]	; (8004a58 <MX_ADC1_Init+0x11c>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004970:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004972:	2201      	movs	r2, #1
 8004974:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004976:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004978:	2201      	movs	r2, #1
 800497a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800497c:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <MX_ADC1_Init+0x11c>)
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004984:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004986:	2200      	movs	r2, #0
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800498a:	4b33      	ldr	r3, [pc, #204]	; (8004a58 <MX_ADC1_Init+0x11c>)
 800498c:	4a34      	ldr	r2, [pc, #208]	; (8004a60 <MX_ADC1_Init+0x124>)
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004990:	4b31      	ldr	r3, [pc, #196]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004992:	2200      	movs	r2, #0
 8004994:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004996:	4b30      	ldr	r3, [pc, #192]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004998:	2201      	movs	r2, #1
 800499a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800499c:	4b2e      	ldr	r3, [pc, #184]	; (8004a58 <MX_ADC1_Init+0x11c>)
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80049a4:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <MX_ADC1_Init+0x11c>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80049aa:	482b      	ldr	r0, [pc, #172]	; (8004a58 <MX_ADC1_Init+0x11c>)
 80049ac:	f000 ff64 	bl	8005878 <HAL_ADC_Init>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80049b6:	f000 fb4d 	bl	8005054 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80049ba:	2309      	movs	r3, #9
 80049bc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80049c2:	2305      	movs	r3, #5
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80049c6:	f107 0320 	add.w	r3, r7, #32
 80049ca:	4619      	mov	r1, r3
 80049cc:	4822      	ldr	r0, [pc, #136]	; (8004a58 <MX_ADC1_Init+0x11c>)
 80049ce:	f001 fa2b 	bl	8005e28 <HAL_ADC_ConfigChannel>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80049d8:	f000 fb3c 	bl	8005054 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80049dc:	2300      	movs	r3, #0
 80049de:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80049e0:	2301      	movs	r3, #1
 80049e2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80049e4:	2303      	movs	r3, #3
 80049e6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 80049e8:	2303      	movs	r3, #3
 80049ea:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80049f0:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <MX_ADC1_Init+0x128>)
 80049f2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004a00:	463b      	mov	r3, r7
 8004a02:	4619      	mov	r1, r3
 8004a04:	4814      	ldr	r0, [pc, #80]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004a06:	f001 fe0d 	bl	8006624 <HAL_ADCEx_InjectedConfigChannel>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004a10:	f000 fb20 	bl	8005054 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8004a14:	2302      	movs	r3, #2
 8004a16:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	4619      	mov	r1, r3
 8004a20:	480d      	ldr	r0, [pc, #52]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004a22:	f001 fdff 	bl	8006624 <HAL_ADCEx_InjectedConfigChannel>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8004a2c:	f000 fb12 	bl	8005054 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004a30:	2308      	movs	r3, #8
 8004a32:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8004a34:	2303      	movs	r3, #3
 8004a36:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004a3c:	463b      	mov	r3, r7
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4805      	ldr	r0, [pc, #20]	; (8004a58 <MX_ADC1_Init+0x11c>)
 8004a42:	f001 fdef 	bl	8006624 <HAL_ADCEx_InjectedConfigChannel>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8004a4c:	f000 fb02 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004a50:	bf00      	nop
 8004a52:	3730      	adds	r7, #48	; 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	2000ff24 	.word	0x2000ff24
 8004a5c:	40012000 	.word	0x40012000
 8004a60:	0f000001 	.word	0x0f000001
 8004a64:	000f0001 	.word	0x000f0001

08004a68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <MX_I2C2_Init+0x54>)
 8004a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a74:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <MX_I2C2_Init+0x58>)
 8004a76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004aa4:	4804      	ldr	r0, [pc, #16]	; (8004ab8 <MX_I2C2_Init+0x50>)
 8004aa6:	f002 fdff 	bl	80076a8 <HAL_I2C_Init>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004ab0:	f000 fad0 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	2000ffcc 	.word	0x2000ffcc
 8004abc:	40005800 	.word	0x40005800
 8004ac0:	000186a0 	.word	0x000186a0

08004ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004aca:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <MX_SPI1_Init+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ace:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004aee:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004af8:	2208      	movs	r2, #8
 8004afa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004afc:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b08:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004b10:	220a      	movs	r2, #10
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b14:	4804      	ldr	r0, [pc, #16]	; (8004b28 <MX_SPI1_Init+0x64>)
 8004b16:	f004 f9df 	bl	8008ed8 <HAL_SPI_Init>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004b20:	f000 fa98 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b24:	bf00      	nop
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20010020 	.word	0x20010020
 8004b2c:	40013000 	.word	0x40013000

08004b30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004b34:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <MX_SPI2_Init+0x68>)
 8004b38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b64:	2230      	movs	r2, #48	; 0x30
 8004b66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b7c:	220a      	movs	r2, #10
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004b80:	4804      	ldr	r0, [pc, #16]	; (8004b94 <MX_SPI2_Init+0x64>)
 8004b82:	f004 f9a9 	bl	8008ed8 <HAL_SPI_Init>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004b8c:	f000 fa62 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004b90:	bf00      	nop
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20010078 	.word	0x20010078
 8004b98:	40003800 	.word	0x40003800

08004b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	2224      	movs	r2, #36	; 0x24
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f006 fc4a 	bl	800b444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb0:	1d3b      	adds	r3, r7, #4
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004bc0:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004be6:	2302      	movs	r3, #2
 8004be8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004bea:	2301      	movs	r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004c02:	2302      	movs	r3, #2
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004c06:	f107 030c 	add.w	r3, r7, #12
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	480c      	ldr	r0, [pc, #48]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004c0e:	f005 f921 	bl	8009e54 <HAL_TIM_Encoder_Init>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004c18:	f000 fa1c 	bl	8005054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c24:	1d3b      	adds	r3, r7, #4
 8004c26:	4619      	mov	r1, r3
 8004c28:	4805      	ldr	r0, [pc, #20]	; (8004c40 <MX_TIM2_Init+0xa4>)
 8004c2a:	f005 ff3f 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004c34:	f000 fa0e 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c38:	bf00      	nop
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	200100d0 	.word	0x200100d0

08004c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08e      	sub	sp, #56	; 0x38
 8004c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	609a      	str	r2, [r3, #8]
 8004c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c58:	f107 0320 	add.w	r3, r7, #32
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	611a      	str	r2, [r3, #16]
 8004c70:	615a      	str	r2, [r3, #20]
 8004c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c74:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004c76:	4a33      	ldr	r2, [pc, #204]	; (8004d44 <MX_TIM3_Init+0x100>)
 8004c78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c80:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3124;
 8004c86:	4b2e      	ldr	r3, [pc, #184]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004c88:	f640 4234 	movw	r2, #3124	; 0xc34
 8004c8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c8e:	4b2c      	ldr	r3, [pc, #176]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c94:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004c96:	2280      	movs	r2, #128	; 0x80
 8004c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c9a:	4829      	ldr	r0, [pc, #164]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004c9c:	f004 fec4 	bl	8009a28 <HAL_TIM_Base_Init>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004ca6:	f000 f9d5 	bl	8005054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4822      	ldr	r0, [pc, #136]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004cb8:	f005 fb3c 	bl	800a334 <HAL_TIM_ConfigClockSource>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004cc2:	f000 f9c7 	bl	8005054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004cc6:	481e      	ldr	r0, [pc, #120]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004cc8:	f004 ffba 	bl	8009c40 <HAL_TIM_PWM_Init>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004cd2:	f000 f9bf 	bl	8005054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cde:	f107 0320 	add.w	r3, r7, #32
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4816      	ldr	r0, [pc, #88]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004ce6:	f005 fee1 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004cf0:	f000 f9b0 	bl	8005054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cf4:	2360      	movs	r3, #96	; 0x60
 8004cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d04:	1d3b      	adds	r3, r7, #4
 8004d06:	2200      	movs	r2, #0
 8004d08:	4619      	mov	r1, r3
 8004d0a:	480d      	ldr	r0, [pc, #52]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004d0c:	f005 fa50 	bl	800a1b0 <HAL_TIM_PWM_ConfigChannel>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004d16:	f000 f99d 	bl	8005054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4807      	ldr	r0, [pc, #28]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004d22:	f005 fa45 	bl	800a1b0 <HAL_TIM_PWM_ConfigChannel>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004d2c:	f000 f992 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d30:	4803      	ldr	r0, [pc, #12]	; (8004d40 <MX_TIM3_Init+0xfc>)
 8004d32:	f000 fbcd 	bl	80054d0 <HAL_TIM_MspPostInit>

}
 8004d36:	bf00      	nop
 8004d38:	3738      	adds	r7, #56	; 0x38
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20010118 	.word	0x20010118
 8004d44:	40000400 	.word	0x40000400

08004d48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08c      	sub	sp, #48	; 0x30
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d4e:	f107 030c 	add.w	r3, r7, #12
 8004d52:	2224      	movs	r2, #36	; 0x24
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f006 fb74 	bl	800b444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d5c:	1d3b      	adds	r3, r7, #4
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004d66:	4a21      	ldr	r2, [pc, #132]	; (8004dec <MX_TIM4_Init+0xa4>)
 8004d68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d70:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d84:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d92:	2301      	movs	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004da2:	2301      	movs	r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004da6:	2300      	movs	r3, #0
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8004daa:	2302      	movs	r3, #2
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	4619      	mov	r1, r3
 8004db4:	480c      	ldr	r0, [pc, #48]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004db6:	f005 f84d 	bl	8009e54 <HAL_TIM_Encoder_Init>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004dc0:	f000 f948 	bl	8005054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004dcc:	1d3b      	adds	r3, r7, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4805      	ldr	r0, [pc, #20]	; (8004de8 <MX_TIM4_Init+0xa0>)
 8004dd2:	f005 fe6b 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004ddc:	f000 f93a 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004de0:	bf00      	nop
 8004de2:	3730      	adds	r7, #48	; 0x30
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20010160 	.word	0x20010160
 8004dec:	40000800 	.word	0x40000800

08004df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <MX_USART1_UART_Init+0x50>)
 8004df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e02:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004e16:	2208      	movs	r2, #8
 8004e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e1a:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004e26:	4805      	ldr	r0, [pc, #20]	; (8004e3c <MX_USART1_UART_Init+0x4c>)
 8004e28:	f005 fec2 	bl	800abb0 <HAL_HalfDuplex_Init>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004e32:	f000 f90f 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200101a8 	.word	0x200101a8
 8004e40:	40011000 	.word	0x40011000

08004e44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004e48:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e4a:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <MX_USART6_UART_Init+0x50>)
 8004e4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004e68:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e6a:	220c      	movs	r2, #12
 8004e6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e6e:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8004e7a:	4805      	ldr	r0, [pc, #20]	; (8004e90 <MX_USART6_UART_Init+0x4c>)
 8004e7c:	f005 fe98 	bl	800abb0 <HAL_HalfDuplex_Init>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004e86:	f000 f8e5 	bl	8005054 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200101ec 	.word	0x200101ec
 8004e94:	40011400 	.word	0x40011400

08004e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <MX_DMA_Init+0x3c>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	4a0b      	ldr	r2, [pc, #44]	; (8004ed4 <MX_DMA_Init+0x3c>)
 8004ea8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eac:	6313      	str	r3, [r2, #48]	; 0x30
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <MX_DMA_Init+0x3c>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	203c      	movs	r0, #60	; 0x3c
 8004ec0:	f001 fe25 	bl	8006b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004ec4:	203c      	movs	r0, #60	; 0x3c
 8004ec6:	f001 fe3e 	bl	8006b46 <HAL_NVIC_EnableIRQ>

}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800

08004ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ede:	f107 030c 	add.w	r3, r7, #12
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	605a      	str	r2, [r3, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	4a34      	ldr	r2, [pc, #208]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	6313      	str	r3, [r2, #48]	; 0x30
 8004efe:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	4a2d      	ldr	r2, [pc, #180]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004f14:	f043 0302 	orr.w	r3, r3, #2
 8004f18:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	4a26      	ldr	r2, [pc, #152]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6313      	str	r3, [r2, #48]	; 0x30
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <MX_GPIO_Init+0xf0>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004f42:	2200      	movs	r2, #0
 8004f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f48:	4820      	ldr	r0, [pc, #128]	; (8004fcc <MX_GPIO_Init+0xf4>)
 8004f4a:	f002 fb7b 	bl	8007644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2110      	movs	r1, #16
 8004f52:	481f      	ldr	r0, [pc, #124]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004f54:	f002 fb76 	bl	8007644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004f6a:	f107 030c 	add.w	r3, r7, #12
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4816      	ldr	r0, [pc, #88]	; (8004fcc <MX_GPIO_Init+0xf4>)
 8004f72:	f002 f9e3 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 8004f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f82:	2301      	movs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4811      	ldr	r0, [pc, #68]	; (8004fd4 <MX_GPIO_Init+0xfc>)
 8004f8e:	f002 f9d5 	bl	800733c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8004f92:	2310      	movs	r3, #16
 8004f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f96:	2301      	movs	r3, #1
 8004f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8004fa2:	f107 030c 	add.w	r3, r7, #12
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4809      	ldr	r0, [pc, #36]	; (8004fd0 <MX_GPIO_Init+0xf8>)
 8004faa:	f002 f9c7 	bl	800733c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2028      	movs	r0, #40	; 0x28
 8004fb4:	f001 fdab 	bl	8006b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004fb8:	2028      	movs	r0, #40	; 0x28
 8004fba:	f001 fdc4 	bl	8006b46 <HAL_NVIC_EnableIRQ>

}
 8004fbe:	bf00      	nop
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020800 	.word	0x40020800
 8004fd0:	40020000 	.word	0x40020000
 8004fd4:	40020400 	.word	0x40020400

08004fd8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]

	}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000437c 	.word	0x2000437c

08004ff8 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <HAL_ADC_ConvCpltCallback+0x28>)
 8005002:	2202      	movs	r2, #2
 8005004:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);
 8005006:	4807      	ldr	r0, [pc, #28]	; (8005024 <HAL_ADC_ConvCpltCallback+0x2c>)
 8005008:	f000 feaa 	bl	8005d60 <HAL_ADC_Stop_DMA>
 800500c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005010:	4905      	ldr	r1, [pc, #20]	; (8005028 <HAL_ADC_ConvCpltCallback+0x30>)
 8005012:	4804      	ldr	r0, [pc, #16]	; (8005024 <HAL_ADC_ConvCpltCallback+0x2c>)
 8005014:	f000 fdb4 	bl	8005b80 <HAL_ADC_Start_DMA>

	}
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	2000437c 	.word	0x2000437c
 8005024:	2000ff24 	.word	0x2000ff24
 8005028:	20001804 	.word	0x20001804

0800502c <HAL_GPIO_EXTI_Callback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
	    spi2_send_enable=1;
	}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d102      	bne.n	8005044 <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 800503e:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_GPIO_EXTI_Callback+0x24>)
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
  }
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	20000204 	.word	0x20000204

08005054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005058:	b672      	cpsid	i
}
 800505a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800505c:	e7fe      	b.n	800505c <Error_Handler+0x8>
	...

08005060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_MspInit+0x4c>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	4a0f      	ldr	r2, [pc, #60]	; (80050ac <HAL_MspInit+0x4c>)
 8005070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005074:	6453      	str	r3, [r2, #68]	; 0x44
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <HAL_MspInit+0x4c>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_MspInit+0x4c>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a08      	ldr	r2, [pc, #32]	; (80050ac <HAL_MspInit+0x4c>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_MspInit+0x4c>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800

080050b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3c      	ldr	r2, [pc, #240]	; (80051c0 <HAL_ADC_MspInit+0x110>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d171      	bne.n	80051b6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	4a3a      	ldr	r2, [pc, #232]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	6453      	str	r3, [r2, #68]	; 0x44
 80050e2:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	4a33      	ldr	r2, [pc, #204]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6313      	str	r3, [r2, #48]	; 0x30
 80050fe:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <HAL_ADC_MspInit+0x114>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8005126:	2305      	movs	r3, #5
 8005128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800512a:	2303      	movs	r3, #3
 800512c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4619      	mov	r1, r3
 8005138:	4823      	ldr	r0, [pc, #140]	; (80051c8 <HAL_ADC_MspInit+0x118>)
 800513a:	f002 f8ff 	bl	800733c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800513e:	2303      	movs	r3, #3
 8005140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005142:	2303      	movs	r3, #3
 8005144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800514a:	f107 0314 	add.w	r3, r7, #20
 800514e:	4619      	mov	r1, r3
 8005150:	481e      	ldr	r0, [pc, #120]	; (80051cc <HAL_ADC_MspInit+0x11c>)
 8005152:	f002 f8f3 	bl	800733c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005158:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <HAL_ADC_MspInit+0x124>)
 800515a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800515c:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 800515e:	2200      	movs	r2, #0
 8005160:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005162:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005168:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 800516a:	2200      	movs	r2, #0
 800516c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005174:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005184:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800518c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800518e:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005190:	2200      	movs	r2, #0
 8005192:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005194:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 8005196:	2200      	movs	r2, #0
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800519a:	480d      	ldr	r0, [pc, #52]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 800519c:	f001 fcee 	bl	8006b7c <HAL_DMA_Init>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80051a6:	f7ff ff55 	bl	8005054 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
 80051b0:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_ADC_MspInit+0x120>)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051b6:	bf00      	nop
 80051b8:	3728      	adds	r7, #40	; 0x28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40012000 	.word	0x40012000
 80051c4:	40023800 	.word	0x40023800
 80051c8:	40020000 	.word	0x40020000
 80051cc:	40020400 	.word	0x40020400
 80051d0:	2000ff6c 	.word	0x2000ff6c
 80051d4:	40026470 	.word	0x40026470

080051d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a22      	ldr	r2, [pc, #136]	; (8005280 <HAL_I2C_MspInit+0xa8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d13d      	bne.n	8005276 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	4b21      	ldr	r3, [pc, #132]	; (8005284 <HAL_I2C_MspInit+0xac>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	4a20      	ldr	r2, [pc, #128]	; (8005284 <HAL_I2C_MspInit+0xac>)
 8005204:	f043 0302 	orr.w	r3, r3, #2
 8005208:	6313      	str	r3, [r2, #48]	; 0x30
 800520a:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <HAL_I2C_MspInit+0xac>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800521a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800521c:	2312      	movs	r3, #18
 800521e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005224:	2303      	movs	r3, #3
 8005226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005228:	2309      	movs	r3, #9
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	4619      	mov	r1, r3
 8005232:	4815      	ldr	r0, [pc, #84]	; (8005288 <HAL_I2C_MspInit+0xb0>)
 8005234:	f002 f882 	bl	800733c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800523e:	2312      	movs	r3, #18
 8005240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005246:	2303      	movs	r3, #3
 8005248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800524a:	2304      	movs	r3, #4
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800524e:	f107 0314 	add.w	r3, r7, #20
 8005252:	4619      	mov	r1, r3
 8005254:	480c      	ldr	r0, [pc, #48]	; (8005288 <HAL_I2C_MspInit+0xb0>)
 8005256:	f002 f871 	bl	800733c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <HAL_I2C_MspInit+0xac>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	4a08      	ldr	r2, [pc, #32]	; (8005284 <HAL_I2C_MspInit+0xac>)
 8005264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005268:	6413      	str	r3, [r2, #64]	; 0x40
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_I2C_MspInit+0xac>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005276:	bf00      	nop
 8005278:	3728      	adds	r7, #40	; 0x28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40005800 	.word	0x40005800
 8005284:	40023800 	.word	0x40023800
 8005288:	40020400 	.word	0x40020400

0800528c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 031c 	add.w	r3, r7, #28
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a32      	ldr	r2, [pc, #200]	; (8005374 <HAL_SPI_MspInit+0xe8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d12c      	bne.n	8005308 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_SPI_MspInit+0xec>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	4a30      	ldr	r2, [pc, #192]	; (8005378 <HAL_SPI_MspInit+0xec>)
 80052b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052bc:	6453      	str	r3, [r2, #68]	; 0x44
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <HAL_SPI_MspInit+0xec>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <HAL_SPI_MspInit+0xec>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a29      	ldr	r2, [pc, #164]	; (8005378 <HAL_SPI_MspInit+0xec>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b27      	ldr	r3, [pc, #156]	; (8005378 <HAL_SPI_MspInit+0xec>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80052e6:	23e0      	movs	r3, #224	; 0xe0
 80052e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ea:	2302      	movs	r3, #2
 80052ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f2:	2303      	movs	r3, #3
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052f6:	2305      	movs	r3, #5
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052fa:	f107 031c 	add.w	r3, r7, #28
 80052fe:	4619      	mov	r1, r3
 8005300:	481e      	ldr	r0, [pc, #120]	; (800537c <HAL_SPI_MspInit+0xf0>)
 8005302:	f002 f81b 	bl	800733c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005306:	e031      	b.n	800536c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <HAL_SPI_MspInit+0xf4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d12c      	bne.n	800536c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <HAL_SPI_MspInit+0xec>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <HAL_SPI_MspInit+0xec>)
 800531c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005320:	6413      	str	r3, [r2, #64]	; 0x40
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <HAL_SPI_MspInit+0xec>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_SPI_MspInit+0xec>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	4a10      	ldr	r2, [pc, #64]	; (8005378 <HAL_SPI_MspInit+0xec>)
 8005338:	f043 0302 	orr.w	r3, r3, #2
 800533c:	6313      	str	r3, [r2, #48]	; 0x30
 800533e:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <HAL_SPI_MspInit+0xec>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 800534a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800534e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005350:	2302      	movs	r3, #2
 8005352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005354:	2300      	movs	r3, #0
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005358:	2303      	movs	r3, #3
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800535c:	2305      	movs	r3, #5
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005360:	f107 031c 	add.w	r3, r7, #28
 8005364:	4619      	mov	r1, r3
 8005366:	4807      	ldr	r0, [pc, #28]	; (8005384 <HAL_SPI_MspInit+0xf8>)
 8005368:	f001 ffe8 	bl	800733c <HAL_GPIO_Init>
}
 800536c:	bf00      	nop
 800536e:	3730      	adds	r7, #48	; 0x30
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40013000 	.word	0x40013000
 8005378:	40023800 	.word	0x40023800
 800537c:	40020000 	.word	0x40020000
 8005380:	40003800 	.word	0x40003800
 8005384:	40020400 	.word	0x40020400

08005388 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	; 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005390:	f107 031c 	add.w	r3, r7, #28
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	609a      	str	r2, [r3, #8]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d12d      	bne.n	8005406 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	4b30      	ldr	r3, [pc, #192]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ba:	4b2d      	ldr	r3, [pc, #180]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	4b29      	ldr	r3, [pc, #164]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	4a28      	ldr	r2, [pc, #160]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6313      	str	r3, [r2, #48]	; 0x30
 80053d6:	4b26      	ldr	r3, [pc, #152]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 80053e2:	f248 0302 	movw	r3, #32770	; 0x8002
 80053e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053ec:	2301      	movs	r3, #1
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f0:	2300      	movs	r3, #0
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053f4:	2301      	movs	r3, #1
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053f8:	f107 031c 	add.w	r3, r7, #28
 80053fc:	4619      	mov	r1, r3
 80053fe:	481d      	ldr	r0, [pc, #116]	; (8005474 <HAL_TIM_Encoder_MspInit+0xec>)
 8005400:	f001 ff9c 	bl	800733c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005404:	e030      	b.n	8005468 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_TIM_Encoder_MspInit+0xf0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d12b      	bne.n	8005468 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	4b16      	ldr	r3, [pc, #88]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	4a15      	ldr	r2, [pc, #84]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 800541a:	f043 0304 	orr.w	r3, r3, #4
 800541e:	6413      	str	r3, [r2, #64]	; 0x40
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	4a0e      	ldr	r2, [pc, #56]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	6313      	str	r3, [r2, #48]	; 0x30
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <HAL_TIM_Encoder_MspInit+0xe8>)
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005448:	23c0      	movs	r3, #192	; 0xc0
 800544a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544c:	2302      	movs	r3, #2
 800544e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005450:	2301      	movs	r3, #1
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005454:	2300      	movs	r3, #0
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005458:	2302      	movs	r3, #2
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800545c:	f107 031c 	add.w	r3, r7, #28
 8005460:	4619      	mov	r1, r3
 8005462:	4806      	ldr	r0, [pc, #24]	; (800547c <HAL_TIM_Encoder_MspInit+0xf4>)
 8005464:	f001 ff6a 	bl	800733c <HAL_GPIO_Init>
}
 8005468:	bf00      	nop
 800546a:	3730      	adds	r7, #48	; 0x30
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023800 	.word	0x40023800
 8005474:	40020000 	.word	0x40020000
 8005478:	40000800 	.word	0x40000800
 800547c:	40020400 	.word	0x40020400

08005480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0e      	ldr	r2, [pc, #56]	; (80054c8 <HAL_TIM_Base_MspInit+0x48>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d115      	bne.n	80054be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_TIM_Base_MspInit+0x4c>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	4a0c      	ldr	r2, [pc, #48]	; (80054cc <HAL_TIM_Base_MspInit+0x4c>)
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6413      	str	r3, [r2, #64]	; 0x40
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <HAL_TIM_Base_MspInit+0x4c>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80054ae:	2200      	movs	r2, #0
 80054b0:	2100      	movs	r1, #0
 80054b2:	201d      	movs	r0, #29
 80054b4:	f001 fb2b 	bl	8006b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80054b8:	201d      	movs	r0, #29
 80054ba:	f001 fb44 	bl	8006b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40023800 	.word	0x40023800

080054d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a12      	ldr	r2, [pc, #72]	; (8005538 <HAL_TIM_MspPostInit+0x68>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d11d      	bne.n	800552e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_TIM_MspPostInit+0x6c>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <HAL_TIM_MspPostInit+0x6c>)
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_TIM_MspPostInit+0x6c>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800550e:	2330      	movs	r3, #48	; 0x30
 8005510:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800551e:	2302      	movs	r3, #2
 8005520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4619      	mov	r1, r3
 8005528:	4805      	ldr	r0, [pc, #20]	; (8005540 <HAL_TIM_MspPostInit+0x70>)
 800552a:	f001 ff07 	bl	800733c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800552e:	bf00      	nop
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40000400 	.word	0x40000400
 800553c:	40023800 	.word	0x40023800
 8005540:	40020400 	.word	0x40020400

08005544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08c      	sub	sp, #48	; 0x30
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800554c:	f107 031c 	add.w	r3, r7, #28
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a33      	ldr	r2, [pc, #204]	; (8005630 <HAL_UART_MspInit+0xec>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d12d      	bne.n	80055c2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	4b32      	ldr	r3, [pc, #200]	; (8005634 <HAL_UART_MspInit+0xf0>)
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	4a31      	ldr	r2, [pc, #196]	; (8005634 <HAL_UART_MspInit+0xf0>)
 8005570:	f043 0310 	orr.w	r3, r3, #16
 8005574:	6453      	str	r3, [r2, #68]	; 0x44
 8005576:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <HAL_UART_MspInit+0xf0>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	4b2b      	ldr	r3, [pc, #172]	; (8005634 <HAL_UART_MspInit+0xf0>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <HAL_UART_MspInit+0xf0>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	6313      	str	r3, [r2, #48]	; 0x30
 8005592:	4b28      	ldr	r3, [pc, #160]	; (8005634 <HAL_UART_MspInit+0xf0>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800559e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a4:	2302      	movs	r3, #2
 80055a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055b0:	2307      	movs	r3, #7
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b4:	f107 031c 	add.w	r3, r7, #28
 80055b8:	4619      	mov	r1, r3
 80055ba:	481f      	ldr	r0, [pc, #124]	; (8005638 <HAL_UART_MspInit+0xf4>)
 80055bc:	f001 febe 	bl	800733c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80055c0:	e031      	b.n	8005626 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_UART_MspInit+0xf8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d12c      	bne.n	8005626 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <HAL_UART_MspInit+0xf0>)
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	4a17      	ldr	r2, [pc, #92]	; (8005634 <HAL_UART_MspInit+0xf0>)
 80055d6:	f043 0320 	orr.w	r3, r3, #32
 80055da:	6453      	str	r3, [r2, #68]	; 0x44
 80055dc:	4b15      	ldr	r3, [pc, #84]	; (8005634 <HAL_UART_MspInit+0xf0>)
 80055de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	4b11      	ldr	r3, [pc, #68]	; (8005634 <HAL_UART_MspInit+0xf0>)
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	4a10      	ldr	r2, [pc, #64]	; (8005634 <HAL_UART_MspInit+0xf0>)
 80055f2:	f043 0301 	orr.w	r3, r3, #1
 80055f6:	6313      	str	r3, [r2, #48]	; 0x30
 80055f8:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <HAL_UART_MspInit+0xf0>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560a:	2302      	movs	r3, #2
 800560c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800560e:	2301      	movs	r3, #1
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005612:	2300      	movs	r3, #0
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005616:	2308      	movs	r3, #8
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561a:	f107 031c 	add.w	r3, r7, #28
 800561e:	4619      	mov	r1, r3
 8005620:	4805      	ldr	r0, [pc, #20]	; (8005638 <HAL_UART_MspInit+0xf4>)
 8005622:	f001 fe8b 	bl	800733c <HAL_GPIO_Init>
}
 8005626:	bf00      	nop
 8005628:	3730      	adds	r7, #48	; 0x30
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40011000 	.word	0x40011000
 8005634:	40023800 	.word	0x40023800
 8005638:	40020000 	.word	0x40020000
 800563c:	40011400 	.word	0x40011400

08005640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005644:	e7fe      	b.n	8005644 <NMI_Handler+0x4>

08005646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800564a:	e7fe      	b.n	800564a <HardFault_Handler+0x4>

0800564c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <MemManage_Handler+0x4>

08005652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005656:	e7fe      	b.n	8005656 <BusFault_Handler+0x4>

08005658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800565c:	e7fe      	b.n	800565c <UsageFault_Handler+0x4>

0800565e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800568c:	f000 f8b0 	bl	80057f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005690:	bf00      	nop
 8005692:	bd80      	pop	{r7, pc}

08005694 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005698:	4802      	ldr	r0, [pc, #8]	; (80056a4 <TIM3_IRQHandler+0x10>)
 800569a:	f004 fc81 	bl	8009fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20010118 	.word	0x20010118

080056a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 80056ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80056b0:	f001 ffe2 	bl	8007678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80056b4:	bf00      	nop
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80056bc:	4802      	ldr	r0, [pc, #8]	; (80056c8 <DMA2_Stream4_IRQHandler+0x10>)
 80056be:	f001 fbd3 	bl	8006e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	2000ff6c 	.word	0x2000ff6c

080056cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <SystemInit+0x28>)
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d6:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <SystemInit+0x28>)
 80056d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056e0:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <SystemInit+0x28>)
 80056e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056e6:	609a      	str	r2, [r3, #8]
#endif
}
 80056e8:	bf00      	nop
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	e000ed00 	.word	0xe000ed00

080056f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80056f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005730 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056fe:	e003      	b.n	8005708 <LoopCopyDataInit>

08005700 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005702:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005704:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005706:	3104      	adds	r1, #4

08005708 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005708:	480b      	ldr	r0, [pc, #44]	; (8005738 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800570c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800570e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005710:	d3f6      	bcc.n	8005700 <CopyDataInit>
  ldr  r2, =_sbss
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005714:	e002      	b.n	800571c <LoopFillZerobss>

08005716 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005716:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005718:	f842 3b04 	str.w	r3, [r2], #4

0800571c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800571e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005720:	d3f9      	bcc.n	8005716 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005722:	f7ff ffd3 	bl	80056cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005726:	f005 fe5b 	bl	800b3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800572a:	f7fe fd53 	bl	80041d4 <main>
  bx  lr    
 800572e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005730:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005734:	0800ce64 	.word	0x0800ce64
  ldr  r0, =_sdata
 8005738:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800573c:	20000364 	.word	0x20000364
  ldr  r2, =_sbss
 8005740:	20000364 	.word	0x20000364
  ldr  r3, = _ebss
 8005744:	20010234 	.word	0x20010234

08005748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005748:	e7fe      	b.n	8005748 <ADC_IRQHandler>
	...

0800574c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_Init+0x40>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <HAL_Init+0x40>)
 8005756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800575a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800575c:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_Init+0x40>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_Init+0x40>)
 8005762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_Init+0x40>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_Init+0x40>)
 800576e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005774:	2003      	movs	r0, #3
 8005776:	f001 f9bf 	bl	8006af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800577a:	2000      	movs	r0, #0
 800577c:	f000 f808 	bl	8005790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005780:	f7ff fc6e 	bl	8005060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	40023c00 	.word	0x40023c00

08005790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <HAL_InitTick+0x54>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <HAL_InitTick+0x58>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	4619      	mov	r1, r3
 80057a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f9d7 	bl	8006b62 <HAL_SYSTICK_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e00e      	b.n	80057dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b0f      	cmp	r3, #15
 80057c2:	d80a      	bhi.n	80057da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057c4:	2200      	movs	r2, #0
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	f001 f99f 	bl	8006b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057d0:	4a06      	ldr	r2, [pc, #24]	; (80057ec <HAL_InitTick+0x5c>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e000      	b.n	80057dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	200002f4 	.word	0x200002f4
 80057e8:	200002fc 	.word	0x200002fc
 80057ec:	200002f8 	.word	0x200002f8

080057f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <HAL_IncTick+0x20>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_IncTick+0x24>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4413      	add	r3, r2
 8005800:	4a04      	ldr	r2, [pc, #16]	; (8005814 <HAL_IncTick+0x24>)
 8005802:	6013      	str	r3, [r2, #0]
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	200002fc 	.word	0x200002fc
 8005814:	20010230 	.word	0x20010230

08005818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return uwTick;
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <HAL_GetTick+0x14>)
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	20010230 	.word	0x20010230

08005830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005838:	f7ff ffee 	bl	8005818 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005848:	d005      	beq.n	8005856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <HAL_Delay+0x44>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005856:	bf00      	nop
 8005858:	f7ff ffde 	bl	8005818 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	429a      	cmp	r2, r3
 8005866:	d8f7      	bhi.n	8005858 <HAL_Delay+0x28>
  {
  }
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200002fc 	.word	0x200002fc

08005878 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e033      	b.n	80058f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fc0a 	bl	80050b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d118      	bne.n	80058e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058be:	f023 0302 	bic.w	r3, r3, #2
 80058c2:	f043 0202 	orr.w	r2, r3, #2
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fbde 	bl	800608c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	f043 0201 	orr.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
 80058e6:	e001      	b.n	80058ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_ADC_Start+0x1a>
 8005916:	2302      	movs	r3, #2
 8005918:	e097      	b.n	8005a4a <HAL_ADC_Start+0x14a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d018      	beq.n	8005962 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005940:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <HAL_ADC_Start+0x158>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a45      	ldr	r2, [pc, #276]	; (8005a5c <HAL_ADC_Start+0x15c>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	0c9a      	lsrs	r2, r3, #18
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005954:	e002      	b.n	800595c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	3b01      	subs	r3, #1
 800595a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f9      	bne.n	8005956 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d15f      	bne.n	8005a30 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800599a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ae:	d106      	bne.n	80059be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b4:	f023 0206 	bic.w	r2, r3, #6
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44
 80059bc:	e002      	b.n	80059c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059cc:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <HAL_ADC_Start+0x160>)
 80059ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80059d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10f      	bne.n	8005a06 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d129      	bne.n	8005a48 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	e020      	b.n	8005a48 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <HAL_ADC_Start+0x164>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d11b      	bne.n	8005a48 <HAL_ADC_Start+0x148>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d114      	bne.n	8005a48 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	e00b      	b.n	8005a48 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f043 0210 	orr.w	r2, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f043 0201 	orr.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	200002f4 	.word	0x200002f4
 8005a5c:	431bde83 	.word	0x431bde83
 8005a60:	40012300 	.word	0x40012300
 8005a64:	40012000 	.word	0x40012000

08005a68 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a84:	d113      	bne.n	8005aae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a94:	d10b      	bne.n	8005aae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e063      	b.n	8005b76 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005aae:	f7ff feb3 	bl	8005818 <HAL_GetTick>
 8005ab2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ab4:	e021      	b.n	8005afa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d01d      	beq.n	8005afa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_ADC_PollForConversion+0x6c>
 8005ac4:	f7ff fea8 	bl	8005818 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d212      	bcs.n	8005afa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d00b      	beq.n	8005afa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e03d      	b.n	8005b76 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d1d6      	bne.n	8005ab6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0212 	mvn.w	r2, #18
 8005b10:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d123      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11f      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d111      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	f043 0201 	orr.w	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_ADC_Start_DMA+0x1e>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e0ce      	b.n	8005d3c <HAL_ADC_Start_DMA+0x1bc>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d018      	beq.n	8005be6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005bc4:	4b5f      	ldr	r3, [pc, #380]	; (8005d44 <HAL_ADC_Start_DMA+0x1c4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5f      	ldr	r2, [pc, #380]	; (8005d48 <HAL_ADC_Start_DMA+0x1c8>)
 8005bca:	fba2 2303 	umull	r2, r3, r2, r3
 8005bce:	0c9a      	lsrs	r2, r3, #18
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005bd8:	e002      	b.n	8005be0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f9      	bne.n	8005bda <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf4:	d107      	bne.n	8005c06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	f040 8086 	bne.w	8005d22 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d106      	bne.n	8005c64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	f023 0206 	bic.w	r2, r3, #6
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	; 0x44
 8005c62:	e002      	b.n	8005c6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c72:	4b36      	ldr	r3, [pc, #216]	; (8005d4c <HAL_ADC_Start_DMA+0x1cc>)
 8005c74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	4a35      	ldr	r2, [pc, #212]	; (8005d50 <HAL_ADC_Start_DMA+0x1d0>)
 8005c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	4a34      	ldr	r2, [pc, #208]	; (8005d54 <HAL_ADC_Start_DMA+0x1d4>)
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	4a33      	ldr	r2, [pc, #204]	; (8005d58 <HAL_ADC_Start_DMA+0x1d8>)
 8005c8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005c96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005ca6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	334c      	adds	r3, #76	; 0x4c
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f001 f806 	bl	8006cd8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 031f 	and.w	r3, r3, #31
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10f      	bne.n	8005cf8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d129      	bne.n	8005d3a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005cf4:	609a      	str	r2, [r3, #8]
 8005cf6:	e020      	b.n	8005d3a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <HAL_ADC_Start_DMA+0x1dc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d11b      	bne.n	8005d3a <HAL_ADC_Start_DMA+0x1ba>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d114      	bne.n	8005d3a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	e00b      	b.n	8005d3a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f043 0210 	orr.w	r2, r3, #16
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200002f4 	.word	0x200002f4
 8005d48:	431bde83 	.word	0x431bde83
 8005d4c:	40012300 	.word	0x40012300
 8005d50:	08006285 	.word	0x08006285
 8005d54:	0800633f 	.word	0x0800633f
 8005d58:	0800635b 	.word	0x0800635b
 8005d5c:	40012000 	.word	0x40012000

08005d60 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_ADC_Stop_DMA+0x1a>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e048      	b.n	8005e0c <HAL_ADC_Stop_DMA+0xac>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d130      	bne.n	8005e02 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d10f      	bne.n	8005dde <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 ffe0 	bl	8006d88 <HAL_DMA_Abort>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005dec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	f043 0201 	orr.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_ADC_ConfigChannel+0x1c>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e113      	b.n	800606c <HAL_ADC_ConfigChannel+0x244>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	d925      	bls.n	8005ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68d9      	ldr	r1, [r3, #12]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	3b1e      	subs	r3, #30
 8005e6a:	2207      	movs	r2, #7
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	43da      	mvns	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	400a      	ands	r2, r1
 8005e78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68d9      	ldr	r1, [r3, #12]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4403      	add	r3, r0
 8005e92:	3b1e      	subs	r3, #30
 8005e94:	409a      	lsls	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	e022      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6919      	ldr	r1, [r3, #16]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	4613      	mov	r3, r2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	4413      	add	r3, r2
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	43da      	mvns	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	400a      	ands	r2, r1
 8005ec2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6919      	ldr	r1, [r3, #16]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4403      	add	r3, r0
 8005edc:	409a      	lsls	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d824      	bhi.n	8005f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	3b05      	subs	r3, #5
 8005f00:	221f      	movs	r2, #31
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43da      	mvns	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	3b05      	subs	r3, #5
 8005f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34
 8005f36:	e04c      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	d824      	bhi.n	8005f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	3b23      	subs	r3, #35	; 0x23
 8005f52:	221f      	movs	r2, #31
 8005f54:	fa02 f303 	lsl.w	r3, r2, r3
 8005f58:	43da      	mvns	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	400a      	ands	r2, r1
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4618      	mov	r0, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	3b23      	subs	r3, #35	; 0x23
 8005f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
 8005f88:	e023      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	3b41      	subs	r3, #65	; 0x41
 8005f9c:	221f      	movs	r2, #31
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43da      	mvns	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	400a      	ands	r2, r1
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4618      	mov	r0, r3
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3b41      	subs	r3, #65	; 0x41
 8005fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fd2:	4b29      	ldr	r3, [pc, #164]	; (8006078 <HAL_ADC_ConfigChannel+0x250>)
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a28      	ldr	r2, [pc, #160]	; (800607c <HAL_ADC_ConfigChannel+0x254>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10f      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x1d8>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b12      	cmp	r3, #18
 8005fe6:	d10b      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <HAL_ADC_ConfigChannel+0x254>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d12b      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x23a>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_ADC_ConfigChannel+0x258>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <HAL_ADC_ConfigChannel+0x1f4>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b11      	cmp	r3, #17
 800601a:	d122      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a11      	ldr	r2, [pc, #68]	; (8006080 <HAL_ADC_ConfigChannel+0x258>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d111      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800603e:	4b11      	ldr	r3, [pc, #68]	; (8006084 <HAL_ADC_ConfigChannel+0x25c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a11      	ldr	r2, [pc, #68]	; (8006088 <HAL_ADC_ConfigChannel+0x260>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	0c9a      	lsrs	r2, r3, #18
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006054:	e002      	b.n	800605c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3b01      	subs	r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f9      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40012300 	.word	0x40012300
 800607c:	40012000 	.word	0x40012000
 8006080:	10000012 	.word	0x10000012
 8006084:	200002f4 	.word	0x200002f4
 8006088:	431bde83 	.word	0x431bde83

0800608c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006094:	4b79      	ldr	r3, [pc, #484]	; (800627c <ADC_Init+0x1f0>)
 8006096:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80060e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6859      	ldr	r1, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	4a58      	ldr	r2, [pc, #352]	; (8006280 <ADC_Init+0x1f4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d022      	beq.n	800616a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6899      	ldr	r1, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	e00f      	b.n	800618a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006188:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0202 	bic.w	r2, r2, #2
 8006198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6899      	ldr	r1, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7e1b      	ldrb	r3, [r3, #24]
 80061a4:	005a      	lsls	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01b      	beq.n	80061f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80061d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	3b01      	subs	r3, #1
 80061e4:	035a      	lsls	r2, r3, #13
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
 80061ee:	e007      	b.n	8006200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	3b01      	subs	r3, #1
 800621c:	051a      	lsls	r2, r3, #20
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6899      	ldr	r1, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006242:	025a      	lsls	r2, r3, #9
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6899      	ldr	r1, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	029a      	lsls	r2, r3, #10
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40012300 	.word	0x40012300
 8006280:	0f000001 	.word	0x0f000001

08006284 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800629a:	2b00      	cmp	r3, #0
 800629c:	d13c      	bne.n	8006318 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d12b      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d127      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d006      	beq.n	80062dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d119      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0220 	bic.w	r2, r2, #32
 80062ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f043 0201 	orr.w	r2, r3, #1
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7fe fe71 	bl	8004ff8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006316:	e00e      	b.n	8006336 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff fd75 	bl	8005e14 <HAL_ADC_ErrorCallback>
}
 800632a:	e004      	b.n	8006336 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7fe fe43 	bl	8004fd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2240      	movs	r2, #64	; 0x40
 800636c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	f043 0204 	orr.w	r2, r3, #4
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff fd4a 	bl	8005e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	2300      	movs	r3, #0
 800639a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_ADCEx_InjectedStart+0x22>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e0aa      	b.n	8006500 <HAL_ADCEx_InjectedStart+0x178>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d018      	beq.n	80063f2 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80063d0:	4b4e      	ldr	r3, [pc, #312]	; (800650c <HAL_ADCEx_InjectedStart+0x184>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a4e      	ldr	r2, [pc, #312]	; (8006510 <HAL_ADCEx_InjectedStart+0x188>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	0c9a      	lsrs	r2, r3, #18
 80063dc:	4613      	mov	r3, r2
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	4413      	add	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80063e4:	e002      	b.n	80063ec <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f9      	bne.n	80063e6 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d172      	bne.n	80064e6 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f06f 0204 	mvn.w	r2, #4
 8006436:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006438:	4b36      	ldr	r3, [pc, #216]	; (8006514 <HAL_ADCEx_InjectedStart+0x18c>)
 800643a:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2b00      	cmp	r3, #0
 8006446:	d124      	bne.n	8006492 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006452:	2b00      	cmp	r3, #0
 8006454:	bf0c      	ite	eq
 8006456:	2301      	moveq	r3, #1
 8006458:	2300      	movne	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d041      	beq.n	80064fe <HAL_ADCEx_InjectedStart+0x176>
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d03e      	beq.n	80064fe <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	e035      	b.n	80064fe <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800649c:	2b00      	cmp	r3, #0
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	bf0c      	ite	eq
 80064b6:	2301      	moveq	r3, #1
 80064b8:	2300      	movne	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_ADCEx_InjectedStart+0x190>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d11a      	bne.n	80064fe <HAL_ADCEx_InjectedStart+0x176>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d017      	beq.n	80064fe <HAL_ADCEx_InjectedStart+0x176>
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d014      	beq.n	80064fe <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80064e2:	609a      	str	r2, [r3, #8]
 80064e4:	e00b      	b.n	80064fe <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f043 0210 	orr.w	r2, r3, #16
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	f043 0201 	orr.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	200002f4 	.word	0x200002f4
 8006510:	431bde83 	.word	0x431bde83
 8006514:	40012300 	.word	0x40012300
 8006518:	40012000 	.word	0x40012000

0800651c <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_ADCEx_InjectedStop+0x1a>
 8006532:	2302      	movs	r3, #2
 8006534:	e037      	b.n	80065a6 <HAL_ADCEx_InjectedStop+0x8a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d120      	bne.n	800658c <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006554:	2b00      	cmp	r3, #0
 8006556:	d119      	bne.n	800658c <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d112      	bne.n	800659c <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800658a:	e007      	b.n	800659c <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	f043 0220 	orr.w	r2, r3, #32
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f06f 0204 	mvn.w	r2, #4
 80065ca:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d81f      	bhi.n	8006614 <HAL_ADCEx_InjectedGetValue+0x60>
 80065d4:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <HAL_ADCEx_InjectedGetValue+0x28>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	0800660b 	.word	0x0800660b
 80065e0:	08006601 	.word	0x08006601
 80065e4:	080065f7 	.word	0x080065f7
 80065e8:	080065ed 	.word	0x080065ed
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f2:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80065f4:	e00f      	b.n	8006616 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fc:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80065fe:	e00a      	b.n	8006616 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	60fb      	str	r3, [r7, #12]
    }
    break;
 8006608:	e005      	b.n	8006616 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006610:	60fb      	str	r3, [r7, #12]
    }
    break;
 8006612:	e000      	b.n	8006616 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8006614:	bf00      	nop
  }
  return tmp;
 8006616:	68fb      	ldr	r3, [r7, #12]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8006638:	2302      	movs	r3, #2
 800663a:	e17e      	b.n	800693a <HAL_ADCEx_InjectedConfigChannel+0x316>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b09      	cmp	r3, #9
 800664a:	d925      	bls.n	8006698 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68d9      	ldr	r1, [r3, #12]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	4613      	mov	r3, r2
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	4413      	add	r3, r2
 8006660:	3b1e      	subs	r3, #30
 8006662:	2207      	movs	r2, #7
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43da      	mvns	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	400a      	ands	r2, r1
 8006670:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68d9      	ldr	r1, [r3, #12]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	4618      	mov	r0, r3
 8006684:	4603      	mov	r3, r0
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	4403      	add	r3, r0
 800668a:	3b1e      	subs	r3, #30
 800668c:	409a      	lsls	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	e022      	b.n	80066de <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6919      	ldr	r1, [r3, #16]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	4613      	mov	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4413      	add	r3, r2
 80066ac:	2207      	movs	r2, #7
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43da      	mvns	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	400a      	ands	r2, r1
 80066ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6919      	ldr	r1, [r3, #16]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	4618      	mov	r0, r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	4403      	add	r3, r0
 80066d4:	409a      	lsls	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	051a      	lsls	r2, r3, #20
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	b2db      	uxtb	r3, r3
 800671a:	3303      	adds	r3, #3
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	4613      	mov	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	221f      	movs	r2, #31
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	43da      	mvns	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	400a      	ands	r2, r1
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	4618      	mov	r0, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	b2db      	uxtb	r3, r3
 8006754:	3303      	adds	r3, #3
 8006756:	b2db      	uxtb	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	fa00 f203 	lsl.w	r2, r0, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	4a75      	ldr	r2, [pc, #468]	; (8006948 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d022      	beq.n	80067bc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6899      	ldr	r1, [r3, #8]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80067a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6899      	ldr	r1, [r3, #8]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	69da      	ldr	r2, [r3, #28]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]
 80067ba:	e00f      	b.n	80067dc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80067ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80067da:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	7d5b      	ldrb	r3, [r3, #21]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067f2:	605a      	str	r2, [r3, #4]
 80067f4:	e007      	b.n	8006806 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006804:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	7d1b      	ldrb	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	e007      	b.n	8006830 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800682e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b03      	cmp	r3, #3
 8006836:	d02e      	beq.n	8006896 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8006838:	2b03      	cmp	r3, #3
 800683a:	d840      	bhi.n	80068be <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800683c:	2b01      	cmp	r3, #1
 800683e:	d002      	beq.n	8006846 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8006840:	2b02      	cmp	r3, #2
 8006842:	d014      	beq.n	800686e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8006844:	e03b      	b.n	80068be <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006854:	f023 030f 	bic.w	r3, r3, #15
 8006858:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6959      	ldr	r1, [r3, #20]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	615a      	str	r2, [r3, #20]
      break;
 800686c:	e03b      	b.n	80068e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800687c:	f023 030f 	bic.w	r3, r3, #15
 8006880:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6999      	ldr	r1, [r3, #24]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	619a      	str	r2, [r3, #24]
      break;
 8006894:	e027      	b.n	80068e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80068a4:	f023 030f 	bic.w	r3, r3, #15
 80068a8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69d9      	ldr	r1, [r3, #28]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	61da      	str	r2, [r3, #28]
      break;
 80068bc:	e013      	b.n	80068e6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80068cc:	f023 030f 	bic.w	r3, r3, #15
 80068d0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a19      	ldr	r1, [r3, #32]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	621a      	str	r2, [r3, #32]
      break;
 80068e4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068e6:	4b19      	ldr	r3, [pc, #100]	; (800694c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80068e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a18      	ldr	r2, [pc, #96]	; (8006950 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d109      	bne.n	8006908 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b12      	cmp	r3, #18
 80068fa:	d105      	bne.n	8006908 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a10      	ldr	r2, [pc, #64]	; (8006950 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10e      	bne.n	8006930 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a0f      	ldr	r2, [pc, #60]	; (8006954 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <HAL_ADCEx_InjectedConfigChannel+0x300>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b11      	cmp	r3, #17
 8006922:	d105      	bne.n	8006930 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	000f0001 	.word	0x000f0001
 800694c:	40012300 	.word	0x40012300
 8006950:	40012000 	.word	0x40012000
 8006954:	10000012 	.word	0x10000012

08006958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <__NVIC_SetPriorityGrouping+0x44>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006974:	4013      	ands	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800698a:	4a04      	ldr	r2, [pc, #16]	; (800699c <__NVIC_SetPriorityGrouping+0x44>)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	60d3      	str	r3, [r2, #12]
}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	e000ed00 	.word	0xe000ed00

080069a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069a4:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <__NVIC_GetPriorityGrouping+0x18>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	0a1b      	lsrs	r3, r3, #8
 80069aa:	f003 0307 	and.w	r3, r3, #7
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db0b      	blt.n	80069e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	f003 021f 	and.w	r2, r3, #31
 80069d4:	4907      	ldr	r1, [pc, #28]	; (80069f4 <__NVIC_EnableIRQ+0x38>)
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2001      	movs	r0, #1
 80069de:	fa00 f202 	lsl.w	r2, r0, r2
 80069e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	e000e100 	.word	0xe000e100

080069f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	6039      	str	r1, [r7, #0]
 8006a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db0a      	blt.n	8006a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	490c      	ldr	r1, [pc, #48]	; (8006a44 <__NVIC_SetPriority+0x4c>)
 8006a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a16:	0112      	lsls	r2, r2, #4
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a20:	e00a      	b.n	8006a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	4908      	ldr	r1, [pc, #32]	; (8006a48 <__NVIC_SetPriority+0x50>)
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	3b04      	subs	r3, #4
 8006a30:	0112      	lsls	r2, r2, #4
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	440b      	add	r3, r1
 8006a36:	761a      	strb	r2, [r3, #24]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	e000e100 	.word	0xe000e100
 8006a48:	e000ed00 	.word	0xe000ed00

08006a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b089      	sub	sp, #36	; 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f1c3 0307 	rsb	r3, r3, #7
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	bf28      	it	cs
 8006a6a:	2304      	movcs	r3, #4
 8006a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	3304      	adds	r3, #4
 8006a72:	2b06      	cmp	r3, #6
 8006a74:	d902      	bls.n	8006a7c <NVIC_EncodePriority+0x30>
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	3b03      	subs	r3, #3
 8006a7a:	e000      	b.n	8006a7e <NVIC_EncodePriority+0x32>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43da      	mvns	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	401a      	ands	r2, r3
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a94:	f04f 31ff 	mov.w	r1, #4294967295
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9e:	43d9      	mvns	r1, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aa4:	4313      	orrs	r3, r2
         );
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3724      	adds	r7, #36	; 0x24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ac4:	d301      	bcc.n	8006aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e00f      	b.n	8006aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aca:	4a0a      	ldr	r2, [pc, #40]	; (8006af4 <SysTick_Config+0x40>)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ad2:	210f      	movs	r1, #15
 8006ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad8:	f7ff ff8e 	bl	80069f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <SysTick_Config+0x40>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ae2:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <SysTick_Config+0x40>)
 8006ae4:	2207      	movs	r2, #7
 8006ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	e000e010 	.word	0xe000e010

08006af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff ff29 	bl	8006958 <__NVIC_SetPriorityGrouping>
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	4603      	mov	r3, r0
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b20:	f7ff ff3e 	bl	80069a0 <__NVIC_GetPriorityGrouping>
 8006b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	68b9      	ldr	r1, [r7, #8]
 8006b2a:	6978      	ldr	r0, [r7, #20]
 8006b2c:	f7ff ff8e 	bl	8006a4c <NVIC_EncodePriority>
 8006b30:	4602      	mov	r2, r0
 8006b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff ff5d 	bl	80069f8 <__NVIC_SetPriority>
}
 8006b3e:	bf00      	nop
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff ff31 	bl	80069bc <__NVIC_EnableIRQ>
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ffa2 	bl	8006ab4 <SysTick_Config>
 8006b70:	4603      	mov	r3, r0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006b88:	f7fe fe46 	bl	8005818 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e099      	b.n	8006ccc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bb8:	e00f      	b.n	8006bda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bba:	f7fe fe2d 	bl	8005818 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d908      	bls.n	8006bda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e078      	b.n	8006ccc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e8      	bne.n	8006bba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <HAL_DMA_Init+0x158>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d107      	bne.n	8006c44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0307 	bic.w	r3, r3, #7
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d117      	bne.n	8006c9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fadf 	bl	8007244 <DMA_CheckFifoParam>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d008      	beq.n	8006c9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2240      	movs	r2, #64	; 0x40
 8006c90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e016      	b.n	8006ccc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa96 	bl	80071d8 <DMA_CalcBaseAndBitshift>
 8006cac:	4603      	mov	r3, r0
 8006cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb4:	223f      	movs	r2, #63	; 0x3f
 8006cb6:	409a      	lsls	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	f010803f 	.word	0xf010803f

08006cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d101      	bne.n	8006cfe <HAL_DMA_Start_IT+0x26>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e040      	b.n	8006d80 <HAL_DMA_Start_IT+0xa8>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d12f      	bne.n	8006d72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fa28 	bl	800717c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	223f      	movs	r2, #63	; 0x3f
 8006d32:	409a      	lsls	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0216 	orr.w	r2, r2, #22
 8006d46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0208 	orr.w	r2, r2, #8
 8006d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e005      	b.n	8006d7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006d96:	f7fe fd3f 	bl	8005818 <HAL_GetTick>
 8006d9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d008      	beq.n	8006dba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2280      	movs	r2, #128	; 0x80
 8006dac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e052      	b.n	8006e60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0216 	bic.w	r2, r2, #22
 8006dc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <HAL_DMA_Abort+0x62>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0208 	bic.w	r2, r2, #8
 8006df8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e0a:	e013      	b.n	8006e34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e0c:	f7fe fd04 	bl	8005818 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d90c      	bls.n	8006e34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e015      	b.n	8006e60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e4      	bne.n	8006e0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e46:	223f      	movs	r2, #63	; 0x3f
 8006e48:	409a      	lsls	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e74:	4b8e      	ldr	r3, [pc, #568]	; (80070b0 <HAL_DMA_IRQHandler+0x248>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a8e      	ldr	r2, [pc, #568]	; (80070b4 <HAL_DMA_IRQHandler+0x24c>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	0a9b      	lsrs	r3, r3, #10
 8006e80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e92:	2208      	movs	r2, #8
 8006e94:	409a      	lsls	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01a      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d013      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0204 	bic.w	r2, r2, #4
 8006eba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ecc:	f043 0201 	orr.w	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed8:	2201      	movs	r2, #1
 8006eda:	409a      	lsls	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d012      	beq.n	8006f0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	409a      	lsls	r2, r3
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f02:	f043 0202 	orr.w	r2, r3, #2
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0e:	2204      	movs	r2, #4
 8006f10:	409a      	lsls	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4013      	ands	r3, r2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d012      	beq.n	8006f40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f38:	f043 0204 	orr.w	r2, r3, #4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f44:	2210      	movs	r2, #16
 8006f46:	409a      	lsls	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d043      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d03c      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f62:	2210      	movs	r2, #16
 8006f64:	409a      	lsls	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d018      	beq.n	8006faa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d108      	bne.n	8006f98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d024      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
 8006f96:	e01f      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
 8006fa8:	e016      	b.n	8006fd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d107      	bne.n	8006fc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0208 	bic.w	r2, r2, #8
 8006fc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fdc:	2220      	movs	r2, #32
 8006fde:	409a      	lsls	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 808f 	beq.w	8007108 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 8087 	beq.w	8007108 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffe:	2220      	movs	r2, #32
 8007000:	409a      	lsls	r2, r3
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b05      	cmp	r3, #5
 8007010:	d136      	bne.n	8007080 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0216 	bic.w	r2, r2, #22
 8007020:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695a      	ldr	r2, [r3, #20]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007030:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <HAL_DMA_IRQHandler+0x1da>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0208 	bic.w	r2, r2, #8
 8007050:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007056:	223f      	movs	r2, #63	; 0x3f
 8007058:	409a      	lsls	r2, r3
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007072:	2b00      	cmp	r3, #0
 8007074:	d07e      	beq.n	8007174 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
        }
        return;
 800707e:	e079      	b.n	8007174 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01d      	beq.n	80070ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10d      	bne.n	80070b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d031      	beq.n	8007108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	4798      	blx	r3
 80070ac:	e02c      	b.n	8007108 <HAL_DMA_IRQHandler+0x2a0>
 80070ae:	bf00      	nop
 80070b0:	200002f4 	.word	0x200002f4
 80070b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d023      	beq.n	8007108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
 80070c8:	e01e      	b.n	8007108 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10f      	bne.n	80070f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0210 	bic.w	r2, r2, #16
 80070e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710c:	2b00      	cmp	r3, #0
 800710e:	d032      	beq.n	8007176 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d022      	beq.n	8007162 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2205      	movs	r2, #5
 8007120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	3301      	adds	r3, #1
 8007138:	60bb      	str	r3, [r7, #8]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	429a      	cmp	r2, r3
 800713e:	d307      	bcc.n	8007150 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f2      	bne.n	8007134 <HAL_DMA_IRQHandler+0x2cc>
 800714e:	e000      	b.n	8007152 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007150:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	e000      	b.n	8007176 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007174:	bf00      	nop
    }
  }
}
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007198:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d108      	bne.n	80071bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80071ba:	e007      	b.n	80071cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	60da      	str	r2, [r3, #12]
}
 80071cc:	bf00      	nop
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	3b10      	subs	r3, #16
 80071e8:	4a14      	ldr	r2, [pc, #80]	; (800723c <DMA_CalcBaseAndBitshift+0x64>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	091b      	lsrs	r3, r3, #4
 80071f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <DMA_CalcBaseAndBitshift+0x68>)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4413      	add	r3, r2
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d909      	bls.n	800721a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	659a      	str	r2, [r3, #88]	; 0x58
 8007218:	e007      	b.n	800722a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	aaaaaaab 	.word	0xaaaaaaab
 8007240:	0800c544 	.word	0x0800c544

08007244 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d11f      	bne.n	800729e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b03      	cmp	r3, #3
 8007262:	d856      	bhi.n	8007312 <DMA_CheckFifoParam+0xce>
 8007264:	a201      	add	r2, pc, #4	; (adr r2, 800726c <DMA_CheckFifoParam+0x28>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	0800727d 	.word	0x0800727d
 8007270:	0800728f 	.word	0x0800728f
 8007274:	0800727d 	.word	0x0800727d
 8007278:	08007313 	.word	0x08007313
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d046      	beq.n	8007316 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800728c:	e043      	b.n	8007316 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007292:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007296:	d140      	bne.n	800731a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800729c:	e03d      	b.n	800731a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a6:	d121      	bne.n	80072ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d837      	bhi.n	800731e <DMA_CheckFifoParam+0xda>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <DMA_CheckFifoParam+0x70>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072c5 	.word	0x080072c5
 80072b8:	080072cb 	.word	0x080072cb
 80072bc:	080072c5 	.word	0x080072c5
 80072c0:	080072dd 	.word	0x080072dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	73fb      	strb	r3, [r7, #15]
      break;
 80072c8:	e030      	b.n	800732c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d025      	beq.n	8007322 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072da:	e022      	b.n	8007322 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072e4:	d11f      	bne.n	8007326 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80072ea:	e01c      	b.n	8007326 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d903      	bls.n	80072fa <DMA_CheckFifoParam+0xb6>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d003      	beq.n	8007300 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80072f8:	e018      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]
      break;
 80072fe:	e015      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
      break;
 8007310:	e00b      	b.n	800732a <DMA_CheckFifoParam+0xe6>
      break;
 8007312:	bf00      	nop
 8007314:	e00a      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      break;
 8007316:	bf00      	nop
 8007318:	e008      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      break;
 800731a:	bf00      	nop
 800731c:	e006      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      break;
 800731e:	bf00      	nop
 8007320:	e004      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      break;
 8007322:	bf00      	nop
 8007324:	e002      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      break;   
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <DMA_CheckFifoParam+0xe8>
      break;
 800732a:	bf00      	nop
    }
  } 
  
  return status; 
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop

0800733c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800733c:	b480      	push	{r7}
 800733e:	b089      	sub	sp, #36	; 0x24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800734e:	2300      	movs	r3, #0
 8007350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	e159      	b.n	800760c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007358:	2201      	movs	r2, #1
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	fa02 f303 	lsl.w	r3, r2, r3
 8007360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4013      	ands	r3, r2
 800736a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	429a      	cmp	r2, r3
 8007372:	f040 8148 	bne.w	8007606 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b01      	cmp	r3, #1
 8007380:	d005      	beq.n	800738e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800738a:	2b02      	cmp	r3, #2
 800738c:	d130      	bne.n	80073f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	2203      	movs	r2, #3
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43db      	mvns	r3, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4013      	ands	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073c4:	2201      	movs	r2, #1
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	43db      	mvns	r3, r3
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	4013      	ands	r3, r2
 80073d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	091b      	lsrs	r3, r3, #4
 80073da:	f003 0201 	and.w	r2, r3, #1
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d017      	beq.n	800742c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	2203      	movs	r2, #3
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	43db      	mvns	r3, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4013      	ands	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4313      	orrs	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d123      	bne.n	8007480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	08da      	lsrs	r2, r3, #3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3208      	adds	r2, #8
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	220f      	movs	r2, #15
 8007450:	fa02 f303 	lsl.w	r3, r2, r3
 8007454:	43db      	mvns	r3, r3
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	4013      	ands	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	4313      	orrs	r3, r2
 8007470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	08da      	lsrs	r2, r3, #3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3208      	adds	r2, #8
 800747a:	69b9      	ldr	r1, [r7, #24]
 800747c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	2203      	movs	r2, #3
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4013      	ands	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f003 0203 	and.w	r2, r3, #3
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80a2 	beq.w	8007606 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	4b57      	ldr	r3, [pc, #348]	; (8007624 <HAL_GPIO_Init+0x2e8>)
 80074c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ca:	4a56      	ldr	r2, [pc, #344]	; (8007624 <HAL_GPIO_Init+0x2e8>)
 80074cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074d0:	6453      	str	r3, [r2, #68]	; 0x44
 80074d2:	4b54      	ldr	r3, [pc, #336]	; (8007624 <HAL_GPIO_Init+0x2e8>)
 80074d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074de:	4a52      	ldr	r2, [pc, #328]	; (8007628 <HAL_GPIO_Init+0x2ec>)
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	089b      	lsrs	r3, r3, #2
 80074e4:	3302      	adds	r3, #2
 80074e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	220f      	movs	r2, #15
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	43db      	mvns	r3, r3
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	4013      	ands	r3, r2
 8007500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a49      	ldr	r2, [pc, #292]	; (800762c <HAL_GPIO_Init+0x2f0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d019      	beq.n	800753e <HAL_GPIO_Init+0x202>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a48      	ldr	r2, [pc, #288]	; (8007630 <HAL_GPIO_Init+0x2f4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_GPIO_Init+0x1fe>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a47      	ldr	r2, [pc, #284]	; (8007634 <HAL_GPIO_Init+0x2f8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d00d      	beq.n	8007536 <HAL_GPIO_Init+0x1fa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a46      	ldr	r2, [pc, #280]	; (8007638 <HAL_GPIO_Init+0x2fc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d007      	beq.n	8007532 <HAL_GPIO_Init+0x1f6>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a45      	ldr	r2, [pc, #276]	; (800763c <HAL_GPIO_Init+0x300>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d101      	bne.n	800752e <HAL_GPIO_Init+0x1f2>
 800752a:	2304      	movs	r3, #4
 800752c:	e008      	b.n	8007540 <HAL_GPIO_Init+0x204>
 800752e:	2307      	movs	r3, #7
 8007530:	e006      	b.n	8007540 <HAL_GPIO_Init+0x204>
 8007532:	2303      	movs	r3, #3
 8007534:	e004      	b.n	8007540 <HAL_GPIO_Init+0x204>
 8007536:	2302      	movs	r3, #2
 8007538:	e002      	b.n	8007540 <HAL_GPIO_Init+0x204>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <HAL_GPIO_Init+0x204>
 800753e:	2300      	movs	r3, #0
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	f002 0203 	and.w	r2, r2, #3
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	4093      	lsls	r3, r2
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	4313      	orrs	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007550:	4935      	ldr	r1, [pc, #212]	; (8007628 <HAL_GPIO_Init+0x2ec>)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	089b      	lsrs	r3, r3, #2
 8007556:	3302      	adds	r3, #2
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800755e:	4b38      	ldr	r3, [pc, #224]	; (8007640 <HAL_GPIO_Init+0x304>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007582:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <HAL_GPIO_Init+0x304>)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007588:	4b2d      	ldr	r3, [pc, #180]	; (8007640 <HAL_GPIO_Init+0x304>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	43db      	mvns	r3, r3
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	4013      	ands	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075ac:	4a24      	ldr	r2, [pc, #144]	; (8007640 <HAL_GPIO_Init+0x304>)
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80075b2:	4b23      	ldr	r3, [pc, #140]	; (8007640 <HAL_GPIO_Init+0x304>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	43db      	mvns	r3, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4013      	ands	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075d6:	4a1a      	ldr	r2, [pc, #104]	; (8007640 <HAL_GPIO_Init+0x304>)
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075dc:	4b18      	ldr	r3, [pc, #96]	; (8007640 <HAL_GPIO_Init+0x304>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007600:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <HAL_GPIO_Init+0x304>)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	3301      	adds	r3, #1
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	f67f aea2 	bls.w	8007358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800
 8007628:	40013800 	.word	0x40013800
 800762c:	40020000 	.word	0x40020000
 8007630:	40020400 	.word	0x40020400
 8007634:	40020800 	.word	0x40020800
 8007638:	40020c00 	.word	0x40020c00
 800763c:	40021000 	.word	0x40021000
 8007640:	40013c00 	.word	0x40013c00

08007644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	807b      	strh	r3, [r7, #2]
 8007650:	4613      	mov	r3, r2
 8007652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007654:	787b      	ldrb	r3, [r7, #1]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007660:	e003      	b.n	800766a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007662:	887b      	ldrh	r3, [r7, #2]
 8007664:	041a      	lsls	r2, r3, #16
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	619a      	str	r2, [r3, #24]
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007684:	695a      	ldr	r2, [r3, #20]
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d006      	beq.n	800769c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800768e:	4a05      	ldr	r2, [pc, #20]	; (80076a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007690:	88fb      	ldrh	r3, [r7, #6]
 8007692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	4618      	mov	r0, r3
 8007698:	f7fd fcc8 	bl	800502c <HAL_GPIO_EXTI_Callback>
  }
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	40013c00 	.word	0x40013c00

080076a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e12b      	b.n	8007912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fd fd82 	bl	80051d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2224      	movs	r2, #36	; 0x24
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800770a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800770c:	f001 fbbc 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 8007710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	4a81      	ldr	r2, [pc, #516]	; (800791c <HAL_I2C_Init+0x274>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d807      	bhi.n	800772c <HAL_I2C_Init+0x84>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a80      	ldr	r2, [pc, #512]	; (8007920 <HAL_I2C_Init+0x278>)
 8007720:	4293      	cmp	r3, r2
 8007722:	bf94      	ite	ls
 8007724:	2301      	movls	r3, #1
 8007726:	2300      	movhi	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	e006      	b.n	800773a <HAL_I2C_Init+0x92>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4a7d      	ldr	r2, [pc, #500]	; (8007924 <HAL_I2C_Init+0x27c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	bf94      	ite	ls
 8007734:	2301      	movls	r3, #1
 8007736:	2300      	movhi	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e0e7      	b.n	8007912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a78      	ldr	r2, [pc, #480]	; (8007928 <HAL_I2C_Init+0x280>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	0c9b      	lsrs	r3, r3, #18
 800774c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	4a6a      	ldr	r2, [pc, #424]	; (800791c <HAL_I2C_Init+0x274>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d802      	bhi.n	800777c <HAL_I2C_Init+0xd4>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	3301      	adds	r3, #1
 800777a:	e009      	b.n	8007790 <HAL_I2C_Init+0xe8>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007782:	fb02 f303 	mul.w	r3, r2, r3
 8007786:	4a69      	ldr	r2, [pc, #420]	; (800792c <HAL_I2C_Init+0x284>)
 8007788:	fba2 2303 	umull	r2, r3, r2, r3
 800778c:	099b      	lsrs	r3, r3, #6
 800778e:	3301      	adds	r3, #1
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	430b      	orrs	r3, r1
 8007796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80077a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	495c      	ldr	r1, [pc, #368]	; (800791c <HAL_I2C_Init+0x274>)
 80077ac:	428b      	cmp	r3, r1
 80077ae:	d819      	bhi.n	80077e4 <HAL_I2C_Init+0x13c>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1e59      	subs	r1, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80077be:	1c59      	adds	r1, r3, #1
 80077c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80077c4:	400b      	ands	r3, r1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <HAL_I2C_Init+0x138>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	1e59      	subs	r1, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80077d8:	3301      	adds	r3, #1
 80077da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077de:	e051      	b.n	8007884 <HAL_I2C_Init+0x1dc>
 80077e0:	2304      	movs	r3, #4
 80077e2:	e04f      	b.n	8007884 <HAL_I2C_Init+0x1dc>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d111      	bne.n	8007810 <HAL_I2C_Init+0x168>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	1e58      	subs	r0, r3, #1
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6859      	ldr	r1, [r3, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	440b      	add	r3, r1
 80077fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80077fe:	3301      	adds	r3, #1
 8007800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007804:	2b00      	cmp	r3, #0
 8007806:	bf0c      	ite	eq
 8007808:	2301      	moveq	r3, #1
 800780a:	2300      	movne	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	e012      	b.n	8007836 <HAL_I2C_Init+0x18e>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	1e58      	subs	r0, r3, #1
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6859      	ldr	r1, [r3, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	0099      	lsls	r1, r3, #2
 8007820:	440b      	add	r3, r1
 8007822:	fbb0 f3f3 	udiv	r3, r0, r3
 8007826:	3301      	adds	r3, #1
 8007828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <HAL_I2C_Init+0x196>
 800783a:	2301      	movs	r3, #1
 800783c:	e022      	b.n	8007884 <HAL_I2C_Init+0x1dc>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10e      	bne.n	8007864 <HAL_I2C_Init+0x1bc>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1e58      	subs	r0, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6859      	ldr	r1, [r3, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	440b      	add	r3, r1
 8007854:	fbb0 f3f3 	udiv	r3, r0, r3
 8007858:	3301      	adds	r3, #1
 800785a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800785e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007862:	e00f      	b.n	8007884 <HAL_I2C_Init+0x1dc>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	1e58      	subs	r0, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6859      	ldr	r1, [r3, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	0099      	lsls	r1, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	fbb0 f3f3 	udiv	r3, r0, r3
 800787a:	3301      	adds	r3, #1
 800787c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	6809      	ldr	r1, [r1, #0]
 8007888:	4313      	orrs	r3, r2
 800788a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80078b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6911      	ldr	r1, [r2, #16]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68d2      	ldr	r2, [r2, #12]
 80078be:	4311      	orrs	r1, r2
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	6812      	ldr	r2, [r2, #0]
 80078c4:	430b      	orrs	r3, r1
 80078c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695a      	ldr	r2, [r3, #20]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	000186a0 	.word	0x000186a0
 8007920:	001e847f 	.word	0x001e847f
 8007924:	003d08ff 	.word	0x003d08ff
 8007928:	431bde83 	.word	0x431bde83
 800792c:	10624dd3 	.word	0x10624dd3

08007930 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	4608      	mov	r0, r1
 800793a:	4611      	mov	r1, r2
 800793c:	461a      	mov	r2, r3
 800793e:	4603      	mov	r3, r0
 8007940:	817b      	strh	r3, [r7, #10]
 8007942:	460b      	mov	r3, r1
 8007944:	813b      	strh	r3, [r7, #8]
 8007946:	4613      	mov	r3, r2
 8007948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800794a:	f7fd ff65 	bl	8005818 <HAL_GetTick>
 800794e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b20      	cmp	r3, #32
 800795a:	f040 80d9 	bne.w	8007b10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	2319      	movs	r3, #25
 8007964:	2201      	movs	r2, #1
 8007966:	496d      	ldr	r1, [pc, #436]	; (8007b1c <HAL_I2C_Mem_Write+0x1ec>)
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fc7f 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007974:	2302      	movs	r3, #2
 8007976:	e0cc      	b.n	8007b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_I2C_Mem_Write+0x56>
 8007982:	2302      	movs	r3, #2
 8007984:	e0c5      	b.n	8007b12 <HAL_I2C_Mem_Write+0x1e2>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b01      	cmp	r3, #1
 800799a:	d007      	beq.n	80079ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2221      	movs	r2, #33	; 0x21
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2240      	movs	r2, #64	; 0x40
 80079c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a3a      	ldr	r2, [r7, #32]
 80079d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4a4d      	ldr	r2, [pc, #308]	; (8007b20 <HAL_I2C_Mem_Write+0x1f0>)
 80079ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079ee:	88f8      	ldrh	r0, [r7, #6]
 80079f0:	893a      	ldrh	r2, [r7, #8]
 80079f2:	8979      	ldrh	r1, [r7, #10]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	4603      	mov	r3, r0
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fab6 	bl	8007f70 <I2C_RequestMemoryWrite>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d052      	beq.n	8007ab0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e081      	b.n	8007b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fd00 	bl	8008418 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d107      	bne.n	8007a36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e06b      	b.n	8007b12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	781a      	ldrb	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d11b      	bne.n	8007ab0 <HAL_I2C_Mem_Write+0x180>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d017      	beq.n	8007ab0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1aa      	bne.n	8007a0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 fcec 	bl	800849a <I2C_WaitOnBTFFlagUntilTimeout>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00d      	beq.n	8007ae4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d107      	bne.n	8007ae0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ade:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e016      	b.n	8007b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	00100002 	.word	0x00100002
 8007b20:	ffff0000 	.word	0xffff0000

08007b24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08c      	sub	sp, #48	; 0x30
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	817b      	strh	r3, [r7, #10]
 8007b36:	460b      	mov	r3, r1
 8007b38:	813b      	strh	r3, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b3e:	f7fd fe6b 	bl	8005818 <HAL_GetTick>
 8007b42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b20      	cmp	r3, #32
 8007b4e:	f040 8208 	bne.w	8007f62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	2319      	movs	r3, #25
 8007b58:	2201      	movs	r2, #1
 8007b5a:	497b      	ldr	r1, [pc, #492]	; (8007d48 <HAL_I2C_Mem_Read+0x224>)
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fb85 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e1fb      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_I2C_Mem_Read+0x56>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e1f4      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d007      	beq.n	8007ba0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2222      	movs	r2, #34	; 0x22
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2240      	movs	r2, #64	; 0x40
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4a5b      	ldr	r2, [pc, #364]	; (8007d4c <HAL_I2C_Mem_Read+0x228>)
 8007be0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007be2:	88f8      	ldrh	r0, [r7, #6]
 8007be4:	893a      	ldrh	r2, [r7, #8]
 8007be6:	8979      	ldrh	r1, [r7, #10]
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fa52 	bl	800809c <I2C_RequestMemoryRead>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e1b0      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d113      	bne.n	8007c32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	623b      	str	r3, [r7, #32]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	623b      	str	r3, [r7, #32]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	623b      	str	r3, [r7, #32]
 8007c1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e184      	b.n	8007f3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d11b      	bne.n	8007c72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	e164      	b.n	8007f3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d11b      	bne.n	8007cb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	e144      	b.n	8007f3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007cc8:	e138      	b.n	8007f3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f200 80f1 	bhi.w	8007eb6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d123      	bne.n	8007d24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 fc1b 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e139      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691a      	ldr	r2, [r3, #16]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	b2d2      	uxtb	r2, r2
 8007cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d22:	e10b      	b.n	8007f3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d14e      	bne.n	8007dca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	2200      	movs	r2, #0
 8007d34:	4906      	ldr	r1, [pc, #24]	; (8007d50 <HAL_I2C_Mem_Read+0x22c>)
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fa98 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e10e      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
 8007d46:	bf00      	nop
 8007d48:	00100002 	.word	0x00100002
 8007d4c:	ffff0000 	.word	0xffff0000
 8007d50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dc8:	e0b8      	b.n	8007f3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4966      	ldr	r1, [pc, #408]	; (8007f6c <HAL_I2C_Mem_Read+0x448>)
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 fa49 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0bf      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	494f      	ldr	r1, [pc, #316]	; (8007f6c <HAL_I2C_Mem_Read+0x448>)
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fa1b 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e091      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691a      	ldr	r2, [r3, #16]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007eb4:	e042      	b.n	8007f3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fb2e 	bl	800851c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e04c      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d118      	bne.n	8007f3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	b2d2      	uxtb	r2, r2
 8007f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f47f aec2 	bne.w	8007cca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e000      	b.n	8007f64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007f62:	2302      	movs	r3, #2
  }
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3728      	adds	r7, #40	; 0x28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	00010004 	.word	0x00010004

08007f70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	4608      	mov	r0, r1
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4603      	mov	r3, r0
 8007f80:	817b      	strh	r3, [r7, #10]
 8007f82:	460b      	mov	r3, r1
 8007f84:	813b      	strh	r3, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f960 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00d      	beq.n	8007fce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc0:	d103      	bne.n	8007fca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e05f      	b.n	800808e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fce:	897b      	ldrh	r3, [r7, #10]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	6a3a      	ldr	r2, [r7, #32]
 8007fe2:	492d      	ldr	r1, [pc, #180]	; (8008098 <I2C_RequestMemoryWrite+0x128>)
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 f998 	bl	800831a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e04c      	b.n	800808e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800800a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800c:	6a39      	ldr	r1, [r7, #32]
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fa02 	bl	8008418 <I2C_WaitOnTXEFlagUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	2b04      	cmp	r3, #4
 8008020:	d107      	bne.n	8008032 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008030:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e02b      	b.n	800808e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d105      	bne.n	8008048 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800803c:	893b      	ldrh	r3, [r7, #8]
 800803e:	b2da      	uxtb	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	611a      	str	r2, [r3, #16]
 8008046:	e021      	b.n	800808c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008048:	893b      	ldrh	r3, [r7, #8]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	b29b      	uxth	r3, r3
 800804e:	b2da      	uxtb	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008058:	6a39      	ldr	r1, [r7, #32]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f9dc 	bl	8008418 <I2C_WaitOnTXEFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00d      	beq.n	8008082 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	2b04      	cmp	r3, #4
 800806c:	d107      	bne.n	800807e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e005      	b.n	800808e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008082:	893b      	ldrh	r3, [r7, #8]
 8008084:	b2da      	uxtb	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	00010002 	.word	0x00010002

0800809c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	4608      	mov	r0, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	461a      	mov	r2, r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	817b      	strh	r3, [r7, #10]
 80080ae:	460b      	mov	r3, r1
 80080b0:	813b      	strh	r3, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	2200      	movs	r2, #0
 80080de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f8c2 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080fc:	d103      	bne.n	8008106 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008104:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e0aa      	b.n	8008260 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800810a:	897b      	ldrh	r3, [r7, #10]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008118:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	6a3a      	ldr	r2, [r7, #32]
 800811e:	4952      	ldr	r1, [pc, #328]	; (8008268 <I2C_RequestMemoryRead+0x1cc>)
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f8fa 	bl	800831a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e097      	b.n	8008260 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008130:	2300      	movs	r3, #0
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008148:	6a39      	ldr	r1, [r7, #32]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f964 	bl	8008418 <I2C_WaitOnTXEFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	2b04      	cmp	r3, #4
 800815c:	d107      	bne.n	800816e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800816c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e076      	b.n	8008260 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d105      	bne.n	8008184 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008178:	893b      	ldrh	r3, [r7, #8]
 800817a:	b2da      	uxtb	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	611a      	str	r2, [r3, #16]
 8008182:	e021      	b.n	80081c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008184:	893b      	ldrh	r3, [r7, #8]
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	b29b      	uxth	r3, r3
 800818a:	b2da      	uxtb	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008194:	6a39      	ldr	r1, [r7, #32]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f93e 	bl	8008418 <I2C_WaitOnTXEFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00d      	beq.n	80081be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d107      	bne.n	80081ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e050      	b.n	8008260 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081be:	893b      	ldrh	r3, [r7, #8]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ca:	6a39      	ldr	r1, [r7, #32]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f923 	bl	8008418 <I2C_WaitOnTXEFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00d      	beq.n	80081f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d107      	bne.n	80081f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e035      	b.n	8008260 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008202:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	2200      	movs	r2, #0
 800820c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 f82b 	bl	800826c <I2C_WaitOnFlagUntilTimeout>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00d      	beq.n	8008238 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822a:	d103      	bne.n	8008234 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008232:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e013      	b.n	8008260 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008238:	897b      	ldrh	r3, [r7, #10]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	b2da      	uxtb	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	6a3a      	ldr	r2, [r7, #32]
 800824c:	4906      	ldr	r1, [pc, #24]	; (8008268 <I2C_RequestMemoryRead+0x1cc>)
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f863 	bl	800831a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	00010002 	.word	0x00010002

0800826c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	4613      	mov	r3, r2
 800827a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800827c:	e025      	b.n	80082ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008284:	d021      	beq.n	80082ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008286:	f7fd fac7 	bl	8005818 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d116      	bne.n	80082ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	f043 0220 	orr.w	r2, r3, #32
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e023      	b.n	8008312 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	0c1b      	lsrs	r3, r3, #16
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10d      	bne.n	80082f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	43da      	mvns	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4013      	ands	r3, r2
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	e00c      	b.n	800830a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	43da      	mvns	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4013      	ands	r3, r2
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bf0c      	ite	eq
 8008302:	2301      	moveq	r3, #1
 8008304:	2300      	movne	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	429a      	cmp	r2, r3
 800830e:	d0b6      	beq.n	800827e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008328:	e051      	b.n	80083ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008338:	d123      	bne.n	8008382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008348:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008352:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2220      	movs	r2, #32
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	f043 0204 	orr.w	r2, r3, #4
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e046      	b.n	8008410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d021      	beq.n	80083ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838a:	f7fd fa45 	bl	8005818 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d302      	bcc.n	80083a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d116      	bne.n	80083ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	f043 0220 	orr.w	r2, r3, #32
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e020      	b.n	8008410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	0c1b      	lsrs	r3, r3, #16
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d10c      	bne.n	80083f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	43da      	mvns	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4013      	ands	r3, r2
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bf14      	ite	ne
 80083ea:	2301      	movne	r3, #1
 80083ec:	2300      	moveq	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	e00b      	b.n	800840a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	43da      	mvns	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	4013      	ands	r3, r2
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	bf14      	ite	ne
 8008404:	2301      	movne	r3, #1
 8008406:	2300      	moveq	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d18d      	bne.n	800832a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008424:	e02d      	b.n	8008482 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f8ce 	bl	80085c8 <I2C_IsAcknowledgeFailed>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e02d      	b.n	8008492 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d021      	beq.n	8008482 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843e:	f7fd f9eb 	bl	8005818 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	429a      	cmp	r2, r3
 800844c:	d302      	bcc.n	8008454 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d116      	bne.n	8008482 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	f043 0220 	orr.w	r2, r3, #32
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e007      	b.n	8008492 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d1ca      	bne.n	8008426 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084a6:	e02d      	b.n	8008504 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f88d 	bl	80085c8 <I2C_IsAcknowledgeFailed>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e02d      	b.n	8008514 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d021      	beq.n	8008504 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084c0:	f7fd f9aa 	bl	8005818 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d302      	bcc.n	80084d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d116      	bne.n	8008504 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	f043 0220 	orr.w	r2, r3, #32
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e007      	b.n	8008514 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b04      	cmp	r3, #4
 8008510:	d1ca      	bne.n	80084a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008528:	e042      	b.n	80085b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b10      	cmp	r3, #16
 8008536:	d119      	bne.n	800856c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0210 	mvn.w	r2, #16
 8008540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e029      	b.n	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856c:	f7fd f954 	bl	8005818 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	429a      	cmp	r2, r3
 800857a:	d302      	bcc.n	8008582 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d116      	bne.n	80085b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	f043 0220 	orr.w	r2, r3, #32
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e007      	b.n	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ba:	2b40      	cmp	r3, #64	; 0x40
 80085bc:	d1b5      	bne.n	800852a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085de:	d11b      	bne.n	8008618 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	f043 0204 	orr.w	r2, r3, #4
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
	...

08008628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e267      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d075      	beq.n	8008732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008646:	4b88      	ldr	r3, [pc, #544]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 030c 	and.w	r3, r3, #12
 800864e:	2b04      	cmp	r3, #4
 8008650:	d00c      	beq.n	800866c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008652:	4b85      	ldr	r3, [pc, #532]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800865a:	2b08      	cmp	r3, #8
 800865c:	d112      	bne.n	8008684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800865e:	4b82      	ldr	r3, [pc, #520]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800866a:	d10b      	bne.n	8008684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800866c:	4b7e      	ldr	r3, [pc, #504]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d05b      	beq.n	8008730 <HAL_RCC_OscConfig+0x108>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d157      	bne.n	8008730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e242      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868c:	d106      	bne.n	800869c <HAL_RCC_OscConfig+0x74>
 800868e:	4b76      	ldr	r3, [pc, #472]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a75      	ldr	r2, [pc, #468]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	e01d      	b.n	80086d8 <HAL_RCC_OscConfig+0xb0>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086a4:	d10c      	bne.n	80086c0 <HAL_RCC_OscConfig+0x98>
 80086a6:	4b70      	ldr	r3, [pc, #448]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a6f      	ldr	r2, [pc, #444]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	4b6d      	ldr	r3, [pc, #436]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a6c      	ldr	r2, [pc, #432]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	e00b      	b.n	80086d8 <HAL_RCC_OscConfig+0xb0>
 80086c0:	4b69      	ldr	r3, [pc, #420]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a68      	ldr	r2, [pc, #416]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	4b66      	ldr	r3, [pc, #408]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a65      	ldr	r2, [pc, #404]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d013      	beq.n	8008708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086e0:	f7fd f89a 	bl	8005818 <HAL_GetTick>
 80086e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e8:	f7fd f896 	bl	8005818 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b64      	cmp	r3, #100	; 0x64
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e207      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086fa:	4b5b      	ldr	r3, [pc, #364]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f0      	beq.n	80086e8 <HAL_RCC_OscConfig+0xc0>
 8008706:	e014      	b.n	8008732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008708:	f7fd f886 	bl	8005818 <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008710:	f7fd f882 	bl	8005818 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b64      	cmp	r3, #100	; 0x64
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e1f3      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008722:	4b51      	ldr	r3, [pc, #324]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1f0      	bne.n	8008710 <HAL_RCC_OscConfig+0xe8>
 800872e:	e000      	b.n	8008732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d063      	beq.n	8008806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800873e:	4b4a      	ldr	r3, [pc, #296]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00b      	beq.n	8008762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800874a:	4b47      	ldr	r3, [pc, #284]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008752:	2b08      	cmp	r3, #8
 8008754:	d11c      	bne.n	8008790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008756:	4b44      	ldr	r3, [pc, #272]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d116      	bne.n	8008790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008762:	4b41      	ldr	r3, [pc, #260]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d005      	beq.n	800877a <HAL_RCC_OscConfig+0x152>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d001      	beq.n	800877a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e1c7      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800877a:	4b3b      	ldr	r3, [pc, #236]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4937      	ldr	r1, [pc, #220]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 800878a:	4313      	orrs	r3, r2
 800878c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800878e:	e03a      	b.n	8008806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d020      	beq.n	80087da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008798:	4b34      	ldr	r3, [pc, #208]	; (800886c <HAL_RCC_OscConfig+0x244>)
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879e:	f7fd f83b 	bl	8005818 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087a6:	f7fd f837 	bl	8005818 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e1a8      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b8:	4b2b      	ldr	r3, [pc, #172]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f0      	beq.n	80087a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c4:	4b28      	ldr	r3, [pc, #160]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4925      	ldr	r1, [pc, #148]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	600b      	str	r3, [r1, #0]
 80087d8:	e015      	b.n	8008806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087da:	4b24      	ldr	r3, [pc, #144]	; (800886c <HAL_RCC_OscConfig+0x244>)
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fd f81a 	bl	8005818 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087e8:	f7fd f816 	bl	8005818 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e187      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f0      	bne.n	80087e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d036      	beq.n	8008880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d016      	beq.n	8008848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800881a:	4b15      	ldr	r3, [pc, #84]	; (8008870 <HAL_RCC_OscConfig+0x248>)
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008820:	f7fc fffa 	bl	8005818 <HAL_GetTick>
 8008824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008828:	f7fc fff6 	bl	8005818 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e167      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800883a:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <HAL_RCC_OscConfig+0x240>)
 800883c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0f0      	beq.n	8008828 <HAL_RCC_OscConfig+0x200>
 8008846:	e01b      	b.n	8008880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008848:	4b09      	ldr	r3, [pc, #36]	; (8008870 <HAL_RCC_OscConfig+0x248>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800884e:	f7fc ffe3 	bl	8005818 <HAL_GetTick>
 8008852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008854:	e00e      	b.n	8008874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008856:	f7fc ffdf 	bl	8005818 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	2b02      	cmp	r3, #2
 8008862:	d907      	bls.n	8008874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e150      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
 8008868:	40023800 	.word	0x40023800
 800886c:	42470000 	.word	0x42470000
 8008870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008874:	4b88      	ldr	r3, [pc, #544]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1ea      	bne.n	8008856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0304 	and.w	r3, r3, #4
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 8097 	beq.w	80089bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008892:	4b81      	ldr	r3, [pc, #516]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10f      	bne.n	80088be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800889e:	2300      	movs	r3, #0
 80088a0:	60bb      	str	r3, [r7, #8]
 80088a2:	4b7d      	ldr	r3, [pc, #500]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	4a7c      	ldr	r2, [pc, #496]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80088a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ac:	6413      	str	r3, [r2, #64]	; 0x40
 80088ae:	4b7a      	ldr	r3, [pc, #488]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088b6:	60bb      	str	r3, [r7, #8]
 80088b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ba:	2301      	movs	r3, #1
 80088bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088be:	4b77      	ldr	r3, [pc, #476]	; (8008a9c <HAL_RCC_OscConfig+0x474>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d118      	bne.n	80088fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088ca:	4b74      	ldr	r3, [pc, #464]	; (8008a9c <HAL_RCC_OscConfig+0x474>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a73      	ldr	r2, [pc, #460]	; (8008a9c <HAL_RCC_OscConfig+0x474>)
 80088d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088d6:	f7fc ff9f 	bl	8005818 <HAL_GetTick>
 80088da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088dc:	e008      	b.n	80088f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088de:	f7fc ff9b 	bl	8005818 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e10c      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088f0:	4b6a      	ldr	r3, [pc, #424]	; (8008a9c <HAL_RCC_OscConfig+0x474>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0f0      	beq.n	80088de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d106      	bne.n	8008912 <HAL_RCC_OscConfig+0x2ea>
 8008904:	4b64      	ldr	r3, [pc, #400]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008908:	4a63      	ldr	r2, [pc, #396]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 800890a:	f043 0301 	orr.w	r3, r3, #1
 800890e:	6713      	str	r3, [r2, #112]	; 0x70
 8008910:	e01c      	b.n	800894c <HAL_RCC_OscConfig+0x324>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	2b05      	cmp	r3, #5
 8008918:	d10c      	bne.n	8008934 <HAL_RCC_OscConfig+0x30c>
 800891a:	4b5f      	ldr	r3, [pc, #380]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 800891c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891e:	4a5e      	ldr	r2, [pc, #376]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008920:	f043 0304 	orr.w	r3, r3, #4
 8008924:	6713      	str	r3, [r2, #112]	; 0x70
 8008926:	4b5c      	ldr	r3, [pc, #368]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892a:	4a5b      	ldr	r2, [pc, #364]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6713      	str	r3, [r2, #112]	; 0x70
 8008932:	e00b      	b.n	800894c <HAL_RCC_OscConfig+0x324>
 8008934:	4b58      	ldr	r3, [pc, #352]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008938:	4a57      	ldr	r2, [pc, #348]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 800893a:	f023 0301 	bic.w	r3, r3, #1
 800893e:	6713      	str	r3, [r2, #112]	; 0x70
 8008940:	4b55      	ldr	r3, [pc, #340]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008944:	4a54      	ldr	r2, [pc, #336]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008946:	f023 0304 	bic.w	r3, r3, #4
 800894a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d015      	beq.n	8008980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008954:	f7fc ff60 	bl	8005818 <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800895a:	e00a      	b.n	8008972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800895c:	f7fc ff5c 	bl	8005818 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	f241 3288 	movw	r2, #5000	; 0x1388
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e0cb      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008972:	4b49      	ldr	r3, [pc, #292]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0ee      	beq.n	800895c <HAL_RCC_OscConfig+0x334>
 800897e:	e014      	b.n	80089aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008980:	f7fc ff4a 	bl	8005818 <HAL_GetTick>
 8008984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008986:	e00a      	b.n	800899e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008988:	f7fc ff46 	bl	8005818 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	f241 3288 	movw	r2, #5000	; 0x1388
 8008996:	4293      	cmp	r3, r2
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e0b5      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800899e:	4b3e      	ldr	r3, [pc, #248]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80089a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1ee      	bne.n	8008988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d105      	bne.n	80089bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089b0:	4b39      	ldr	r3, [pc, #228]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	4a38      	ldr	r2, [pc, #224]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80089b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 80a1 	beq.w	8008b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089c6:	4b34      	ldr	r3, [pc, #208]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f003 030c 	and.w	r3, r3, #12
 80089ce:	2b08      	cmp	r3, #8
 80089d0:	d05c      	beq.n	8008a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d141      	bne.n	8008a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089da:	4b31      	ldr	r3, [pc, #196]	; (8008aa0 <HAL_RCC_OscConfig+0x478>)
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089e0:	f7fc ff1a 	bl	8005818 <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089e8:	f7fc ff16 	bl	8005818 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e087      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089fa:	4b27      	ldr	r3, [pc, #156]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f0      	bne.n	80089e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69da      	ldr	r2, [r3, #28]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	019b      	lsls	r3, r3, #6
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	085b      	lsrs	r3, r3, #1
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	041b      	lsls	r3, r3, #16
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	061b      	lsls	r3, r3, #24
 8008a2a:	491b      	ldr	r1, [pc, #108]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <HAL_RCC_OscConfig+0x478>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a36:	f7fc feef 	bl	8005818 <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a3c:	e008      	b.n	8008a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a3e:	f7fc feeb 	bl	8005818 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d901      	bls.n	8008a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e05c      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0f0      	beq.n	8008a3e <HAL_RCC_OscConfig+0x416>
 8008a5c:	e054      	b.n	8008b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <HAL_RCC_OscConfig+0x478>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a64:	f7fc fed8 	bl	8005818 <HAL_GetTick>
 8008a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a6c:	f7fc fed4 	bl	8005818 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e045      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a7e:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <HAL_RCC_OscConfig+0x470>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f0      	bne.n	8008a6c <HAL_RCC_OscConfig+0x444>
 8008a8a:	e03d      	b.n	8008b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d107      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e038      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	40007000 	.word	0x40007000
 8008aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008aa4:	4b1b      	ldr	r3, [pc, #108]	; (8008b14 <HAL_RCC_OscConfig+0x4ec>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d028      	beq.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d121      	bne.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d11a      	bne.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d111      	bne.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	3b01      	subs	r3, #1
 8008aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d107      	bne.n	8008b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d001      	beq.n	8008b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e000      	b.n	8008b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	40023800 	.word	0x40023800

08008b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e0cc      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b2c:	4b68      	ldr	r3, [pc, #416]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d90c      	bls.n	8008b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b3a:	4b65      	ldr	r3, [pc, #404]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b42:	4b63      	ldr	r3, [pc, #396]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d001      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0b8      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d020      	beq.n	8008ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b6c:	4b59      	ldr	r3, [pc, #356]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	4a58      	ldr	r2, [pc, #352]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b84:	4b53      	ldr	r3, [pc, #332]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	4a52      	ldr	r2, [pc, #328]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b90:	4b50      	ldr	r3, [pc, #320]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	494d      	ldr	r1, [pc, #308]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d044      	beq.n	8008c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d107      	bne.n	8008bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bb6:	4b47      	ldr	r3, [pc, #284]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d119      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e07f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d003      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d107      	bne.n	8008be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bd6:	4b3f      	ldr	r3, [pc, #252]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e06f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be6:	4b3b      	ldr	r3, [pc, #236]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e067      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bf6:	4b37      	ldr	r3, [pc, #220]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f023 0203 	bic.w	r2, r3, #3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	4934      	ldr	r1, [pc, #208]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c04:	4313      	orrs	r3, r2
 8008c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c08:	f7fc fe06 	bl	8005818 <HAL_GetTick>
 8008c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c0e:	e00a      	b.n	8008c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c10:	f7fc fe02 	bl	8005818 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e04f      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c26:	4b2b      	ldr	r3, [pc, #172]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 020c 	and.w	r2, r3, #12
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d1eb      	bne.n	8008c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c38:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d20c      	bcs.n	8008c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c46:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c4e:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d001      	beq.n	8008c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e032      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c6c:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4916      	ldr	r1, [pc, #88]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d009      	beq.n	8008c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c8a:	4b12      	ldr	r3, [pc, #72]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	490e      	ldr	r1, [pc, #56]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c9e:	f000 f821 	bl	8008ce4 <HAL_RCC_GetSysClockFreq>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	091b      	lsrs	r3, r3, #4
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	490a      	ldr	r1, [pc, #40]	; (8008cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8008cb0:	5ccb      	ldrb	r3, [r1, r3]
 8008cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb6:	4a09      	ldr	r2, [pc, #36]	; (8008cdc <HAL_RCC_ClockConfig+0x1c4>)
 8008cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fc fd66 	bl	8005790 <HAL_InitTick>

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40023c00 	.word	0x40023c00
 8008cd4:	40023800 	.word	0x40023800
 8008cd8:	0800c52c 	.word	0x0800c52c
 8008cdc:	200002f4 	.word	0x200002f4
 8008ce0:	200002f8 	.word	0x200002f8

08008ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce8:	b090      	sub	sp, #64	; 0x40
 8008cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cfc:	4b59      	ldr	r3, [pc, #356]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 030c 	and.w	r3, r3, #12
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d00d      	beq.n	8008d24 <HAL_RCC_GetSysClockFreq+0x40>
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	f200 80a1 	bhi.w	8008e50 <HAL_RCC_GetSysClockFreq+0x16c>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x34>
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d003      	beq.n	8008d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8008d16:	e09b      	b.n	8008e50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d18:	4b53      	ldr	r3, [pc, #332]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008d1c:	e09b      	b.n	8008e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d1e:	4b53      	ldr	r3, [pc, #332]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d22:	e098      	b.n	8008e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d24:	4b4f      	ldr	r3, [pc, #316]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d2e:	4b4d      	ldr	r3, [pc, #308]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d028      	beq.n	8008d8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d3a:	4b4a      	ldr	r3, [pc, #296]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	099b      	lsrs	r3, r3, #6
 8008d40:	2200      	movs	r2, #0
 8008d42:	623b      	str	r3, [r7, #32]
 8008d44:	627a      	str	r2, [r7, #36]	; 0x24
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4b47      	ldr	r3, [pc, #284]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d50:	fb03 f201 	mul.w	r2, r3, r1
 8008d54:	2300      	movs	r3, #0
 8008d56:	fb00 f303 	mul.w	r3, r0, r3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	4a43      	ldr	r2, [pc, #268]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8008d5e:	fba0 1202 	umull	r1, r2, r0, r2
 8008d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d64:	460a      	mov	r2, r1
 8008d66:	62ba      	str	r2, [r7, #40]	; 0x28
 8008d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d6a:	4413      	add	r3, r2
 8008d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	2200      	movs	r2, #0
 8008d72:	61bb      	str	r3, [r7, #24]
 8008d74:	61fa      	str	r2, [r7, #28]
 8008d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008d7e:	f7f7 fd69 	bl	8000854 <__aeabi_uldivmod>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4613      	mov	r3, r2
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8a:	e053      	b.n	8008e34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d8c:	4b35      	ldr	r3, [pc, #212]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	099b      	lsrs	r3, r3, #6
 8008d92:	2200      	movs	r2, #0
 8008d94:	613b      	str	r3, [r7, #16]
 8008d96:	617a      	str	r2, [r7, #20]
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d9e:	f04f 0b00 	mov.w	fp, #0
 8008da2:	4652      	mov	r2, sl
 8008da4:	465b      	mov	r3, fp
 8008da6:	f04f 0000 	mov.w	r0, #0
 8008daa:	f04f 0100 	mov.w	r1, #0
 8008dae:	0159      	lsls	r1, r3, #5
 8008db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008db4:	0150      	lsls	r0, r2, #5
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	ebb2 080a 	subs.w	r8, r2, sl
 8008dbe:	eb63 090b 	sbc.w	r9, r3, fp
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008dce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008dd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008dd6:	ebb2 0408 	subs.w	r4, r2, r8
 8008dda:	eb63 0509 	sbc.w	r5, r3, r9
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	f04f 0300 	mov.w	r3, #0
 8008de6:	00eb      	lsls	r3, r5, #3
 8008de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dec:	00e2      	lsls	r2, r4, #3
 8008dee:	4614      	mov	r4, r2
 8008df0:	461d      	mov	r5, r3
 8008df2:	eb14 030a 	adds.w	r3, r4, sl
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	eb45 030b 	adc.w	r3, r5, fp
 8008dfc:	607b      	str	r3, [r7, #4]
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	028b      	lsls	r3, r1, #10
 8008e0e:	4621      	mov	r1, r4
 8008e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e14:	4621      	mov	r1, r4
 8008e16:	028a      	lsls	r2, r1, #10
 8008e18:	4610      	mov	r0, r2
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1e:	2200      	movs	r2, #0
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	60fa      	str	r2, [r7, #12]
 8008e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e28:	f7f7 fd14 	bl	8000854 <__aeabi_uldivmod>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4613      	mov	r3, r2
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	0c1b      	lsrs	r3, r3, #16
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	3301      	adds	r3, #1
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008e4e:	e002      	b.n	8008e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8008e52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3740      	adds	r7, #64	; 0x40
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e62:	bf00      	nop
 8008e64:	40023800 	.word	0x40023800
 8008e68:	00f42400 	.word	0x00f42400
 8008e6c:	017d7840 	.word	0x017d7840

08008e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e76:	681b      	ldr	r3, [r3, #0]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	200002f4 	.word	0x200002f4

08008e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e8c:	f7ff fff0 	bl	8008e70 <HAL_RCC_GetHCLKFreq>
 8008e90:	4602      	mov	r2, r0
 8008e92:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	0a9b      	lsrs	r3, r3, #10
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	4903      	ldr	r1, [pc, #12]	; (8008eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40023800 	.word	0x40023800
 8008eac:	0800c53c 	.word	0x0800c53c

08008eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008eb4:	f7ff ffdc 	bl	8008e70 <HAL_RCC_GetHCLKFreq>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	0b5b      	lsrs	r3, r3, #13
 8008ec0:	f003 0307 	and.w	r3, r3, #7
 8008ec4:	4903      	ldr	r1, [pc, #12]	; (8008ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ec6:	5ccb      	ldrb	r3, [r1, r3]
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	40023800 	.word	0x40023800
 8008ed4:	0800c53c 	.word	0x0800c53c

08008ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e07b      	b.n	8008fe2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d108      	bne.n	8008f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008efa:	d009      	beq.n	8008f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	61da      	str	r2, [r3, #28]
 8008f02:	e005      	b.n	8008f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fc f9ae 	bl	800528c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f94:	ea42 0103 	orr.w	r1, r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	0c1b      	lsrs	r3, r3, #16
 8008fae:	f003 0104 	and.w	r1, r3, #4
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	f003 0210 	and.w	r2, r3, #16
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	69da      	ldr	r2, [r3, #28]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b088      	sub	sp, #32
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009004:	2b01      	cmp	r3, #1
 8009006:	d101      	bne.n	800900c <HAL_SPI_Transmit+0x22>
 8009008:	2302      	movs	r3, #2
 800900a:	e126      	b.n	800925a <HAL_SPI_Transmit+0x270>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009014:	f7fc fc00 	bl	8005818 <HAL_GetTick>
 8009018:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b01      	cmp	r3, #1
 8009028:	d002      	beq.n	8009030 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800902a:	2302      	movs	r3, #2
 800902c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800902e:	e10b      	b.n	8009248 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <HAL_SPI_Transmit+0x52>
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009040:	e102      	b.n	8009248 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2203      	movs	r2, #3
 8009046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009088:	d10f      	bne.n	80090aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009098:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b4:	2b40      	cmp	r3, #64	; 0x40
 80090b6:	d007      	beq.n	80090c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d0:	d14b      	bne.n	800916a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <HAL_SPI_Transmit+0xf6>
 80090da:	8afb      	ldrh	r3, [r7, #22]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d13e      	bne.n	800915e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e4:	881a      	ldrh	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f0:	1c9a      	adds	r2, r3, #2
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009104:	e02b      	b.n	800915e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b02      	cmp	r3, #2
 8009112:	d112      	bne.n	800913a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	881a      	ldrh	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	1c9a      	adds	r2, r3, #2
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	86da      	strh	r2, [r3, #54]	; 0x36
 8009138:	e011      	b.n	800915e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800913a:	f7fc fb6d 	bl	8005818 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d803      	bhi.n	8009152 <HAL_SPI_Transmit+0x168>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	d102      	bne.n	8009158 <HAL_SPI_Transmit+0x16e>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800915c:	e074      	b.n	8009248 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009162:	b29b      	uxth	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1ce      	bne.n	8009106 <HAL_SPI_Transmit+0x11c>
 8009168:	e04c      	b.n	8009204 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <HAL_SPI_Transmit+0x18e>
 8009172:	8afb      	ldrh	r3, [r7, #22]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d140      	bne.n	80091fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	7812      	ldrb	r2, [r2, #0]
 8009184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009194:	b29b      	uxth	r3, r3
 8009196:	3b01      	subs	r3, #1
 8009198:	b29a      	uxth	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800919e:	e02c      	b.n	80091fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d113      	bne.n	80091d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	330c      	adds	r3, #12
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80091d4:	e011      	b.n	80091fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091d6:	f7fc fb1f 	bl	8005818 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d803      	bhi.n	80091ee <HAL_SPI_Transmit+0x204>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ec:	d102      	bne.n	80091f4 <HAL_SPI_Transmit+0x20a>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091f8:	e026      	b.n	8009248 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1cd      	bne.n	80091a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fbcb 	bl	80099a4 <SPI_EndRxTxTransaction>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10a      	bne.n	8009238 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009222:	2300      	movs	r3, #0
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	77fb      	strb	r3, [r7, #31]
 8009244:	e000      	b.n	8009248 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009246:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009258:	7ffb      	ldrb	r3, [r7, #31]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b088      	sub	sp, #32
 8009266:	af02      	add	r7, sp, #8
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	603b      	str	r3, [r7, #0]
 800926e:	4613      	mov	r3, r2
 8009270:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800927e:	d112      	bne.n	80092a6 <HAL_SPI_Receive+0x44>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10e      	bne.n	80092a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2204      	movs	r2, #4
 800928c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009290:	88fa      	ldrh	r2, [r7, #6]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	4613      	mov	r3, r2
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 f8f1 	bl	8009484 <HAL_SPI_TransmitReceive>
 80092a2:	4603      	mov	r3, r0
 80092a4:	e0ea      	b.n	800947c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_SPI_Receive+0x52>
 80092b0:	2302      	movs	r3, #2
 80092b2:	e0e3      	b.n	800947c <HAL_SPI_Receive+0x21a>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092bc:	f7fc faac 	bl	8005818 <HAL_GetTick>
 80092c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d002      	beq.n	80092d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80092ce:	2302      	movs	r3, #2
 80092d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092d2:	e0ca      	b.n	800946a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <HAL_SPI_Receive+0x7e>
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092e4:	e0c1      	b.n	800946a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2204      	movs	r2, #4
 80092ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	88fa      	ldrh	r2, [r7, #6]
 8009304:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800932c:	d10f      	bne.n	800934e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800933c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800934c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009358:	2b40      	cmp	r3, #64	; 0x40
 800935a:	d007      	beq.n	800936c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800936a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d162      	bne.n	800943a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009374:	e02e      	b.n	80093d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b01      	cmp	r3, #1
 8009382:	d115      	bne.n	80093b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f103 020c 	add.w	r2, r3, #12
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	7812      	ldrb	r2, [r2, #0]
 8009392:	b2d2      	uxtb	r2, r2
 8009394:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093ae:	e011      	b.n	80093d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093b0:	f7fc fa32 	bl	8005818 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d803      	bhi.n	80093c8 <HAL_SPI_Receive+0x166>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c6:	d102      	bne.n	80093ce <HAL_SPI_Receive+0x16c>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80093d2:	e04a      	b.n	800946a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1cb      	bne.n	8009376 <HAL_SPI_Receive+0x114>
 80093de:	e031      	b.n	8009444 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d113      	bne.n	8009416 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f8:	b292      	uxth	r2, r2
 80093fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009400:	1c9a      	adds	r2, r3, #2
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009414:	e011      	b.n	800943a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009416:	f7fc f9ff 	bl	8005818 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d803      	bhi.n	800942e <HAL_SPI_Receive+0x1cc>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d102      	bne.n	8009434 <HAL_SPI_Receive+0x1d2>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009438:	e017      	b.n	800946a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1cd      	bne.n	80093e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 fa45 	bl	80098d8 <SPI_EndRxTransaction>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2220      	movs	r2, #32
 8009458:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	75fb      	strb	r3, [r7, #23]
 8009466:	e000      	b.n	800946a <HAL_SPI_Receive+0x208>
  }

error :
 8009468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800947a:	7dfb      	ldrb	r3, [r7, #23]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08c      	sub	sp, #48	; 0x30
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009492:	2301      	movs	r3, #1
 8009494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x26>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e18a      	b.n	80097c0 <HAL_SPI_TransmitReceive+0x33c>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094b2:	f7fc f9b1 	bl	8005818 <HAL_GetTick>
 80094b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80094c8:	887b      	ldrh	r3, [r7, #2]
 80094ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d00f      	beq.n	80094f4 <HAL_SPI_TransmitReceive+0x70>
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094da:	d107      	bne.n	80094ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d103      	bne.n	80094ec <HAL_SPI_TransmitReceive+0x68>
 80094e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d003      	beq.n	80094f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80094ec:	2302      	movs	r3, #2
 80094ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80094f2:	e15b      	b.n	80097ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_SPI_TransmitReceive+0x82>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <HAL_SPI_TransmitReceive+0x82>
 8009500:	887b      	ldrh	r3, [r7, #2]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d103      	bne.n	800950e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800950c:	e14e      	b.n	80097ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b04      	cmp	r3, #4
 8009518:	d003      	beq.n	8009522 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2205      	movs	r2, #5
 800951e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	887a      	ldrh	r2, [r7, #2]
 8009532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	887a      	ldrh	r2, [r7, #2]
 8009538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	887a      	ldrh	r2, [r7, #2]
 8009544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	887a      	ldrh	r2, [r7, #2]
 800954a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d007      	beq.n	8009576 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800957e:	d178      	bne.n	8009672 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <HAL_SPI_TransmitReceive+0x10a>
 8009588:	8b7b      	ldrh	r3, [r7, #26]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d166      	bne.n	800965c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	881a      	ldrh	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959e:	1c9a      	adds	r2, r3, #2
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095b2:	e053      	b.n	800965c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d11b      	bne.n	80095fa <HAL_SPI_TransmitReceive+0x176>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d016      	beq.n	80095fa <HAL_SPI_TransmitReceive+0x176>
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d113      	bne.n	80095fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	881a      	ldrh	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e2:	1c9a      	adds	r2, r3, #2
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b01      	cmp	r3, #1
 8009606:	d119      	bne.n	800963c <HAL_SPI_TransmitReceive+0x1b8>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d014      	beq.n	800963c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	b292      	uxth	r2, r2
 800961e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	1c9a      	adds	r2, r3, #2
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009638:	2301      	movs	r3, #1
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800963c:	f7fc f8ec 	bl	8005818 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009648:	429a      	cmp	r2, r3
 800964a:	d807      	bhi.n	800965c <HAL_SPI_TransmitReceive+0x1d8>
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d003      	beq.n	800965c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800965a:	e0a7      	b.n	80097ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1a6      	bne.n	80095b4 <HAL_SPI_TransmitReceive+0x130>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966a:	b29b      	uxth	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1a1      	bne.n	80095b4 <HAL_SPI_TransmitReceive+0x130>
 8009670:	e07c      	b.n	800976c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <HAL_SPI_TransmitReceive+0x1fc>
 800967a:	8b7b      	ldrh	r3, [r7, #26]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d16b      	bne.n	8009758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	330c      	adds	r3, #12
 800968a:	7812      	ldrb	r2, [r2, #0]
 800968c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096a6:	e057      	b.n	8009758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d11c      	bne.n	80096f0 <HAL_SPI_TransmitReceive+0x26c>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d017      	beq.n	80096f0 <HAL_SPI_TransmitReceive+0x26c>
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d114      	bne.n	80096f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	330c      	adds	r3, #12
 80096d0:	7812      	ldrb	r2, [r2, #0]
 80096d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d119      	bne.n	8009732 <HAL_SPI_TransmitReceive+0x2ae>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009702:	b29b      	uxth	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d014      	beq.n	8009732 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	b2d2      	uxtb	r2, r2
 8009714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009724:	b29b      	uxth	r3, r3
 8009726:	3b01      	subs	r3, #1
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800972e:	2301      	movs	r3, #1
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009732:	f7fc f871 	bl	8005818 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800973e:	429a      	cmp	r2, r3
 8009740:	d803      	bhi.n	800974a <HAL_SPI_TransmitReceive+0x2c6>
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009748:	d102      	bne.n	8009750 <HAL_SPI_TransmitReceive+0x2cc>
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009756:	e029      	b.n	80097ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975c:	b29b      	uxth	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1a2      	bne.n	80096a8 <HAL_SPI_TransmitReceive+0x224>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009766:	b29b      	uxth	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d19d      	bne.n	80096a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800976c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800976e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f917 	bl	80099a4 <SPI_EndRxTxTransaction>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d006      	beq.n	800978a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2220      	movs	r2, #32
 8009786:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009788:	e010      	b.n	80097ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009792:	2300      	movs	r3, #0
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	e000      	b.n	80097ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80097aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3730      	adds	r7, #48	; 0x30
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	4613      	mov	r3, r2
 80097d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097d8:	f7fc f81e 	bl	8005818 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	1a9b      	subs	r3, r3, r2
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4413      	add	r3, r2
 80097e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097e8:	f7fc f816 	bl	8005818 <HAL_GetTick>
 80097ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097ee:	4b39      	ldr	r3, [pc, #228]	; (80098d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	015b      	lsls	r3, r3, #5
 80097f4:	0d1b      	lsrs	r3, r3, #20
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	fb02 f303 	mul.w	r3, r2, r3
 80097fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097fe:	e054      	b.n	80098aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009806:	d050      	beq.n	80098aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009808:	f7fc f806 	bl	8005818 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	429a      	cmp	r2, r3
 8009816:	d902      	bls.n	800981e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d13d      	bne.n	800989a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800982c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009836:	d111      	bne.n	800985c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009840:	d004      	beq.n	800984c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800984a:	d107      	bne.n	800985c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800985a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009864:	d10f      	bne.n	8009886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e017      	b.n	80098ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4013      	ands	r3, r2
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	bf0c      	ite	eq
 80098ba:	2301      	moveq	r3, #1
 80098bc:	2300      	movne	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	461a      	mov	r2, r3
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d19b      	bne.n	8009800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	200002f4 	.word	0x200002f4

080098d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af02      	add	r7, sp, #8
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098ec:	d111      	bne.n	8009912 <SPI_EndRxTransaction+0x3a>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f6:	d004      	beq.n	8009902 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009900:	d107      	bne.n	8009912 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009910:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800991a:	d12a      	bne.n	8009972 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009924:	d012      	beq.n	800994c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2200      	movs	r2, #0
 800992e:	2180      	movs	r1, #128	; 0x80
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f7ff ff49 	bl	80097c8 <SPI_WaitFlagStateUntilTimeout>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d02d      	beq.n	8009998 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009940:	f043 0220 	orr.w	r2, r3, #32
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e026      	b.n	800999a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	2101      	movs	r1, #1
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f7ff ff36 	bl	80097c8 <SPI_WaitFlagStateUntilTimeout>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01a      	beq.n	8009998 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009966:	f043 0220 	orr.w	r2, r3, #32
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e013      	b.n	800999a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2200      	movs	r2, #0
 800997a:	2101      	movs	r1, #1
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff ff23 	bl	80097c8 <SPI_WaitFlagStateUntilTimeout>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d007      	beq.n	8009998 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998c:	f043 0220 	orr.w	r2, r3, #32
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e000      	b.n	800999a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80099b0:	4b1b      	ldr	r3, [pc, #108]	; (8009a20 <SPI_EndRxTxTransaction+0x7c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a1b      	ldr	r2, [pc, #108]	; (8009a24 <SPI_EndRxTxTransaction+0x80>)
 80099b6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ba:	0d5b      	lsrs	r3, r3, #21
 80099bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099c0:	fb02 f303 	mul.w	r3, r2, r3
 80099c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ce:	d112      	bne.n	80099f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2200      	movs	r2, #0
 80099d8:	2180      	movs	r1, #128	; 0x80
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f7ff fef4 	bl	80097c8 <SPI_WaitFlagStateUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d016      	beq.n	8009a14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	f043 0220 	orr.w	r2, r3, #32
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e00f      	b.n	8009a16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00a      	beq.n	8009a12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0c:	2b80      	cmp	r3, #128	; 0x80
 8009a0e:	d0f2      	beq.n	80099f6 <SPI_EndRxTxTransaction+0x52>
 8009a10:	e000      	b.n	8009a14 <SPI_EndRxTxTransaction+0x70>
        break;
 8009a12:	bf00      	nop
  }

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200002f4 	.word	0x200002f4
 8009a24:	165e9f81 	.word	0x165e9f81

08009a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e041      	b.n	8009abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d106      	bne.n	8009a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7fb fd16 	bl	8005480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f000 fd54 	bl	800a514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d001      	beq.n	8009ae0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e03c      	b.n	8009b5a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1e      	ldr	r2, [pc, #120]	; (8009b68 <HAL_TIM_Base_Start+0xa0>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d018      	beq.n	8009b24 <HAL_TIM_Base_Start+0x5c>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009afa:	d013      	beq.n	8009b24 <HAL_TIM_Base_Start+0x5c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a1a      	ldr	r2, [pc, #104]	; (8009b6c <HAL_TIM_Base_Start+0xa4>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00e      	beq.n	8009b24 <HAL_TIM_Base_Start+0x5c>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a19      	ldr	r2, [pc, #100]	; (8009b70 <HAL_TIM_Base_Start+0xa8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d009      	beq.n	8009b24 <HAL_TIM_Base_Start+0x5c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a17      	ldr	r2, [pc, #92]	; (8009b74 <HAL_TIM_Base_Start+0xac>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d004      	beq.n	8009b24 <HAL_TIM_Base_Start+0x5c>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a16      	ldr	r2, [pc, #88]	; (8009b78 <HAL_TIM_Base_Start+0xb0>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d111      	bne.n	8009b48 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b06      	cmp	r3, #6
 8009b34:	d010      	beq.n	8009b58 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f042 0201 	orr.w	r2, r2, #1
 8009b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b46:	e007      	b.n	8009b58 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 0201 	orr.w	r2, r2, #1
 8009b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40010000 	.word	0x40010000
 8009b6c:	40000400 	.word	0x40000400
 8009b70:	40000800 	.word	0x40000800
 8009b74:	40000c00 	.word	0x40000c00
 8009b78:	40014000 	.word	0x40014000

08009b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d001      	beq.n	8009b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e044      	b.n	8009c1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1e      	ldr	r2, [pc, #120]	; (8009c2c <HAL_TIM_Base_Start_IT+0xb0>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d018      	beq.n	8009be8 <HAL_TIM_Base_Start_IT+0x6c>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bbe:	d013      	beq.n	8009be8 <HAL_TIM_Base_Start_IT+0x6c>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a1a      	ldr	r2, [pc, #104]	; (8009c30 <HAL_TIM_Base_Start_IT+0xb4>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00e      	beq.n	8009be8 <HAL_TIM_Base_Start_IT+0x6c>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a19      	ldr	r2, [pc, #100]	; (8009c34 <HAL_TIM_Base_Start_IT+0xb8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d009      	beq.n	8009be8 <HAL_TIM_Base_Start_IT+0x6c>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a17      	ldr	r2, [pc, #92]	; (8009c38 <HAL_TIM_Base_Start_IT+0xbc>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d004      	beq.n	8009be8 <HAL_TIM_Base_Start_IT+0x6c>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a16      	ldr	r2, [pc, #88]	; (8009c3c <HAL_TIM_Base_Start_IT+0xc0>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d111      	bne.n	8009c0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b06      	cmp	r3, #6
 8009bf8:	d010      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0201 	orr.w	r2, r2, #1
 8009c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c0a:	e007      	b.n	8009c1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0201 	orr.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	40010000 	.word	0x40010000
 8009c30:	40000400 	.word	0x40000400
 8009c34:	40000800 	.word	0x40000800
 8009c38:	40000c00 	.word	0x40000c00
 8009c3c:	40014000 	.word	0x40014000

08009c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d101      	bne.n	8009c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e041      	b.n	8009cd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d106      	bne.n	8009c6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f839 	bl	8009cde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f000 fc48 	bl	800a514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
	...

08009cf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d109      	bne.n	8009d18 <HAL_TIM_PWM_Start+0x24>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	bf14      	ite	ne
 8009d10:	2301      	movne	r3, #1
 8009d12:	2300      	moveq	r3, #0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	e022      	b.n	8009d5e <HAL_TIM_PWM_Start+0x6a>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d109      	bne.n	8009d32 <HAL_TIM_PWM_Start+0x3e>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	bf14      	ite	ne
 8009d2a:	2301      	movne	r3, #1
 8009d2c:	2300      	moveq	r3, #0
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	e015      	b.n	8009d5e <HAL_TIM_PWM_Start+0x6a>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d109      	bne.n	8009d4c <HAL_TIM_PWM_Start+0x58>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	bf14      	ite	ne
 8009d44:	2301      	movne	r3, #1
 8009d46:	2300      	moveq	r3, #0
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	e008      	b.n	8009d5e <HAL_TIM_PWM_Start+0x6a>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	bf14      	ite	ne
 8009d58:	2301      	movne	r3, #1
 8009d5a:	2300      	moveq	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e068      	b.n	8009e38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <HAL_TIM_PWM_Start+0x82>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d74:	e013      	b.n	8009d9e <HAL_TIM_PWM_Start+0xaa>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d104      	bne.n	8009d86 <HAL_TIM_PWM_Start+0x92>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d84:	e00b      	b.n	8009d9e <HAL_TIM_PWM_Start+0xaa>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d104      	bne.n	8009d96 <HAL_TIM_PWM_Start+0xa2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d94:	e003      	b.n	8009d9e <HAL_TIM_PWM_Start+0xaa>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2201      	movs	r2, #1
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fe5a 	bl	800aa60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a23      	ldr	r2, [pc, #140]	; (8009e40 <HAL_TIM_PWM_Start+0x14c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d107      	bne.n	8009dc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a1d      	ldr	r2, [pc, #116]	; (8009e40 <HAL_TIM_PWM_Start+0x14c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d018      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd8:	d013      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a19      	ldr	r2, [pc, #100]	; (8009e44 <HAL_TIM_PWM_Start+0x150>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d00e      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a17      	ldr	r2, [pc, #92]	; (8009e48 <HAL_TIM_PWM_Start+0x154>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d009      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <HAL_TIM_PWM_Start+0x158>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d004      	beq.n	8009e02 <HAL_TIM_PWM_Start+0x10e>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a14      	ldr	r2, [pc, #80]	; (8009e50 <HAL_TIM_PWM_Start+0x15c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d111      	bne.n	8009e26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f003 0307 	and.w	r3, r3, #7
 8009e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b06      	cmp	r3, #6
 8009e12:	d010      	beq.n	8009e36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e24:	e007      	b.n	8009e36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0201 	orr.w	r2, r2, #1
 8009e34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	40010000 	.word	0x40010000
 8009e44:	40000400 	.word	0x40000400
 8009e48:	40000800 	.word	0x40000800
 8009e4c:	40000c00 	.word	0x40000c00
 8009e50:	40014000 	.word	0x40014000

08009e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e097      	b.n	8009f98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7fb fa83 	bl	8005388 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2202      	movs	r2, #2
 8009e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e98:	f023 0307 	bic.w	r3, r3, #7
 8009e9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f000 fb33 	bl	800a514 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009ef4:	f023 030c 	bic.w	r3, r3, #12
 8009ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	4313      	orrs	r3, r2
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	011a      	lsls	r2, r3, #4
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	031b      	lsls	r3, r3, #12
 8009f24:	4313      	orrs	r3, r2
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	4313      	orrs	r3, r2
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3718      	adds	r7, #24
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d122      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d11b      	bne.n	8009ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f06f 0202 	mvn.w	r2, #2
 8009fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fa77 	bl	800a4d6 <HAL_TIM_IC_CaptureCallback>
 8009fe8:	e005      	b.n	8009ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fa69 	bl	800a4c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa7a 	bl	800a4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b04      	cmp	r3, #4
 800a008:	d122      	bne.n	800a050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b04      	cmp	r3, #4
 800a016:	d11b      	bne.n	800a050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f06f 0204 	mvn.w	r2, #4
 800a020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2202      	movs	r2, #2
 800a026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa4d 	bl	800a4d6 <HAL_TIM_IC_CaptureCallback>
 800a03c:	e005      	b.n	800a04a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa3f 	bl	800a4c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fa50 	bl	800a4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b08      	cmp	r3, #8
 800a05c:	d122      	bne.n	800a0a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d11b      	bne.n	800a0a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f06f 0208 	mvn.w	r2, #8
 800a074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2204      	movs	r2, #4
 800a07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa23 	bl	800a4d6 <HAL_TIM_IC_CaptureCallback>
 800a090:	e005      	b.n	800a09e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa15 	bl	800a4c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fa26 	bl	800a4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b10      	cmp	r3, #16
 800a0b0:	d122      	bne.n	800a0f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b10      	cmp	r3, #16
 800a0be:	d11b      	bne.n	800a0f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f06f 0210 	mvn.w	r2, #16
 800a0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2208      	movs	r2, #8
 800a0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f9f9 	bl	800a4d6 <HAL_TIM_IC_CaptureCallback>
 800a0e4:	e005      	b.n	800a0f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f9eb 	bl	800a4c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f9fc 	bl	800a4ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10e      	bne.n	800a124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b01      	cmp	r3, #1
 800a112:	d107      	bne.n	800a124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f06f 0201 	mvn.w	r2, #1
 800a11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7f7 fa3e 	bl	80015a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12e:	2b80      	cmp	r3, #128	; 0x80
 800a130:	d10e      	bne.n	800a150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13c:	2b80      	cmp	r3, #128	; 0x80
 800a13e:	d107      	bne.n	800a150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fd26 	bl	800ab9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15a:	2b40      	cmp	r3, #64	; 0x40
 800a15c:	d10e      	bne.n	800a17c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a168:	2b40      	cmp	r3, #64	; 0x40
 800a16a:	d107      	bne.n	800a17c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f9c1 	bl	800a4fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b20      	cmp	r3, #32
 800a188:	d10e      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0320 	and.w	r3, r3, #32
 800a194:	2b20      	cmp	r3, #32
 800a196:	d107      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0220 	mvn.w	r2, #32
 800a1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fcf0 	bl	800ab88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d101      	bne.n	800a1ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	e0ae      	b.n	800a32c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b0c      	cmp	r3, #12
 800a1da:	f200 809f 	bhi.w	800a31c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a219 	.word	0x0800a219
 800a1e8:	0800a31d 	.word	0x0800a31d
 800a1ec:	0800a31d 	.word	0x0800a31d
 800a1f0:	0800a31d 	.word	0x0800a31d
 800a1f4:	0800a259 	.word	0x0800a259
 800a1f8:	0800a31d 	.word	0x0800a31d
 800a1fc:	0800a31d 	.word	0x0800a31d
 800a200:	0800a31d 	.word	0x0800a31d
 800a204:	0800a29b 	.word	0x0800a29b
 800a208:	0800a31d 	.word	0x0800a31d
 800a20c:	0800a31d 	.word	0x0800a31d
 800a210:	0800a31d 	.word	0x0800a31d
 800a214:	0800a2db 	.word	0x0800a2db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68b9      	ldr	r1, [r7, #8]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f9f8 	bl	800a614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	699a      	ldr	r2, [r3, #24]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f042 0208 	orr.w	r2, r2, #8
 800a232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	699a      	ldr	r2, [r3, #24]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0204 	bic.w	r2, r2, #4
 800a242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6999      	ldr	r1, [r3, #24]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	619a      	str	r2, [r3, #24]
      break;
 800a256:	e064      	b.n	800a322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68b9      	ldr	r1, [r7, #8]
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fa3e 	bl	800a6e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	699a      	ldr	r2, [r3, #24]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6999      	ldr	r1, [r3, #24]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	021a      	lsls	r2, r3, #8
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	619a      	str	r2, [r3, #24]
      break;
 800a298:	e043      	b.n	800a322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fa89 	bl	800a7b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69da      	ldr	r2, [r3, #28]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f042 0208 	orr.w	r2, r2, #8
 800a2b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	69da      	ldr	r2, [r3, #28]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 0204 	bic.w	r2, r2, #4
 800a2c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69d9      	ldr	r1, [r3, #28]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	691a      	ldr	r2, [r3, #16]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	61da      	str	r2, [r3, #28]
      break;
 800a2d8:	e023      	b.n	800a322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fad3 	bl	800a88c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	69da      	ldr	r2, [r3, #28]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	69da      	ldr	r2, [r3, #28]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	69d9      	ldr	r1, [r3, #28]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	021a      	lsls	r2, r3, #8
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	61da      	str	r2, [r3, #28]
      break;
 800a31a:	e002      	b.n	800a322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	75fb      	strb	r3, [r7, #23]
      break;
 800a320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_TIM_ConfigClockSource+0x1c>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e0b4      	b.n	800a4ba <HAL_TIM_ConfigClockSource+0x186>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a36e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a388:	d03e      	beq.n	800a408 <HAL_TIM_ConfigClockSource+0xd4>
 800a38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a38e:	f200 8087 	bhi.w	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a396:	f000 8086 	beq.w	800a4a6 <HAL_TIM_ConfigClockSource+0x172>
 800a39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a39e:	d87f      	bhi.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a0:	2b70      	cmp	r3, #112	; 0x70
 800a3a2:	d01a      	beq.n	800a3da <HAL_TIM_ConfigClockSource+0xa6>
 800a3a4:	2b70      	cmp	r3, #112	; 0x70
 800a3a6:	d87b      	bhi.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a8:	2b60      	cmp	r3, #96	; 0x60
 800a3aa:	d050      	beq.n	800a44e <HAL_TIM_ConfigClockSource+0x11a>
 800a3ac:	2b60      	cmp	r3, #96	; 0x60
 800a3ae:	d877      	bhi.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a3b0:	2b50      	cmp	r3, #80	; 0x50
 800a3b2:	d03c      	beq.n	800a42e <HAL_TIM_ConfigClockSource+0xfa>
 800a3b4:	2b50      	cmp	r3, #80	; 0x50
 800a3b6:	d873      	bhi.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a3b8:	2b40      	cmp	r3, #64	; 0x40
 800a3ba:	d058      	beq.n	800a46e <HAL_TIM_ConfigClockSource+0x13a>
 800a3bc:	2b40      	cmp	r3, #64	; 0x40
 800a3be:	d86f      	bhi.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a3c0:	2b30      	cmp	r3, #48	; 0x30
 800a3c2:	d064      	beq.n	800a48e <HAL_TIM_ConfigClockSource+0x15a>
 800a3c4:	2b30      	cmp	r3, #48	; 0x30
 800a3c6:	d86b      	bhi.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	d060      	beq.n	800a48e <HAL_TIM_ConfigClockSource+0x15a>
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d867      	bhi.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d05c      	beq.n	800a48e <HAL_TIM_ConfigClockSource+0x15a>
 800a3d4:	2b10      	cmp	r3, #16
 800a3d6:	d05a      	beq.n	800a48e <HAL_TIM_ConfigClockSource+0x15a>
 800a3d8:	e062      	b.n	800a4a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	6899      	ldr	r1, [r3, #8]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f000 fb19 	bl	800aa20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	609a      	str	r2, [r3, #8]
      break;
 800a406:	e04f      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	6899      	ldr	r1, [r3, #8]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f000 fb02 	bl	800aa20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689a      	ldr	r2, [r3, #8]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a42a:	609a      	str	r2, [r3, #8]
      break;
 800a42c:	e03c      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6818      	ldr	r0, [r3, #0]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	6859      	ldr	r1, [r3, #4]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	461a      	mov	r2, r3
 800a43c:	f000 fa76 	bl	800a92c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2150      	movs	r1, #80	; 0x50
 800a446:	4618      	mov	r0, r3
 800a448:	f000 facf 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a44c:	e02c      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6859      	ldr	r1, [r3, #4]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f000 fa95 	bl	800a98a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2160      	movs	r1, #96	; 0x60
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fabf 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a46c:	e01c      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	6859      	ldr	r1, [r3, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	461a      	mov	r2, r3
 800a47c:	f000 fa56 	bl	800a92c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2140      	movs	r1, #64	; 0x40
 800a486:	4618      	mov	r0, r3
 800a488:	f000 faaf 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a48c:	e00c      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f000 faa6 	bl	800a9ea <TIM_ITRx_SetConfig>
      break;
 800a49e:	e003      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a4:	e000      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
	...

0800a514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a34      	ldr	r2, [pc, #208]	; (800a5f8 <TIM_Base_SetConfig+0xe4>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d00f      	beq.n	800a54c <TIM_Base_SetConfig+0x38>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a532:	d00b      	beq.n	800a54c <TIM_Base_SetConfig+0x38>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a31      	ldr	r2, [pc, #196]	; (800a5fc <TIM_Base_SetConfig+0xe8>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d007      	beq.n	800a54c <TIM_Base_SetConfig+0x38>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a30      	ldr	r2, [pc, #192]	; (800a600 <TIM_Base_SetConfig+0xec>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d003      	beq.n	800a54c <TIM_Base_SetConfig+0x38>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a2f      	ldr	r2, [pc, #188]	; (800a604 <TIM_Base_SetConfig+0xf0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d108      	bne.n	800a55e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a25      	ldr	r2, [pc, #148]	; (800a5f8 <TIM_Base_SetConfig+0xe4>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d01b      	beq.n	800a59e <TIM_Base_SetConfig+0x8a>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a56c:	d017      	beq.n	800a59e <TIM_Base_SetConfig+0x8a>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a22      	ldr	r2, [pc, #136]	; (800a5fc <TIM_Base_SetConfig+0xe8>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d013      	beq.n	800a59e <TIM_Base_SetConfig+0x8a>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a21      	ldr	r2, [pc, #132]	; (800a600 <TIM_Base_SetConfig+0xec>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d00f      	beq.n	800a59e <TIM_Base_SetConfig+0x8a>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a20      	ldr	r2, [pc, #128]	; (800a604 <TIM_Base_SetConfig+0xf0>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d00b      	beq.n	800a59e <TIM_Base_SetConfig+0x8a>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a1f      	ldr	r2, [pc, #124]	; (800a608 <TIM_Base_SetConfig+0xf4>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d007      	beq.n	800a59e <TIM_Base_SetConfig+0x8a>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a1e      	ldr	r2, [pc, #120]	; (800a60c <TIM_Base_SetConfig+0xf8>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d003      	beq.n	800a59e <TIM_Base_SetConfig+0x8a>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1d      	ldr	r2, [pc, #116]	; (800a610 <TIM_Base_SetConfig+0xfc>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d108      	bne.n	800a5b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a08      	ldr	r2, [pc, #32]	; (800a5f8 <TIM_Base_SetConfig+0xe4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d103      	bne.n	800a5e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	691a      	ldr	r2, [r3, #16]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	615a      	str	r2, [r3, #20]
}
 800a5ea:	bf00      	nop
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	40010000 	.word	0x40010000
 800a5fc:	40000400 	.word	0x40000400
 800a600:	40000800 	.word	0x40000800
 800a604:	40000c00 	.word	0x40000c00
 800a608:	40014000 	.word	0x40014000
 800a60c:	40014400 	.word	0x40014400
 800a610:	40014800 	.word	0x40014800

0800a614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f023 0201 	bic.w	r2, r3, #1
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0303 	bic.w	r3, r3, #3
 800a64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f023 0302 	bic.w	r3, r3, #2
 800a65c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	4313      	orrs	r3, r2
 800a666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a1c      	ldr	r2, [pc, #112]	; (800a6dc <TIM_OC1_SetConfig+0xc8>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10c      	bne.n	800a68a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f023 0308 	bic.w	r3, r3, #8
 800a676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	4313      	orrs	r3, r2
 800a680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f023 0304 	bic.w	r3, r3, #4
 800a688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a13      	ldr	r2, [pc, #76]	; (800a6dc <TIM_OC1_SetConfig+0xc8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d111      	bne.n	800a6b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	621a      	str	r2, [r3, #32]
}
 800a6d0:	bf00      	nop
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	40010000 	.word	0x40010000

0800a6e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	f023 0210 	bic.w	r2, r3, #16
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a70e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0320 	bic.w	r3, r3, #32
 800a72a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a1e      	ldr	r2, [pc, #120]	; (800a7b4 <TIM_OC2_SetConfig+0xd4>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d10d      	bne.n	800a75c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a75a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a15      	ldr	r2, [pc, #84]	; (800a7b4 <TIM_OC2_SetConfig+0xd4>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d113      	bne.n	800a78c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a76a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	695b      	ldr	r3, [r3, #20]
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	4313      	orrs	r3, r2
 800a78a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	621a      	str	r2, [r3, #32]
}
 800a7a6:	bf00      	nop
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	40010000 	.word	0x40010000

0800a7b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a1d      	ldr	r2, [pc, #116]	; (800a888 <TIM_OC3_SetConfig+0xd0>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d10d      	bne.n	800a832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a81c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	4313      	orrs	r3, r2
 800a828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a14      	ldr	r2, [pc, #80]	; (800a888 <TIM_OC3_SetConfig+0xd0>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d113      	bne.n	800a862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	4313      	orrs	r3, r2
 800a860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	621a      	str	r2, [r3, #32]
}
 800a87c:	bf00      	nop
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	40010000 	.word	0x40010000

0800a88c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	031b      	lsls	r3, r3, #12
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a10      	ldr	r2, [pc, #64]	; (800a928 <TIM_OC4_SetConfig+0x9c>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d109      	bne.n	800a900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	019b      	lsls	r3, r3, #6
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	621a      	str	r2, [r3, #32]
}
 800a91a:	bf00      	nop
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40010000 	.word	0x40010000

0800a92c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6a1b      	ldr	r3, [r3, #32]
 800a93c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f023 0201 	bic.w	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	011b      	lsls	r3, r3, #4
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	4313      	orrs	r3, r2
 800a960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	f023 030a 	bic.w	r3, r3, #10
 800a968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4313      	orrs	r3, r2
 800a970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	621a      	str	r2, [r3, #32]
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b087      	sub	sp, #28
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	f023 0210 	bic.w	r2, r3, #16
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	031b      	lsls	r3, r3, #12
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	f043 0307 	orr.w	r3, r3, #7
 800aa0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	609a      	str	r2, [r3, #8]
}
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	021a      	lsls	r2, r3, #8
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	609a      	str	r2, [r3, #8]
}
 800aa54:	bf00      	nop
 800aa56:	371c      	adds	r7, #28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f003 031f 	and.w	r3, r3, #31
 800aa72:	2201      	movs	r2, #1
 800aa74:	fa02 f303 	lsl.w	r3, r2, r3
 800aa78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a1a      	ldr	r2, [r3, #32]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	43db      	mvns	r3, r3
 800aa82:	401a      	ands	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6a1a      	ldr	r2, [r3, #32]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f003 031f 	and.w	r3, r3, #31
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	fa01 f303 	lsl.w	r3, r1, r3
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	621a      	str	r2, [r3, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
	...

0800aaac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aac0:	2302      	movs	r3, #2
 800aac2:	e050      	b.n	800ab66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d018      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab10:	d013      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00e      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a16      	ldr	r2, [pc, #88]	; (800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d009      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a15      	ldr	r2, [pc, #84]	; (800ab80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d004      	beq.n	800ab3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a13      	ldr	r2, [pc, #76]	; (800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d10c      	bne.n	800ab54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	40010000 	.word	0x40010000
 800ab78:	40000400 	.word	0x40000400
 800ab7c:	40000800 	.word	0x40000800
 800ab80:	40000c00 	.word	0x40000c00
 800ab84:	40014000 	.word	0x40014000

0800ab88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e047      	b.n	800ac52 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d106      	bne.n	800abdc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7fa fcb4 	bl	8005544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2224      	movs	r2, #36	; 0x24
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f931 	bl	800ae5c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	695a      	ldr	r2, [r3, #20]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800ac18:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695a      	ldr	r2, [r3, #20]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f042 0208 	orr.w	r2, r2, #8
 800ac28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68da      	ldr	r2, [r3, #12]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2220      	movs	r2, #32
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b08a      	sub	sp, #40	; 0x28
 800ac5e:	af02      	add	r7, sp, #8
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	603b      	str	r3, [r7, #0]
 800ac66:	4613      	mov	r3, r2
 800ac68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	d17c      	bne.n	800ad74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <HAL_UART_Transmit+0x2c>
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e075      	b.n	800ad76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_UART_Transmit+0x3e>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e06e      	b.n	800ad76 <HAL_UART_Transmit+0x11c>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2221      	movs	r2, #33	; 0x21
 800acaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acae:	f7fa fdb3 	bl	8005818 <HAL_GetTick>
 800acb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	88fa      	ldrh	r2, [r7, #6]
 800acb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	88fa      	ldrh	r2, [r7, #6]
 800acbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc8:	d108      	bne.n	800acdc <HAL_UART_Transmit+0x82>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d104      	bne.n	800acdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	61bb      	str	r3, [r7, #24]
 800acda:	e003      	b.n	800ace4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800acec:	e02a      	b.n	800ad44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2200      	movs	r2, #0
 800acf6:	2180      	movs	r1, #128	; 0x80
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f840 	bl	800ad7e <UART_WaitOnFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e036      	b.n	800ad76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	3302      	adds	r3, #2
 800ad22:	61bb      	str	r3, [r7, #24]
 800ad24:	e007      	b.n	800ad36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	781a      	ldrb	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	3301      	adds	r3, #1
 800ad34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1cf      	bne.n	800acee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2200      	movs	r2, #0
 800ad56:	2140      	movs	r1, #64	; 0x40
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f810 	bl	800ad7e <UART_WaitOnFlagUntilTimeout>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ad64:	2303      	movs	r3, #3
 800ad66:	e006      	b.n	800ad76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	e000      	b.n	800ad76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ad74:	2302      	movs	r3, #2
  }
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b090      	sub	sp, #64	; 0x40
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	60f8      	str	r0, [r7, #12]
 800ad86:	60b9      	str	r1, [r7, #8]
 800ad88:	603b      	str	r3, [r7, #0]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad8e:	e050      	b.n	800ae32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad96:	d04c      	beq.n	800ae32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ad98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d007      	beq.n	800adae <UART_WaitOnFlagUntilTimeout+0x30>
 800ad9e:	f7fa fd3b 	bl	8005818 <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adaa:	429a      	cmp	r2, r3
 800adac:	d241      	bcs.n	800ae32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	330c      	adds	r3, #12
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	330c      	adds	r3, #12
 800adcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adce:	637a      	str	r2, [r7, #52]	; 0x34
 800add0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800add4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e5      	bne.n	800adae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3314      	adds	r3, #20
 800ade8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	613b      	str	r3, [r7, #16]
   return(result);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3314      	adds	r3, #20
 800ae00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae02:	623a      	str	r2, [r7, #32]
 800ae04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	69f9      	ldr	r1, [r7, #28]
 800ae08:	6a3a      	ldr	r2, [r7, #32]
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e5      	bne.n	800ade2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2220      	movs	r2, #32
 800ae22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e00f      	b.n	800ae52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	bf0c      	ite	eq
 800ae42:	2301      	moveq	r3, #1
 800ae44:	2300      	movne	r3, #0
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	461a      	mov	r2, r3
 800ae4a:	79fb      	ldrb	r3, [r7, #7]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d09f      	beq.n	800ad90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3740      	adds	r7, #64	; 0x40
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae60:	b0c0      	sub	sp, #256	; 0x100
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae78:	68d9      	ldr	r1, [r3, #12]
 800ae7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	ea40 0301 	orr.w	r3, r0, r1
 800ae84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae8a:	689a      	ldr	r2, [r3, #8]
 800ae8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aeb4:	f021 010c 	bic.w	r1, r1, #12
 800aeb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aec2:	430b      	orrs	r3, r1
 800aec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed6:	6999      	ldr	r1, [r3, #24]
 800aed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	ea40 0301 	orr.w	r3, r0, r1
 800aee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	4b8f      	ldr	r3, [pc, #572]	; (800b128 <UART_SetConfig+0x2cc>)
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d005      	beq.n	800aefc <UART_SetConfig+0xa0>
 800aef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	4b8d      	ldr	r3, [pc, #564]	; (800b12c <UART_SetConfig+0x2d0>)
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d104      	bne.n	800af06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aefc:	f7fd ffd8 	bl	8008eb0 <HAL_RCC_GetPCLK2Freq>
 800af00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af04:	e003      	b.n	800af0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af06:	f7fd ffbf 	bl	8008e88 <HAL_RCC_GetPCLK1Freq>
 800af0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af18:	f040 810c 	bne.w	800b134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af20:	2200      	movs	r2, #0
 800af22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af2e:	4622      	mov	r2, r4
 800af30:	462b      	mov	r3, r5
 800af32:	1891      	adds	r1, r2, r2
 800af34:	65b9      	str	r1, [r7, #88]	; 0x58
 800af36:	415b      	adcs	r3, r3
 800af38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af3e:	4621      	mov	r1, r4
 800af40:	eb12 0801 	adds.w	r8, r2, r1
 800af44:	4629      	mov	r1, r5
 800af46:	eb43 0901 	adc.w	r9, r3, r1
 800af4a:	f04f 0200 	mov.w	r2, #0
 800af4e:	f04f 0300 	mov.w	r3, #0
 800af52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af5e:	4690      	mov	r8, r2
 800af60:	4699      	mov	r9, r3
 800af62:	4623      	mov	r3, r4
 800af64:	eb18 0303 	adds.w	r3, r8, r3
 800af68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af6c:	462b      	mov	r3, r5
 800af6e:	eb49 0303 	adc.w	r3, r9, r3
 800af72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800af86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af8a:	460b      	mov	r3, r1
 800af8c:	18db      	adds	r3, r3, r3
 800af8e:	653b      	str	r3, [r7, #80]	; 0x50
 800af90:	4613      	mov	r3, r2
 800af92:	eb42 0303 	adc.w	r3, r2, r3
 800af96:	657b      	str	r3, [r7, #84]	; 0x54
 800af98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800afa0:	f7f5 fc58 	bl	8000854 <__aeabi_uldivmod>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4b61      	ldr	r3, [pc, #388]	; (800b130 <UART_SetConfig+0x2d4>)
 800afaa:	fba3 2302 	umull	r2, r3, r3, r2
 800afae:	095b      	lsrs	r3, r3, #5
 800afb0:	011c      	lsls	r4, r3, #4
 800afb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800afc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800afc4:	4642      	mov	r2, r8
 800afc6:	464b      	mov	r3, r9
 800afc8:	1891      	adds	r1, r2, r2
 800afca:	64b9      	str	r1, [r7, #72]	; 0x48
 800afcc:	415b      	adcs	r3, r3
 800afce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afd4:	4641      	mov	r1, r8
 800afd6:	eb12 0a01 	adds.w	sl, r2, r1
 800afda:	4649      	mov	r1, r9
 800afdc:	eb43 0b01 	adc.w	fp, r3, r1
 800afe0:	f04f 0200 	mov.w	r2, #0
 800afe4:	f04f 0300 	mov.w	r3, #0
 800afe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aff4:	4692      	mov	sl, r2
 800aff6:	469b      	mov	fp, r3
 800aff8:	4643      	mov	r3, r8
 800affa:	eb1a 0303 	adds.w	r3, sl, r3
 800affe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b002:	464b      	mov	r3, r9
 800b004:	eb4b 0303 	adc.w	r3, fp, r3
 800b008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b01c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b020:	460b      	mov	r3, r1
 800b022:	18db      	adds	r3, r3, r3
 800b024:	643b      	str	r3, [r7, #64]	; 0x40
 800b026:	4613      	mov	r3, r2
 800b028:	eb42 0303 	adc.w	r3, r2, r3
 800b02c:	647b      	str	r3, [r7, #68]	; 0x44
 800b02e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b036:	f7f5 fc0d 	bl	8000854 <__aeabi_uldivmod>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4611      	mov	r1, r2
 800b040:	4b3b      	ldr	r3, [pc, #236]	; (800b130 <UART_SetConfig+0x2d4>)
 800b042:	fba3 2301 	umull	r2, r3, r3, r1
 800b046:	095b      	lsrs	r3, r3, #5
 800b048:	2264      	movs	r2, #100	; 0x64
 800b04a:	fb02 f303 	mul.w	r3, r2, r3
 800b04e:	1acb      	subs	r3, r1, r3
 800b050:	00db      	lsls	r3, r3, #3
 800b052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b056:	4b36      	ldr	r3, [pc, #216]	; (800b130 <UART_SetConfig+0x2d4>)
 800b058:	fba3 2302 	umull	r2, r3, r3, r2
 800b05c:	095b      	lsrs	r3, r3, #5
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b064:	441c      	add	r4, r3
 800b066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b06a:	2200      	movs	r2, #0
 800b06c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b078:	4642      	mov	r2, r8
 800b07a:	464b      	mov	r3, r9
 800b07c:	1891      	adds	r1, r2, r2
 800b07e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b080:	415b      	adcs	r3, r3
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b088:	4641      	mov	r1, r8
 800b08a:	1851      	adds	r1, r2, r1
 800b08c:	6339      	str	r1, [r7, #48]	; 0x30
 800b08e:	4649      	mov	r1, r9
 800b090:	414b      	adcs	r3, r1
 800b092:	637b      	str	r3, [r7, #52]	; 0x34
 800b094:	f04f 0200 	mov.w	r2, #0
 800b098:	f04f 0300 	mov.w	r3, #0
 800b09c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b0a0:	4659      	mov	r1, fp
 800b0a2:	00cb      	lsls	r3, r1, #3
 800b0a4:	4651      	mov	r1, sl
 800b0a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0aa:	4651      	mov	r1, sl
 800b0ac:	00ca      	lsls	r2, r1, #3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	4642      	mov	r2, r8
 800b0b6:	189b      	adds	r3, r3, r2
 800b0b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0bc:	464b      	mov	r3, r9
 800b0be:	460a      	mov	r2, r1
 800b0c0:	eb42 0303 	adc.w	r3, r2, r3
 800b0c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b0d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0dc:	460b      	mov	r3, r1
 800b0de:	18db      	adds	r3, r3, r3
 800b0e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	eb42 0303 	adc.w	r3, r2, r3
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b0f2:	f7f5 fbaf 	bl	8000854 <__aeabi_uldivmod>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4b0d      	ldr	r3, [pc, #52]	; (800b130 <UART_SetConfig+0x2d4>)
 800b0fc:	fba3 1302 	umull	r1, r3, r3, r2
 800b100:	095b      	lsrs	r3, r3, #5
 800b102:	2164      	movs	r1, #100	; 0x64
 800b104:	fb01 f303 	mul.w	r3, r1, r3
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	00db      	lsls	r3, r3, #3
 800b10c:	3332      	adds	r3, #50	; 0x32
 800b10e:	4a08      	ldr	r2, [pc, #32]	; (800b130 <UART_SetConfig+0x2d4>)
 800b110:	fba2 2303 	umull	r2, r3, r2, r3
 800b114:	095b      	lsrs	r3, r3, #5
 800b116:	f003 0207 	and.w	r2, r3, #7
 800b11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4422      	add	r2, r4
 800b122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b124:	e105      	b.n	800b332 <UART_SetConfig+0x4d6>
 800b126:	bf00      	nop
 800b128:	40011000 	.word	0x40011000
 800b12c:	40011400 	.word	0x40011400
 800b130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b138:	2200      	movs	r2, #0
 800b13a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b13e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b146:	4642      	mov	r2, r8
 800b148:	464b      	mov	r3, r9
 800b14a:	1891      	adds	r1, r2, r2
 800b14c:	6239      	str	r1, [r7, #32]
 800b14e:	415b      	adcs	r3, r3
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
 800b152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b156:	4641      	mov	r1, r8
 800b158:	1854      	adds	r4, r2, r1
 800b15a:	4649      	mov	r1, r9
 800b15c:	eb43 0501 	adc.w	r5, r3, r1
 800b160:	f04f 0200 	mov.w	r2, #0
 800b164:	f04f 0300 	mov.w	r3, #0
 800b168:	00eb      	lsls	r3, r5, #3
 800b16a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b16e:	00e2      	lsls	r2, r4, #3
 800b170:	4614      	mov	r4, r2
 800b172:	461d      	mov	r5, r3
 800b174:	4643      	mov	r3, r8
 800b176:	18e3      	adds	r3, r4, r3
 800b178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b17c:	464b      	mov	r3, r9
 800b17e:	eb45 0303 	adc.w	r3, r5, r3
 800b182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b196:	f04f 0200 	mov.w	r2, #0
 800b19a:	f04f 0300 	mov.w	r3, #0
 800b19e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	008b      	lsls	r3, r1, #2
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	008a      	lsls	r2, r1, #2
 800b1b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b1b4:	f7f5 fb4e 	bl	8000854 <__aeabi_uldivmod>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4b60      	ldr	r3, [pc, #384]	; (800b340 <UART_SetConfig+0x4e4>)
 800b1be:	fba3 2302 	umull	r2, r3, r3, r2
 800b1c2:	095b      	lsrs	r3, r3, #5
 800b1c4:	011c      	lsls	r4, r3, #4
 800b1c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b1d8:	4642      	mov	r2, r8
 800b1da:	464b      	mov	r3, r9
 800b1dc:	1891      	adds	r1, r2, r2
 800b1de:	61b9      	str	r1, [r7, #24]
 800b1e0:	415b      	adcs	r3, r3
 800b1e2:	61fb      	str	r3, [r7, #28]
 800b1e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1e8:	4641      	mov	r1, r8
 800b1ea:	1851      	adds	r1, r2, r1
 800b1ec:	6139      	str	r1, [r7, #16]
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	414b      	adcs	r3, r1
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	f04f 0200 	mov.w	r2, #0
 800b1f8:	f04f 0300 	mov.w	r3, #0
 800b1fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b200:	4659      	mov	r1, fp
 800b202:	00cb      	lsls	r3, r1, #3
 800b204:	4651      	mov	r1, sl
 800b206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b20a:	4651      	mov	r1, sl
 800b20c:	00ca      	lsls	r2, r1, #3
 800b20e:	4610      	mov	r0, r2
 800b210:	4619      	mov	r1, r3
 800b212:	4603      	mov	r3, r0
 800b214:	4642      	mov	r2, r8
 800b216:	189b      	adds	r3, r3, r2
 800b218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b21c:	464b      	mov	r3, r9
 800b21e:	460a      	mov	r2, r1
 800b220:	eb42 0303 	adc.w	r3, r2, r3
 800b224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	67bb      	str	r3, [r7, #120]	; 0x78
 800b232:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b234:	f04f 0200 	mov.w	r2, #0
 800b238:	f04f 0300 	mov.w	r3, #0
 800b23c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b240:	4649      	mov	r1, r9
 800b242:	008b      	lsls	r3, r1, #2
 800b244:	4641      	mov	r1, r8
 800b246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b24a:	4641      	mov	r1, r8
 800b24c:	008a      	lsls	r2, r1, #2
 800b24e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b252:	f7f5 faff 	bl	8000854 <__aeabi_uldivmod>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	4b39      	ldr	r3, [pc, #228]	; (800b340 <UART_SetConfig+0x4e4>)
 800b25c:	fba3 1302 	umull	r1, r3, r3, r2
 800b260:	095b      	lsrs	r3, r3, #5
 800b262:	2164      	movs	r1, #100	; 0x64
 800b264:	fb01 f303 	mul.w	r3, r1, r3
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	3332      	adds	r3, #50	; 0x32
 800b26e:	4a34      	ldr	r2, [pc, #208]	; (800b340 <UART_SetConfig+0x4e4>)
 800b270:	fba2 2303 	umull	r2, r3, r2, r3
 800b274:	095b      	lsrs	r3, r3, #5
 800b276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b27a:	441c      	add	r4, r3
 800b27c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b280:	2200      	movs	r2, #0
 800b282:	673b      	str	r3, [r7, #112]	; 0x70
 800b284:	677a      	str	r2, [r7, #116]	; 0x74
 800b286:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b28a:	4642      	mov	r2, r8
 800b28c:	464b      	mov	r3, r9
 800b28e:	1891      	adds	r1, r2, r2
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	415b      	adcs	r3, r3
 800b294:	60fb      	str	r3, [r7, #12]
 800b296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b29a:	4641      	mov	r1, r8
 800b29c:	1851      	adds	r1, r2, r1
 800b29e:	6039      	str	r1, [r7, #0]
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	414b      	adcs	r3, r1
 800b2a4:	607b      	str	r3, [r7, #4]
 800b2a6:	f04f 0200 	mov.w	r2, #0
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2b2:	4659      	mov	r1, fp
 800b2b4:	00cb      	lsls	r3, r1, #3
 800b2b6:	4651      	mov	r1, sl
 800b2b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2bc:	4651      	mov	r1, sl
 800b2be:	00ca      	lsls	r2, r1, #3
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	4642      	mov	r2, r8
 800b2c8:	189b      	adds	r3, r3, r2
 800b2ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2cc:	464b      	mov	r3, r9
 800b2ce:	460a      	mov	r2, r1
 800b2d0:	eb42 0303 	adc.w	r3, r2, r3
 800b2d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	663b      	str	r3, [r7, #96]	; 0x60
 800b2e0:	667a      	str	r2, [r7, #100]	; 0x64
 800b2e2:	f04f 0200 	mov.w	r2, #0
 800b2e6:	f04f 0300 	mov.w	r3, #0
 800b2ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	008b      	lsls	r3, r1, #2
 800b2f2:	4641      	mov	r1, r8
 800b2f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	008a      	lsls	r2, r1, #2
 800b2fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b300:	f7f5 faa8 	bl	8000854 <__aeabi_uldivmod>
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <UART_SetConfig+0x4e4>)
 800b30a:	fba3 1302 	umull	r1, r3, r3, r2
 800b30e:	095b      	lsrs	r3, r3, #5
 800b310:	2164      	movs	r1, #100	; 0x64
 800b312:	fb01 f303 	mul.w	r3, r1, r3
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	011b      	lsls	r3, r3, #4
 800b31a:	3332      	adds	r3, #50	; 0x32
 800b31c:	4a08      	ldr	r2, [pc, #32]	; (800b340 <UART_SetConfig+0x4e4>)
 800b31e:	fba2 2303 	umull	r2, r3, r2, r3
 800b322:	095b      	lsrs	r3, r3, #5
 800b324:	f003 020f 	and.w	r2, r3, #15
 800b328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4422      	add	r2, r4
 800b330:	609a      	str	r2, [r3, #8]
}
 800b332:	bf00      	nop
 800b334:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b338:	46bd      	mov	sp, r7
 800b33a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b33e:	bf00      	nop
 800b340:	51eb851f 	.word	0x51eb851f

0800b344 <arm_sin_f32>:
 800b344:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b3c0 <arm_sin_f32+0x7c>
 800b348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b34c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b354:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800b358:	d42c      	bmi.n	800b3b4 <arm_sin_f32+0x70>
 800b35a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b35e:	eddf 6a19 	vldr	s13, [pc, #100]	; 800b3c4 <arm_sin_f32+0x80>
 800b362:	4a19      	ldr	r2, [pc, #100]	; (800b3c8 <arm_sin_f32+0x84>)
 800b364:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b368:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b36c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b370:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b378:	bfa8      	it	ge
 800b37a:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800b37e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800b382:	ee17 3a10 	vmov	r3, s14
 800b386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38a:	ee07 3a10 	vmov	s14, r3
 800b38e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800b392:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b39a:	edd1 6a01 	vldr	s13, [r1, #4]
 800b39e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b3a2:	ed91 0a00 	vldr	s0, [r1]
 800b3a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b3aa:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b3ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b3b2:	4770      	bx	lr
 800b3b4:	ee17 3a90 	vmov	r3, s15
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	e7cc      	b.n	800b35a <arm_sin_f32+0x16>
 800b3c0:	3e22f983 	.word	0x3e22f983
 800b3c4:	44000000 	.word	0x44000000
 800b3c8:	0800c54c 	.word	0x0800c54c

0800b3cc <atoi>:
 800b3cc:	220a      	movs	r2, #10
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	f000 b8d6 	b.w	800b580 <strtol>

0800b3d4 <__errno>:
 800b3d4:	4b01      	ldr	r3, [pc, #4]	; (800b3dc <__errno+0x8>)
 800b3d6:	6818      	ldr	r0, [r3, #0]
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	20000300 	.word	0x20000300

0800b3e0 <__libc_init_array>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4d0d      	ldr	r5, [pc, #52]	; (800b418 <__libc_init_array+0x38>)
 800b3e4:	4c0d      	ldr	r4, [pc, #52]	; (800b41c <__libc_init_array+0x3c>)
 800b3e6:	1b64      	subs	r4, r4, r5
 800b3e8:	10a4      	asrs	r4, r4, #2
 800b3ea:	2600      	movs	r6, #0
 800b3ec:	42a6      	cmp	r6, r4
 800b3ee:	d109      	bne.n	800b404 <__libc_init_array+0x24>
 800b3f0:	4d0b      	ldr	r5, [pc, #44]	; (800b420 <__libc_init_array+0x40>)
 800b3f2:	4c0c      	ldr	r4, [pc, #48]	; (800b424 <__libc_init_array+0x44>)
 800b3f4:	f000 f8ce 	bl	800b594 <_init>
 800b3f8:	1b64      	subs	r4, r4, r5
 800b3fa:	10a4      	asrs	r4, r4, #2
 800b3fc:	2600      	movs	r6, #0
 800b3fe:	42a6      	cmp	r6, r4
 800b400:	d105      	bne.n	800b40e <__libc_init_array+0x2e>
 800b402:	bd70      	pop	{r4, r5, r6, pc}
 800b404:	f855 3b04 	ldr.w	r3, [r5], #4
 800b408:	4798      	blx	r3
 800b40a:	3601      	adds	r6, #1
 800b40c:	e7ee      	b.n	800b3ec <__libc_init_array+0xc>
 800b40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b412:	4798      	blx	r3
 800b414:	3601      	adds	r6, #1
 800b416:	e7f2      	b.n	800b3fe <__libc_init_array+0x1e>
 800b418:	0800ce5c 	.word	0x0800ce5c
 800b41c:	0800ce5c 	.word	0x0800ce5c
 800b420:	0800ce5c 	.word	0x0800ce5c
 800b424:	0800ce60 	.word	0x0800ce60

0800b428 <memcpy>:
 800b428:	440a      	add	r2, r1
 800b42a:	4291      	cmp	r1, r2
 800b42c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b430:	d100      	bne.n	800b434 <memcpy+0xc>
 800b432:	4770      	bx	lr
 800b434:	b510      	push	{r4, lr}
 800b436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b43e:	4291      	cmp	r1, r2
 800b440:	d1f9      	bne.n	800b436 <memcpy+0xe>
 800b442:	bd10      	pop	{r4, pc}

0800b444 <memset>:
 800b444:	4402      	add	r2, r0
 800b446:	4603      	mov	r3, r0
 800b448:	4293      	cmp	r3, r2
 800b44a:	d100      	bne.n	800b44e <memset+0xa>
 800b44c:	4770      	bx	lr
 800b44e:	f803 1b01 	strb.w	r1, [r3], #1
 800b452:	e7f9      	b.n	800b448 <memset+0x4>

0800b454 <strncmp>:
 800b454:	b510      	push	{r4, lr}
 800b456:	b17a      	cbz	r2, 800b478 <strncmp+0x24>
 800b458:	4603      	mov	r3, r0
 800b45a:	3901      	subs	r1, #1
 800b45c:	1884      	adds	r4, r0, r2
 800b45e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b462:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b466:	4290      	cmp	r0, r2
 800b468:	d101      	bne.n	800b46e <strncmp+0x1a>
 800b46a:	42a3      	cmp	r3, r4
 800b46c:	d101      	bne.n	800b472 <strncmp+0x1e>
 800b46e:	1a80      	subs	r0, r0, r2
 800b470:	bd10      	pop	{r4, pc}
 800b472:	2800      	cmp	r0, #0
 800b474:	d1f3      	bne.n	800b45e <strncmp+0xa>
 800b476:	e7fa      	b.n	800b46e <strncmp+0x1a>
 800b478:	4610      	mov	r0, r2
 800b47a:	e7f9      	b.n	800b470 <strncmp+0x1c>

0800b47c <_strtol_l.constprop.0>:
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b482:	d001      	beq.n	800b488 <_strtol_l.constprop.0+0xc>
 800b484:	2b24      	cmp	r3, #36	; 0x24
 800b486:	d906      	bls.n	800b496 <_strtol_l.constprop.0+0x1a>
 800b488:	f7ff ffa4 	bl	800b3d4 <__errno>
 800b48c:	2316      	movs	r3, #22
 800b48e:	6003      	str	r3, [r0, #0]
 800b490:	2000      	movs	r0, #0
 800b492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b496:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b57c <_strtol_l.constprop.0+0x100>
 800b49a:	460d      	mov	r5, r1
 800b49c:	462e      	mov	r6, r5
 800b49e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4a2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b4a6:	f017 0708 	ands.w	r7, r7, #8
 800b4aa:	d1f7      	bne.n	800b49c <_strtol_l.constprop.0+0x20>
 800b4ac:	2c2d      	cmp	r4, #45	; 0x2d
 800b4ae:	d132      	bne.n	800b516 <_strtol_l.constprop.0+0x9a>
 800b4b0:	782c      	ldrb	r4, [r5, #0]
 800b4b2:	2701      	movs	r7, #1
 800b4b4:	1cb5      	adds	r5, r6, #2
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d05b      	beq.n	800b572 <_strtol_l.constprop.0+0xf6>
 800b4ba:	2b10      	cmp	r3, #16
 800b4bc:	d109      	bne.n	800b4d2 <_strtol_l.constprop.0+0x56>
 800b4be:	2c30      	cmp	r4, #48	; 0x30
 800b4c0:	d107      	bne.n	800b4d2 <_strtol_l.constprop.0+0x56>
 800b4c2:	782c      	ldrb	r4, [r5, #0]
 800b4c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4c8:	2c58      	cmp	r4, #88	; 0x58
 800b4ca:	d14d      	bne.n	800b568 <_strtol_l.constprop.0+0xec>
 800b4cc:	786c      	ldrb	r4, [r5, #1]
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	3502      	adds	r5, #2
 800b4d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4da:	f04f 0c00 	mov.w	ip, #0
 800b4de:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4e2:	4666      	mov	r6, ip
 800b4e4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b4ec:	f1be 0f09 	cmp.w	lr, #9
 800b4f0:	d816      	bhi.n	800b520 <_strtol_l.constprop.0+0xa4>
 800b4f2:	4674      	mov	r4, lr
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	dd24      	ble.n	800b542 <_strtol_l.constprop.0+0xc6>
 800b4f8:	f1bc 0f00 	cmp.w	ip, #0
 800b4fc:	db1e      	blt.n	800b53c <_strtol_l.constprop.0+0xc0>
 800b4fe:	45b1      	cmp	r9, r6
 800b500:	d31c      	bcc.n	800b53c <_strtol_l.constprop.0+0xc0>
 800b502:	d101      	bne.n	800b508 <_strtol_l.constprop.0+0x8c>
 800b504:	45a2      	cmp	sl, r4
 800b506:	db19      	blt.n	800b53c <_strtol_l.constprop.0+0xc0>
 800b508:	fb06 4603 	mla	r6, r6, r3, r4
 800b50c:	f04f 0c01 	mov.w	ip, #1
 800b510:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b514:	e7e8      	b.n	800b4e8 <_strtol_l.constprop.0+0x6c>
 800b516:	2c2b      	cmp	r4, #43	; 0x2b
 800b518:	bf04      	itt	eq
 800b51a:	782c      	ldrbeq	r4, [r5, #0]
 800b51c:	1cb5      	addeq	r5, r6, #2
 800b51e:	e7ca      	b.n	800b4b6 <_strtol_l.constprop.0+0x3a>
 800b520:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b524:	f1be 0f19 	cmp.w	lr, #25
 800b528:	d801      	bhi.n	800b52e <_strtol_l.constprop.0+0xb2>
 800b52a:	3c37      	subs	r4, #55	; 0x37
 800b52c:	e7e2      	b.n	800b4f4 <_strtol_l.constprop.0+0x78>
 800b52e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b532:	f1be 0f19 	cmp.w	lr, #25
 800b536:	d804      	bhi.n	800b542 <_strtol_l.constprop.0+0xc6>
 800b538:	3c57      	subs	r4, #87	; 0x57
 800b53a:	e7db      	b.n	800b4f4 <_strtol_l.constprop.0+0x78>
 800b53c:	f04f 3cff 	mov.w	ip, #4294967295
 800b540:	e7e6      	b.n	800b510 <_strtol_l.constprop.0+0x94>
 800b542:	f1bc 0f00 	cmp.w	ip, #0
 800b546:	da05      	bge.n	800b554 <_strtol_l.constprop.0+0xd8>
 800b548:	2322      	movs	r3, #34	; 0x22
 800b54a:	6003      	str	r3, [r0, #0]
 800b54c:	4646      	mov	r6, r8
 800b54e:	b942      	cbnz	r2, 800b562 <_strtol_l.constprop.0+0xe6>
 800b550:	4630      	mov	r0, r6
 800b552:	e79e      	b.n	800b492 <_strtol_l.constprop.0+0x16>
 800b554:	b107      	cbz	r7, 800b558 <_strtol_l.constprop.0+0xdc>
 800b556:	4276      	negs	r6, r6
 800b558:	2a00      	cmp	r2, #0
 800b55a:	d0f9      	beq.n	800b550 <_strtol_l.constprop.0+0xd4>
 800b55c:	f1bc 0f00 	cmp.w	ip, #0
 800b560:	d000      	beq.n	800b564 <_strtol_l.constprop.0+0xe8>
 800b562:	1e69      	subs	r1, r5, #1
 800b564:	6011      	str	r1, [r2, #0]
 800b566:	e7f3      	b.n	800b550 <_strtol_l.constprop.0+0xd4>
 800b568:	2430      	movs	r4, #48	; 0x30
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1b1      	bne.n	800b4d2 <_strtol_l.constprop.0+0x56>
 800b56e:	2308      	movs	r3, #8
 800b570:	e7af      	b.n	800b4d2 <_strtol_l.constprop.0+0x56>
 800b572:	2c30      	cmp	r4, #48	; 0x30
 800b574:	d0a5      	beq.n	800b4c2 <_strtol_l.constprop.0+0x46>
 800b576:	230a      	movs	r3, #10
 800b578:	e7ab      	b.n	800b4d2 <_strtol_l.constprop.0+0x56>
 800b57a:	bf00      	nop
 800b57c:	0800cd51 	.word	0x0800cd51

0800b580 <strtol>:
 800b580:	4613      	mov	r3, r2
 800b582:	460a      	mov	r2, r1
 800b584:	4601      	mov	r1, r0
 800b586:	4802      	ldr	r0, [pc, #8]	; (800b590 <strtol+0x10>)
 800b588:	6800      	ldr	r0, [r0, #0]
 800b58a:	f7ff bf77 	b.w	800b47c <_strtol_l.constprop.0>
 800b58e:	bf00      	nop
 800b590:	20000300 	.word	0x20000300

0800b594 <_init>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	bf00      	nop
 800b598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59a:	bc08      	pop	{r3}
 800b59c:	469e      	mov	lr, r3
 800b59e:	4770      	bx	lr

0800b5a0 <_fini>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	bf00      	nop
 800b5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a6:	bc08      	pop	{r3}
 800b5a8:	469e      	mov	lr, r3
 800b5aa:	4770      	bx	lr
