
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000148c  080093b8  080093b8  000193b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a844  0800a844  000206f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a84c  0800a84c  000206f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a84c  0800a84c  0001a84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006f8  20000000  0800a854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b8  200006f8  0800af4c  000206f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003bb0  0800af4c  00023bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fcf  00000000  00000000  00020728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002493  00000000  00000000  000336f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00035b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00036c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018813  00000000  00000000  00037c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014765  00000000  00000000  000504ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e780  00000000  00000000  00064c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00103390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  00103450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00107e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200006f8 	.word	0x200006f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080093a0 	.word	0x080093a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200006fc 	.word	0x200006fc
 80001d4:	080093a0 	.word	0x080093a0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <SPI_command>:
void SPI_command(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <SPI_command+0x68>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d128      	bne.n	8000ba8 <SPI_command+0x60>
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <SPI_command+0x6c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d124      	bne.n	8000ba8 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <SPI_command+0x70>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <SPI_command+0x2a>
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <SPI_command+0x74>)
 8000b6c:	22f8      	movs	r2, #248	; 0xf8
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e002      	b.n	8000b78 <SPI_command+0x30>
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SPI_command+0x74>)
 8000b74:	22fa      	movs	r2, #250	; 0xfa
 8000b76:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SPI_command+0x74>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <SPI_command+0x70>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	091b      	lsrs	r3, r3, #4
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SPI_command+0x70>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 5);  // working good
 8000b96:	4639      	mov	r1, r7
 8000b98:	2305      	movs	r3, #5
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <SPI_command+0x78>)
 8000b9e:	f006 fd9e 	bl	80076de <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <SPI_command+0x68>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	801a      	strh	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000207e 	.word	0x2000207e
 8000bb4:	20002084 	.word	0x20002084
 8000bb8:	20002082 	.word	0x20002082
 8000bbc:	20002080 	.word	0x20002080
 8000bc0:	20003a7c 	.word	0x20003a7c

08000bc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	time_proc++;
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bd6:	801a      	strh	r2, [r3, #0]
	//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

	if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d105      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
	if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0c:	801a      	strh	r2, [r3, #0]
	sample_point=sample_point & 1023;// this is 1
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c1c:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c28:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c2e:	801a      	strh	r2, [r3, #0]





	if(TIM3==htim->Instance)			// nothing here is consistent
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10b      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x8e>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c50:	801a      	strh	r2, [r3, #0]

}

}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20002d94 	.word	0x20002d94
 8000c64:	200013e2 	.word	0x200013e2
 8000c68:	200001ea 	.word	0x200001ea
 8000c6c:	200013e6 	.word	0x200013e6
 8000c70:	20000be0 	.word	0x20000be0
 8000c74:	200013e4 	.word	0x200013e4
 8000c78:	40000400 	.word	0x40000400

08000c7c <analoginputloopb>:
						}  // get value this this on e is blank
		//HAL_ADC_Stop(&hadc1);
//for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit
}
*/
void analoginputloopb(void){  //works fine still
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8000c82:	4b80      	ldr	r3, [pc, #512]	; (8000e84 <analoginputloopb+0x208>)
 8000c84:	889b      	ldrh	r3, [r3, #4]
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b7e      	ldr	r3, [pc, #504]	; (8000e88 <analoginputloopb+0x20c>)
 8000c8e:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8000c90:	4b7c      	ldr	r3, [pc, #496]	; (8000e84 <analoginputloopb+0x208>)
 8000c92:	889b      	ldrh	r3, [r3, #4]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b7b      	ldr	r3, [pc, #492]	; (8000e8c <analoginputloopb+0x210>)
 8000c9e:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8000ca0:	4b79      	ldr	r3, [pc, #484]	; (8000e88 <analoginputloopb+0x20c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	4b79      	ldr	r3, [pc, #484]	; (8000e8c <analoginputloopb+0x210>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4a78      	ldr	r2, [pc, #480]	; (8000e90 <analoginputloopb+0x214>)
 8000cae:	0103      	lsls	r3, r0, #4
 8000cb0:	440b      	add	r3, r1
 8000cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb6:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 8000cb8:	4b72      	ldr	r3, [pc, #456]	; (8000e84 <analoginputloopb+0x208>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	805a      	strh	r2, [r3, #2]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8000cbe:	4b75      	ldr	r3, [pc, #468]	; (8000e94 <analoginputloopb+0x218>)
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	4b70      	ldr	r3, [pc, #448]	; (8000e84 <analoginputloopb+0x208>)
 8000cc4:	809a      	strh	r2, [r3, #4]

		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cca:	d904      	bls.n	8000cd6 <analoginputloopb+0x5a>
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	3b80      	subs	r3, #128	; 0x80
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b71      	ldr	r3, [pc, #452]	; (8000e98 <analoginputloopb+0x21c>)
 8000cd4:	801a      	strh	r2, [r3, #0]
		if (menu_holder>511)	counterVarB=menu_holder-384;		// text pointer , max potvalue address is 142 , fix second page issue later
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cdc:	d305      	bcc.n	8000cea <analoginputloopb+0x6e>
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b6c      	ldr	r3, [pc, #432]	; (8000e98 <analoginputloopb+0x21c>)
 8000ce8:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 8000cea:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <analoginputloopb+0x21c>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b6a      	ldr	r3, [pc, #424]	; (8000e9c <analoginputloopb+0x220>)
 8000cf2:	5c9b      	ldrb	r3, [r3, r2]
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <analoginputloopb+0x224>)
 8000cf8:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8000cfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	085b      	lsrs	r3, r3, #1
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <analoginputloopb+0x228>)
 8000d06:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8000d08:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <analoginputloopb+0x22c>)
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b66      	ldr	r3, [pc, #408]	; (8000eac <analoginputloopb+0x230>)
 8000d12:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&127; // fix overflow ? , dont need a lot because of skip
 8000d14:	4b65      	ldr	r3, [pc, #404]	; (8000eac <analoginputloopb+0x230>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b63      	ldr	r3, [pc, #396]	; (8000eac <analoginputloopb+0x230>)
 8000d20:	801a      	strh	r2, [r3, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8000d22:	4b60      	ldr	r3, [pc, #384]	; (8000ea4 <analoginputloopb+0x228>)
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	4b62      	ldr	r3, [pc, #392]	; (8000eb0 <analoginputloopb+0x234>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d910      	bls.n	8000d50 <analoginputloopb+0xd4>
 8000d2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ea0 <analoginputloopb+0x224>)
 8000d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <analoginputloopb+0x218>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <analoginputloopb+0x238>)
 8000d42:	5c5b      	ldrb	r3, [r3, r1]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <analoginputloopb+0x224>)
 8000d4e:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite , step multiplier
 8000d50:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <analoginputloopb+0x228>)
 8000d52:	881a      	ldrh	r2, [r3, #0]
 8000d54:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <analoginputloopb+0x234>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d210      	bcs.n	8000d7e <analoginputloopb+0x102>
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <analoginputloopb+0x218>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <analoginputloopb+0x238>)
 8000d68:	5c9b      	ldrb	r3, [r3, r2]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <analoginputloopb+0x224>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <analoginputloopb+0x224>)
 8000d7c:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;

  enc2_temp=enc2_lut[enc2_temp];  // force alternative values for skip  , seems to work ok , disable temporarily
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <analoginputloopb+0x230>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b4c      	ldr	r3, [pc, #304]	; (8000eb8 <analoginputloopb+0x23c>)
 8000d86:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d8a:	4b48      	ldr	r3, [pc, #288]	; (8000eac <analoginputloopb+0x230>)
 8000d8c:	801a      	strh	r2, [r3, #0]
  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <analoginputloopb+0x230>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000d96:	d303      	bcc.n	8000da0 <analoginputloopb+0x124>
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <analoginputloopb+0x230>)
 8000d9a:	f240 127f 	movw	r2, #383	; 0x17f
 8000d9e:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <analoginputloopb+0x224>)
 8000da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da6:	2ba0      	cmp	r3, #160	; 0xa0
 8000da8:	dd02      	ble.n	8000db0 <analoginputloopb+0x134>
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <analoginputloopb+0x224>)
 8000dac:	22a0      	movs	r2, #160	; 0xa0
 8000dae:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8000db0:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <analoginputloopb+0x224>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da02      	bge.n	8000dc0 <analoginputloopb+0x144>
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <analoginputloopb+0x224>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;       // enter data into potsource
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <analoginputloopb+0x224>)
 8000dc2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <analoginputloopb+0x21c>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <analoginputloopb+0x220>)
 8000dd0:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <analoginputloopb+0x224>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <analoginputloopb+0x228>)
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <analoginputloopb+0x234>)
 8000dde:	801a      	strh	r2, [r3, #0]
			//if (enc2_dir>383) enc2_dir=383;

			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <analoginputloopb+0x230>)
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <analoginputloopb+0x218>)
 8000de6:	801a      	strh	r2, [r3, #0]
		//	if (enc2_dir>127) menu_page[1]=127; else if (enc2_dir>255)   menu_page[1]=255;				else menu_page[1]=0;
		//	menu_page[1]= (enc2_dir >>7) <<7;

			menu_page[1]=enc2_dir&384;
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <analoginputloopb+0x218>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <analoginputloopb+0x240>)
 8000df4:	805a      	strh	r2, [r3, #2]


			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();    // need to optimize
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <analoginputloopb+0x230>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfc:	d905      	bls.n	8000e0a <analoginputloopb+0x18e>
 8000dfe:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <analoginputloopb+0x244>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	2b7f      	cmp	r3, #127	; 0x7f
 8000e04:	d801      	bhi.n	8000e0a <analoginputloopb+0x18e>
 8000e06:	f000 fa07 	bl	8001218 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <analoginputloopb+0x230>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e10:	d805      	bhi.n	8000e1e <analoginputloopb+0x1a2>
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <analoginputloopb+0x244>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	2b7f      	cmp	r3, #127	; 0x7f
 8000e18:	d901      	bls.n	8000e1e <analoginputloopb+0x1a2>
 8000e1a:	f000 f9fd 	bl	8001218 <display_fill>
					if ((enc2_temp>255) && (enc2_tempB<=255)) display_fill();
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <analoginputloopb+0x230>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	d905      	bls.n	8000e32 <analoginputloopb+0x1b6>
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <analoginputloopb+0x244>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	2bff      	cmp	r3, #255	; 0xff
 8000e2c:	d801      	bhi.n	8000e32 <analoginputloopb+0x1b6>
 8000e2e:	f000 f9f3 	bl	8001218 <display_fill>
					if ((enc2_temp<=255) && (enc2_tempB>255)) display_fill();
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <analoginputloopb+0x230>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d805      	bhi.n	8000e46 <analoginputloopb+0x1ca>
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <analoginputloopb+0x244>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d901      	bls.n	8000e46 <analoginputloopb+0x1ca>
 8000e42:	f000 f9e9 	bl	8001218 <display_fill>
					if ((enc2_temp>383) && (enc2_tempB<=383)) display_fill();
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <analoginputloopb+0x230>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e4e:	d306      	bcc.n	8000e5e <analoginputloopb+0x1e2>
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <analoginputloopb+0x244>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000e58:	d201      	bcs.n	8000e5e <analoginputloopb+0x1e2>
 8000e5a:	f000 f9dd 	bl	8001218 <display_fill>
					//if ((enc2_temp<=383) && (enc2_tempB>383)) display_fill();
					//if ((enc2_temp<127) && (enc2_tempB>384)) display_fill();
					//if ((enc2_temp<=511) && (enc2_tempB<127)) display_fill();


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <analoginputloopb+0x230>)
 8000e60:	881a      	ldrh	r2, [r3, #0]
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <analoginputloopb+0x244>)
 8000e64:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <analoginputloopb+0x21c>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <analoginputloopb+0x220>)
 8000e6e:	5c9b      	ldrb	r3, [r3, r2]
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <analoginputloopb+0x21c>)
 8000e72:	8812      	ldrh	r2, [r2, #0]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	b2d9      	uxtb	r1, r3
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <analoginputloopb+0x248>)
 8000e7a:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20002088 	.word	0x20002088
 8000e88:	20000b8e 	.word	0x20000b8e
 8000e8c:	20000b8f 	.word	0x20000b8f
 8000e90:	08009700 	.word	0x08009700
 8000e94:	20002076 	.word	0x20002076
 8000e98:	20000b94 	.word	0x20000b94
 8000e9c:	20000a04 	.word	0x20000a04
 8000ea0:	20002078 	.word	0x20002078
 8000ea4:	2000206e 	.word	0x2000206e
 8000ea8:	40000800 	.word	0x40000800
 8000eac:	20002072 	.word	0x20002072
 8000eb0:	20002070 	.word	0x20002070
 8000eb4:	200001f0 	.word	0x200001f0
 8000eb8:	20000714 	.word	0x20000714
 8000ebc:	20002098 	.word	0x20002098
 8000ec0:	20002074 	.word	0x20002074
 8000ec4:	20000884 	.word	0x20000884

08000ec8 <display_init>:
void display_init(void){
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8000ece:	4b64      	ldr	r3, [pc, #400]	; (8001060 <display_init+0x198>)
 8000ed0:	1d3c      	adds	r4, r7, #4
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8000ee0:	4b60      	ldr	r3, [pc, #384]	; (8001064 <display_init+0x19c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 80b6 	bne.w	8001056 <display_init+0x18e>

/*if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
*/
switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded
 8000eea:	4b5f      	ldr	r3, [pc, #380]	; (8001068 <display_init+0x1a0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3b4d      	subs	r3, #77	; 0x4d
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d879      	bhi.n	8000fe8 <display_init+0x120>
 8000ef4:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <display_init+0x34>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f1d 	.word	0x08000f1d
 8000f00:	08000f4d 	.word	0x08000f4d
 8000f04:	08000f55 	.word	0x08000f55
 8000f08:	08000f71 	.word	0x08000f71
 8000f0c:	08000f85 	.word	0x08000f85
 8000f10:	08000f93 	.word	0x08000f93
 8000f14:	08000fa7 	.word	0x08000fa7
 8000f18:	08000fbb 	.word	0x08000fbb

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8000f1c:	4b53      	ldr	r3, [pc, #332]	; (800106c <display_init+0x1a4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <display_init+0x1a8>)
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	4b4f      	ldr	r3, [pc, #316]	; (800106c <display_init+0x1a4>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <display_init+0x1a0>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <display_init+0x1a0>)
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e05f      	b.n	800100c <display_init+0x144>

case 78: spi_hold=10;break; //write one set then jump
 8000f4c:	4b48      	ldr	r3, [pc, #288]	; (8001070 <display_init+0x1a8>)
 8000f4e:	220a      	movs	r2, #10
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	e05b      	b.n	800100c <display_init+0x144>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8000f54:	4b45      	ldr	r3, [pc, #276]	; (800106c <display_init+0x1a4>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a45      	ldr	r2, [pc, #276]	; (8001074 <display_init+0x1ac>)
 8000f60:	5cd3      	ldrb	r3, [r2, r3]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <display_init+0x1a8>)
 8000f66:	801a      	strh	r2, [r3, #0]
 8000f68:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <display_init+0x1a0>)
 8000f6a:	2251      	movs	r2, #81	; 0x51
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e04d      	b.n	800100c <display_init+0x144>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8000f70:	4b3e      	ldr	r3, [pc, #248]	; (800106c <display_init+0x1a4>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f78:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <display_init+0x1ac>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <display_init+0x1a8>)
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	e043      	b.n	800100c <display_init+0x144>
case 81: spi_hold=10;init=81;break;
 8000f84:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <display_init+0x1a8>)
 8000f86:	220a      	movs	r2, #10
 8000f88:	801a      	strh	r2, [r3, #0]
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <display_init+0x1a0>)
 8000f8c:	2251      	movs	r2, #81	; 0x51
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e03c      	b.n	800100c <display_init+0x144>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <display_init+0x1a4>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b33      	ldr	r3, [pc, #204]	; (8001070 <display_init+0x1a8>)
 8000fa2:	801a      	strh	r2, [r3, #0]
 8000fa4:	e032      	b.n	800100c <display_init+0x144>
case 83: spi_hold=spell[init_b&62];break;
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <display_init+0x1a4>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <display_init+0x1ac>)
 8000fb0:	5cd3      	ldrb	r3, [r2, r3]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <display_init+0x1a8>)
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	e028      	b.n	800100c <display_init+0x144>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <display_init+0x1a4>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <display_init+0x1ac>)
 8000fc6:	5cd3      	ldrb	r3, [r2, r3]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <display_init+0x1a8>)
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <display_init+0x1b0>)
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <display_init+0x1a4>)
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	f000 f948 	bl	8001270 <displayBuffer>
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <display_init+0x1a0>)
 8000fe2:	224c      	movs	r2, #76	; 0x4c
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e011      	b.n	800100c <display_init+0x144>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <display_init+0x1a0>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3b06      	subs	r3, #6
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <display_init+0x1a4>)
 8000ff4:	801a      	strh	r2, [r3, #0]
 8000ff6:	f000 f93b 	bl	8001270 <displayBuffer>
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <display_init+0x1a4>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <display_init+0x1ac>)
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <display_init+0x1a8>)
 8001008:	801a      	strh	r2, [r3, #0]
 800100a:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <display_init+0x1a0>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b05      	cmp	r3, #5
 8001012:	d80f      	bhi.n	8001034 <display_init+0x16c>
 8001014:	2003      	movs	r0, #3
 8001016:	f002 ffa7 	bl	8003f68 <HAL_Delay>
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <display_init+0x1a0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	3328      	adds	r3, #40	; 0x28
 8001022:	443b      	add	r3, r7
 8001024:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <display_init+0x1a8>)
 800102a:	801a      	strh	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <display_init+0x1b0>)
 800102e:	889a      	ldrh	r2, [r3, #4]
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <display_init+0x1a4>)
 8001032:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <display_init+0x1a0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <display_init+0x1a0>)
 800103e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <display_init+0x19c>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	f7ff fd7f 	bl	8000b48 <SPI_command>
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <display_init+0x19c>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <display_init+0x1b4>)
 8001052:	2200      	movs	r2, #0
 8001054:	801a      	strh	r2, [r3, #0]
		  //if ((bsrr_counter==49) && (spi_send==2)) {bsrr_counter=0; spi_send=0;}
		  if (bsrr_counter==49)  {bsrr_counter=0; spi_send=0;}
		 }
*/

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}
 800105e:	bf00      	nop
 8001060:	0800962c 	.word	0x0800962c
 8001064:	20002084 	.word	0x20002084
 8001068:	20002085 	.word	0x20002085
 800106c:	20002086 	.word	0x20002086
 8001070:	20002082 	.word	0x20002082
 8001074:	20000038 	.word	0x20000038
 8001078:	20002088 	.word	0x20002088
 800107c:	2000207e 	.word	0x2000207e

08001080 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <display_update+0x17c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d035      	beq.n	80010fa <display_update+0x7a>
 800108e:	2b03      	cmp	r3, #3
 8001090:	dc3d      	bgt.n	800110e <display_update+0x8e>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d002      	beq.n	800109c <display_update+0x1c>
 8001096:	2b02      	cmp	r3, #2
 8001098:	d020      	beq.n	80010dc <display_update+0x5c>
 800109a:	e038      	b.n	800110e <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 800109c:	4b58      	ldr	r3, [pc, #352]	; (8001200 <display_update+0x180>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b55      	ldr	r3, [pc, #340]	; (8001204 <display_update+0x184>)
 80010ae:	801a      	strh	r2, [r3, #0]
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <display_update+0x180>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	095b      	lsrs	r3, r3, #5
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b51      	ldr	r3, [pc, #324]	; (8001200 <display_update+0x180>)
 80010ba:	811a      	strh	r2, [r3, #8]
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <display_update+0x180>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <display_update+0x180>)
 80010cc:	801a      	strh	r2, [r3, #0]
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <display_update+0x17c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <display_update+0x17c>)
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e028      	b.n	800112e <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 80010dc:	4b48      	ldr	r3, [pc, #288]	; (8001200 <display_update+0x180>)
 80010de:	891b      	ldrh	r3, [r3, #8]
 80010e0:	3330      	adds	r3, #48	; 0x30
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <display_update+0x184>)
 80010ea:	801a      	strh	r2, [r3, #0]
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <display_update+0x17c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b41      	ldr	r3, [pc, #260]	; (80011fc <display_update+0x17c>)
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e019      	b.n	800112e <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <display_update+0x180>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	80da      	strh	r2, [r3, #6]
 8001100:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <display_update+0x17c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <display_update+0x17c>)
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e00f      	b.n	800112e <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <display_update+0x180>)
 8001110:	88db      	ldrh	r3, [r3, #6]
 8001112:	3301      	adds	r3, #1
 8001114:	b29b      	uxth	r3, r3
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <display_update+0x180>)
 800111e:	80da      	strh	r2, [r3, #6]
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <display_update+0x17c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <display_update+0x17c>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <display_update+0x17c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d007      	beq.n	8001146 <display_update+0xc6>
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <display_update+0x17c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d003      	beq.n	8001146 <display_update+0xc6>
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <display_update+0x17c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d104      	bne.n	8001150 <display_update+0xd0>
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <display_update+0x184>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <display_update+0x184>)
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	e00d      	b.n	800116c <display_update+0xec>
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <display_update+0x180>)
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <display_update+0x180>)
 8001158:	88db      	ldrh	r3, [r3, #6]
 800115a:	4619      	mov	r1, r3
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <display_update+0x188>)
 800115e:	0103      	lsls	r3, r0, #4
 8001160:	4413      	add	r3, r2
 8001162:	440b      	add	r3, r1
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <display_update+0x184>)
 800116a:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <display_update+0x17c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b13      	cmp	r3, #19
 8001172:	d10e      	bne.n	8001192 <display_update+0x112>
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <display_update+0x180>)
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	b29b      	uxth	r3, r3
 800117c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <display_update+0x180>)
 8001184:	809a      	strh	r2, [r3, #4]
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <display_update+0x180>)
 8001188:	2200      	movs	r2, #0
 800118a:	80da      	strh	r2, [r3, #6]
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <display_update+0x17c>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <display_update+0x184>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <display_update+0x126>
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <display_update+0x18c>)
 80011a0:	22f8      	movs	r2, #248	; 0xf8
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e002      	b.n	80011ac <display_update+0x12c>
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <display_update+0x18c>)
 80011a8:	22fa      	movs	r2, #250	; 0xfa
 80011aa:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <display_update+0x18c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <display_update+0x184>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <display_update+0x184>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 3);  // working good ,blocking , never set time too high  or figure other option maybe DMA
 80011ca:	4639      	mov	r1, r7
 80011cc:	2303      	movs	r3, #3
 80011ce:	2203      	movs	r2, #3
 80011d0:	480f      	ldr	r0, [pc, #60]	; (8001210 <display_update+0x190>)
 80011d2:	f006 fa84 	bl	80076de <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <display_update+0x180>)
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <display_update+0x17c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <display_update+0x180>)
 80011e6:	88db      	ldrh	r3, [r3, #6]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <display_update+0x194>)
 80011f0:	701a      	strb	r2, [r3, #0]


}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200001ec 	.word	0x200001ec
 8001200:	20002968 	.word	0x20002968
 8001204:	20002082 	.word	0x20002082
 8001208:	20002538 	.word	0x20002538
 800120c:	20002080 	.word	0x20002080
 8001210:	20003a7c 	.word	0x20003a7c
 8001214:	20002976 	.word	0x20002976

08001218 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
loop_counter3=1;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <display_fill+0x48>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <display_fill+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	801a      	strh	r2, [r3, #0]
 8001228:	e011      	b.n	800124e <display_fill+0x36>

enc2_dir=(n>>4)+menu_page[1]; 												// 0-128         +      0,127,255,
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <display_fill+0x4c>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <display_fill+0x50>)
 8001234:	885b      	ldrh	r3, [r3, #2]
 8001236:	4413      	add	r3, r2
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <display_fill+0x54>)
 800123c:	801a      	strh	r2, [r3, #0]

displayBuffer();
 800123e:	f000 f817 	bl	8001270 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <display_fill+0x4c>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <display_fill+0x4c>)
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <display_fill+0x4c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001256:	d3e8      	bcc.n	800122a <display_fill+0x12>
}
//enc2_dir=menu_page[1];  // end clean
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20002977 	.word	0x20002977
 8001264:	20000bba 	.word	0x20000bba
 8001268:	20002098 	.word	0x20002098
 800126c:	20002076 	.word	0x20002076

08001270 <displayBuffer>:



void displayBuffer (void){        //  in a constant state of flux
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <displayBuffer+0xe0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d104      	bne.n	8001288 <displayBuffer+0x18>
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <displayBuffer+0xe4>)
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <displayBuffer+0xe8>)
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	e006      	b.n	8001296 <displayBuffer+0x26>
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <displayBuffer+0xe0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	336f      	adds	r3, #111	; 0x6f
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <displayBuffer+0xe8>)
 8001294:	801a      	strh	r2, [r3, #0]

	uint8_t d_count;
uint16_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <displayBuffer+0xe8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	b29b      	uxth	r3, r3
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	80bb      	strh	r3, [r7, #4]
uint8_t init_x2=init_x&63;  // 0-64  character address in gfx
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012aa:	70fb      	strb	r3, [r7, #3]
uint8_t init_y=init_b&15;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <displayBuffer+0xe8>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	70bb      	strb	r3, [r7, #2]
// just to point the lfo number



//if (enc2_dir<128){
	if (disp_stepper==0) { store_c= disp_lut [init_b>>4]  [init_y] ; feedback_pointer=((enc2_dir>>4)<<3)&127; feedback_line[10]=((enc2_dir&15)>>1)+48;  // pointer and data , runs at every character drawn at cursor
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <displayBuffer+0xe0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d179      	bne.n	80013b4 <displayBuffer+0x144>
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <displayBuffer+0xe8>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	78bb      	ldrb	r3, [r7, #2]
 80012cc:	4923      	ldr	r1, [pc, #140]	; (800135c <displayBuffer+0xec>)
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <displayBuffer+0xf0>)
 80012d8:	801a      	strh	r2, [r3, #0]
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <displayBuffer+0xe4>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <displayBuffer+0xf4>)
 80012ee:	801a      	strh	r2, [r3, #0]
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <displayBuffer+0xe4>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	105b      	asrs	r3, r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	b29a      	uxth	r2, r3
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <displayBuffer+0xf8>)
 8001304:	829a      	strh	r2, [r3, #20]


	menulength = sizeof(menu_items) / sizeof(menu_items[feedback_pointer]);  // get length of data on location
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <displayBuffer+0xfc>)
 8001308:	2235      	movs	r2, #53	; 0x35
 800130a:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 56; i++)
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <displayBuffer+0x100>)
 800130e:	2200      	movs	r2, #0
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	e014      	b.n	800133e <displayBuffer+0xce>
		{ if (menu_loc[i]==store_c){menu_locA=i;break;}    // gets disp_lut number that points in menu_items
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <displayBuffer+0x100>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <displayBuffer+0x104>)
 800131c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <displayBuffer+0xf0>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d104      	bne.n	8001332 <displayBuffer+0xc2>
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <displayBuffer+0x100>)
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <displayBuffer+0x108>)
 800132e:	801a      	strh	r2, [r3, #0]
 8001330:	e009      	b.n	8001346 <displayBuffer+0xd6>
	for (i = 0; i < 56; i++)
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <displayBuffer+0x100>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <displayBuffer+0x100>)
 800133c:	801a      	strh	r2, [r3, #0]
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <displayBuffer+0x100>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	2b37      	cmp	r3, #55	; 0x37
 8001344:	d9e6      	bls.n	8001314 <displayBuffer+0xa4>

		}

	for (i = 0; i < menulength; i++)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <displayBuffer+0x100>)
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
 800134c:	e02b      	b.n	80013a6 <displayBuffer+0x136>
 800134e:	bf00      	nop
 8001350:	20000211 	.word	0x20000211
 8001354:	20002076 	.word	0x20002076
 8001358:	20002086 	.word	0x20002086
 800135c:	08009700 	.word	0x08009700
 8001360:	20000bb8 	.word	0x20000bb8
 8001364:	2000087c 	.word	0x2000087c
 8001368:	20000000 	.word	0x20000000
 800136c:	20000880 	.word	0x20000880
 8001370:	20000bdc 	.word	0x20000bdc
 8001374:	08009b00 	.word	0x08009b00
 8001378:	2000087e 	.word	0x2000087e
	{ menulist_hold[i+1]=menu_items[menu_locA] [i];
 800137c:	4b83      	ldr	r3, [pc, #524]	; (800158c <displayBuffer+0x31c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b83      	ldr	r3, [pc, #524]	; (8001590 <displayBuffer+0x320>)
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	4a82      	ldr	r2, [pc, #520]	; (8001594 <displayBuffer+0x324>)
 800138a:	8812      	ldrh	r2, [r2, #0]
 800138c:	441a      	add	r2, r3
 800138e:	4b81      	ldr	r3, [pc, #516]	; (8001594 <displayBuffer+0x324>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	7811      	ldrb	r1, [r2, #0]
 8001396:	4a80      	ldr	r2, [pc, #512]	; (8001598 <displayBuffer+0x328>)
 8001398:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < menulength; i++)
 800139a:	4b7e      	ldr	r3, [pc, #504]	; (8001594 <displayBuffer+0x324>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b7c      	ldr	r3, [pc, #496]	; (8001594 <displayBuffer+0x324>)
 80013a4:	801a      	strh	r2, [r3, #0]
 80013a6:	4b7d      	ldr	r3, [pc, #500]	; (800159c <displayBuffer+0x32c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <displayBuffer+0x324>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8e3      	bhi.n	800137c <displayBuffer+0x10c>

	}   // grab item , this works but slower

	}

	if  ((disp_stepper<11) && (disp_stepper))   {      // 0-9 chars of line 8 , overhead is ok
 80013b4:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <displayBuffer+0x330>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b0a      	cmp	r3, #10
 80013ba:	d817      	bhi.n	80013ec <displayBuffer+0x17c>
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <displayBuffer+0x330>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <displayBuffer+0x17c>

//{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data info standard , per character 0-16

		feedback_line[disp_stepper]=menulist_hold[disp_stepper];  // feedback data modified 0-16
 80013c4:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <displayBuffer+0x330>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b73      	ldr	r3, [pc, #460]	; (8001598 <displayBuffer+0x328>)
 80013cc:	5c99      	ldrb	r1, [r3, r2]
 80013ce:	4b74      	ldr	r3, [pc, #464]	; (80015a0 <displayBuffer+0x330>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	b289      	uxth	r1, r1
 80013d6:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <displayBuffer+0x334>)
 80013d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line , per character
 80013dc:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <displayBuffer+0x330>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <displayBuffer+0x334>)
 80013e4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80013e8:	4b6f      	ldr	r3, [pc, #444]	; (80015a8 <displayBuffer+0x338>)
 80013ea:	801a      	strh	r2, [r3, #0]
	}

if (disp_stepper>10) store_c=feedback_line[disp_stepper];  /// just the lcd out  values at end of line 8
 80013ec:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <displayBuffer+0x330>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b0a      	cmp	r3, #10
 80013f2:	d907      	bls.n	8001404 <displayBuffer+0x194>
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <displayBuffer+0x330>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <displayBuffer+0x334>)
 80013fc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001400:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <displayBuffer+0x338>)
 8001402:	801a      	strh	r2, [r3, #0]


	// all this can be simplified
	 if (store_c==64) store_c=47;  //EMPTY SPACE
 8001404:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <displayBuffer+0x338>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	2b40      	cmp	r3, #64	; 0x40
 800140a:	d102      	bne.n	8001412 <displayBuffer+0x1a2>
 800140c:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <displayBuffer+0x338>)
 800140e:	222f      	movs	r2, #47	; 0x2f
 8001410:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {lcd_out3=potSource[store_c-128] ;     store_c= potValues[store_c&127]+48;															}		// NORMAL POTVALUES 0-127
 8001412:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <displayBuffer+0x338>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b7f      	cmp	r3, #127	; 0x7f
 8001418:	d916      	bls.n	8001448 <displayBuffer+0x1d8>
 800141a:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <displayBuffer+0x338>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	2bfe      	cmp	r3, #254	; 0xfe
 8001420:	d812      	bhi.n	8001448 <displayBuffer+0x1d8>
 8001422:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <displayBuffer+0x338>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	3b80      	subs	r3, #128	; 0x80
 8001428:	4a60      	ldr	r2, [pc, #384]	; (80015ac <displayBuffer+0x33c>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <displayBuffer+0x340>)
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <displayBuffer+0x338>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800143a:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <displayBuffer+0x344>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	b29b      	uxth	r3, r3
 8001440:	3330      	adds	r3, #48	; 0x30
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b58      	ldr	r3, [pc, #352]	; (80015a8 <displayBuffer+0x338>)
 8001446:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{lcd_out3=potSource[store_c-128] ;store_c= potValues[store_c-128]+48;}  // POTVALUES 128+
 8001448:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <displayBuffer+0x338>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2bfe      	cmp	r3, #254	; 0xfe
 800144e:	d916      	bls.n	800147e <displayBuffer+0x20e>
 8001450:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <displayBuffer+0x338>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001458:	d211      	bcs.n	800147e <displayBuffer+0x20e>
 800145a:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <displayBuffer+0x338>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	3b80      	subs	r3, #128	; 0x80
 8001460:	4a52      	ldr	r2, [pc, #328]	; (80015ac <displayBuffer+0x33c>)
 8001462:	5cd3      	ldrb	r3, [r2, r3]
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <displayBuffer+0x340>)
 8001468:	801a      	strh	r2, [r3, #0]
 800146a:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <displayBuffer+0x338>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	3b80      	subs	r3, #128	; 0x80
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <displayBuffer+0x344>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	b29b      	uxth	r3, r3
 8001476:	3330      	adds	r3, #48	; 0x30
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <displayBuffer+0x338>)
 800147c:	801a      	strh	r2, [r3, #0]
//	if ((store_c>127)	&& (store_c<384)) 	{store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
	//if (store_c>511)		{store_c=store_c&127;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
	if (store_c>511)		{store_c=store_c&127;			store_c= menu_items		[potSource[330]]    	[store_c&7]						; } // VARIABLE MENU ITEMS CHAR LUT
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <displayBuffer+0x338>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001486:	d316      	bcc.n	80014b6 <displayBuffer+0x246>
 8001488:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <displayBuffer+0x338>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <displayBuffer+0x338>)
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	4b45      	ldr	r3, [pc, #276]	; (80015ac <displayBuffer+0x33c>)
 8001498:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 800149c:	461a      	mov	r2, r3
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <displayBuffer+0x320>)
 80014a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014a4:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <displayBuffer+0x338>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <displayBuffer+0x338>)
 80014b4:	801a      	strh	r2, [r3, #0]
	store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes		STARTS FROM 0
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <displayBuffer+0x338>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	3b2f      	subs	r3, #47	; 0x2f
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <displayBuffer+0x338>)
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <displayBuffer+0x338>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <displayBuffer+0x338>)
 80014ce:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <displayBuffer+0x338>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	803b      	strh	r3, [r7, #0]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <displayBuffer+0x348>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11f      	bne.n	8001520 <displayBuffer+0x2b0>
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <displayBuffer+0x330>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11b      	bne.n	8001520 <displayBuffer+0x2b0>
	for (d_count=0;d_count<7;d_count++){
 80014e8:	2300      	movs	r3, #0
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	e014      	b.n	8001518 <displayBuffer+0x2a8>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	883b      	ldrh	r3, [r7, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a31      	ldr	r2, [pc, #196]	; (80015bc <displayBuffer+0x34c>)
 80014f6:	5cd1      	ldrb	r1, [r2, r3]
 80014f8:	79fa      	ldrb	r2, [r7, #7]
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	441a      	add	r2, r3
 80014fe:	78bb      	ldrb	r3, [r7, #2]
 8001500:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 8001504:	b2c8      	uxtb	r0, r1
 8001506:	492e      	ldr	r1, [pc, #184]	; (80015c0 <displayBuffer+0x350>)
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	440a      	add	r2, r1
 800150c:	4413      	add	r3, r2
 800150e:	4602      	mov	r2, r0
 8001510:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	3301      	adds	r3, #1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d9e7      	bls.n	80014ee <displayBuffer+0x27e>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 800151e:	e017      	b.n	8001550 <displayBuffer+0x2e0>
	}
else for (d_count=0;d_count<7;d_count++){
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	e011      	b.n	800154a <displayBuffer+0x2da>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	883b      	ldrh	r3, [r7, #0]
 800152a:	18d1      	adds	r1, r2, r3
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	441a      	add	r2, r3
 8001532:	78bb      	ldrb	r3, [r7, #2]
 8001534:	4821      	ldr	r0, [pc, #132]	; (80015bc <displayBuffer+0x34c>)
 8001536:	5c40      	ldrb	r0, [r0, r1]
 8001538:	4921      	ldr	r1, [pc, #132]	; (80015c0 <displayBuffer+0x350>)
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	440a      	add	r2, r1
 800153e:	4413      	add	r3, r2
 8001540:	4602      	mov	r2, r0
 8001542:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	3301      	adds	r3, #1
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b06      	cmp	r3, #6
 800154e:	d9ea      	bls.n	8001526 <displayBuffer+0x2b6>





gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows or whatever
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	1dda      	adds	r2, r3, #7
 8001554:	78bb      	ldrb	r3, [r7, #2]
 8001556:	491a      	ldr	r1, [pc, #104]	; (80015c0 <displayBuffer+0x350>)
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	440a      	add	r2, r1
 800155c:	4413      	add	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]



if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <displayBuffer+0x330>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d103      	bne.n	8001572 <displayBuffer+0x302>
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <displayBuffer+0x330>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]

}
 8001570:	e005      	b.n	800157e <displayBuffer+0x30e>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;				// count to 16
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <displayBuffer+0x330>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <displayBuffer+0x330>)
 800157c:	701a      	strb	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2000087e 	.word	0x2000087e
 8001590:	20000218 	.word	0x20000218
 8001594:	20000bdc 	.word	0x20000bdc
 8001598:	20000024 	.word	0x20000024
 800159c:	20000880 	.word	0x20000880
 80015a0:	20000211 	.word	0x20000211
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000bb8 	.word	0x20000bb8
 80015ac:	20000a04 	.word	0x20000a04
 80015b0:	20002974 	.word	0x20002974
 80015b4:	20000884 	.word	0x20000884
 80015b8:	20002977 	.word	0x20002977
 80015bc:	200002ec 	.word	0x200002ec
 80015c0:	20002538 	.word	0x20002538
 80015c4:	00000000 	.word	0x00000000

080015c8 <sampling>:


void sampling(void){						// 18 ms of data
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 80015ce:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;


time_proc=0;
 80015d0:	4b97      	ldr	r3, [pc, #604]	; (8001830 <sampling+0x268>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]


uint8_t mask_i;


bank_write=0;
 80015d6:	4b97      	ldr	r3, [pc, #604]	; (8001834 <sampling+0x26c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80015dc:	4b96      	ldr	r3, [pc, #600]	; (8001838 <sampling+0x270>)
 80015de:	881a      	ldrh	r2, [r3, #0]
 80015e0:	4b96      	ldr	r3, [pc, #600]	; (800183c <sampling+0x274>)
 80015e2:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80015ea:	f102 021c 	add.w	r2, r2, #28
 80015ee:	8013      	strh	r3, [r2, #0]

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80015f0:	4b93      	ldr	r3, [pc, #588]	; (8001840 <sampling+0x278>)
 80015f2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <sampling+0x27c>)
 80015fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015fe:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001602:	f102 020c 	add.w	r2, r2, #12
 8001606:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;

float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001608:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800160c:	f103 030c 	add.w	r3, r3, #12
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	da00      	bge.n	8001618 <sampling+0x50>
 8001616:	331f      	adds	r3, #31
 8001618:	115b      	asrs	r3, r3, #5
 800161a:	461a      	mov	r2, r3
 800161c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001620:	fb93 f3f2 	sdiv	r3, r3, r2
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001630:	f103 0308 	add.w	r3, r3, #8
 8001634:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001638:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800163c:	f103 0308 	add.w	r3, r3, #8
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001848 <sampling+0x280>
 8001648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001650:	f103 0308 	add.w	r3, r3, #8
 8001654:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001658:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800165c:	f103 0318 	add.w	r3, r3, #24
 8001660:	2244      	movs	r2, #68	; 0x44
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f007 fe93 	bl	8009390 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 800166a:	4b78      	ldr	r3, [pc, #480]	; (800184c <sampling+0x284>)
 800166c:	2200      	movs	r2, #0
 800166e:	801a      	strh	r2, [r3, #0]
 8001670:	e00e      	b.n	8001690 <sampling+0xc8>
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <sampling+0x284>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800167c:	443b      	add	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	f843 2c68 	str.w	r2, [r3, #-104]
 8001684:	4b71      	ldr	r3, [pc, #452]	; (800184c <sampling+0x284>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b6f      	ldr	r3, [pc, #444]	; (800184c <sampling+0x284>)
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	4b6e      	ldr	r3, [pc, #440]	; (800184c <sampling+0x284>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d9ec      	bls.n	8001672 <sampling+0xaa>

//lcd_out3=menu_page[1]; // still goes to 15

//lcd_out3=adc_values[0]+adc_values[1]+adc_values[2]; // 3 digit read out , works ok,, [2] works but thats it
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;  // still works
 8001698:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <sampling+0x288>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	4a6d      	ldr	r2, [pc, #436]	; (8001854 <sampling+0x28c>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <sampling+0x278>)
 80016ae:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <sampling+0x288>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	4a67      	ldr	r2, [pc, #412]	; (8001854 <sampling+0x28c>)
 80016b8:	fba2 1203 	umull	r1, r2, r2, r3
 80016bc:	0952      	lsrs	r2, r2, #5
 80016be:	2164      	movs	r1, #100	; 0x64
 80016c0:	fb01 f202 	mul.w	r2, r1, r2
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4a63      	ldr	r2, [pc, #396]	; (8001858 <sampling+0x290>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	08db      	lsrs	r3, r3, #3
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <sampling+0x278>)
 80016da:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <sampling+0x288>)
 80016e0:	881a      	ldrh	r2, [r3, #0]
 80016e2:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <sampling+0x290>)
 80016e4:	fba3 1302 	umull	r1, r3, r3, r2
 80016e8:	08d9      	lsrs	r1, r3, #3
 80016ea:	460b      	mov	r3, r1
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <sampling+0x278>)
 80016fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98



note_holdA=0;
 8001702:	4b56      	ldr	r3, [pc, #344]	; (800185c <sampling+0x294>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]

//sample_Accu2=0;
//printf (adc_values[0]," ",adc_values[1]," ",adc_values[2]," ","crap \n");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001708:	4b55      	ldr	r3, [pc, #340]	; (8001860 <sampling+0x298>)
 800170a:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 800170e:	461d      	mov	r5, r3
 8001710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8001718:	4b52      	ldr	r3, [pc, #328]	; (8001864 <sampling+0x29c>)
 800171a:	220f      	movs	r2, #15
 800171c:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 800171e:	4b51      	ldr	r3, [pc, #324]	; (8001864 <sampling+0x29c>)
 8001720:	889b      	ldrh	r3, [r3, #4]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d017      	beq.n	800175a <sampling+0x192>
 800172a:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <sampling+0x29c>)
 800172c:	889b      	ldrh	r3, [r3, #4]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001736:	443b      	add	r3, r7
 8001738:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800173c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001746:	f102 0215 	add.w	r2, r2, #21
 800174a:	7013      	strb	r3, [r2, #0]
 800174c:	237f      	movs	r3, #127	; 0x7f
 800174e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001752:	f102 0216 	add.w	r2, r2, #22
 8001756:	7013      	strb	r3, [r2, #0]
 8001758:	e013      	b.n	8001782 <sampling+0x1ba>
 800175a:	4b42      	ldr	r3, [pc, #264]	; (8001864 <sampling+0x29c>)
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001766:	443b      	add	r3, r7
 8001768:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800176c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001770:	f102 0216 	add.w	r2, r2, #22
 8001774:	7013      	strb	r3, [r2, #0]
 8001776:	237f      	movs	r3, #127	; 0x7f
 8001778:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800177c:	f102 0215 	add.w	r2, r2, #21
 8001780:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-potSource[20] ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 8001782:	4b39      	ldr	r3, [pc, #228]	; (8001868 <sampling+0x2a0>)
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d146      	bne.n	8001818 <sampling+0x250>
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <sampling+0x278>)
 800178c:	7d1b      	ldrb	r3, [r3, #20]
 800178e:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff9c 	bl	80006d0 <__aeabi_i2d>
 8001798:	a321      	add	r3, pc, #132	; (adr r3, 8001820 <sampling+0x258>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fd1b 	bl	80001d8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7fe fffb 	bl	80007a4 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a2e      	ldr	r2, [pc, #184]	; (800186c <sampling+0x2a4>)
 80017b2:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-potSource[21])*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <sampling+0x278>)
 80017b6:	7d5b      	ldrb	r3, [r3, #21]
 80017b8:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe ff87 	bl	80006d0 <__aeabi_i2d>
 80017c2:	a319      	add	r3, pc, #100	; (adr r3, 8001828 <sampling+0x260>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fd06 	bl	80001d8 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7fe ffe6 	bl	80007a4 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <sampling+0x2a0>)
 80017dc:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <sampling+0x2a4>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <sampling+0x2a4>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <sampling+0x2a4>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <sampling+0x2a0>)
 80017f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <sampling+0x2a0>)
 80017fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <sampling+0x2a0>)
 8001806:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <sampling+0x2a0>)
 800180c:	2201      	movs	r2, #1
 800180e:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <sampling+0x2a0>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <sampling+0x284>)
 800181a:	2200      	movs	r2, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	e0e7      	b.n	80019f0 <sampling+0x428>
 8001820:	47ae147b 	.word	0x47ae147b
 8001824:	3f947ae1 	.word	0x3f947ae1
 8001828:	47ae147b 	.word	0x47ae147b
 800182c:	3f847ae1 	.word	0x3f847ae1
 8001830:	20002d94 	.word	0x20002d94
 8001834:	200001ea 	.word	0x200001ea
 8001838:	200013e6 	.word	0x200013e6
 800183c:	20000bda 	.word	0x20000bda
 8001840:	20000a04 	.word	0x20000a04
 8001844:	200023f4 	.word	0x200023f4
 8001848:	42a00000 	.word	0x42a00000
 800184c:	20000bdc 	.word	0x20000bdc
 8001850:	20002974 	.word	0x20002974
 8001854:	51eb851f 	.word	0x51eb851f
 8001858:	cccccccd 	.word	0xcccccccd
 800185c:	2000204f 	.word	0x2000204f
 8001860:	08009650 	.word	0x08009650
 8001864:	200001e0 	.word	0x200001e0
 8001868:	20002e9c 	.word	0x20002e9c
 800186c:	20002964 	.word	0x20002964

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8001870:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <sampling+0x4c0>)
 8001872:	edd3 7a02 	vldr	s15, [r3, #8]
 8001876:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001a8c <sampling+0x4c4>
 800187a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	d50e      	bpl.n	80018a2 <sampling+0x2da>
 8001884:	4b80      	ldr	r3, [pc, #512]	; (8001a88 <sampling+0x4c0>)
 8001886:	ed93 7a02 	vldr	s14, [r3, #8]
 800188a:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <sampling+0x4c8>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <sampling+0x4c0>)
 8001896:	edc3 7a02 	vstr	s15, [r3, #8]
 800189a:	4b7b      	ldr	r3, [pc, #492]	; (8001a88 <sampling+0x4c0>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <sampling+0x4c0>)
 80018a0:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  										{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 80018a2:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <sampling+0x4c0>)
 80018a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001a94 <sampling+0x4cc>
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d522      	bpl.n	80018fc <sampling+0x334>
 80018b6:	4b74      	ldr	r3, [pc, #464]	; (8001a88 <sampling+0x4c0>)
 80018b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018bc:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001a98 <sampling+0x4d0>
 80018c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	dd18      	ble.n	80018fc <sampling+0x334>
 80018ca:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <sampling+0x4c0>)
 80018cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80018d0:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <sampling+0x4c8>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018da:	4b6b      	ldr	r3, [pc, #428]	; (8001a88 <sampling+0x4c0>)
 80018dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80018e0:	4b69      	ldr	r3, [pc, #420]	; (8001a88 <sampling+0x4c0>)
 80018e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001a9c <sampling+0x4d4>
 80018ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018ee:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001a94 <sampling+0x4cc>
 80018f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <sampling+0x4c0>)
 80018f8:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 																{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 80018fc:	4b62      	ldr	r3, [pc, #392]	; (8001a88 <sampling+0x4c0>)
 80018fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001902:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001aa0 <sampling+0x4d8>
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	dd17      	ble.n	8001940 <sampling+0x378>
 8001910:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <sampling+0x4c0>)
 8001912:	edd3 7a02 	vldr	s15, [r3, #8]
 8001916:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001aa4 <sampling+0x4dc>
 800191a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	d50d      	bpl.n	8001940 <sampling+0x378>
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <sampling+0x4c0>)
 8001926:	4a60      	ldr	r2, [pc, #384]	; (8001aa8 <sampling+0x4e0>)
 8001928:	619a      	str	r2, [r3, #24]
 800192a:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <sampling+0x4c0>)
 800192c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001930:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <sampling+0x4c0>)
 8001932:	edd3 7a04 	vldr	s15, [r3, #16]
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <sampling+0x4c0>)
 800193c:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)																							{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8001940:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <sampling+0x4c0>)
 8001942:	edd3 7a02 	vldr	s15, [r3, #8]
 8001946:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001aac <sampling+0x4e4>
 800194a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	dd1e      	ble.n	8001992 <sampling+0x3ca>
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <sampling+0x4c0>)
 8001956:	edd3 7a02 	vldr	s15, [r3, #8]
 800195a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001ab0 <sampling+0x4e8>
 800195e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d514      	bpl.n	8001992 <sampling+0x3ca>
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <sampling+0x4c0>)
 800196a:	ed93 7a02 	vldr	s14, [r3, #8]
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <sampling+0x4c0>)
 8001970:	edd3 7a04 	vldr	s15, [r3, #16]
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <sampling+0x4c0>)
 800197a:	edc3 7a02 	vstr	s15, [r3, #8]
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <sampling+0x4c0>)
 8001980:	edd3 7a02 	vldr	s15, [r3, #8]
 8001984:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ab0 <sampling+0x4e8>
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <sampling+0x4c0>)
 800198e:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <sampling+0x4c0>)
 8001994:	edd3 7a02 	vldr	s15, [r3, #8]
 8001998:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001ab4 <sampling+0x4ec>
 800199c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	dd06      	ble.n	80019b4 <sampling+0x3ec>
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <sampling+0x4c0>)
 80019a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019ac:	619a      	str	r2, [r3, #24]
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <sampling+0x4c0>)
 80019b0:	4a41      	ldr	r2, [pc, #260]	; (8001ab8 <sampling+0x4f0>)
 80019b2:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <sampling+0x4c0>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fe9b 	bl	80006f4 <__aeabi_f2d>
 80019be:	a330      	add	r3, pc, #192	; (adr r3, 8001a80 <sampling+0x4b8>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fc08 	bl	80001d8 <__aeabi_dmul>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	493b      	ldr	r1, [pc, #236]	; (8001abc <sampling+0x4f4>)
 80019ce:	8809      	ldrh	r1, [r1, #0]
 80019d0:	460c      	mov	r4, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7fe fee5 	bl	80007a4 <__aeabi_d2f>
 80019da:	4602      	mov	r2, r0
 80019dc:	4938      	ldr	r1, [pc, #224]	; (8001ac0 <sampling+0x4f8>)
 80019de:	00a3      	lsls	r3, r4, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <sampling+0x4f4>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <sampling+0x4f4>)
 80019ee:	801a      	strh	r2, [r3, #0]
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <sampling+0x4f4>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	f67f af3b 	bls.w	8001870 <sampling+0x2a8>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <sampling+0x4f4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	e3b6      	b.n	8002170 <sampling+0xba8>

	i_total=i+sample_pointB;
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <sampling+0x4f4>)
 8001a04:	881a      	ldrh	r2, [r3, #0]
 8001a06:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <sampling+0x4fc>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001a10:	f102 0202 	add.w	r2, r2, #2
 8001a14:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;   //   0-8 steps
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <sampling+0x4f4>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <sampling+0x500>)
 8001a22:	701a      	strb	r2, [r3, #0]
	note_plain=potValues[seq_pos & 7 ];
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <sampling+0x504>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <sampling+0x508>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001a34:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <sampling+0x4f4>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4a25      	ldr	r2, [pc, #148]	; (8001ad4 <sampling+0x50c>)
 8001a3e:	5cd2      	ldrb	r2, [r2, r3]
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <sampling+0x4f4>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	0912      	lsrs	r2, r2, #4
 8001a48:	b2d1      	uxtb	r1, r2
 8001a4a:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <sampling+0x508>)
 8001a4c:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <sampling+0x510>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001a56:	f102 020c 	add.w	r2, r2, #12
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d83f      	bhi.n	8001ae0 <sampling+0x518>
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <sampling+0x514>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <sampling+0x514>)
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <sampling+0x510>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	e038      	b.n	8001aec <sampling+0x524>
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w
 8001a80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a84:	3f50624d 	.word	0x3f50624d
 8001a88:	20002e9c 	.word	0x20002e9c
 8001a8c:	447a0000 	.word	0x447a0000
 8001a90:	20002964 	.word	0x20002964
 8001a94:	44bb8000 	.word	0x44bb8000
 8001a98:	4479c000 	.word	0x4479c000
 8001a9c:	43fa0000 	.word	0x43fa0000
 8001aa0:	44bb6000 	.word	0x44bb6000
 8001aa4:	44fa0000 	.word	0x44fa0000
 8001aa8:	43fa0000 	.word	0x43fa0000
 8001aac:	44f9e000 	.word	0x44f9e000
 8001ab0:	451c4000 	.word	0x451c4000
 8001ab4:	453b8000 	.word	0x453b8000
 8001ab8:	457a0000 	.word	0x457a0000
 8001abc:	20000bdc 	.word	0x20000bdc
 8001ac0:	20001c2c 	.word	0x20001c2c
 8001ac4:	20000bda 	.word	0x20000bda
 8001ac8:	20002198 	.word	0x20002198
 8001acc:	20000bb4 	.word	0x20000bb4
 8001ad0:	20000884 	.word	0x20000884
 8001ad4:	20000a04 	.word	0x20000a04
 8001ad8:	2000207a 	.word	0x2000207a
 8001adc:	20002042 	.word	0x20002042
 8001ae0:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <sampling+0x798>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b9d      	ldr	r3, [pc, #628]	; (8001d60 <sampling+0x798>)
 8001aea:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001af2:	f102 021c 	add.w	r2, r2, #28
 8001af6:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 8001af8:	4b9a      	ldr	r3, [pc, #616]	; (8001d64 <sampling+0x79c>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b99      	ldr	r3, [pc, #612]	; (8001d68 <sampling+0x7a0>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d00c      	beq.n	8001b24 <sampling+0x55c>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8001b0a:	4b96      	ldr	r3, [pc, #600]	; (8001d64 <sampling+0x79c>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b94      	ldr	r3, [pc, #592]	; (8001d68 <sampling+0x7a0>)
 8001b16:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b1e:	f102 021c 	add.w	r2, r2, #28
 8001b22:	8013      	strh	r3, [r2, #0]
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow  , only activates when change in seq pos
 8001b24:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001b28:	f103 031c 	add.w	r3, r3, #28
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80fa 	beq.w	8001d28 <sampling+0x760>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8001b34:	4b8d      	ldr	r3, [pc, #564]	; (8001d6c <sampling+0x7a4>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b8a      	ldr	r3, [pc, #552]	; (8001d70 <sampling+0x7a8>)
 8001b46:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=(adc_values[1]>>2)&15;
 8001b4a:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <sampling+0x7a4>)
 8001b4c:	885b      	ldrh	r3, [r3, #2]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b85      	ldr	r3, [pc, #532]	; (8001d70 <sampling+0x7a8>)
 8001b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8001b60:	4b83      	ldr	r3, [pc, #524]	; (8001d70 <sampling+0x7a8>)
 8001b62:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001b66:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <sampling+0x7a0>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b7e      	ldr	r3, [pc, #504]	; (8001d74 <sampling+0x7ac>)
 8001b7c:	709a      	strb	r2, [r3, #2]

		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 8001b7e:	4b7c      	ldr	r3, [pc, #496]	; (8001d70 <sampling+0x7a8>)
 8001b80:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001b84:	4b78      	ldr	r3, [pc, #480]	; (8001d68 <sampling+0x7a0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <sampling+0x7ac>)
 8001b94:	70da      	strb	r2, [r3, #3]

			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 8001b96:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <sampling+0x7a8>)
 8001b98:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001b9c:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <sampling+0x7a0>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b70      	ldr	r3, [pc, #448]	; (8001d74 <sampling+0x7ac>)
 8001bb2:	711a      	strb	r2, [r3, #4]

		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <sampling+0x7ac>)
 8001bb6:	789b      	ldrb	r3, [r3, #2]
 8001bb8:	3350      	adds	r3, #80	; 0x50
 8001bba:	4a6d      	ldr	r2, [pc, #436]	; (8001d70 <sampling+0x7a8>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <sampling+0x7a8>)
 8001bc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <sampling+0x7b0>)
 8001bce:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <sampling+0x7ac>)
 8001bd2:	78db      	ldrb	r3, [r3, #3]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <sampling+0x7a8>)
 8001bd8:	5c9b      	ldrb	r3, [r3, r2]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <sampling+0x7b0>)
 8001bde:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) 		{note_channel[3]=note_channel[3]+potValues[73];	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <sampling+0x7b0>)
 8001be2:	88db      	ldrh	r3, [r3, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01c      	beq.n	8001c22 <sampling+0x65a>
 8001be8:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <sampling+0x7b0>)
 8001bea:	88da      	ldrh	r2, [r3, #6]
 8001bec:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <sampling+0x7a8>)
 8001bee:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <sampling+0x7b0>)
 8001bfa:	80da      	strh	r2, [r3, #6]
 8001bfc:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <sampling+0x7b4>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	80da      	strh	r2, [r3, #6]
 8001c02:	4b5f      	ldr	r3, [pc, #380]	; (8001d80 <sampling+0x7b8>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <sampling+0x7b8>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8001c1c:	443b      	add	r3, r7
 8001c1e:	f843 2c68 	str.w	r2, [r3, #-104]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);

	//if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8001c22:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <sampling+0x7a0>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3350      	adds	r3, #80	; 0x50
 8001c2c:	4a50      	ldr	r2, [pc, #320]	; (8001d70 <sampling+0x7a8>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <sampling+0x7b0>)
 8001c34:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 8001c36:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <sampling+0x7b0>)
 8001c38:	895b      	ldrh	r3, [r3, #10]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <sampling+0x68e>
 8001c3e:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <sampling+0x7bc>)
 8001c40:	795b      	ldrb	r3, [r3, #5]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <sampling+0x68e>
 8001c46:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <sampling+0x7b0>)
 8001c48:	895b      	ldrh	r3, [r3, #10]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <sampling+0x7c0>)
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <sampling+0x7c4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]


	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  //
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <sampling+0x7ac>)
 8001c58:	789b      	ldrb	r3, [r3, #2]
 8001c5a:	3350      	adds	r3, #80	; 0x50
 8001c5c:	4a44      	ldr	r2, [pc, #272]	; (8001d70 <sampling+0x7a8>)
 8001c5e:	5cd2      	ldrb	r2, [r2, r3]
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <sampling+0x7a8>)
 8001c62:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001c66:	4413      	add	r3, r2
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <sampling+0x7c0>)
 8001c6c:	701a      	strb	r2, [r3, #0]

	//note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float, disabler as lfo produces garbage



	note_holdB=MajorNote[note_holdB];
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <sampling+0x7c0>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <sampling+0x7c8>)
 8001c76:	5c9a      	ldrb	r2, [r3, r2]
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <sampling+0x7c0>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	//note_holdB=11; // works ok with single note @24 but   fails on other
	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 8001c7c:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <sampling+0x7c0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <sampling+0x7cc>)
 8001c84:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001c88:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <sampling+0x7d0>)
 8001c8a:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <sampling+0x7d0>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	129b      	asrs	r3, r3, #10
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <sampling+0x7d0>)
 8001ca0:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <sampling+0x7d4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001cae:	f102 021f 	add.w	r2, r2, #31
 8001cb2:	7013      	strb	r3, [r2, #0]
 8001cb4:	e031      	b.n	8001d1a <sampling+0x752>

	if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8001cb6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001cba:	f103 031f 	add.w	r3, r3, #31
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <sampling+0x7b0>)
 8001cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01c      	beq.n	8001d04 <sampling+0x73c>
 8001cca:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001cce:	f103 031f 	add.w	r3, r3, #31
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4a28      	ldr	r2, [pc, #160]	; (8001d78 <sampling+0x7b0>)
 8001cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <sampling+0x7c8>)
 8001cde:	5c9b      	ldrb	r3, [r3, r2]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <sampling+0x7d8>)
 8001ce4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <sampling+0x7dc>)
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <sampling+0x7dc>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001cf6:	f103 031f 	add.w	r3, r3, #31
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b291      	uxth	r1, r2
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <sampling+0x7e0>)
 8001d00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8001d04:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001d08:	f103 031f 	add.w	r3, r3, #31
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d14:	f102 021f 	add.w	r2, r2, #31
 8001d18:	7013      	strb	r3, [r2, #0]
 8001d1a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001d1e:	f103 031f 	add.w	r3, r3, #31
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d9c6      	bls.n	8001cb6 <sampling+0x6ee>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <sampling+0x7b8>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 8217 	bne.w	8002164 <sampling+0xb9c>
freq_temp=0;
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d3e:	f102 0214 	add.w	r2, r2, #20
 8001d42:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001d4c:	f102 021c 	add.w	r2, r2, #28
 8001d50:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8001d52:	2300      	movs	r3, #0
 8001d54:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001d58:	f102 021b 	add.w	r2, r2, #27
 8001d5c:	7013      	strb	r3, [r2, #0]
 8001d5e:	e1bf      	b.n	80020e0 <sampling+0xb18>
 8001d60:	2000207a 	.word	0x2000207a
 8001d64:	20002042 	.word	0x20002042
 8001d68:	20000bb4 	.word	0x20000bb4
 8001d6c:	200001e0 	.word	0x200001e0
 8001d70:	20000884 	.word	0x20000884
 8001d74:	200020a0 	.word	0x200020a0
 8001d78:	200013e8 	.word	0x200013e8
 8001d7c:	2000202c 	.word	0x2000202c
 8001d80:	20000bdc 	.word	0x20000bdc
 8001d84:	20002044 	.word	0x20002044
 8001d88:	20002050 	.word	0x20002050
 8001d8c:	2000206c 	.word	0x2000206c
 8001d90:	08009680 	.word	0x08009680
 8001d94:	2000017c 	.word	0x2000017c
 8001d98:	20000bb6 	.word	0x20000bb6
 8001d9c:	20001426 	.word	0x20001426
 8001da0:	0800969c 	.word	0x0800969c
 8001da4:	20000bb0 	.word	0x20000bb0
 8001da8:	20000b98 	.word	0x20000b98
			LFO[l].rate=potSource[130+l];   //grab dat for now
 8001dac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001db0:	f103 031b 	add.w	r3, r3, #27
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	f103 0282 	add.w	r2, r3, #130	; 0x82
 8001dba:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001dbe:	f103 031b 	add.w	r3, r3, #27
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	494e      	ldr	r1, [pc, #312]	; (8001f00 <sampling+0x938>)
 8001dc6:	5c88      	ldrb	r0, [r1, r2]
 8001dc8:	4a4e      	ldr	r2, [pc, #312]	; (8001f04 <sampling+0x93c>)
 8001dca:	211a      	movs	r1, #26
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	701a      	strb	r2, [r3, #0]
			freq_temp=LFO[l].rate +1;  // rate. this needs a little log
 8001dd8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ddc:	f103 031b 	add.w	r3, r3, #27
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4a48      	ldr	r2, [pc, #288]	; (8001f04 <sampling+0x93c>)
 8001de4:	211a      	movs	r1, #26
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3302      	adds	r3, #2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001dfe:	f103 0314 	add.w	r3, r3, #20
 8001e02:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*freq_temp;
 8001e06:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e0a:	f103 0314 	add.w	r3, r3, #20
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001e1a:	f103 031c 	add.w	r3, r3, #28
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
			freq_temp=freq2_temp/64;
 8001e22:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001e26:	f103 031c 	add.w	r3, r3, #28
 8001e2a:	ed93 7a00 	vldr	s14, [r3]
 8001e2e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001f08 <sampling+0x940>
 8001e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e36:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e3a:	f103 0314 	add.w	r3, r3, #20
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed , maybe loose this
 8001e42:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e46:	f103 0314 	add.w	r3, r3, #20
 8001e4a:	ed93 7a00 	vldr	s14, [r3]
 8001e4e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e52:	f103 0308 	add.w	r3, r3, #8
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001e62:	f103 031c 	add.w	r3, r3, #28
 8001e66:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8001e6a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e6e:	f103 031b 	add.w	r3, r3, #27
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <sampling+0x944>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	4925      	ldr	r1, [pc, #148]	; (8001f10 <sampling+0x948>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4403      	add	r3, r0
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001e92:	f103 031c 	add.w	r3, r3, #28
 8001e96:	ed93 7a00 	vldr	s14, [r3]
 8001e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ea2:	f103 0314 	add.w	r3, r3, #20
 8001ea6:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8001eaa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001eae:	f103 0314 	add.w	r3, r3, #20
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f14 <sampling+0x94c>
 8001eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	dd29      	ble.n	8001f18 <sampling+0x950>
 8001ec4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ec8:	f103 031b 	add.w	r3, r3, #27
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <sampling+0x944>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ed8:	f103 0314 	add.w	r3, r3, #20
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001f14 <sampling+0x94c>
 8001ee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ee8:	4909      	ldr	r1, [pc, #36]	; (8001f10 <sampling+0x948>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4403      	add	r3, r0
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
 8001efc:	e022      	b.n	8001f44 <sampling+0x97c>
 8001efe:	bf00      	nop
 8001f00:	20000a04 	.word	0x20000a04
 8001f04:	20002d98 	.word	0x20002d98
 8001f08:	42800000 	.word	0x42800000
 8001f0c:	20002198 	.word	0x20002198
 8001f10:	2000219c 	.word	0x2000219c
 8001f14:	46800000 	.word	0x46800000
 8001f18:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f1c:	f103 031b 	add.w	r3, r3, #27
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <sampling+0xbd0>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	499c      	ldr	r1, [pc, #624]	; (800219c <sampling+0xbd4>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4403      	add	r3, r0
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f3c:	f102 0214 	add.w	r2, r2, #20
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8001f44:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f48:	f103 031b 	add.w	r3, r3, #27
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	4b92      	ldr	r3, [pc, #584]	; (8002198 <sampling+0xbd0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	4991      	ldr	r1, [pc, #580]	; (800219c <sampling+0xbd4>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4403      	add	r3, r0
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f6a:	f102 0214 	add.w	r2, r2, #20
 8001f6e:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8001f70:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001f74:	f103 0314 	add.w	r3, r3, #20
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	f7fe fbbb 	bl	80006f4 <__aeabi_f2d>
 8001f7e:	a382      	add	r3, pc, #520	; (adr r3, 8002188 <sampling+0xbc0>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe f928 	bl	80001d8 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7fe fc08 	bl	80007a4 <__aeabi_d2f>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001f9a:	f102 0214 	add.w	r2, r2, #20
 8001f9e:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems ok   , cmsis is ok
 8001fa0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fa4:	f103 0314 	add.w	r3, r3, #20
 8001fa8:	ed93 0a00 	vldr	s0, [r3]
 8001fac:	f007 f97a 	bl	80092a4 <arm_sin_f32>
 8001fb0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001fb4:	f103 031c 	add.w	r3, r3, #28
 8001fb8:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // depth
 8001fbc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001fc0:	f103 031b 	add.w	r3, r3, #27
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	338c      	adds	r3, #140	; 0x8c
 8001fc8:	4a75      	ldr	r2, [pc, #468]	; (80021a0 <sampling+0xbd8>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001fd8:	f103 031c 	add.w	r3, r3, #28
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80021a4 <sampling+0xbdc>
 8001fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fec:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ff0:	f103 0314 	add.w	r3, r3, #20
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
		if (freq_temp>8195)  freq_temp=8195;
 8001ff8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001ffc:	f103 0314 	add.w	r3, r3, #20
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80021a8 <sampling+0xbe0>
 8002008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	dd05      	ble.n	800201e <sampling+0xa56>
 8002012:	4b66      	ldr	r3, [pc, #408]	; (80021ac <sampling+0xbe4>)
 8002014:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002018:	f102 0214 	add.w	r2, r2, #20
 800201c:	6013      	str	r3, [r2, #0]
		if (freq_temp<-8195)  freq_temp=-8195;   // clip to 13bit
 800201e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002022:	f103 0314 	add.w	r3, r3, #20
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80021b0 <sampling+0xbe8>
 800202e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d505      	bpl.n	8002044 <sampling+0xa7c>
 8002038:	4b5e      	ldr	r3, [pc, #376]	; (80021b4 <sampling+0xbec>)
 800203a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800203e:	f102 0214 	add.w	r2, r2, #20
 8002042:	6013      	str	r3, [r2, #0]
		lfo_out[l] [i_frac]=freq_temp+8195; // ok now     , 8 steps per i loop , 14 bit
 8002044:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002048:	f103 0314 	add.w	r3, r3, #20
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80021a8 <sampling+0xbe0>
 8002054:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002058:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800205c:	f103 031b 	add.w	r3, r3, #27
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <sampling+0xbd0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461c      	mov	r4, r3
 8002068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206c:	ee17 3a90 	vmov	r3, s15
 8002070:	b298      	uxth	r0, r3
 8002072:	4951      	ldr	r1, [pc, #324]	; (80021b8 <sampling+0xbf0>)
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4423      	add	r3, r4
 800207e:	4602      	mov	r2, r0
 8002080:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		LFO[l].out[i_frac]=lfo_out[l] [i_frac];  // just copy for now
 8002084:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002088:	f103 031b 	add.w	r3, r3, #27
 800208c:	7819      	ldrb	r1, [r3, #0]
 800208e:	4b42      	ldr	r3, [pc, #264]	; (8002198 <sampling+0xbd0>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461d      	mov	r5, r3
 8002094:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002098:	f103 031b 	add.w	r3, r3, #27
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <sampling+0xbd0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461c      	mov	r4, r3
 80020a4:	4844      	ldr	r0, [pc, #272]	; (80021b8 <sampling+0xbf0>)
 80020a6:	460b      	mov	r3, r1
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	442b      	add	r3, r5
 80020b0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80020b4:	4941      	ldr	r1, [pc, #260]	; (80021bc <sampling+0xbf4>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	4423      	add	r3, r4
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	4602      	mov	r2, r0
 80020c8:	80da      	strh	r2, [r3, #6]
		for (l=0;l<10;l++){   //current lfo setup , messy
 80020ca:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020ce:	f103 031b 	add.w	r3, r3, #27
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80020da:	f102 021b 	add.w	r2, r2, #27
 80020de:	7013      	strb	r3, [r2, #0]
 80020e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020e4:	f103 031b 	add.w	r3, r3, #27
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	f67f ae5e 	bls.w	8001dac <sampling+0x7e4>
		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <sampling+0xbd0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <sampling+0xbf0>)
 80020f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fae7 	bl	80006d0 <__aeabi_i2d>
 8002102:	a323      	add	r3, pc, #140	; (adr r3, 8002190 <sampling+0xbc8>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe f866 	bl	80001d8 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4921      	ldr	r1, [pc, #132]	; (8002198 <sampling+0xbd0>)
 8002112:	7809      	ldrb	r1, [r1, #0]
 8002114:	460c      	mov	r4, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fb43 	bl	80007a4 <__aeabi_d2f>
 800211e:	4602      	mov	r2, r0
 8002120:	4927      	ldr	r1, [pc, #156]	; (80021c0 <sampling+0xbf8>)
 8002122:	00a3      	lsls	r3, r4, #2
 8002124:	440b      	add	r3, r1
 8002126:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <sampling+0xbd0>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <sampling+0xbf0>)
 800212e:	331e      	adds	r3, #30
 8002130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe facb 	bl	80006d0 <__aeabi_i2d>
 800213a:	a315      	add	r3, pc, #84	; (adr r3, 8002190 <sampling+0xbc8>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe f84a 	bl	80001d8 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4913      	ldr	r1, [pc, #76]	; (8002198 <sampling+0xbd0>)
 800214a:	7809      	ldrb	r1, [r1, #0]
 800214c:	460c      	mov	r4, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fb27 	bl	80007a4 <__aeabi_d2f>
 8002156:	4602      	mov	r2, r0
 8002158:	4919      	ldr	r1, [pc, #100]	; (80021c0 <sampling+0xbf8>)
 800215a:	f104 0312 	add.w	r3, r4, #18
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <sampling+0xbfc>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <sampling+0xbfc>)
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <sampling+0xbfc>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002178:	f4ff ac43 	bcc.w	8001a02 <sampling+0x43a>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];
uint8_t sine_zero;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <sampling+0xbfc>)
 800217e:	2200      	movs	r2, #0
 8002180:	801a      	strh	r2, [r3, #0]
 8002182:	e0ff      	b.n	8002384 <sampling+0xdbc>
 8002184:	f3af 8000 	nop.w
 8002188:	7bb1a72c 	.word	0x7bb1a72c
 800218c:	3f3921fa 	.word	0x3f3921fa
 8002190:	94fd52a7 	.word	0x94fd52a7
 8002194:	3f10de74 	.word	0x3f10de74
 8002198:	20002198 	.word	0x20002198
 800219c:	2000219c 	.word	0x2000219c
 80021a0:	20000a04 	.word	0x20000a04
 80021a4:	424c0000 	.word	0x424c0000
 80021a8:	46000c00 	.word	0x46000c00
 80021ac:	46000c00 	.word	0x46000c00
 80021b0:	c6000c00 	.word	0xc6000c00
 80021b4:	c6000c00 	.word	0xc6000c00
 80021b8:	2000232c 	.word	0x2000232c
 80021bc:	20002d98 	.word	0x20002d98
 80021c0:	20002108 	.word	0x20002108
 80021c4:	20000bdc 	.word	0x20000bdc
	i_total=i+sample_pointB;
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <sampling+0xdfc>)
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	4b7e      	ldr	r3, [pc, #504]	; (80023c8 <sampling+0xe00>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80021d6:	f102 0202 	add.w	r2, r2, #2
 80021da:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 80021dc:	4b79      	ldr	r3, [pc, #484]	; (80023c4 <sampling+0xdfc>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b79      	ldr	r3, [pc, #484]	; (80023cc <sampling+0xe04>)
 80021e8:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 80021ea:	4b79      	ldr	r3, [pc, #484]	; (80023d0 <sampling+0xe08>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a79      	ldr	r2, [pc, #484]	; (80023d4 <sampling+0xe0c>)
 80021f0:	8812      	ldrh	r2, [r2, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a76      	ldr	r2, [pc, #472]	; (80023d0 <sampling+0xe08>)
 80021f6:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 80021f8:	4b75      	ldr	r3, [pc, #468]	; (80023d0 <sampling+0xe08>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002200:	db04      	blt.n	800220c <sampling+0xc44>
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <sampling+0xe08>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	425b      	negs	r3, r3
 8002208:	4a71      	ldr	r2, [pc, #452]	; (80023d0 <sampling+0xe08>)
 800220a:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 800220c:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <sampling+0xe08>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <sampling+0xe0c>)
 8002212:	8852      	ldrh	r2, [r2, #2]
 8002214:	4413      	add	r3, r2
 8002216:	4a6e      	ldr	r2, [pc, #440]	; (80023d0 <sampling+0xe08>)
 8002218:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 800221a:	4b6d      	ldr	r3, [pc, #436]	; (80023d0 <sampling+0xe08>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002222:	db04      	blt.n	800222e <sampling+0xc66>
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <sampling+0xe08>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	425b      	negs	r3, r3
 800222a:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <sampling+0xe08>)
 800222c:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 800222e:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <sampling+0xe08>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4a68      	ldr	r2, [pc, #416]	; (80023d4 <sampling+0xe0c>)
 8002234:	8892      	ldrh	r2, [r2, #4]
 8002236:	4413      	add	r3, r2
 8002238:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <sampling+0xe08>)
 800223a:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 800223c:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <sampling+0xe08>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002244:	db04      	blt.n	8002250 <sampling+0xc88>
 8002246:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <sampling+0xe08>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	425b      	negs	r3, r3
 800224c:	4a60      	ldr	r2, [pc, #384]	; (80023d0 <sampling+0xe08>)
 800224e:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 8002250:	4b5f      	ldr	r3, [pc, #380]	; (80023d0 <sampling+0xe08>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a5f      	ldr	r2, [pc, #380]	; (80023d4 <sampling+0xe0c>)
 8002256:	88d2      	ldrh	r2, [r2, #6]
 8002258:	4413      	add	r3, r2
 800225a:	4a5d      	ldr	r2, [pc, #372]	; (80023d0 <sampling+0xe08>)
 800225c:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 800225e:	4b5c      	ldr	r3, [pc, #368]	; (80023d0 <sampling+0xe08>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002266:	db04      	blt.n	8002272 <sampling+0xcaa>
 8002268:	4b59      	ldr	r3, [pc, #356]	; (80023d0 <sampling+0xe08>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	425b      	negs	r3, r3
 800226e:	4a58      	ldr	r2, [pc, #352]	; (80023d0 <sampling+0xe08>)
 8002270:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002272:	4b57      	ldr	r3, [pc, #348]	; (80023d0 <sampling+0xe08>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	4a57      	ldr	r2, [pc, #348]	; (80023d4 <sampling+0xe0c>)
 8002278:	8912      	ldrh	r2, [r2, #8]
 800227a:	4413      	add	r3, r2
 800227c:	4a54      	ldr	r2, [pc, #336]	; (80023d0 <sampling+0xe08>)
 800227e:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002280:	4b53      	ldr	r3, [pc, #332]	; (80023d0 <sampling+0xe08>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002288:	db04      	blt.n	8002294 <sampling+0xccc>
 800228a:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <sampling+0xe08>)
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	425b      	negs	r3, r3
 8002290:	4a4f      	ldr	r2, [pc, #316]	; (80023d0 <sampling+0xe08>)
 8002292:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <sampling+0xe10>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <sampling+0xe10>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <sampling+0xe10>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 80022a6:	4b4a      	ldr	r3, [pc, #296]	; (80023d0 <sampling+0xe08>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	11db      	asrs	r3, r3, #7
 80022ac:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <sampling+0xe10>)
 80022ae:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input plus other
 80022b0:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <sampling+0xe10>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b49      	ldr	r3, [pc, #292]	; (80023dc <sampling+0xe14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4413      	add	r3, r2
 80022ba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80022be:	f102 0215 	add.w	r2, r2, #21
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	4a43      	ldr	r2, [pc, #268]	; (80023d8 <sampling+0xe10>)
 80022ca:	6013      	str	r3, [r2, #0]
							//sample_Accu[0] = (sine_out*cross_fade[1]);  // sine out only
									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 80022cc:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <sampling+0xe08>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a41      	ldr	r2, [pc, #260]	; (80023d8 <sampling+0xe10>)
 80022d2:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <sampling+0xe10>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80022dc:	f102 0216 	add.w	r2, r2, #22
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <sampling+0xe10>)
 80022e8:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <sampling+0xe18>)
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <sampling+0xd32>
 80022f2:	4b3c      	ldr	r3, [pc, #240]	; (80023e4 <sampling+0xe1c>)
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <sampling+0xe20>)
 80022f8:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <sampling+0xe18>)
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <sampling+0xe20>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <sampling+0xe18>)
 8002308:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <sampling+0xe18>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	09db      	lsrs	r3, r3, #7
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <sampling+0xd5c>
 8002316:	2300      	movs	r3, #0
 8002318:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800231c:	f102 0201 	add.w	r2, r2, #1
 8002320:	7013      	strb	r3, [r2, #0]
 8002322:	e005      	b.n	8002330 <sampling+0xd68>
 8002324:	2301      	movs	r3, #1
 8002326:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800232a:	f102 0201 	add.w	r2, r2, #1
 800232e:	7013      	strb	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <sampling+0xe18>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <sampling+0xe24>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	015b      	lsls	r3, r3, #5
 800233c:	429a      	cmp	r2, r3
 800233e:	dd02      	ble.n	8002346 <sampling+0xd7e>
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <sampling+0xe18>)
 8002342:	2200      	movs	r2, #0
 8002344:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 8002346:	f000 fafb 	bl	8002940 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <sampling+0xdfc>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <sampling+0xe10>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002358:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 800235c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <sampling+0xdfc>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <sampling+0xe10>)
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800236e:	4619      	mov	r1, r3
 8002370:	0083      	lsls	r3, r0, #2
 8002372:	440b      	add	r3, r1
 8002374:	f843 2c80 	str.w	r2, [r3, #-128]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <sampling+0xdfc>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <sampling+0xdfc>)
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <sampling+0xdfc>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800238c:	f4ff af1c 	bcc.w	80021c8 <sampling+0xc00>



//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002390:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002394:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002398:	f102 0206 	add.w	r2, r2, #6
 800239c:	8013      	strh	r3, [r2, #0]

				uint16_t crap_hold1=2000;
 800239e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023a2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023a6:	f102 020e 	add.w	r2, r2, #14
 80023aa:	8013      	strh	r3, [r2, #0]
				uint16_t crap_hold2=2000;
 80023ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023b0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80023b4:	f102 0204 	add.w	r2, r2, #4
 80023b8:	8013      	strh	r3, [r2, #0]




for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 80023ba:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <sampling+0xdfc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	e05c      	b.n	800247c <sampling+0xeb4>
 80023c2:	bf00      	nop
 80023c4:	20000bdc 	.word	0x20000bdc
 80023c8:	20000bda 	.word	0x20000bda
 80023cc:	20002198 	.word	0x20002198
 80023d0:	20002054 	.word	0x20002054
 80023d4:	20000b98 	.word	0x20000b98
 80023d8:	20000bbc 	.word	0x20000bbc
 80023dc:	20000b88 	.word	0x20000b88
 80023e0:	20000b86 	.word	0x20000b86
 80023e4:	20000bb6 	.word	0x20000bb6
 80023e8:	20000b8c 	.word	0x20000b8c
 80023ec:	2000017a 	.word	0x2000017a
			{




				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 80023f0:	4b61      	ldr	r3, [pc, #388]	; (8002578 <sampling+0xfb0>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <sampling+0xfb4>)
 80023f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9a      	subs	r2, r3, r2
 8002404:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002408:	f103 0304 	add.w	r3, r3, #4
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	10db      	asrs	r3, r3, #3
 8002412:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002416:	f102 0206 	add.w	r2, r2, #6
 800241a:	8013      	strh	r3, [r2, #0]
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 800241c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002420:	f103 0306 	add.w	r3, r3, #6
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a9a      	subs	r2, r3, r2
 800242c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002430:	f103 030e 	add.w	r3, r3, #14
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	4413      	add	r3, r2
 8002438:	10db      	asrs	r3, r3, #3
 800243a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800243e:	f102 020e 	add.w	r2, r2, #14
 8002442:	8013      	strh	r3, [r2, #0]
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002444:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002448:	f103 030e 	add.w	r3, r3, #14
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	1a9a      	subs	r2, r3, r2
 8002454:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002458:	f103 0304 	add.w	r3, r3, #4
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	10d9      	asrs	r1, r3, #3
 8002462:	4b45      	ldr	r3, [pc, #276]	; (8002578 <sampling+0xfb0>)
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	b289      	uxth	r1, r1
 800246a:	4b44      	ldr	r3, [pc, #272]	; (800257c <sampling+0xfb4>)
 800246c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <sampling+0xfb0>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <sampling+0xfb0>)
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <sampling+0xfb0>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002484:	d3b4      	bcc.n	80023f0 <sampling+0xe28>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002486:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <sampling+0xfb0>)
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e228      	b.n	80028e0 <sampling+0x1318>
	i_total=i+sample_pointB;
 800248e:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <sampling+0xfb0>)
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <sampling+0xfb8>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800249c:	f102 0202 	add.w	r2, r2, #2
 80024a0:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 80024a2:	4b35      	ldr	r3, [pc, #212]	; (8002578 <sampling+0xfb0>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b35      	ldr	r3, [pc, #212]	; (8002584 <sampling+0xfbc>)
 80024ae:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 80024b0:	4b31      	ldr	r3, [pc, #196]	; (8002578 <sampling+0xfb0>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80024be:	443b      	add	r3, r7
 80024c0:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80024c4:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <sampling+0xfb0>)
 80024c6:	8812      	ldrh	r2, [r2, #0]
 80024c8:	f002 021f 	and.w	r2, r2, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10f      	bne.n	80024f6 <sampling+0xf2e>
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <sampling+0xfc0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	711a      	strb	r2, [r3, #4]
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <sampling+0xfc4>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <sampling+0xfc4>)
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	4b28      	ldr	r3, [pc, #160]	; (800258c <sampling+0xfc4>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <sampling+0xfc4>)
 80024f4:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level



//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[1]=play_holder1[i];  // sine input
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <sampling+0xfb0>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002500:	f5a3 6308 	sub.w	r3, r3, #2176	; 0x880
 8002504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002508:	4a21      	ldr	r2, [pc, #132]	; (8002590 <sampling+0xfc8>)
 800250a:	6053      	str	r3, [r2, #4]
sample_Accu[3]=play_holder2[i] >>5; // sine
 800250c:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <sampling+0xfb0>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800251c:	115b      	asrs	r3, r3, #5
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <sampling+0xfc8>)
 8002520:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles

freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <sampling+0xfbc>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <sampling+0xfcc>)
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <sampling+0xfd0>)
 8002530:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <sampling+0xfbc>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <sampling+0xfcc>)
 8002538:	3312      	adds	r3, #18
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <sampling+0xfd0>)
 8002542:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <sampling+0xfb0>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	4a13      	ldr	r2, [pc, #76]	; (800259c <sampling+0xfd4>)
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <sampling+0xfd8>)
 8002556:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <sampling+0xfd0>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	dd1b      	ble.n	80025a4 <sampling+0xfdc>
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <sampling+0xfd0>)
 800256e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e022      	b.n	80025bc <sampling+0xff4>
 8002576:	bf00      	nop
 8002578:	20000bdc 	.word	0x20000bdc
 800257c:	2000297c 	.word	0x2000297c
 8002580:	20000bda 	.word	0x20000bda
 8002584:	20002198 	.word	0x20002198
 8002588:	20002e9c 	.word	0x20002e9c
 800258c:	2000219a 	.word	0x2000219a
 8002590:	20000bbc 	.word	0x20000bbc
 8002594:	20002108 	.word	0x20002108
 8002598:	200020f8 	.word	0x200020f8
 800259c:	20001c2c 	.word	0x20001c2c
 80025a0:	20002938 	.word	0x20002938
 80025a4:	4bb3      	ldr	r3, [pc, #716]	; (8002874 <sampling+0x12ac>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	d503      	bpl.n	80025bc <sampling+0xff4>
 80025b4:	4baf      	ldr	r3, [pc, #700]	; (8002874 <sampling+0x12ac>)
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 80025bc:	4bad      	ldr	r3, [pc, #692]	; (8002874 <sampling+0x12ac>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ca:	4baa      	ldr	r3, [pc, #680]	; (8002874 <sampling+0x12ac>)
 80025cc:	edc3 7a01 	vstr	s15, [r3, #4]
		sample_Accu[1] = sample_Accu[1]>>13;
 80025d0:	4ba9      	ldr	r3, [pc, #676]	; (8002878 <sampling+0x12b0>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	135b      	asrs	r3, r3, #13
 80025d6:	4aa8      	ldr	r2, [pc, #672]	; (8002878 <sampling+0x12b0>)
 80025d8:	6053      	str	r3, [r2, #4]

		//int16_t  ADSR[0].buffer_temp2=lfo_out [1] [i>>6];

		//ADSR[0].buffer_temp2=ADSR[0].buffer_temp2-8195;
		//sample_Accu[1] = sample_Accu[1] *lfo_out [0] [i>>6];     // vol lfo
		sample_Accu[1] = sample_Accu[1] *LFO[0].out[i>>6];
 80025da:	4ba7      	ldr	r3, [pc, #668]	; (8002878 <sampling+0x12b0>)
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4ba7      	ldr	r3, [pc, #668]	; (800287c <sampling+0x12b4>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	49a6      	ldr	r1, [pc, #664]	; (8002880 <sampling+0x12b8>)
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	440b      	add	r3, r1
 80025ec:	88db      	ldrh	r3, [r3, #6]
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	4aa1      	ldr	r2, [pc, #644]	; (8002878 <sampling+0x12b0>)
 80025f4:	6053      	str	r3, [r2, #4]



		//	filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 80025f6:	4ba3      	ldr	r3, [pc, #652]	; (8002884 <sampling+0x12bc>)
 80025f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80025fc:	4ba2      	ldr	r3, [pc, #648]	; (8002888 <sampling+0x12c0>)
 80025fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	4b9f      	ldr	r3, [pc, #636]	; (8002884 <sampling+0x12bc>)
 8002608:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);					// maybe allow bandpass insted of lpf
 800260c:	4b9d      	ldr	r3, [pc, #628]	; (8002884 <sampling+0x12bc>)
 800260e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002612:	4b98      	ldr	r3, [pc, #608]	; (8002874 <sampling+0x12ac>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261c:	4b99      	ldr	r3, [pc, #612]	; (8002884 <sampling+0x12bc>)
 800261e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002622:	4b94      	ldr	r3, [pc, #592]	; (8002874 <sampling+0x12ac>)
 8002624:	edd3 7a01 	vldr	s15, [r3, #4]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	4b94      	ldr	r3, [pc, #592]	; (8002884 <sampling+0x12bc>)
 8002632:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 8002636:	4b93      	ldr	r3, [pc, #588]	; (8002884 <sampling+0x12bc>)
 8002638:	ed93 7a02 	vldr	s14, [r3, #8]
 800263c:	4b8d      	ldr	r3, [pc, #564]	; (8002874 <sampling+0x12ac>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002646:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <sampling+0x12bc>)
 8002648:	edd3 6a03 	vldr	s13, [r3, #12]
 800264c:	4b89      	ldr	r3, [pc, #548]	; (8002874 <sampling+0x12ac>)
 800264e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265a:	4b8a      	ldr	r3, [pc, #552]	; (8002884 <sampling+0x12bc>)
 800265c:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 8002660:	4b88      	ldr	r3, [pc, #544]	; (8002884 <sampling+0x12bc>)
 8002662:	ed93 7a03 	vldr	s14, [r3, #12]
 8002666:	4b83      	ldr	r3, [pc, #524]	; (8002874 <sampling+0x12ac>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002670:	4b84      	ldr	r3, [pc, #528]	; (8002884 <sampling+0x12bc>)
 8002672:	edd3 6a04 	vldr	s13, [r3, #16]
 8002676:	4b7f      	ldr	r3, [pc, #508]	; (8002874 <sampling+0x12ac>)
 8002678:	edd3 7a01 	vldr	s15, [r3, #4]
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	4b7f      	ldr	r3, [pc, #508]	; (8002884 <sampling+0x12bc>)
 8002686:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 800268a:	4b7e      	ldr	r3, [pc, #504]	; (8002884 <sampling+0x12bc>)
 800268c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002690:	4b78      	ldr	r3, [pc, #480]	; (8002874 <sampling+0x12ac>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	4b7a      	ldr	r3, [pc, #488]	; (8002884 <sampling+0x12bc>)
 800269c:	edd3 6a05 	vldr	s13, [r3, #20]
 80026a0:	4b74      	ldr	r3, [pc, #464]	; (8002874 <sampling+0x12ac>)
 80026a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ae:	4b75      	ldr	r3, [pc, #468]	; (8002884 <sampling+0x12bc>)
 80026b0:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 80026b4:	4b73      	ldr	r3, [pc, #460]	; (8002884 <sampling+0x12bc>)
 80026b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <sampling+0x12bc>)
 80026bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <sampling+0x12c4>)
 80026ce:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 80026d2:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <sampling+0x12bc>)
 80026d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80026d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026dc:	ee17 2a90 	vmov	r2, s15
 80026e0:	4b65      	ldr	r3, [pc, #404]	; (8002878 <sampling+0x12b0>)
 80026e2:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 80026e4:	4b67      	ldr	r3, [pc, #412]	; (8002884 <sampling+0x12bc>)
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	4a66      	ldr	r2, [pc, #408]	; (8002884 <sampling+0x12bc>)
 80026ea:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 80026ec:	4b63      	ldr	r3, [pc, #396]	; (800287c <sampling+0x12b4>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80026fc:	115b      	asrs	r3, r3, #5
 80026fe:	4a5e      	ldr	r2, [pc, #376]	; (8002878 <sampling+0x12b0>)
 8002700:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 8002702:	4b5c      	ldr	r3, [pc, #368]	; (8002874 <sampling+0x12ac>)
 8002704:	edd3 7a02 	vldr	s15, [r3, #8]
 8002708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800270c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	dd03      	ble.n	800271e <sampling+0x1156>
 8002716:	4b57      	ldr	r3, [pc, #348]	; (8002874 <sampling+0x12ac>)
 8002718:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800271c:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 800271e:	4b55      	ldr	r3, [pc, #340]	; (8002874 <sampling+0x12ac>)
 8002720:	edd3 7a02 	vldr	s15, [r3, #8]
 8002724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272c:	4b51      	ldr	r3, [pc, #324]	; (8002874 <sampling+0x12ac>)
 800272e:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8002732:	4b51      	ldr	r3, [pc, #324]	; (8002878 <sampling+0x12b0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273e:	4b51      	ldr	r3, [pc, #324]	; (8002884 <sampling+0x12bc>)
 8002740:	edc3 7a06 	vstr	s15, [r3, #24]
			//	filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002744:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <sampling+0x12bc>)
 8002746:	ed93 7a06 	vldr	s14, [r3, #24]
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <sampling+0x12ac>)
 800274c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <sampling+0x12bc>)
 8002756:	edd3 6a07 	vldr	s13, [r3, #28]
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <sampling+0x12ac>)
 800275c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <sampling+0x12bc>)
 800276a:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 800276e:	4b45      	ldr	r3, [pc, #276]	; (8002884 <sampling+0x12bc>)
 8002770:	ed93 7a07 	vldr	s14, [r3, #28]
 8002774:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <sampling+0x12ac>)
 8002776:	edd3 7a02 	vldr	s15, [r3, #8]
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <sampling+0x12bc>)
 8002780:	edd3 6a08 	vldr	s13, [r3, #32]
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <sampling+0x12ac>)
 8002786:	edd3 7a03 	vldr	s15, [r3, #12]
 800278a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <sampling+0x12bc>)
 8002794:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002798:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <sampling+0x12bc>)
 800279a:	ed93 7a08 	vldr	s14, [r3, #32]
 800279e:	4b35      	ldr	r3, [pc, #212]	; (8002874 <sampling+0x12ac>)
 80027a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <sampling+0x12bc>)
 80027aa:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <sampling+0x12ac>)
 80027b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027bc:	4b31      	ldr	r3, [pc, #196]	; (8002884 <sampling+0x12bc>)
 80027be:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 80027c2:	4b30      	ldr	r3, [pc, #192]	; (8002884 <sampling+0x12bc>)
 80027c4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <sampling+0x12ac>)
 80027ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d2:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <sampling+0x12bc>)
 80027d4:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <sampling+0x12ac>)
 80027da:	edd3 7a03 	vldr	s15, [r3, #12]
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	4b27      	ldr	r3, [pc, #156]	; (8002884 <sampling+0x12bc>)
 80027e8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <sampling+0x12bc>)
 80027ee:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <sampling+0x12bc>)
 80027f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80027f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <sampling+0x12c4>)
 8002806:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <sampling+0x12bc>)
 800280c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002814:	ee17 2a90 	vmov	r2, s15
 8002818:	4b17      	ldr	r3, [pc, #92]	; (8002878 <sampling+0x12b0>)
 800281a:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <sampling+0x12bc>)
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <sampling+0x12bc>)
 8002822:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 8002824:	2300      	movs	r3, #0
 8002826:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800282a:	f102 0210 	add.w	r2, r2, #16
 800282e:	6013      	str	r3, [r2, #0]
//filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out


//filter_Accu=(sample_Accu[1]+sample_Accu[3])>>8; //filter + drum out ,clean out
 filter_Accu=sample_Accu[1]>>7;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <sampling+0x12b0>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	11db      	asrs	r3, r3, #7
 8002836:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800283a:	f102 0210 	add.w	r2, r2, #16
 800283e:	6013      	str	r3, [r2, #0]

// filter_Accu=sample_Accu[2]>>11;
//filter_Accu=(sample_Accu[1]>>7)+(sample_Accu[3]>>8); //filter + drum out
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <sampling+0x12c8>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2bc7      	cmp	r3, #199	; 0xc7
 8002846:	d005      	beq.n	8002854 <sampling+0x128c>
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <sampling+0x12c8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <sampling+0x12c8>)
 8002852:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002854:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002858:	f103 0310 	add.w	r3, r3, #16
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002862:	db17      	blt.n	8002894 <sampling+0x12cc>
 8002864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002868:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800286c:	f102 0210 	add.w	r2, r2, #16
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <sampling+0x12e8>
 8002874:	200020f8 	.word	0x200020f8
 8002878:	20000bbc 	.word	0x20000bbc
 800287c:	20000bdc 	.word	0x20000bdc
 8002880:	20002d98 	.word	0x20002d98
 8002884:	200020a8 	.word	0x200020a8
 8002888:	20002938 	.word	0x20002938
 800288c:	200020e4 	.word	0x200020e4
 8002890:	2000206c 	.word	0x2000206c
 8002894:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002898:	f103 0310 	add.w	r3, r3, #16
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028a2:	dc05      	bgt.n	80028b0 <sampling+0x12e8>
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <sampling+0x135c>)
 80028a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80028aa:	f102 0210 	add.w	r2, r2, #16
 80028ae:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 80028b0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80028b4:	f103 0310 	add.w	r3, r3, #16
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	119b      	asrs	r3, r3, #6
 80028bc:	b29a      	uxth	r2, r3
 80028be:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80028c2:	f103 0302 	add.w	r3, r3, #2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028cc:	b291      	uxth	r1, r2
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <sampling+0x1360>)
 80028d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <sampling+0x1364>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <sampling+0x1364>)
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <sampling+0x1364>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e8:	f4ff add1 	bcc.w	800248e <sampling+0xec6>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write) {time_final[1]=time_proc; error_count++;};  // tick timer in samples ,normal max 20 but some 230
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <sampling+0x1368>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <sampling+0x1340>
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <sampling+0x136c>)
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <sampling+0x1370>)
 80028fa:	805a      	strh	r2, [r3, #2]
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <sampling+0x1374>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <sampling+0x1374>)
 8002906:	801a      	strh	r2, [r3, #0]
if (time_proc>100)  	time_final[0]=time_proc;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <sampling+0x136c>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d903      	bls.n	8002918 <sampling+0x1350>
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <sampling+0x136c>)
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <sampling+0x1370>)
 8002916:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 8002918:	bf00      	nop
 800291a:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 800291e:	46bd      	mov	sp, r7
 8002920:	bdb0      	pop	{r4, r5, r7, pc}
 8002922:	bf00      	nop
 8002924:	ffff0001 	.word	0xffff0001
 8002928:	20000be0 	.word	0x20000be0
 800292c:	20000bdc 	.word	0x20000bdc
 8002930:	200001ea 	.word	0x200001ea
 8002934:	20002d94 	.word	0x20002d94
 8002938:	20002d90 	.word	0x20002d90
 800293c:	20002d96 	.word	0x20002d96

08002940 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002946:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <sine_count+0xc4>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <sine_count+0xc8>)
 8002950:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002952:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <sine_count+0xc4>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 800295e:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <sine_count+0xc8>)
 8002960:	881a      	ldrh	r2, [r3, #0]
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <sine_count+0xcc>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d903      	bls.n	8002972 <sine_count+0x32>
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <sine_count+0xcc>)
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <sine_count+0xc8>)
 8002970:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <sine_count+0xc8>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <sine_count+0xd0>)
 800297a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800297e:	461a      	mov	r2, r3
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <sine_count+0xd4>)
 8002982:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002984:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <sine_count+0xd4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002990:	3b20      	subs	r3, #32
 8002992:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <sine_count+0xc8>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <sine_count+0xc8>)
 800299e:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <sine_count+0xc8>)
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <sine_count+0xcc>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d302      	bcc.n	80029b2 <sine_count+0x72>
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <sine_count+0xc8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <sine_count+0xc8>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <sine_count+0xd0>)
 80029ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029be:	461a      	mov	r2, r3
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <sine_count+0xd4>)
 80029c2:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <sine_count+0xd4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80029d0:	3b20      	subs	r3, #32
 80029d2:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	115b      	asrs	r3, r3, #5
 80029e0:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 80029e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <sine_count+0xd4>)
 80029f6:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	20000b86 	.word	0x20000b86
 8002a08:	20000b84 	.word	0x20000b84
 8002a0c:	2000017a 	.word	0x2000017a
 8002a10:	08009b6c 	.word	0x08009b6c
 8002a14:	20000b88 	.word	0x20000b88

08002a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1a:	b0a3      	sub	sp, #140	; 0x8c
 8002a1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a1e:	f001 fa31 	bl	8003e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a22:	f000 fbf9 	bl	8003218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a26:	f000 febf 	bl	80037a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a2a:	f000 fe9d 	bl	8003768 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a2e:	f000 fc5d 	bl	80032ec <MX_ADC1_Init>
  MX_SPI2_Init();
 8002a32:	f000 fd45 	bl	80034c0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002a36:	f000 fdcd 	bl	80035d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a3a:	f000 fe41 	bl	80036c0 <MX_TIM4_Init>
  MX_I2C2_Init();
 8002a3e:	f000 fcdb 	bl	80033f8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002a42:	f000 fd73 	bl	800352c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002a46:	f000 fd05 	bl	8003454 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8002a4a:	4bbf      	ldr	r3, [pc, #764]	; (8002d48 <main+0x330>)
 8002a4c:	66fb      	str	r3, [r7, #108]	; 0x6c



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8002a4e:	48bf      	ldr	r0, [pc, #764]	; (8002d4c <main+0x334>)
 8002a50:	f004 fdbc 	bl	80075cc <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8002a54:	48be      	ldr	r0, [pc, #760]	; (8002d50 <main+0x338>)
 8002a56:	f004 fdb9 	bl	80075cc <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8002a5a:	48be      	ldr	r0, [pc, #760]	; (8002d54 <main+0x33c>)
 8002a5c:	f005 fc08 	bl	8008270 <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8002a60:	4bbd      	ldr	r3, [pc, #756]	; (8002d58 <main+0x340>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8002a66:	48bd      	ldr	r0, [pc, #756]	; (8002d5c <main+0x344>)
 8002a68:	f005 fba8 	bl	80081bc <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8002a6c:	48bc      	ldr	r0, [pc, #752]	; (8002d60 <main+0x348>)
 8002a6e:	f005 fba5 	bl	80081bc <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002a72:	2108      	movs	r1, #8
 8002a74:	48b7      	ldr	r0, [pc, #732]	; (8002d54 <main+0x33c>)
 8002a76:	f005 fcb7 	bl	80083e8 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8002a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a7e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8002a84:	48b7      	ldr	r0, [pc, #732]	; (8002d64 <main+0x34c>)
 8002a86:	f001 fad7 	bl	8004038 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8002a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8e:	49b6      	ldr	r1, [pc, #728]	; (8002d68 <main+0x350>)
 8002a90:	48b4      	ldr	r0, [pc, #720]	; (8002d64 <main+0x34c>)
 8002a92:	f001 fc11 	bl	80042b8 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8002a96:	48b5      	ldr	r0, [pc, #724]	; (8002d6c <main+0x354>)
 8002a98:	f000 ffc0 	bl	8003a1c <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8002a9c:	4ab4      	ldr	r2, [pc, #720]	; (8002d70 <main+0x358>)
 8002a9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aa6:	6018      	str	r0, [r3, #0]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 8002aac:	2005      	movs	r0, #5
 8002aae:	f001 fa5b 	bl	8003f68 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2110      	movs	r1, #16
 8002abc:	48ad      	ldr	r0, [pc, #692]	; (8002d74 <main+0x35c>)
 8002abe:	f003 f967 	bl	8005d90 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002ac2:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aca:	2201      	movs	r2, #1
 8002acc:	48a0      	ldr	r0, [pc, #640]	; (8002d50 <main+0x338>)
 8002ace:	f004 fe06 	bl	80076de <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	2110      	movs	r1, #16
 8002ad6:	48a7      	ldr	r0, [pc, #668]	; (8002d74 <main+0x35c>)
 8002ad8:	f003 f95a 	bl	8005d90 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002adc:	2005      	movs	r0, #5
 8002ade:	f001 fa43 	bl	8003f68 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8002afa:	2200      	movs	r2, #0
 8002afc:	2110      	movs	r1, #16
 8002afe:	489d      	ldr	r0, [pc, #628]	; (8002d74 <main+0x35c>)
 8002b00:	f003 f946 	bl	8005d90 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 8002b04:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	4890      	ldr	r0, [pc, #576]	; (8002d50 <main+0x338>)
 8002b10:	f004 fde5 	bl	80076de <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002b14:	2201      	movs	r2, #1
 8002b16:	2110      	movs	r1, #16
 8002b18:	4896      	ldr	r0, [pc, #600]	; (8002d74 <main+0x35c>)
 8002b1a:	f003 f939 	bl	8005d90 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8002b1e:	2305      	movs	r3, #5
 8002b20:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
status_reg[1]=1; // set busy on
 8002b2a:	4b93      	ldr	r3, [pc, #588]	; (8002d78 <main+0x360>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8002b30:	e012      	b.n	8002b58 <main+0x140>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2110      	movs	r1, #16
 8002b36:	488f      	ldr	r0, [pc, #572]	; (8002d74 <main+0x35c>)
 8002b38:	f003 f92a 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8002b3c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b40:	23c8      	movs	r3, #200	; 0xc8
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2302      	movs	r3, #2
 8002b46:	4a8c      	ldr	r2, [pc, #560]	; (8002d78 <main+0x360>)
 8002b48:	4881      	ldr	r0, [pc, #516]	; (8002d50 <main+0x338>)
 8002b4a:	f005 f815 	bl	8007b78 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2110      	movs	r1, #16
 8002b52:	4888      	ldr	r0, [pc, #544]	; (8002d74 <main+0x35c>)
 8002b54:	f003 f91c 	bl	8005d90 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8002b58:	4b87      	ldr	r3, [pc, #540]	; (8002d78 <main+0x360>)
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e6      	bne.n	8002b32 <main+0x11a>
}

send_spi1[0]=0x06; //enable write again
 8002b64:	2306      	movs	r3, #6
 8002b66:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	4881      	ldr	r0, [pc, #516]	; (8002d74 <main+0x35c>)
 8002b70:	f003 f90e 	bl	8005d90 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002b74:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4874      	ldr	r0, [pc, #464]	; (8002d50 <main+0x338>)
 8002b80:	f004 fdad 	bl	80076de <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002b84:	2201      	movs	r2, #1
 8002b86:	2110      	movs	r1, #16
 8002b88:	487a      	ldr	r0, [pc, #488]	; (8002d74 <main+0x35c>)
 8002b8a:	f003 f901 	bl	8005d90 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8002b8e:	2005      	movs	r0, #5
 8002b90:	f001 f9ea 	bl	8003f68 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8002b94:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <main+0x364>)
 8002b96:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8002ba4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ba8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bac:	220e      	movs	r2, #14
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f006 fbe0 	bl	8009374 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2110      	movs	r1, #16
 8002bb8:	486e      	ldr	r0, [pc, #440]	; (8002d74 <main+0x35c>)
 8002bba:	f003 f8e9 	bl	8005d90 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8002bbe:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc6:	220e      	movs	r2, #14
 8002bc8:	4861      	ldr	r0, [pc, #388]	; (8002d50 <main+0x338>)
 8002bca:	f004 fd88 	bl	80076de <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	4868      	ldr	r0, [pc, #416]	; (8002d74 <main+0x35c>)
 8002bd4:	f003 f8dc 	bl	8005d90 <HAL_GPIO_WritePin>




HAL_Delay(25);
 8002bd8:	2019      	movs	r0, #25
 8002bda:	f001 f9c5 	bl	8003f68 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8002bde:	2304      	movs	r3, #4
 8002be0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2110      	movs	r1, #16
 8002be8:	4862      	ldr	r0, [pc, #392]	; (8002d74 <main+0x35c>)
 8002bea:	f003 f8d1 	bl	8005d90 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002bee:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4855      	ldr	r0, [pc, #340]	; (8002d50 <main+0x338>)
 8002bfa:	f004 fd70 	bl	80076de <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2110      	movs	r1, #16
 8002c02:	485c      	ldr	r0, [pc, #368]	; (8002d74 <main+0x35c>)
 8002c04:	f003 f8c4 	bl	8005d90 <HAL_GPIO_WritePin>

HAL_Delay(5);
 8002c08:	2005      	movs	r0, #5
 8002c0a:	f001 f9ad 	bl	8003f68 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8002c0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c12:	220e      	movs	r2, #14
 8002c14:	495a      	ldr	r1, [pc, #360]	; (8002d80 <main+0x368>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f006 fbac 	bl	8009374 <memcpy>
send_spi1[0]=0x03; //read page 1
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
send_spi1[1]=0; //24bit address msb
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
send_spi1[2]=0; //24bit address
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
send_spi1[3]=1; //24bit address lsb
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8002c34:	2200      	movs	r2, #0
 8002c36:	2110      	movs	r1, #16
 8002c38:	484e      	ldr	r0, [pc, #312]	; (8002d74 <main+0x35c>)
 8002c3a:	f003 f8a9 	bl	8005d90 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8002c3e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c42:	2364      	movs	r3, #100	; 0x64
 8002c44:	2204      	movs	r2, #4
 8002c46:	4842      	ldr	r0, [pc, #264]	; (8002d50 <main+0x338>)
 8002c48:	f004 fd49 	bl	80076de <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8002c4c:	2364      	movs	r3, #100	; 0x64
 8002c4e:	220a      	movs	r2, #10
 8002c50:	494b      	ldr	r1, [pc, #300]	; (8002d80 <main+0x368>)
 8002c52:	483f      	ldr	r0, [pc, #252]	; (8002d50 <main+0x338>)
 8002c54:	f004 fe7f 	bl	8007956 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	4845      	ldr	r0, [pc, #276]	; (8002d74 <main+0x35c>)
 8002c5e:	f003 f897 	bl	8005d90 <HAL_GPIO_WritePin>
send_spi1[1]=0; //24bit address lsb
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector
*/


HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8002c62:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4838      	ldr	r0, [pc, #224]	; (8002d50 <main+0x338>)
 8002c6e:	f004 fd36 	bl	80076de <HAL_SPI_Transmit>

uint8_t potSource2[64];



for(i=0;i<4;i++){
 8002c72:	4b44      	ldr	r3, [pc, #272]	; (8002d84 <main+0x36c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	e02f      	b.n	8002cda <main+0x2c2>
HAL_I2C_Mem_Read(&hi2c2, 160, 64+(i*64), 2,&potSource2, 64,1000);		// all good readin eeprom  values
 8002c7a:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <main+0x36c>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	019b      	lsls	r3, r3, #6
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c8a:	9302      	str	r3, [sp, #8]
 8002c8c:	2340      	movs	r3, #64	; 0x40
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	f107 0308 	add.w	r3, r7, #8
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2302      	movs	r3, #2
 8002c98:	21a0      	movs	r1, #160	; 0xa0
 8002c9a:	4834      	ldr	r0, [pc, #208]	; (8002d6c <main+0x354>)
 8002c9c:	f003 fad0 	bl	8006240 <HAL_I2C_Mem_Read>

memcpy (potSource+(i*64),potSource2,sizeof(potSource2));   //this works  ok now
 8002ca0:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <main+0x36c>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <main+0x370>)
 8002caa:	4413      	add	r3, r2
 8002cac:	f107 0408 	add.w	r4, r7, #8
 8002cb0:	469c      	mov	ip, r3
 8002cb2:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8002cb6:	4665      	mov	r5, ip
 8002cb8:	4626      	mov	r6, r4
 8002cba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002cbc:	6028      	str	r0, [r5, #0]
 8002cbe:	6069      	str	r1, [r5, #4]
 8002cc0:	60aa      	str	r2, [r5, #8]
 8002cc2:	60eb      	str	r3, [r5, #12]
 8002cc4:	3410      	adds	r4, #16
 8002cc6:	f10c 0c10 	add.w	ip, ip, #16
 8002cca:	4574      	cmp	r4, lr
 8002ccc:	d1f3      	bne.n	8002cb6 <main+0x29e>
for(i=0;i<4;i++){
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <main+0x36c>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <main+0x36c>)
 8002cd8:	801a      	strh	r2, [r3, #0]
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <main+0x36c>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d9cb      	bls.n	8002c7a <main+0x262>


//HAL_I2C_Mem_Read(&hi2c2, 160, 127, 2,potSource+128,64,1000);


for(i=0;i<1024;i++){
 8002ce2:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <main+0x36c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	e024      	b.n	8002d34 <main+0x31c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8002cea:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <main+0x36c>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	f103 0208 	add.w	r2, r3, #8
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <main+0x36c>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	08db      	lsrs	r3, r3, #3
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d04:	441a      	add	r2, r3
 8002d06:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <main+0x36c>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0e:	491d      	ldr	r1, [pc, #116]	; (8002d84 <main+0x36c>)
 8002d10:	8809      	ldrh	r1, [r1, #0]
 8002d12:	0989      	lsrs	r1, r1, #6
 8002d14:	b289      	uxth	r1, r1
 8002d16:	4608      	mov	r0, r1
 8002d18:	491c      	ldr	r1, [pc, #112]	; (8002d8c <main+0x374>)
 8002d1a:	5c89      	ldrb	r1, [r1, r2]
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <main+0x378>)
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	4403      	add	r3, r0
 8002d24:	460a      	mov	r2, r1
 8002d26:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <main+0x36c>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <main+0x36c>)
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <main+0x36c>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d3d5      	bcc.n	8002cea <main+0x2d2>
//gfx_ram[i&63] [i>>6]  =250;
}



for(i=0;i<180;i++){			// write potvalues ,for display
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <main+0x36c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	e037      	b.n	8002db6 <main+0x39e>
 8002d46:	bf00      	nop
 8002d48:	0800d2f0 	.word	0x0800d2f0
 8002d4c:	20003a7c 	.word	0x20003a7c
 8002d50:	20003a24 	.word	0x20003a24
 8002d54:	20003b1c 	.word	0x20003b1c
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	20003ad4 	.word	0x20003ad4
 8002d60:	20003b64 	.word	0x20003b64
 8002d64:	20003928 	.word	0x20003928
 8002d68:	20001428 	.word	0x20001428
 8002d6c:	200039d0 	.word	0x200039d0
 8002d70:	08009664 	.word	0x08009664
 8002d74:	40020000 	.word	0x40020000
 8002d78:	20000214 	.word	0x20000214
 8002d7c:	0800966c 	.word	0x0800966c
 8002d80:	20002d80 	.word	0x20002d80
 8002d84:	20000bdc 	.word	0x20000bdc
 8002d88:	20000a04 	.word	0x20000a04
 8002d8c:	200002ec 	.word	0x200002ec
 8002d90:	20002538 	.word	0x20002538
	potValues[i]=potSource[i]>>4;
 8002d94:	4b9c      	ldr	r3, [pc, #624]	; (8003008 <main+0x5f0>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b9c      	ldr	r3, [pc, #624]	; (800300c <main+0x5f4>)
 8002d9c:	5c9b      	ldrb	r3, [r3, r2]
 8002d9e:	4a9a      	ldr	r2, [pc, #616]	; (8003008 <main+0x5f0>)
 8002da0:	8812      	ldrh	r2, [r2, #0]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	b2d9      	uxtb	r1, r3
 8002da6:	4b9a      	ldr	r3, [pc, #616]	; (8003010 <main+0x5f8>)
 8002da8:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){			// write potvalues ,for display
 8002daa:	4b97      	ldr	r3, [pc, #604]	; (8003008 <main+0x5f0>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b95      	ldr	r3, [pc, #596]	; (8003008 <main+0x5f0>)
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	4b94      	ldr	r3, [pc, #592]	; (8003008 <main+0x5f0>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	2bb3      	cmp	r3, #179	; 0xb3
 8002dbc:	d9ea      	bls.n	8002d94 <main+0x37c>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8002dbe:	4b92      	ldr	r3, [pc, #584]	; (8003008 <main+0x5f0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	e03d      	b.n	8002e42 <main+0x42a>

tempo_hold=(i+180)*0.0166666666;
 8002dc6:	4b90      	ldr	r3, [pc, #576]	; (8003008 <main+0x5f0>)
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	33b4      	adds	r3, #180	; 0xb4
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fc7f 	bl	80006d0 <__aeabi_i2d>
 8002dd2:	a389      	add	r3, pc, #548	; (adr r3, 8002ff8 <main+0x5e0>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd f9fe 	bl	80001d8 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd fcde 	bl	80007a4 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	667b      	str	r3, [r7, #100]	; 0x64

tempo_hold=	1/tempo_hold;
 8002dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002df0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8002dfc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002dfe:	f7fd fc79 	bl	80006f4 <__aeabi_f2d>
 8002e02:	a37f      	add	r3, pc, #508	; (adr r3, 8003000 <main+0x5e8>)
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f7fd f9e6 	bl	80001d8 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	f7fd fcc6 	bl	80007a4 <__aeabi_d2f>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	667b      	str	r3, [r7, #100]	; 0x64
tempo_lut[i]=tempo_hold;
 8002e1c:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <main+0x5f0>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e2a:	ee17 3a90 	vmov	r3, s15
 8002e2e:	b299      	uxth	r1, r3
 8002e30:	4b78      	ldr	r3, [pc, #480]	; (8003014 <main+0x5fc>)
 8002e32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8002e36:	4b74      	ldr	r3, [pc, #464]	; (8003008 <main+0x5f0>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	4b72      	ldr	r3, [pc, #456]	; (8003008 <main+0x5f0>)
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	4b71      	ldr	r3, [pc, #452]	; (8003008 <main+0x5f0>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	2ba0      	cmp	r3, #160	; 0xa0
 8002e48:	d9bd      	bls.n	8002dc6 <main+0x3ae>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <main+0x600>)
 8002e4c:	f240 223b 	movw	r2, #571	; 0x23b
 8002e50:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8002e52:	4b72      	ldr	r3, [pc, #456]	; (800301c <main+0x604>)
 8002e54:	2218      	movs	r2, #24
 8002e56:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002e58:	4b6b      	ldr	r3, [pc, #428]	; (8003008 <main+0x5f0>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	e00b      	b.n	8002e78 <main+0x460>
	spell[i]=67;
 8002e60:	4b69      	ldr	r3, [pc, #420]	; (8003008 <main+0x5f0>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b6e      	ldr	r3, [pc, #440]	; (8003020 <main+0x608>)
 8002e68:	2143      	movs	r1, #67	; 0x43
 8002e6a:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8002e6c:	4b66      	ldr	r3, [pc, #408]	; (8003008 <main+0x5f0>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b64      	ldr	r3, [pc, #400]	; (8003008 <main+0x5f0>)
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	4b63      	ldr	r3, [pc, #396]	; (8003008 <main+0x5f0>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002e80:	d3ee      	bcc.n	8002e60 <main+0x448>

}

display_fill();
 8002e82:	f7fe f9c9 	bl	8001218 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8002e86:	4b60      	ldr	r3, [pc, #384]	; (8003008 <main+0x5f0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	801a      	strh	r2, [r3, #0]
 8002e8c:	e00f      	b.n	8002eae <main+0x496>
 8002e8e:	4b5e      	ldr	r3, [pc, #376]	; (8003008 <main+0x5f0>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	4619      	mov	r1, r3
 8002e94:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <main+0x5f0>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b62      	ldr	r3, [pc, #392]	; (8003024 <main+0x60c>)
 8002e9c:	5c59      	ldrb	r1, [r3, r1]
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <main+0x60c>)
 8002ea0:	5499      	strb	r1, [r3, r2]
 8002ea2:	4b59      	ldr	r3, [pc, #356]	; (8003008 <main+0x5f0>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	4b57      	ldr	r3, [pc, #348]	; (8003008 <main+0x5f0>)
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	4b56      	ldr	r3, [pc, #344]	; (8003008 <main+0x5f0>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb6:	d3ea      	bcc.n	8002e8e <main+0x476>




//   produce extra menu pages here /////////////////////////////////////////////////////////////////////////////////
uint16_t lut_temp2=0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
uint16_t lut_temp3=0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
for  (i=0;i<390;i++){					// get a few more pages
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <main+0x5f0>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	801a      	strh	r2, [r3, #0]
 8002eca:	e027      	b.n	8002f1c <main+0x504>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;    // skip space or characters
 8002ecc:	4b4e      	ldr	r3, [pc, #312]	; (8003008 <main+0x5f0>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <main+0x5f0>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	4952      	ldr	r1, [pc, #328]	; (8003028 <main+0x610>)
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002ee8:	2b5e      	cmp	r3, #94	; 0x5e
 8002eea:	d805      	bhi.n	8002ef8 <main+0x4e0>
 8002eec:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002ef6:	e00b      	b.n	8002f10 <main+0x4f8>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}     // goes to 511
 8002ef8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002efc:	4a42      	ldr	r2, [pc, #264]	; (8003008 <main+0x5f0>)
 8002efe:	8811      	ldrh	r1, [r2, #0]
 8002f00:	4a4a      	ldr	r2, [pc, #296]	; (800302c <main+0x614>)
 8002f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002f06:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
for  (i=0;i<390;i++){					// get a few more pages
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <main+0x5f0>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <main+0x5f0>)
 8002f1a:	801a      	strh	r2, [r3, #0]
 8002f1c:	4b3a      	ldr	r3, [pc, #232]	; (8003008 <main+0x5f0>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002f24:	d3d2      	bcc.n	8002ecc <main+0x4b4>
}


menuSelect=0;
 8002f26:	4b42      	ldr	r3, [pc, #264]	; (8003030 <main+0x618>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <main+0x61c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <main+0x620>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <main+0x620>)
 8002f3c:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	; (800303c <main+0x624>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a3d      	ldr	r2, [pc, #244]	; (800303c <main+0x624>)
 8002f46:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <main+0x624>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d101      	bne.n	8002f58 <main+0x540>
 8002f54:	f7fd fe92 	bl	8000c7c <analoginputloopb>


if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8002f58:	4b38      	ldr	r3, [pc, #224]	; (800303c <main+0x624>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f242 3288 	movw	r2, #9096	; 0x2388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d13a      	bne.n	8002fda <main+0x5c2>
	  if (mem_count==255) mem_count=0; else mem_count++;  // write to first this was moved for no logical reason ?
 8002f64:	4b36      	ldr	r3, [pc, #216]	; (8003040 <main+0x628>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2bff      	cmp	r3, #255	; 0xff
 8002f6a:	d103      	bne.n	8002f74 <main+0x55c>
 8002f6c:	4b34      	ldr	r3, [pc, #208]	; (8003040 <main+0x628>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	e005      	b.n	8002f80 <main+0x568>
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <main+0x628>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <main+0x628>)
 8002f7e:	701a      	strb	r2, [r3, #0]
	mem_buf=potSource[mem_count];
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <main+0x628>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <main+0x5f4>)
 8002f88:	5c9a      	ldrb	r2, [r3, r2]
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <main+0x62c>)
 8002f8c:	701a      	strb	r2, [r3, #0]
	if (mem_buf>160) mem_buf=160;   // just in case
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <main+0x62c>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2ba0      	cmp	r3, #160	; 0xa0
 8002f94:	d902      	bls.n	8002f9c <main+0x584>
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <main+0x62c>)
 8002f98:	22a0      	movs	r2, #160	; 0xa0
 8002f9a:	701a      	strb	r2, [r3, #0]

	// read values from stored


	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 100);  // "&hi2c2"  actual register address
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <main+0x628>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	019b      	lsls	r3, r3, #6
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <main+0x628>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	2364      	movs	r3, #100	; 0x64
 8002fc0:	9302      	str	r3, [sp, #8]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <main+0x62c>)
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2302      	movs	r3, #2
 8002fcc:	21a0      	movs	r1, #160	; 0xa0
 8002fce:	481e      	ldr	r0, [pc, #120]	; (8003048 <main+0x630>)
 8002fd0:	f003 f83c 	bl	800604c <HAL_I2C_Mem_Write>
	//HAL_Delay(5); // this is slow , no bueno




	loop_counter2=0; //reset
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <main+0x624>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi  ,, no freezes here
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <main+0x634>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d15e      	bne.n	80030a0 <main+0x688>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <main+0x638>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d038      	beq.n	800305c <main+0x644>
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <main+0x63c>)
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <main+0x640>)
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	e037      	b.n	8003064 <main+0x64c>
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	0febdd13 	.word	0x0febdd13
 8002ffc:	3f911111 	.word	0x3f911111
 8003000:	33333333 	.word	0x33333333
 8003004:	40a11733 	.word	0x40a11733
 8003008:	20000bdc 	.word	0x20000bdc
 800300c:	20000a04 	.word	0x20000a04
 8003010:	20000884 	.word	0x20000884
 8003014:	200023f4 	.word	0x200023f4
 8003018:	20000b90 	.word	0x20000b90
 800301c:	20000b83 	.word	0x20000b83
 8003020:	20000038 	.word	0x20000038
 8003024:	200002ec 	.word	0x200002ec
 8003028:	08009700 	.word	0x08009700
 800302c:	20000714 	.word	0x20000714
 8003030:	20000b8e 	.word	0x20000b8e
 8003034:	20000b92 	.word	0x20000b92
 8003038:	20000bd8 	.word	0x20000bd8
 800303c:	20002090 	.word	0x20002090
 8003040:	2000208e 	.word	0x2000208e
 8003044:	20002094 	.word	0x20002094
 8003048:	200039d0 	.word	0x200039d0
 800304c:	20002976 	.word	0x20002976
 8003050:	20002977 	.word	0x20002977
 8003054:	20002076 	.word	0x20002076
 8003058:	20002978 	.word	0x20002978
 800305c:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <main+0x7c4>)
 800305e:	881a      	ldrh	r2, [r3, #0]
 8003060:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <main+0x7c8>)
 8003062:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 8003064:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <main+0x7cc>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <main+0x7cc>)
 8003076:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 8003078:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <main+0x7d0>)
 800307a:	2200      	movs	r2, #0
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	e007      	b.n	8003090 <main+0x678>
 8003080:	f7fe f8f6 	bl	8001270 <displayBuffer>
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <main+0x7d0>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	4b56      	ldr	r3, [pc, #344]	; (80031e8 <main+0x7d0>)
 800308e:	801a      	strh	r2, [r3, #0]
 8003090:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <main+0x7d0>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d9f3      	bls.n	8003080 <main+0x668>
		  enc2_dir=enc2_tempc;
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <main+0x7c4>)
 800309a:	881a      	ldrh	r2, [r3, #0]
 800309c:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <main+0x7c8>)
 800309e:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)				// after 6 its done for good   // no freeze here
 80030a0:	4b52      	ldr	r3, [pc, #328]	; (80031ec <main+0x7d4>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d810      	bhi.n	80030ca <main+0x6b2>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 80030a8:	4b4f      	ldr	r3, [pc, #316]	; (80031e8 <main+0x7d0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	e007      	b.n	80030c0 <main+0x6a8>
 80030b0:	f7fd ff0a 	bl	8000ec8 <display_init>
 80030b4:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <main+0x7d0>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <main+0x7d0>)
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	4b49      	ldr	r3, [pc, #292]	; (80031e8 <main+0x7d0>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d9f3      	bls.n	80030b0 <main+0x698>
 80030c8:	e001      	b.n	80030ce <main+0x6b6>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 80030ca:	f7fd ffd9 	bl	8001080 <display_update>


	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 80030ce:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <main+0x7d8>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2bff      	cmp	r3, #255	; 0xff
 80030d4:	d128      	bne.n	8003128 <main+0x710>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80030d6:	4847      	ldr	r0, [pc, #284]	; (80031f4 <main+0x7dc>)
 80030d8:	f001 fcfc 	bl	8004ad4 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 80030dc:	463b      	mov	r3, r7
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 80030e4:	2101      	movs	r1, #1
 80030e6:	4843      	ldr	r0, [pc, #268]	; (80031f4 <main+0x7dc>)
 80030e8:	f001 f85a 	bl	80041a0 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80030ec:	2101      	movs	r1, #1
 80030ee:	4841      	ldr	r0, [pc, #260]	; (80031f4 <main+0x7dc>)
 80030f0:	f001 fe06 	bl	8004d00 <HAL_ADCEx_InjectedGetValue>
 80030f4:	4603      	mov	r3, r0
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80030fa:	2102      	movs	r1, #2
 80030fc:	483d      	ldr	r0, [pc, #244]	; (80031f4 <main+0x7dc>)
 80030fe:	f001 fdff 	bl	8004d00 <HAL_ADCEx_InjectedGetValue>
 8003102:	4603      	mov	r3, r0
 8003104:	b29b      	uxth	r3, r3
 8003106:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 8003108:	883b      	ldrh	r3, [r7, #0]
 800310a:	09db      	lsrs	r3, r3, #7
 800310c:	b29a      	uxth	r2, r3
 800310e:	4b3a      	ldr	r3, [pc, #232]	; (80031f8 <main+0x7e0>)
 8003110:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 8003112:	887b      	ldrh	r3, [r7, #2]
 8003114:	09db      	lsrs	r3, r3, #7
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <main+0x7e0>)
 800311a:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 800311c:	4835      	ldr	r0, [pc, #212]	; (80031f4 <main+0x7dc>)
 800311e:	f001 fda3 	bl	8004c68 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 8003122:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <main+0x7d8>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003128:	4b34      	ldr	r3, [pc, #208]	; (80031fc <main+0x7e4>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b07      	cmp	r3, #7
 800312e:	d106      	bne.n	800313e <main+0x726>
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <main+0x7e8>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <main+0x726>
 8003138:	4b31      	ldr	r3, [pc, #196]	; (8003200 <main+0x7e8>)
 800313a:	2201      	movs	r2, #1
 800313c:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 800313e:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <main+0x7e4>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800314e:	482d      	ldr	r0, [pc, #180]	; (8003204 <main+0x7ec>)
 8003150:	f002 fe1e 	bl	8005d90 <HAL_GPIO_WritePin>




	  	//	adc_flag=0;
	  		if (adc_flag) {
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <main+0x7f0>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03a      	beq.n	80031d2 <main+0x7ba>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 800315c:	4825      	ldr	r0, [pc, #148]	; (80031f4 <main+0x7dc>)
 800315e:	f001 f99b 	bl	8004498 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 8003162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003166:	4929      	ldr	r1, [pc, #164]	; (800320c <main+0x7f4>)
 8003168:	4822      	ldr	r0, [pc, #136]	; (80031f4 <main+0x7dc>)
 800316a:	f001 f8a5 	bl	80042b8 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 800316e:	4b27      	ldr	r3, [pc, #156]	; (800320c <main+0x7f4>)
 8003170:	673b      	str	r3, [r7, #112]	; 0x70

	  			for (i=0;i<512;i++)
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <main+0x7d0>)
 8003174:	2200      	movs	r2, #0
 8003176:	801a      	strh	r2, [r3, #0]
 8003178:	e023      	b.n	80031c2 <main+0x7aa>
	  			{

	  				uint16_t crap_hold=*click;
 800317a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  			uint16_t crap_hold1=*(++click);
 8003182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003184:	3302      	adds	r3, #2
 8003186:	673b      	str	r3, [r7, #112]	; 0x70
 8003188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	  		click++;
 8003190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003192:	3302      	adds	r3, #2
 8003194:	673b      	str	r3, [r7, #112]	; 0x70

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 8003196:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800319a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800319e:	4413      	add	r3, r2
 80031a0:	1059      	asrs	r1, r3, #1
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <main+0x7d0>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	b289      	uxth	r1, r1
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <main+0x7f8>)
 80031ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <main+0x7f0>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <main+0x7d0>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <main+0x7d0>)
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <main+0x7d0>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ca:	d3d6      	bcc.n	800317a <main+0x762>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 80031cc:	e001      	b.n	80031d2 <main+0x7ba>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 80031ce:	f7fe f9fb 	bl	80015c8 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <main+0x7fc>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f9      	bne.n	80031ce <main+0x7b6>
	  loop_counter++ ;
 80031da:	e6aa      	b.n	8002f32 <main+0x51a>
 80031dc:	20002978 	.word	0x20002978
 80031e0:	20002076 	.word	0x20002076
 80031e4:	20002977 	.word	0x20002977
 80031e8:	20000bdc 	.word	0x20000bdc
 80031ec:	20002085 	.word	0x20002085
 80031f0:	20000bd8 	.word	0x20000bd8
 80031f4:	20003928 	.word	0x20003928
 80031f8:	200001e0 	.word	0x200001e0
 80031fc:	20000bb4 	.word	0x20000bb4
 8003200:	2000207c 	.word	0x2000207c
 8003204:	40020800 	.word	0x40020800
 8003208:	20002d7c 	.word	0x20002d7c
 800320c:	20001428 	.word	0x20001428
 8003210:	2000297c 	.word	0x2000297c
 8003214:	200001ea 	.word	0x200001ea

08003218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b094      	sub	sp, #80	; 0x50
 800321c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800321e:	f107 0320 	add.w	r3, r7, #32
 8003222:	2230      	movs	r2, #48	; 0x30
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f006 f8b2 	bl	8009390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <SystemClock_Config+0xcc>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <SystemClock_Config+0xcc>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	; 0x40
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <SystemClock_Config+0xcc>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003258:	2300      	movs	r3, #0
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <SystemClock_Config+0xd0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <SystemClock_Config+0xd0>)
 8003262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <SystemClock_Config+0xd0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003274:	2302      	movs	r3, #2
 8003276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003278:	2301      	movs	r3, #1
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800327c:	2310      	movs	r3, #16
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003280:	2302      	movs	r3, #2
 8003282:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003284:	2300      	movs	r3, #0
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003288:	2308      	movs	r3, #8
 800328a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800328c:	2364      	movs	r3, #100	; 0x64
 800328e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003290:	2302      	movs	r3, #2
 8003292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003294:	2304      	movs	r3, #4
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003298:	f107 0320 	add.w	r3, r7, #32
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fd51 	bl	8006d44 <HAL_RCC_OscConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80032a8:	f000 faf6 	bl	8003898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ac:	230f      	movs	r3, #15
 80032ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032b0:	2302      	movs	r3, #2
 80032b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	2103      	movs	r1, #3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 ffb2 	bl	8007234 <HAL_RCC_ClockConfig>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80032d6:	f000 fadf 	bl	8003898 <Error_Handler>
  }
}
 80032da:	bf00      	nop
 80032dc:	3750      	adds	r7, #80	; 0x50
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40007000 	.word	0x40007000

080032ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032f2:	f107 0320 	add.w	r3, r7, #32
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003300:	463b      	mov	r3, r7
 8003302:	2220      	movs	r2, #32
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f006 f842 	bl	8009390 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <MX_ADC1_Init+0xfc>)
 800330e:	4a37      	ldr	r2, [pc, #220]	; (80033ec <MX_ADC1_Init+0x100>)
 8003310:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003312:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <MX_ADC1_Init+0xfc>)
 8003314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003318:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <MX_ADC1_Init+0xfc>)
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003320:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <MX_ADC1_Init+0xfc>)
 8003322:	2201      	movs	r2, #1
 8003324:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <MX_ADC1_Init+0xfc>)
 8003328:	2201      	movs	r2, #1
 800332a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800332c:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <MX_ADC1_Init+0xfc>)
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <MX_ADC1_Init+0xfc>)
 8003336:	2200      	movs	r2, #0
 8003338:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <MX_ADC1_Init+0xfc>)
 800333c:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <MX_ADC1_Init+0x104>)
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <MX_ADC1_Init+0xfc>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <MX_ADC1_Init+0xfc>)
 8003348:	2201      	movs	r2, #1
 800334a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800334c:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <MX_ADC1_Init+0xfc>)
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <MX_ADC1_Init+0xfc>)
 8003356:	2200      	movs	r2, #0
 8003358:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800335a:	4823      	ldr	r0, [pc, #140]	; (80033e8 <MX_ADC1_Init+0xfc>)
 800335c:	f000 fe28 	bl	8003fb0 <HAL_ADC_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8003366:	f000 fa97 	bl	8003898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800336a:	2309      	movs	r3, #9
 800336c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003372:	2306      	movs	r3, #6
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003376:	f107 0320 	add.w	r3, r7, #32
 800337a:	4619      	mov	r1, r3
 800337c:	481a      	ldr	r0, [pc, #104]	; (80033e8 <MX_ADC1_Init+0xfc>)
 800337e:	f001 f8f9 	bl	8004574 <HAL_ADC_ConfigChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003388:	f000 fa86 	bl	8003898 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800338c:	2300      	movs	r3, #0
 800338e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003390:	2301      	movs	r3, #1
 8003392:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8003394:	2302      	movs	r3, #2
 8003396:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003398:	2303      	movs	r3, #3
 800339a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MX_ADC1_Init+0x108>)
 80033a2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80033b0:	463b      	mov	r3, r7
 80033b2:	4619      	mov	r1, r3
 80033b4:	480c      	ldr	r0, [pc, #48]	; (80033e8 <MX_ADC1_Init+0xfc>)
 80033b6:	f001 fcdb 	bl	8004d70 <HAL_ADCEx_InjectedConfigChannel>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80033c0:	f000 fa6a 	bl	8003898 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80033c4:	2302      	movs	r3, #2
 80033c6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80033c8:	2302      	movs	r3, #2
 80033ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80033cc:	463b      	mov	r3, r7
 80033ce:	4619      	mov	r1, r3
 80033d0:	4805      	ldr	r0, [pc, #20]	; (80033e8 <MX_ADC1_Init+0xfc>)
 80033d2:	f001 fccd 	bl	8004d70 <HAL_ADCEx_InjectedConfigChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80033dc:	f000 fa5c 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033e0:	bf00      	nop
 80033e2:	3730      	adds	r7, #48	; 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20003928 	.word	0x20003928
 80033ec:	40012000 	.word	0x40012000
 80033f0:	0f000001 	.word	0x0f000001
 80033f4:	000f0001 	.word	0x000f0001

080033f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <MX_I2C2_Init+0x50>)
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <MX_I2C2_Init+0x54>)
 8003400:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_I2C2_Init+0x50>)
 8003404:	4a12      	ldr	r2, [pc, #72]	; (8003450 <MX_I2C2_Init+0x58>)
 8003406:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <MX_I2C2_Init+0x50>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_I2C2_Init+0x50>)
 8003410:	2200      	movs	r2, #0
 8003412:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_I2C2_Init+0x50>)
 8003416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800341a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <MX_I2C2_Init+0x50>)
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_I2C2_Init+0x50>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003428:	4b07      	ldr	r3, [pc, #28]	; (8003448 <MX_I2C2_Init+0x50>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_I2C2_Init+0x50>)
 8003430:	2200      	movs	r2, #0
 8003432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003434:	4804      	ldr	r0, [pc, #16]	; (8003448 <MX_I2C2_Init+0x50>)
 8003436:	f002 fcc5 	bl	8005dc4 <HAL_I2C_Init>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003440:	f000 fa2a 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200039d0 	.word	0x200039d0
 800344c:	40005800 	.word	0x40005800
 8003450:	00061a80 	.word	0x00061a80

08003454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <MX_SPI1_Init+0x64>)
 800345a:	4a18      	ldr	r2, [pc, #96]	; (80034bc <MX_SPI1_Init+0x68>)
 800345c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <MX_SPI1_Init+0x64>)
 8003460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <MX_SPI1_Init+0x64>)
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <MX_SPI1_Init+0x64>)
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <MX_SPI1_Init+0x64>)
 8003474:	2200      	movs	r2, #0
 8003476:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <MX_SPI1_Init+0x64>)
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <MX_SPI1_Init+0x64>)
 8003480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003484:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <MX_SPI1_Init+0x64>)
 8003488:	2208      	movs	r2, #8
 800348a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <MX_SPI1_Init+0x64>)
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <MX_SPI1_Init+0x64>)
 8003494:	2200      	movs	r2, #0
 8003496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <MX_SPI1_Init+0x64>)
 800349a:	2200      	movs	r2, #0
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <MX_SPI1_Init+0x64>)
 80034a0:	220a      	movs	r2, #10
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034a4:	4804      	ldr	r0, [pc, #16]	; (80034b8 <MX_SPI1_Init+0x64>)
 80034a6:	f004 f891 	bl	80075cc <HAL_SPI_Init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80034b0:	f000 f9f2 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20003a24 	.word	0x20003a24
 80034bc:	40013000 	.word	0x40013000

080034c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <MX_SPI2_Init+0x64>)
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <MX_SPI2_Init+0x68>)
 80034c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034ca:	4b16      	ldr	r3, [pc, #88]	; (8003524 <MX_SPI2_Init+0x64>)
 80034cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <MX_SPI2_Init+0x64>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034d8:	4b12      	ldr	r3, [pc, #72]	; (8003524 <MX_SPI2_Init+0x64>)
 80034da:	2200      	movs	r2, #0
 80034dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <MX_SPI2_Init+0x64>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <MX_SPI2_Init+0x64>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034ea:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <MX_SPI2_Init+0x64>)
 80034ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <MX_SPI2_Init+0x64>)
 80034f4:	2230      	movs	r2, #48	; 0x30
 80034f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <MX_SPI2_Init+0x64>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <MX_SPI2_Init+0x64>)
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <MX_SPI2_Init+0x64>)
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <MX_SPI2_Init+0x64>)
 800350c:	220a      	movs	r2, #10
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003510:	4804      	ldr	r0, [pc, #16]	; (8003524 <MX_SPI2_Init+0x64>)
 8003512:	f004 f85b 	bl	80075cc <HAL_SPI_Init>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800351c:	f000 f9bc 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20003a7c 	.word	0x20003a7c
 8003528:	40003800 	.word	0x40003800

0800352c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	; 0x30
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f005 ff28 	bl	8009390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003548:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <MX_TIM2_Init+0xa4>)
 800354a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800354e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003550:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <MX_TIM2_Init+0xa4>)
 8003552:	2200      	movs	r2, #0
 8003554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003556:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <MX_TIM2_Init+0xa4>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <MX_TIM2_Init+0xa4>)
 800355e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <MX_TIM2_Init+0xa4>)
 8003566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800356a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <MX_TIM2_Init+0xa4>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003572:	2301      	movs	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003576:	2302      	movs	r3, #2
 8003578:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800357a:	2301      	movs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003582:	2302      	movs	r3, #2
 8003584:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003586:	2302      	movs	r3, #2
 8003588:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800358a:	2301      	movs	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800358e:	2300      	movs	r3, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003592:	2302      	movs	r3, #2
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	4619      	mov	r1, r3
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <MX_TIM2_Init+0xa4>)
 800359e:	f004 ffd3 	bl	8008548 <HAL_TIM_Encoder_Init>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80035a8:	f000 f976 	bl	8003898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_TIM2_Init+0xa4>)
 80035ba:	f005 fdf1 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80035c4:	f000 f968 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80035c8:	bf00      	nop
 80035ca:	3730      	adds	r7, #48	; 0x30
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20003ad4 	.word	0x20003ad4

080035d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08e      	sub	sp, #56	; 0x38
 80035d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e8:	f107 0320 	add.w	r3, r7, #32
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
 8003600:	615a      	str	r2, [r3, #20]
 8003602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003604:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003606:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <MX_TIM3_Init+0xe8>)
 8003608:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <MX_TIM3_Init+0xe4>)
 800360c:	2200      	movs	r2, #0
 800360e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003610:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003616:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003618:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800361c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361e:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800362a:	4823      	ldr	r0, [pc, #140]	; (80036b8 <MX_TIM3_Init+0xe4>)
 800362c:	f004 fd76 	bl	800811c <HAL_TIM_Base_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003636:	f000 f92f 	bl	8003898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800363a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003644:	4619      	mov	r1, r3
 8003646:	481c      	ldr	r0, [pc, #112]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003648:	f005 f9ee 	bl	8008a28 <HAL_TIM_ConfigClockSource>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003652:	f000 f921 	bl	8003898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003656:	4818      	ldr	r0, [pc, #96]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003658:	f004 fe6c 	bl	8008334 <HAL_TIM_PWM_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003662:	f000 f919 	bl	8003898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800366e:	f107 0320 	add.w	r3, r7, #32
 8003672:	4619      	mov	r1, r3
 8003674:	4810      	ldr	r0, [pc, #64]	; (80036b8 <MX_TIM3_Init+0xe4>)
 8003676:	f005 fd93 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003680:	f000 f90a 	bl	8003898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003684:	2370      	movs	r3, #112	; 0x70
 8003686:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	2208      	movs	r2, #8
 8003698:	4619      	mov	r1, r3
 800369a:	4807      	ldr	r0, [pc, #28]	; (80036b8 <MX_TIM3_Init+0xe4>)
 800369c:	f005 f902 	bl	80088a4 <HAL_TIM_PWM_ConfigChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80036a6:	f000 f8f7 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80036aa:	4803      	ldr	r0, [pc, #12]	; (80036b8 <MX_TIM3_Init+0xe4>)
 80036ac:	f000 fb32 	bl	8003d14 <HAL_TIM_MspPostInit>

}
 80036b0:	bf00      	nop
 80036b2:	3738      	adds	r7, #56	; 0x38
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20003b1c 	.word	0x20003b1c
 80036bc:	40000400 	.word	0x40000400

080036c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f005 fe5e 	bl	8009390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <MX_TIM4_Init+0xa0>)
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <MX_TIM4_Init+0xa4>)
 80036e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80036e2:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <MX_TIM4_Init+0xa0>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <MX_TIM4_Init+0xa0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	; (8003760 <MX_TIM4_Init+0xa0>)
 80036f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <MX_TIM4_Init+0xa0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <MX_TIM4_Init+0xa0>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003702:	2301      	movs	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003706:	2302      	movs	r3, #2
 8003708:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800370a:	2301      	movs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003712:	2302      	movs	r3, #2
 8003714:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003716:	2302      	movs	r3, #2
 8003718:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800371a:	2301      	movs	r3, #1
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800371e:	2300      	movs	r3, #0
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003722:	2302      	movs	r3, #2
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003726:	f107 030c 	add.w	r3, r7, #12
 800372a:	4619      	mov	r1, r3
 800372c:	480c      	ldr	r0, [pc, #48]	; (8003760 <MX_TIM4_Init+0xa0>)
 800372e:	f004 ff0b 	bl	8008548 <HAL_TIM_Encoder_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003738:	f000 f8ae 	bl	8003898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4805      	ldr	r0, [pc, #20]	; (8003760 <MX_TIM4_Init+0xa0>)
 800374a:	f005 fd29 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003754:	f000 f8a0 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003758:	bf00      	nop
 800375a:	3730      	adds	r7, #48	; 0x30
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20003b64 	.word	0x20003b64
 8003764:	40000800 	.word	0x40000800

08003768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <MX_DMA_Init+0x3c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <MX_DMA_Init+0x3c>)
 8003778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <MX_DMA_Init+0x3c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	203c      	movs	r0, #60	; 0x3c
 8003790:	f001 fd63 	bl	800525a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003794:	203c      	movs	r0, #60	; 0x3c
 8003796:	f001 fd7c 	bl	8005292 <HAL_NVIC_EnableIRQ>

}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800

080037a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <MX_GPIO_Init+0xc4>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a29      	ldr	r2, [pc, #164]	; (800386c <MX_GPIO_Init+0xc4>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b27      	ldr	r3, [pc, #156]	; (800386c <MX_GPIO_Init+0xc4>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <MX_GPIO_Init+0xc4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	4a22      	ldr	r2, [pc, #136]	; (800386c <MX_GPIO_Init+0xc4>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <MX_GPIO_Init+0xc4>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <MX_GPIO_Init+0xc4>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a1b      	ldr	r2, [pc, #108]	; (800386c <MX_GPIO_Init+0xc4>)
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <MX_GPIO_Init+0xc4>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003818:	4815      	ldr	r0, [pc, #84]	; (8003870 <MX_GPIO_Init+0xc8>)
 800381a:	f002 fab9 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800381e:	2201      	movs	r2, #1
 8003820:	2110      	movs	r1, #16
 8003822:	4814      	ldr	r0, [pc, #80]	; (8003874 <MX_GPIO_Init+0xcc>)
 8003824:	f002 fab4 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800382c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382e:	2301      	movs	r3, #1
 8003830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	4619      	mov	r1, r3
 8003840:	480b      	ldr	r0, [pc, #44]	; (8003870 <MX_GPIO_Init+0xc8>)
 8003842:	f002 f921 	bl	8005a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8003846:	2310      	movs	r3, #16
 8003848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800384a:	2301      	movs	r3, #1
 800384c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003852:	2303      	movs	r3, #3
 8003854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4619      	mov	r1, r3
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <MX_GPIO_Init+0xcc>)
 800385e:	f002 f913 	bl	8005a88 <HAL_GPIO_Init>

}
 8003862:	bf00      	nop
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40020800 	.word	0x40020800
 8003874:	40020000 	.word	0x40020000

08003878 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]


}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20002d7c 	.word	0x20002d7c

08003898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800389c:	b672      	cpsid	i
}
 800389e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <Error_Handler+0x8>
	...

080038a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_MspInit+0x4c>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	4a0f      	ldr	r2, [pc, #60]	; (80038f0 <HAL_MspInit+0x4c>)
 80038b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_MspInit+0x4c>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_MspInit+0x4c>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_MspInit+0x4c>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6413      	str	r3, [r2, #64]	; 0x40
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_MspInit+0x4c>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <HAL_ADC_MspInit+0x110>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d171      	bne.n	80039fa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4a3a      	ldr	r2, [pc, #232]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 8003920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003924:	6453      	str	r3, [r2, #68]	; 0x44
 8003926:	4b38      	ldr	r3, [pc, #224]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a33      	ldr	r2, [pc, #204]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_ADC_MspInit+0x114>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 800396a:	2305      	movs	r3, #5
 800396c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800396e:	2303      	movs	r3, #3
 8003970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003976:	f107 0314 	add.w	r3, r7, #20
 800397a:	4619      	mov	r1, r3
 800397c:	4823      	ldr	r0, [pc, #140]	; (8003a0c <HAL_ADC_MspInit+0x118>)
 800397e:	f002 f883 	bl	8005a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003982:	2302      	movs	r3, #2
 8003984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003986:	2303      	movs	r3, #3
 8003988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	f107 0314 	add.w	r3, r7, #20
 8003992:	4619      	mov	r1, r3
 8003994:	481e      	ldr	r0, [pc, #120]	; (8003a10 <HAL_ADC_MspInit+0x11c>)
 8003996:	f002 f877 	bl	8005a88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <HAL_ADC_MspInit+0x124>)
 800399e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039da:	2200      	movs	r2, #0
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80039de:	480d      	ldr	r0, [pc, #52]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039e0:	f001 fc72 	bl	80052c8 <HAL_DMA_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80039ea:	f7ff ff55 	bl	8003898 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
 80039f4:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_ADC_MspInit+0x120>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40012000 	.word	0x40012000
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	20003970 	.word	0x20003970
 8003a18:	40026470 	.word	0x40026470

08003a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_I2C_MspInit+0xa8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d13d      	bne.n	8003aba <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <HAL_I2C_MspInit+0xac>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	4a20      	ldr	r2, [pc, #128]	; (8003ac8 <HAL_I2C_MspInit+0xac>)
 8003a48:	f043 0302 	orr.w	r3, r3, #2
 8003a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_I2C_MspInit+0xac>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a60:	2312      	movs	r3, #18
 8003a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003a6c:	2309      	movs	r3, #9
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	4619      	mov	r1, r3
 8003a76:	4815      	ldr	r0, [pc, #84]	; (8003acc <HAL_I2C_MspInit+0xb0>)
 8003a78:	f002 f806 	bl	8005a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a82:	2312      	movs	r3, #18
 8003a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	4619      	mov	r1, r3
 8003a98:	480c      	ldr	r0, [pc, #48]	; (8003acc <HAL_I2C_MspInit+0xb0>)
 8003a9a:	f001 fff5 	bl	8005a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_I2C_MspInit+0xac>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <HAL_I2C_MspInit+0xac>)
 8003aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_I2C_MspInit+0xac>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	; 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40005800 	.word	0x40005800
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40020400 	.word	0x40020400

08003ad0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a32      	ldr	r2, [pc, #200]	; (8003bb8 <HAL_SPI_MspInit+0xe8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d12c      	bne.n	8003b4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b00:	6453      	str	r3, [r2, #68]	; 0x44
 8003b02:	4b2e      	ldr	r3, [pc, #184]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003b2a:	23e0      	movs	r3, #224	; 0xe0
 8003b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b3e:	f107 031c 	add.w	r3, r7, #28
 8003b42:	4619      	mov	r1, r3
 8003b44:	481e      	ldr	r0, [pc, #120]	; (8003bc0 <HAL_SPI_MspInit+0xf0>)
 8003b46:	f001 ff9f 	bl	8005a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b4a:	e031      	b.n	8003bb0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <HAL_SPI_MspInit+0xf4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12c      	bne.n	8003bb0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	6313      	str	r3, [r2, #48]	; 0x30
 8003b82:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <HAL_SPI_MspInit+0xec>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8003b8e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b94:	2302      	movs	r3, #2
 8003b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ba0:	2305      	movs	r3, #5
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <HAL_SPI_MspInit+0xf8>)
 8003bac:	f001 ff6c 	bl	8005a88 <HAL_GPIO_Init>
}
 8003bb0:	bf00      	nop
 8003bb2:	3730      	adds	r7, #48	; 0x30
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013000 	.word	0x40013000
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020000 	.word	0x40020000
 8003bc4:	40003800 	.word	0x40003800
 8003bc8:	40020400 	.word	0x40020400

08003bcc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d12d      	bne.n	8003c4a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a28      	ldr	r2, [pc, #160]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8003c26:	f248 0302 	movw	r3, #32770	; 0x8002
 8003c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c30:	2301      	movs	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3c:	f107 031c 	add.w	r3, r7, #28
 8003c40:	4619      	mov	r1, r3
 8003c42:	481d      	ldr	r0, [pc, #116]	; (8003cb8 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c44:	f001 ff20 	bl	8005a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c48:	e030      	b.n	8003cac <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_TIM_Encoder_MspInit+0xf0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d12b      	bne.n	8003cac <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6413      	str	r3, [r2, #64]	; 0x40
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c7a:	f043 0302 	orr.w	r3, r3, #2
 8003c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c8c:	23c0      	movs	r3, #192	; 0xc0
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4806      	ldr	r0, [pc, #24]	; (8003cc0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003ca8:	f001 feee 	bl	8005a88 <HAL_GPIO_Init>
}
 8003cac:	bf00      	nop
 8003cae:	3730      	adds	r7, #48	; 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40020400 	.word	0x40020400

08003cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <HAL_TIM_Base_MspInit+0x48>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d115      	bne.n	8003d02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_TIM_Base_MspInit+0x4c>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <HAL_TIM_Base_MspInit+0x4c>)
 8003ce0:	f043 0302 	orr.w	r3, r3, #2
 8003ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_TIM_Base_MspInit+0x4c>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	201d      	movs	r0, #29
 8003cf8:	f001 faaf 	bl	800525a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003cfc:	201d      	movs	r0, #29
 8003cfe:	f001 fac8 	bl	8005292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <HAL_TIM_MspPostInit+0x68>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d11d      	bne.n	8003d72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_TIM_MspPostInit+0x6c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_TIM_MspPostInit+0x6c>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	6313      	str	r3, [r2, #48]	; 0x30
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_TIM_MspPostInit+0x6c>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d52:	2301      	movs	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d56:	2302      	movs	r3, #2
 8003d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d62:	2302      	movs	r3, #2
 8003d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d66:	f107 030c 	add.w	r3, r7, #12
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4805      	ldr	r0, [pc, #20]	; (8003d84 <HAL_TIM_MspPostInit+0x70>)
 8003d6e:	f001 fe8b 	bl	8005a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003d72:	bf00      	nop
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40020400 	.word	0x40020400

08003d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d8c:	e7fe      	b.n	8003d8c <NMI_Handler+0x4>

08003d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d92:	e7fe      	b.n	8003d92 <HardFault_Handler+0x4>

08003d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d98:	e7fe      	b.n	8003d98 <MemManage_Handler+0x4>

08003d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <BusFault_Handler+0x4>

08003da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da4:	e7fe      	b.n	8003da4 <UsageFault_Handler+0x4>

08003da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd4:	f000 f8a8 	bl	8003f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <TIM3_IRQHandler+0x10>)
 8003de2:	f004 fc57 	bl	8008694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20003b1c 	.word	0x20003b1c

08003df0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <DMA2_Stream4_IRQHandler+0x10>)
 8003df6:	f001 fbdd 	bl	80055b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20003970 	.word	0x20003970

08003e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <SystemInit+0x28>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <SystemInit+0x28>)
 8003e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <SystemInit+0x28>)
 8003e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e1e:	609a      	str	r2, [r3, #8]
#endif
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e36:	e003      	b.n	8003e40 <LoopCopyDataInit>

08003e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e3e:	3104      	adds	r1, #4

08003e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e40:	480b      	ldr	r0, [pc, #44]	; (8003e70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e48:	d3f6      	bcc.n	8003e38 <CopyDataInit>
  ldr  r2, =_sbss
 8003e4a:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e4c:	e002      	b.n	8003e54 <LoopFillZerobss>

08003e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e50:	f842 3b04 	str.w	r3, [r2], #4

08003e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e58:	d3f9      	bcc.n	8003e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e5a:	f7ff ffd3 	bl	8003e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e5e:	f005 fa65 	bl	800932c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e62:	f7fe fdd9 	bl	8002a18 <main>
  bx  lr    
 8003e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e6c:	0800a854 	.word	0x0800a854
  ldr  r0, =_sdata
 8003e70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e74:	200006f8 	.word	0x200006f8
  ldr  r2, =_sbss
 8003e78:	200006f8 	.word	0x200006f8
  ldr  r3, = _ebss
 8003e7c:	20003bb0 	.word	0x20003bb0

08003e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC_IRQHandler>
	...

08003e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_Init+0x40>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <HAL_Init+0x40>)
 8003e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <HAL_Init+0x40>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <HAL_Init+0x40>)
 8003e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_Init+0x40>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_Init+0x40>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eac:	2003      	movs	r0, #3
 8003eae:	f001 f9c9 	bl	8005244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f000 f808 	bl	8003ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb8:	f7ff fcf4 	bl	80038a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023c00 	.word	0x40023c00

08003ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_InitTick+0x54>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <HAL_InitTick+0x58>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f9e1 	bl	80052ae <HAL_SYSTICK_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00e      	b.n	8003f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b0f      	cmp	r3, #15
 8003efa:	d80a      	bhi.n	8003f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003efc:	2200      	movs	r2, #0
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	f001 f9a9 	bl	800525a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <HAL_InitTick+0x5c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	200006ec 	.word	0x200006ec
 8003f20:	200006f4 	.word	0x200006f4
 8003f24:	200006f0 	.word	0x200006f0

08003f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_IncTick+0x20>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_IncTick+0x24>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <HAL_IncTick+0x24>)
 8003f3a:	6013      	str	r3, [r2, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	200006f4 	.word	0x200006f4
 8003f4c:	20003bac 	.word	0x20003bac

08003f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return uwTick;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <HAL_GetTick+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20003bac 	.word	0x20003bac

08003f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7ff ffee 	bl	8003f50 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d005      	beq.n	8003f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_Delay+0x44>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f8e:	bf00      	nop
 8003f90:	f7ff ffde 	bl	8003f50 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d8f7      	bhi.n	8003f90 <HAL_Delay+0x28>
  {
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200006f4 	.word	0x200006f4

08003fb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e033      	b.n	800402e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fc90 	bl	80038f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d118      	bne.n	8004020 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ff6:	f023 0302 	bic.w	r3, r3, #2
 8003ffa:	f043 0202 	orr.w	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fbe8 	bl	80047d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
 800401e:	e001      	b.n	8004024 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_ADC_Start+0x1a>
 800404e:	2302      	movs	r3, #2
 8004050:	e097      	b.n	8004182 <HAL_ADC_Start+0x14a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b01      	cmp	r3, #1
 8004066:	d018      	beq.n	800409a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004078:	4b45      	ldr	r3, [pc, #276]	; (8004190 <HAL_ADC_Start+0x158>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a45      	ldr	r2, [pc, #276]	; (8004194 <HAL_ADC_Start+0x15c>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	0c9a      	lsrs	r2, r3, #18
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800408c:	e002      	b.n	8004094 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3b01      	subs	r3, #1
 8004092:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f9      	bne.n	800408e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d15f      	bne.n	8004168 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e6:	d106      	bne.n	80040f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f023 0206 	bic.w	r2, r3, #6
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44
 80040f4:	e002      	b.n	80040fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_ADC_Start+0x160>)
 8004106:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004110:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d129      	bne.n	8004180 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	e020      	b.n	8004180 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a16      	ldr	r2, [pc, #88]	; (800419c <HAL_ADC_Start+0x164>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d11b      	bne.n	8004180 <HAL_ADC_Start+0x148>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d114      	bne.n	8004180 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	e00b      	b.n	8004180 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	200006ec 	.word	0x200006ec
 8004194:	431bde83 	.word	0x431bde83
 8004198:	40012300 	.word	0x40012300
 800419c:	40012000 	.word	0x40012000

080041a0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d113      	bne.n	80041e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	d10b      	bne.n	80041e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e063      	b.n	80042ae <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80041e6:	f7ff feb3 	bl	8003f50 <HAL_GetTick>
 80041ea:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041ec:	e021      	b.n	8004232 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d01d      	beq.n	8004232 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_ADC_PollForConversion+0x6c>
 80041fc:	f7ff fea8 	bl	8003f50 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d212      	bcs.n	8004232 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d00b      	beq.n	8004232 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0204 	orr.w	r2, r3, #4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e03d      	b.n	80042ae <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d1d6      	bne.n	80041ee <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0212 	mvn.w	r2, #18
 8004248:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d123      	bne.n	80042ac <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11f      	bne.n	80042ac <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004284:	2b00      	cmp	r3, #0
 8004286:	d111      	bne.n	80042ac <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f043 0201 	orr.w	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_Start_DMA+0x1e>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e0ce      	b.n	8004474 <HAL_ADC_Start_DMA+0x1bc>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d018      	beq.n	800431e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80042fc:	4b5f      	ldr	r3, [pc, #380]	; (800447c <HAL_ADC_Start_DMA+0x1c4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5f      	ldr	r2, [pc, #380]	; (8004480 <HAL_ADC_Start_DMA+0x1c8>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	0c9a      	lsrs	r2, r3, #18
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004310:	e002      	b.n	8004318 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3b01      	subs	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f9      	bne.n	8004312 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432c:	d107      	bne.n	800433e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	f040 8086 	bne.w	800445a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004378:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d106      	bne.n	800439c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f023 0206 	bic.w	r2, r3, #6
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
 800439a:	e002      	b.n	80043a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_ADC_Start_DMA+0x1cc>)
 80043ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	4a35      	ldr	r2, [pc, #212]	; (8004488 <HAL_ADC_Start_DMA+0x1d0>)
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <HAL_ADC_Start_DMA+0x1d4>)
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	4a33      	ldr	r2, [pc, #204]	; (8004490 <HAL_ADC_Start_DMA+0x1d8>)
 80043c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80043ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80043de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	334c      	adds	r3, #76	; 0x4c
 80043fa:	4619      	mov	r1, r3
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f001 f810 	bl	8005424 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d129      	bne.n	8004472 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	e020      	b.n	8004472 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_ADC_Start_DMA+0x1dc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d11b      	bne.n	8004472 <HAL_ADC_Start_DMA+0x1ba>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d114      	bne.n	8004472 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	e00b      	b.n	8004472 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f043 0210 	orr.w	r2, r3, #16
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f043 0201 	orr.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200006ec 	.word	0x200006ec
 8004480:	431bde83 	.word	0x431bde83
 8004484:	40012300 	.word	0x40012300
 8004488:	080049d1 	.word	0x080049d1
 800448c:	08004a8b 	.word	0x08004a8b
 8004490:	08004aa7 	.word	0x08004aa7
 8004494:	40012000 	.word	0x40012000

08004498 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_Stop_DMA+0x1a>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e048      	b.n	8004544 <HAL_ADC_Stop_DMA+0xac>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d130      	bne.n	800453a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d10f      	bne.n	8004516 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ffea 	bl	80054d4 <HAL_DMA_Abort>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004524:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x1c>
 800458c:	2302      	movs	r3, #2
 800458e:	e113      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x244>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b09      	cmp	r3, #9
 800459e:	d925      	bls.n	80045ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68d9      	ldr	r1, [r3, #12]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	4613      	mov	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	4413      	add	r3, r2
 80045b4:	3b1e      	subs	r3, #30
 80045b6:	2207      	movs	r2, #7
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43da      	mvns	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	400a      	ands	r2, r1
 80045c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68d9      	ldr	r1, [r3, #12]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4618      	mov	r0, r3
 80045d8:	4603      	mov	r3, r0
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4403      	add	r3, r0
 80045de:	3b1e      	subs	r3, #30
 80045e0:	409a      	lsls	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e022      	b.n	8004632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6919      	ldr	r1, [r3, #16]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	2207      	movs	r2, #7
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43da      	mvns	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	400a      	ands	r2, r1
 800460e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6919      	ldr	r1, [r3, #16]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	4618      	mov	r0, r3
 8004622:	4603      	mov	r3, r0
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4403      	add	r3, r0
 8004628:	409a      	lsls	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b06      	cmp	r3, #6
 8004638:	d824      	bhi.n	8004684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	3b05      	subs	r3, #5
 800464c:	221f      	movs	r2, #31
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	400a      	ands	r2, r1
 800465a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	4618      	mov	r0, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	3b05      	subs	r3, #5
 8004676:	fa00 f203 	lsl.w	r2, r0, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	635a      	str	r2, [r3, #52]	; 0x34
 8004682:	e04c      	b.n	800471e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d824      	bhi.n	80046d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	3b23      	subs	r3, #35	; 0x23
 800469e:	221f      	movs	r2, #31
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43da      	mvns	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	400a      	ands	r2, r1
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	4618      	mov	r0, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	3b23      	subs	r3, #35	; 0x23
 80046c8:	fa00 f203 	lsl.w	r2, r0, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
 80046d4:	e023      	b.n	800471e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	3b41      	subs	r3, #65	; 0x41
 80046e8:	221f      	movs	r2, #31
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43da      	mvns	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	400a      	ands	r2, r1
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	4618      	mov	r0, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	3b41      	subs	r3, #65	; 0x41
 8004712:	fa00 f203 	lsl.w	r2, r0, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_ADC_ConfigChannel+0x250>)
 8004720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <HAL_ADC_ConfigChannel+0x254>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10f      	bne.n	800474c <HAL_ADC_ConfigChannel+0x1d8>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b12      	cmp	r3, #18
 8004732:	d10b      	bne.n	800474c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <HAL_ADC_ConfigChannel+0x254>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d12b      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x23a>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <HAL_ADC_ConfigChannel+0x258>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <HAL_ADC_ConfigChannel+0x1f4>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b11      	cmp	r3, #17
 8004766:	d122      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a11      	ldr	r2, [pc, #68]	; (80047cc <HAL_ADC_ConfigChannel+0x258>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d111      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_ADC_ConfigChannel+0x25c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <HAL_ADC_ConfigChannel+0x260>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	0c9a      	lsrs	r2, r3, #18
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047a0:	e002      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f9      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40012300 	.word	0x40012300
 80047c8:	40012000 	.word	0x40012000
 80047cc:	10000012 	.word	0x10000012
 80047d0:	200006ec 	.word	0x200006ec
 80047d4:	431bde83 	.word	0x431bde83

080047d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047e0:	4b79      	ldr	r3, [pc, #484]	; (80049c8 <ADC_Init+0x1f0>)
 80047e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800480c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	021a      	lsls	r2, r3, #8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004830:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6899      	ldr	r1, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	4a58      	ldr	r2, [pc, #352]	; (80049cc <ADC_Init+0x1f4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d022      	beq.n	80048b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800487e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6899      	ldr	r1, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6899      	ldr	r1, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	e00f      	b.n	80048d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0202 	bic.w	r2, r2, #2
 80048e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6899      	ldr	r1, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7e1b      	ldrb	r3, [r3, #24]
 80048f0:	005a      	lsls	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004912:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	3b01      	subs	r3, #1
 8004930:	035a      	lsls	r2, r3, #13
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	e007      	b.n	800494c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	3b01      	subs	r3, #1
 8004968:	051a      	lsls	r2, r3, #20
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004980:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800498e:	025a      	lsls	r2, r3, #9
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6899      	ldr	r1, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	029a      	lsls	r2, r3, #10
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40012300 	.word	0x40012300
 80049cc:	0f000001 	.word	0x0f000001

080049d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d13c      	bne.n	8004a64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12b      	bne.n	8004a5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d127      	bne.n	8004a5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d006      	beq.n	8004a28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0220 	bic.w	r2, r2, #32
 8004a36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7fe ff0b 	bl	8003878 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a62:	e00e      	b.n	8004a82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff fd75 	bl	8004560 <HAL_ADC_ErrorCallback>
}
 8004a76:	e004      	b.n	8004a82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fd57 	bl	800454c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f043 0204 	orr.w	r2, r3, #4
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff fd4a 	bl	8004560 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_ADCEx_InjectedStart+0x22>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e0aa      	b.n	8004c4c <HAL_ADCEx_InjectedStart+0x178>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d018      	beq.n	8004b3e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b1c:	4b4e      	ldr	r3, [pc, #312]	; (8004c58 <HAL_ADCEx_InjectedStart+0x184>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a4e      	ldr	r2, [pc, #312]	; (8004c5c <HAL_ADCEx_InjectedStart+0x188>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	0c9a      	lsrs	r2, r3, #18
 8004b28:	4613      	mov	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004b30:	e002      	b.n	8004b38 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f9      	bne.n	8004b32 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d172      	bne.n	8004c32 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0204 	mvn.w	r2, #4
 8004b82:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b84:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <HAL_ADCEx_InjectedStart+0x18c>)
 8004b86:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d124      	bne.n	8004bde <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d041      	beq.n	8004c4a <HAL_ADCEx_InjectedStart+0x176>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03e      	beq.n	8004c4a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	e035      	b.n	8004c4a <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf0c      	ite	eq
 8004c02:	2301      	moveq	r3, #1
 8004c04:	2300      	movne	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <HAL_ADCEx_InjectedStart+0x190>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d11a      	bne.n	8004c4a <HAL_ADCEx_InjectedStart+0x176>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <HAL_ADCEx_InjectedStart+0x176>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d014      	beq.n	8004c4a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	e00b      	b.n	8004c4a <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f043 0210 	orr.w	r2, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f043 0201 	orr.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	200006ec 	.word	0x200006ec
 8004c5c:	431bde83 	.word	0x431bde83
 8004c60:	40012300 	.word	0x40012300
 8004c64:	40012000 	.word	0x40012000

08004c68 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADCEx_InjectedStop+0x1a>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e037      	b.n	8004cf2 <HAL_ADCEx_InjectedStop+0x8a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d120      	bne.n	8004cd8 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d119      	bne.n	8004cd8 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d112      	bne.n	8004ce8 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004cd6:	e007      	b.n	8004ce8 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0204 	mvn.w	r2, #4
 8004d16:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d81f      	bhi.n	8004d60 <HAL_ADCEx_InjectedGetValue+0x60>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <HAL_ADCEx_InjectedGetValue+0x28>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d57 	.word	0x08004d57
 8004d2c:	08004d4d 	.word	0x08004d4d
 8004d30:	08004d43 	.word	0x08004d43
 8004d34:	08004d39 	.word	0x08004d39
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004d40:	e00f      	b.n	8004d62 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8004d4a:	e00a      	b.n	8004d62 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004d54:	e005      	b.n	8004d62 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004d5e:	e000      	b.n	8004d62 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8004d60:	bf00      	nop
  }
  return tmp;
 8004d62:	68fb      	ldr	r3, [r7, #12]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e17e      	b.n	8005086 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	d925      	bls.n	8004de4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68d9      	ldr	r1, [r3, #12]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	3b1e      	subs	r3, #30
 8004dae:	2207      	movs	r2, #7
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43da      	mvns	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	400a      	ands	r2, r1
 8004dbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68d9      	ldr	r1, [r3, #12]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4618      	mov	r0, r3
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4403      	add	r3, r0
 8004dd6:	3b1e      	subs	r3, #30
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	e022      	b.n	8004e2a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6919      	ldr	r1, [r3, #16]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	4613      	mov	r3, r2
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	2207      	movs	r2, #7
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	400a      	ands	r2, r1
 8004e06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6919      	ldr	r1, [r3, #16]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4618      	mov	r0, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4403      	add	r3, r0
 8004e20:	409a      	lsls	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	051a      	lsls	r2, r3, #20
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	3303      	adds	r3, #3
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	221f      	movs	r2, #31
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	400a      	ands	r2, r1
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	4618      	mov	r0, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	3303      	adds	r3, #3
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	fa00 f203 	lsl.w	r2, r0, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	4a75      	ldr	r2, [pc, #468]	; (8005094 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d022      	beq.n	8004f08 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6899      	ldr	r1, [r3, #8]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004ef2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6899      	ldr	r1, [r3, #8]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
 8004f06:	e00f      	b.n	8004f28 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004f16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004f26:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	7d5b      	ldrb	r3, [r3, #21]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	e007      	b.n	8004f52 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f50:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	7d1b      	ldrb	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	e007      	b.n	8004f7c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f7a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d02e      	beq.n	8004fe2 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d840      	bhi.n	800500a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d002      	beq.n	8004f92 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d014      	beq.n	8004fba <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004f90:	e03b      	b.n	800500a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004fa0:	f023 030f 	bic.w	r3, r3, #15
 8004fa4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6959      	ldr	r1, [r3, #20]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	615a      	str	r2, [r3, #20]
      break;
 8004fb8:	e03b      	b.n	8005032 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004fc8:	f023 030f 	bic.w	r3, r3, #15
 8004fcc:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6999      	ldr	r1, [r3, #24]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	619a      	str	r2, [r3, #24]
      break;
 8004fe0:	e027      	b.n	8005032 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ff0:	f023 030f 	bic.w	r3, r3, #15
 8004ff4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	61da      	str	r2, [r3, #28]
      break;
 8005008:	e013      	b.n	8005032 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005018:	f023 030f 	bic.w	r3, r3, #15
 800501c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6a19      	ldr	r1, [r3, #32]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	621a      	str	r2, [r3, #32]
      break;
 8005030:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005032:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005034:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a18      	ldr	r2, [pc, #96]	; (800509c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d109      	bne.n	8005054 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b12      	cmp	r3, #18
 8005046:	d105      	bne.n	8005054 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a10      	ldr	r2, [pc, #64]	; (800509c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10e      	bne.n	800507c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a0f      	ldr	r2, [pc, #60]	; (80050a0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b11      	cmp	r3, #17
 800506e:	d105      	bne.n	800507c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	000f0001 	.word	0x000f0001
 8005098:	40012300 	.word	0x40012300
 800509c:	40012000 	.word	0x40012000
 80050a0:	10000012 	.word	0x10000012

080050a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <__NVIC_SetPriorityGrouping+0x44>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050c0:	4013      	ands	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050d6:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <__NVIC_SetPriorityGrouping+0x44>)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	60d3      	str	r3, [r2, #12]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050f0:	4b04      	ldr	r3, [pc, #16]	; (8005104 <__NVIC_GetPriorityGrouping+0x18>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	0a1b      	lsrs	r3, r3, #8
 80050f6:	f003 0307 	and.w	r3, r3, #7
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	e000ed00 	.word	0xe000ed00

08005108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	2b00      	cmp	r3, #0
 8005118:	db0b      	blt.n	8005132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	f003 021f 	and.w	r2, r3, #31
 8005120:	4907      	ldr	r1, [pc, #28]	; (8005140 <__NVIC_EnableIRQ+0x38>)
 8005122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	2001      	movs	r0, #1
 800512a:	fa00 f202 	lsl.w	r2, r0, r2
 800512e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	e000e100 	.word	0xe000e100

08005144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	6039      	str	r1, [r7, #0]
 800514e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005154:	2b00      	cmp	r3, #0
 8005156:	db0a      	blt.n	800516e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	490c      	ldr	r1, [pc, #48]	; (8005190 <__NVIC_SetPriority+0x4c>)
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	0112      	lsls	r2, r2, #4
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	440b      	add	r3, r1
 8005168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800516c:	e00a      	b.n	8005184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	4908      	ldr	r1, [pc, #32]	; (8005194 <__NVIC_SetPriority+0x50>)
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	3b04      	subs	r3, #4
 800517c:	0112      	lsls	r2, r2, #4
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	440b      	add	r3, r1
 8005182:	761a      	strb	r2, [r3, #24]
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	e000e100 	.word	0xe000e100
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005198:	b480      	push	{r7}
 800519a:	b089      	sub	sp, #36	; 0x24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f1c3 0307 	rsb	r3, r3, #7
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	bf28      	it	cs
 80051b6:	2304      	movcs	r3, #4
 80051b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3304      	adds	r3, #4
 80051be:	2b06      	cmp	r3, #6
 80051c0:	d902      	bls.n	80051c8 <NVIC_EncodePriority+0x30>
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	3b03      	subs	r3, #3
 80051c6:	e000      	b.n	80051ca <NVIC_EncodePriority+0x32>
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	401a      	ands	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051e0:	f04f 31ff 	mov.w	r1, #4294967295
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	43d9      	mvns	r1, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f0:	4313      	orrs	r3, r2
         );
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3724      	adds	r7, #36	; 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3b01      	subs	r3, #1
 800520c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005210:	d301      	bcc.n	8005216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005212:	2301      	movs	r3, #1
 8005214:	e00f      	b.n	8005236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <SysTick_Config+0x40>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3b01      	subs	r3, #1
 800521c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800521e:	210f      	movs	r1, #15
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	f7ff ff8e 	bl	8005144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <SysTick_Config+0x40>)
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800522e:	4b04      	ldr	r3, [pc, #16]	; (8005240 <SysTick_Config+0x40>)
 8005230:	2207      	movs	r2, #7
 8005232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	e000e010 	.word	0xe000e010

08005244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff29 	bl	80050a4 <__NVIC_SetPriorityGrouping>
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	4603      	mov	r3, r0
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800526c:	f7ff ff3e 	bl	80050ec <__NVIC_GetPriorityGrouping>
 8005270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f7ff ff8e 	bl	8005198 <NVIC_EncodePriority>
 800527c:	4602      	mov	r2, r0
 800527e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff ff5d 	bl	8005144 <__NVIC_SetPriority>
}
 800528a:	bf00      	nop
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	4603      	mov	r3, r0
 800529a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800529c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ff31 	bl	8005108 <__NVIC_EnableIRQ>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff ffa2 	bl	8005200 <SysTick_Config>
 80052bc:	4603      	mov	r3, r0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052d4:	f7fe fe3c 	bl	8003f50 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e099      	b.n	8005418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005304:	e00f      	b.n	8005326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005306:	f7fe fe23 	bl	8003f50 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b05      	cmp	r3, #5
 8005312:	d908      	bls.n	8005326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e078      	b.n	8005418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e8      	bne.n	8005306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4b38      	ldr	r3, [pc, #224]	; (8005420 <HAL_DMA_Init+0x158>)
 8005340:	4013      	ands	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800535e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	2b04      	cmp	r3, #4
 800537e:	d107      	bne.n	8005390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	4313      	orrs	r3, r2
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d117      	bne.n	80053ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00e      	beq.n	80053ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fadf 	bl	8005990 <DMA_CheckFifoParam>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2240      	movs	r2, #64	; 0x40
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053e6:	2301      	movs	r3, #1
 80053e8:	e016      	b.n	8005418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fa96 	bl	8005924 <DMA_CalcBaseAndBitshift>
 80053f8:	4603      	mov	r3, r0
 80053fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	223f      	movs	r2, #63	; 0x3f
 8005402:	409a      	lsls	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	f010803f 	.word	0xf010803f

08005424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_DMA_Start_IT+0x26>
 8005446:	2302      	movs	r3, #2
 8005448:	e040      	b.n	80054cc <HAL_DMA_Start_IT+0xa8>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	d12f      	bne.n	80054be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fa28 	bl	80058c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	223f      	movs	r2, #63	; 0x3f
 800547e:	409a      	lsls	r2, r3
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0216 	orr.w	r2, r2, #22
 8005492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0208 	orr.w	r2, r2, #8
 80054aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	e005      	b.n	80054ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
 80054c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054e2:	f7fe fd35 	bl	8003f50 <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d008      	beq.n	8005506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2280      	movs	r2, #128	; 0x80
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e052      	b.n	80055ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0216 	bic.w	r2, r2, #22
 8005514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <HAL_DMA_Abort+0x62>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0208 	bic.w	r2, r2, #8
 8005544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005556:	e013      	b.n	8005580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005558:	f7fe fcfa 	bl	8003f50 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b05      	cmp	r3, #5
 8005564:	d90c      	bls.n	8005580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2203      	movs	r2, #3
 8005570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e015      	b.n	80055ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e4      	bne.n	8005558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005592:	223f      	movs	r2, #63	; 0x3f
 8005594:	409a      	lsls	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055c0:	4b8e      	ldr	r3, [pc, #568]	; (80057fc <HAL_DMA_IRQHandler+0x248>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a8e      	ldr	r2, [pc, #568]	; (8005800 <HAL_DMA_IRQHandler+0x24c>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	0a9b      	lsrs	r3, r3, #10
 80055cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	2208      	movs	r2, #8
 80055e0:	409a      	lsls	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01a      	beq.n	8005620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d013      	beq.n	8005620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0204 	bic.w	r2, r2, #4
 8005606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	2208      	movs	r2, #8
 800560e:	409a      	lsls	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005624:	2201      	movs	r2, #1
 8005626:	409a      	lsls	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d012      	beq.n	8005656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	2201      	movs	r2, #1
 8005644:	409a      	lsls	r2, r3
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f043 0202 	orr.w	r2, r3, #2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	2204      	movs	r2, #4
 800565c:	409a      	lsls	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4013      	ands	r3, r2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d012      	beq.n	800568c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	2204      	movs	r2, #4
 800567a:	409a      	lsls	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	f043 0204 	orr.w	r2, r3, #4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	2210      	movs	r2, #16
 8005692:	409a      	lsls	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d043      	beq.n	8005724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d03c      	beq.n	8005724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	2210      	movs	r2, #16
 80056b0:	409a      	lsls	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d018      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d108      	bne.n	80056e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d024      	beq.n	8005724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
 80056e2:	e01f      	b.n	8005724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
 80056f4:	e016      	b.n	8005724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d107      	bne.n	8005714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0208 	bic.w	r2, r2, #8
 8005712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	2220      	movs	r2, #32
 800572a:	409a      	lsls	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 808f 	beq.w	8005854 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8087 	beq.w	8005854 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574a:	2220      	movs	r2, #32
 800574c:	409a      	lsls	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b05      	cmp	r3, #5
 800575c:	d136      	bne.n	80057cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0216 	bic.w	r2, r2, #22
 800576c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695a      	ldr	r2, [r3, #20]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800577c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <HAL_DMA_IRQHandler+0x1da>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0208 	bic.w	r2, r2, #8
 800579c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	223f      	movs	r2, #63	; 0x3f
 80057a4:	409a      	lsls	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d07e      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
        }
        return;
 80057ca:	e079      	b.n	80058c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01d      	beq.n	8005816 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10d      	bne.n	8005804 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d031      	beq.n	8005854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
 80057f8:	e02c      	b.n	8005854 <HAL_DMA_IRQHandler+0x2a0>
 80057fa:	bf00      	nop
 80057fc:	200006ec 	.word	0x200006ec
 8005800:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d023      	beq.n	8005854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	4798      	blx	r3
 8005814:	e01e      	b.n	8005854 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10f      	bne.n	8005844 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0210 	bic.w	r2, r2, #16
 8005832:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	2b00      	cmp	r3, #0
 800585a:	d032      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d022      	beq.n	80058ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2205      	movs	r2, #5
 800586c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	3301      	adds	r3, #1
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	429a      	cmp	r2, r3
 800588a:	d307      	bcc.n	800589c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f2      	bne.n	8005880 <HAL_DMA_IRQHandler+0x2cc>
 800589a:	e000      	b.n	800589e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800589c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
 80058be:	e000      	b.n	80058c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80058c0:	bf00      	nop
    }
  }
}
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d108      	bne.n	8005908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005906:	e007      	b.n	8005918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	60da      	str	r2, [r3, #12]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	3b10      	subs	r3, #16
 8005934:	4a14      	ldr	r2, [pc, #80]	; (8005988 <DMA_CalcBaseAndBitshift+0x64>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800593e:	4a13      	ldr	r2, [pc, #76]	; (800598c <DMA_CalcBaseAndBitshift+0x68>)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d909      	bls.n	8005966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	659a      	str	r2, [r3, #88]	; 0x58
 8005964:	e007      	b.n	8005976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	aaaaaaab 	.word	0xaaaaaaab
 800598c:	0800a038 	.word	0x0800a038

08005990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d11f      	bne.n	80059ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d856      	bhi.n	8005a5e <DMA_CheckFifoParam+0xce>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <DMA_CheckFifoParam+0x28>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059db 	.word	0x080059db
 80059c0:	080059c9 	.word	0x080059c9
 80059c4:	08005a5f 	.word	0x08005a5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d046      	beq.n	8005a62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d8:	e043      	b.n	8005a62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059e2:	d140      	bne.n	8005a66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e8:	e03d      	b.n	8005a66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f2:	d121      	bne.n	8005a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d837      	bhi.n	8005a6a <DMA_CheckFifoParam+0xda>
 80059fa:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <DMA_CheckFifoParam+0x70>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005a11 	.word	0x08005a11
 8005a04:	08005a17 	.word	0x08005a17
 8005a08:	08005a11 	.word	0x08005a11
 8005a0c:	08005a29 	.word	0x08005a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	e030      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d025      	beq.n	8005a6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a26:	e022      	b.n	8005a6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a30:	d11f      	bne.n	8005a72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a36:	e01c      	b.n	8005a72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d903      	bls.n	8005a46 <DMA_CheckFifoParam+0xb6>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d003      	beq.n	8005a4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a44:	e018      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4a:	e015      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00e      	beq.n	8005a76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a5c:	e00b      	b.n	8005a76 <DMA_CheckFifoParam+0xe6>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e00a      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      break;
 8005a62:	bf00      	nop
 8005a64:	e008      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      break;
 8005a66:	bf00      	nop
 8005a68:	e006      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      break;
 8005a6a:	bf00      	nop
 8005a6c:	e004      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <DMA_CheckFifoParam+0xe8>
      break;
 8005a76:	bf00      	nop
    }
  } 
  
  return status; 
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop

08005a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	; 0x24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e159      	b.n	8005d58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	f040 8148 	bne.w	8005d52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d005      	beq.n	8005ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d130      	bne.n	8005b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b10:	2201      	movs	r2, #1
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	f003 0201 	and.w	r2, r3, #1
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d017      	beq.n	8005b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	2203      	movs	r2, #3
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d123      	bne.n	8005bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	08da      	lsrs	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	220f      	movs	r2, #15
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	08da      	lsrs	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3208      	adds	r2, #8
 8005bc6:	69b9      	ldr	r1, [r7, #24]
 8005bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0203 	and.w	r2, r3, #3
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80a2 	beq.w	8005d52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_GPIO_Init+0x2e8>)
 8005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c16:	4a56      	ldr	r2, [pc, #344]	; (8005d70 <HAL_GPIO_Init+0x2e8>)
 8005c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c1e:	4b54      	ldr	r3, [pc, #336]	; (8005d70 <HAL_GPIO_Init+0x2e8>)
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c2a:	4a52      	ldr	r2, [pc, #328]	; (8005d74 <HAL_GPIO_Init+0x2ec>)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	3302      	adds	r3, #2
 8005c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	220f      	movs	r2, #15
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a49      	ldr	r2, [pc, #292]	; (8005d78 <HAL_GPIO_Init+0x2f0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d019      	beq.n	8005c8a <HAL_GPIO_Init+0x202>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a48      	ldr	r2, [pc, #288]	; (8005d7c <HAL_GPIO_Init+0x2f4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_GPIO_Init+0x1fe>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a47      	ldr	r2, [pc, #284]	; (8005d80 <HAL_GPIO_Init+0x2f8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00d      	beq.n	8005c82 <HAL_GPIO_Init+0x1fa>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a46      	ldr	r2, [pc, #280]	; (8005d84 <HAL_GPIO_Init+0x2fc>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <HAL_GPIO_Init+0x1f6>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a45      	ldr	r2, [pc, #276]	; (8005d88 <HAL_GPIO_Init+0x300>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <HAL_GPIO_Init+0x1f2>
 8005c76:	2304      	movs	r3, #4
 8005c78:	e008      	b.n	8005c8c <HAL_GPIO_Init+0x204>
 8005c7a:	2307      	movs	r3, #7
 8005c7c:	e006      	b.n	8005c8c <HAL_GPIO_Init+0x204>
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e004      	b.n	8005c8c <HAL_GPIO_Init+0x204>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e002      	b.n	8005c8c <HAL_GPIO_Init+0x204>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <HAL_GPIO_Init+0x204>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	f002 0203 	and.w	r2, r2, #3
 8005c92:	0092      	lsls	r2, r2, #2
 8005c94:	4093      	lsls	r3, r2
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c9c:	4935      	ldr	r1, [pc, #212]	; (8005d74 <HAL_GPIO_Init+0x2ec>)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	089b      	lsrs	r3, r3, #2
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005caa:	4b38      	ldr	r3, [pc, #224]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cce:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cd4:	4b2d      	ldr	r3, [pc, #180]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cf8:	4a24      	ldr	r2, [pc, #144]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d22:	4a1a      	ldr	r2, [pc, #104]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d28:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d4c:	4a0f      	ldr	r2, [pc, #60]	; (8005d8c <HAL_GPIO_Init+0x304>)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b0f      	cmp	r3, #15
 8005d5c:	f67f aea2 	bls.w	8005aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	3724      	adds	r7, #36	; 0x24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40013800 	.word	0x40013800
 8005d78:	40020000 	.word	0x40020000
 8005d7c:	40020400 	.word	0x40020400
 8005d80:	40020800 	.word	0x40020800
 8005d84:	40020c00 	.word	0x40020c00
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40013c00 	.word	0x40013c00

08005d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	807b      	strh	r3, [r7, #2]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da0:	787b      	ldrb	r3, [r7, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005dac:	e003      	b.n	8005db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	041a      	lsls	r2, r3, #16
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	619a      	str	r2, [r3, #24]
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e12b      	b.n	800602e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fd fe16 	bl	8003a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e28:	f001 fbbc 	bl	80075a4 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4a81      	ldr	r2, [pc, #516]	; (8006038 <HAL_I2C_Init+0x274>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d807      	bhi.n	8005e48 <HAL_I2C_Init+0x84>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a80      	ldr	r2, [pc, #512]	; (800603c <HAL_I2C_Init+0x278>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bf94      	ite	ls
 8005e40:	2301      	movls	r3, #1
 8005e42:	2300      	movhi	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e006      	b.n	8005e56 <HAL_I2C_Init+0x92>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a7d      	ldr	r2, [pc, #500]	; (8006040 <HAL_I2C_Init+0x27c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	bf94      	ite	ls
 8005e50:	2301      	movls	r3, #1
 8005e52:	2300      	movhi	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e0e7      	b.n	800602e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a78      	ldr	r2, [pc, #480]	; (8006044 <HAL_I2C_Init+0x280>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	0c9b      	lsrs	r3, r3, #18
 8005e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4a6a      	ldr	r2, [pc, #424]	; (8006038 <HAL_I2C_Init+0x274>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d802      	bhi.n	8005e98 <HAL_I2C_Init+0xd4>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3301      	adds	r3, #1
 8005e96:	e009      	b.n	8005eac <HAL_I2C_Init+0xe8>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	4a69      	ldr	r2, [pc, #420]	; (8006048 <HAL_I2C_Init+0x284>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	099b      	lsrs	r3, r3, #6
 8005eaa:	3301      	adds	r3, #1
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	495c      	ldr	r1, [pc, #368]	; (8006038 <HAL_I2C_Init+0x274>)
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d819      	bhi.n	8005f00 <HAL_I2C_Init+0x13c>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1e59      	subs	r1, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ee0:	400b      	ands	r3, r1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_I2C_Init+0x138>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1e59      	subs	r1, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efa:	e051      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005efc:	2304      	movs	r3, #4
 8005efe:	e04f      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d111      	bne.n	8005f2c <HAL_I2C_Init+0x168>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1e58      	subs	r0, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	440b      	add	r3, r1
 8005f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e012      	b.n	8005f52 <HAL_I2C_Init+0x18e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1e58      	subs	r0, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	0099      	lsls	r1, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Init+0x196>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e022      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10e      	bne.n	8005f80 <HAL_I2C_Init+0x1bc>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1e58      	subs	r0, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	440b      	add	r3, r1
 8005f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f74:	3301      	adds	r3, #1
 8005f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	e00f      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1e58      	subs	r0, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6859      	ldr	r1, [r3, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	0099      	lsls	r1, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	6809      	ldr	r1, [r1, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6911      	ldr	r1, [r2, #16]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68d2      	ldr	r2, [r2, #12]
 8005fda:	4311      	orrs	r1, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	000186a0 	.word	0x000186a0
 800603c:	001e847f 	.word	0x001e847f
 8006040:	003d08ff 	.word	0x003d08ff
 8006044:	431bde83 	.word	0x431bde83
 8006048:	10624dd3 	.word	0x10624dd3

0800604c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	4608      	mov	r0, r1
 8006056:	4611      	mov	r1, r2
 8006058:	461a      	mov	r2, r3
 800605a:	4603      	mov	r3, r0
 800605c:	817b      	strh	r3, [r7, #10]
 800605e:	460b      	mov	r3, r1
 8006060:	813b      	strh	r3, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006066:	f7fd ff73 	bl	8003f50 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b20      	cmp	r3, #32
 8006076:	f040 80d9 	bne.w	800622c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	2319      	movs	r3, #25
 8006080:	2201      	movs	r2, #1
 8006082:	496d      	ldr	r1, [pc, #436]	; (8006238 <HAL_I2C_Mem_Write+0x1ec>)
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fc7f 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
 8006092:	e0cc      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_I2C_Mem_Write+0x56>
 800609e:	2302      	movs	r3, #2
 80060a0:	e0c5      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d007      	beq.n	80060c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2221      	movs	r2, #33	; 0x21
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4a4d      	ldr	r2, [pc, #308]	; (800623c <HAL_I2C_Mem_Write+0x1f0>)
 8006108:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800610a:	88f8      	ldrh	r0, [r7, #6]
 800610c:	893a      	ldrh	r2, [r7, #8]
 800610e:	8979      	ldrh	r1, [r7, #10]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4603      	mov	r3, r0
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fab6 	bl	800668c <I2C_RequestMemoryWrite>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d052      	beq.n	80061cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e081      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fd00 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2b04      	cmp	r3, #4
 8006140:	d107      	bne.n	8006152 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006150:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e06b      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	781a      	ldrb	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d11b      	bne.n	80061cc <HAL_I2C_Mem_Write+0x180>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d017      	beq.n	80061cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1aa      	bne.n	800612a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fcec 	bl	8006bb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d107      	bne.n	80061fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e016      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	00100002 	.word	0x00100002
 800623c:	ffff0000 	.word	0xffff0000

08006240 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	; 0x30
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	4608      	mov	r0, r1
 800624a:	4611      	mov	r1, r2
 800624c:	461a      	mov	r2, r3
 800624e:	4603      	mov	r3, r0
 8006250:	817b      	strh	r3, [r7, #10]
 8006252:	460b      	mov	r3, r1
 8006254:	813b      	strh	r3, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800625a:	f7fd fe79 	bl	8003f50 <HAL_GetTick>
 800625e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b20      	cmp	r3, #32
 800626a:	f040 8208 	bne.w	800667e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	2319      	movs	r3, #25
 8006274:	2201      	movs	r2, #1
 8006276:	497b      	ldr	r1, [pc, #492]	; (8006464 <HAL_I2C_Mem_Read+0x224>)
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fb85 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006284:	2302      	movs	r3, #2
 8006286:	e1fb      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_I2C_Mem_Read+0x56>
 8006292:	2302      	movs	r3, #2
 8006294:	e1f4      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d007      	beq.n	80062bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2222      	movs	r2, #34	; 0x22
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4a5b      	ldr	r2, [pc, #364]	; (8006468 <HAL_I2C_Mem_Read+0x228>)
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062fe:	88f8      	ldrh	r0, [r7, #6]
 8006300:	893a      	ldrh	r2, [r7, #8]
 8006302:	8979      	ldrh	r1, [r7, #10]
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4603      	mov	r3, r0
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fa52 	bl	80067b8 <I2C_RequestMemoryRead>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e1b0      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d113      	bne.n	800634e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006326:	2300      	movs	r3, #0
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	e184      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	2b01      	cmp	r3, #1
 8006354:	d11b      	bne.n	800638e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e164      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006392:	2b02      	cmp	r3, #2
 8006394:	d11b      	bne.n	80063ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b6:	2300      	movs	r3, #0
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	e144      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063e4:	e138      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	f200 80f1 	bhi.w	80065d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d123      	bne.n	8006440 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fc1b 	bl	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e139      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800643e:	e10b      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	2b02      	cmp	r3, #2
 8006446:	d14e      	bne.n	80064e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	2200      	movs	r2, #0
 8006450:	4906      	ldr	r1, [pc, #24]	; (800646c <HAL_I2C_Mem_Read+0x22c>)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 fa98 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e10e      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
 8006462:	bf00      	nop
 8006464:	00100002 	.word	0x00100002
 8006468:	ffff0000 	.word	0xffff0000
 800646c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064e4:	e0b8      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	2200      	movs	r2, #0
 80064ee:	4966      	ldr	r1, [pc, #408]	; (8006688 <HAL_I2C_Mem_Read+0x448>)
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fa49 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0bf      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	2200      	movs	r2, #0
 800654a:	494f      	ldr	r1, [pc, #316]	; (8006688 <HAL_I2C_Mem_Read+0x448>)
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fa1b 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e091      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065d0:	e042      	b.n	8006658 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fb2e 	bl	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e04c      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b04      	cmp	r3, #4
 8006624:	d118      	bne.n	8006658 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	2b00      	cmp	r3, #0
 800665e:	f47f aec2 	bne.w	80063e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3728      	adds	r7, #40	; 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	00010004 	.word	0x00010004

0800668c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4603      	mov	r3, r0
 800669c:	817b      	strh	r3, [r7, #10]
 800669e:	460b      	mov	r3, r1
 80066a0:	813b      	strh	r3, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	2200      	movs	r2, #0
 80066be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 f960 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066dc:	d103      	bne.n	80066e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e05f      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ea:	897b      	ldrh	r3, [r7, #10]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	492d      	ldr	r1, [pc, #180]	; (80067b4 <I2C_RequestMemoryWrite+0x128>)
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f998 	bl	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e04c      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	6a39      	ldr	r1, [r7, #32]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fa02 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00d      	beq.n	8006752 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	2b04      	cmp	r3, #4
 800673c:	d107      	bne.n	800674e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800674c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e02b      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d105      	bne.n	8006764 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006758:	893b      	ldrh	r3, [r7, #8]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	611a      	str	r2, [r3, #16]
 8006762:	e021      	b.n	80067a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006764:	893b      	ldrh	r3, [r7, #8]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	b29b      	uxth	r3, r3
 800676a:	b2da      	uxtb	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	6a39      	ldr	r1, [r7, #32]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f9dc 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	2b04      	cmp	r3, #4
 8006788:	d107      	bne.n	800679a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e005      	b.n	80067aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800679e:	893b      	ldrh	r3, [r7, #8]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	00010002 	.word	0x00010002

080067b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	4608      	mov	r0, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	817b      	strh	r3, [r7, #10]
 80067ca:	460b      	mov	r3, r1
 80067cc:	813b      	strh	r3, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f8c2 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006818:	d103      	bne.n	8006822 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e0aa      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006826:	897b      	ldrh	r3, [r7, #10]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	4952      	ldr	r1, [pc, #328]	; (8006984 <I2C_RequestMemoryRead+0x1cc>)
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f8fa 	bl	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e097      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684c:	2300      	movs	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006864:	6a39      	ldr	r1, [r7, #32]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f964 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00d      	beq.n	800688e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	2b04      	cmp	r3, #4
 8006878:	d107      	bne.n	800688a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e076      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d105      	bne.n	80068a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006894:	893b      	ldrh	r3, [r7, #8]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	611a      	str	r2, [r3, #16]
 800689e:	e021      	b.n	80068e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068a0:	893b      	ldrh	r3, [r7, #8]
 80068a2:	0a1b      	lsrs	r3, r3, #8
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b0:	6a39      	ldr	r1, [r7, #32]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f93e 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d107      	bne.n	80068d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e050      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068da:	893b      	ldrh	r3, [r7, #8]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	6a39      	ldr	r1, [r7, #32]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f923 	bl	8006b34 <I2C_WaitOnTXEFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00d      	beq.n	8006910 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d107      	bne.n	800690c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e035      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800691e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	2200      	movs	r2, #0
 8006928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f82b 	bl	8006988 <I2C_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006946:	d103      	bne.n	8006950 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e013      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006954:	897b      	ldrh	r3, [r7, #10]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	4906      	ldr	r1, [pc, #24]	; (8006984 <I2C_RequestMemoryRead+0x1cc>)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f863 	bl	8006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	00010002 	.word	0x00010002

08006988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	4613      	mov	r3, r2
 8006996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006998:	e025      	b.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d021      	beq.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069a2:	f7fd fad5 	bl	8003f50 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d302      	bcc.n	80069b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d116      	bne.n	80069e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f043 0220 	orr.w	r2, r3, #32
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e023      	b.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d10d      	bne.n	8006a0c <I2C_WaitOnFlagUntilTimeout+0x84>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	43da      	mvns	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	e00c      	b.n	8006a26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	43da      	mvns	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf0c      	ite	eq
 8006a1e:	2301      	moveq	r3, #1
 8006a20:	2300      	movne	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	79fb      	ldrb	r3, [r7, #7]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d0b6      	beq.n	800699a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a44:	e051      	b.n	8006aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a54:	d123      	bne.n	8006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f043 0204 	orr.w	r2, r3, #4
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e046      	b.n	8006b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d021      	beq.n	8006aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa6:	f7fd fa53 	bl	8003f50 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d116      	bne.n	8006aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e020      	b.n	8006b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d10c      	bne.n	8006b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	43da      	mvns	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf14      	ite	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	2300      	moveq	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	e00b      	b.n	8006b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	43da      	mvns	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf14      	ite	ne
 8006b20:	2301      	movne	r3, #1
 8006b22:	2300      	moveq	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d18d      	bne.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b40:	e02d      	b.n	8006b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f8ce 	bl	8006ce4 <I2C_IsAcknowledgeFailed>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e02d      	b.n	8006bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d021      	beq.n	8006b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5a:	f7fd f9f9 	bl	8003f50 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d116      	bne.n	8006b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f043 0220 	orr.w	r2, r3, #32
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e007      	b.n	8006bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b80      	cmp	r3, #128	; 0x80
 8006baa:	d1ca      	bne.n	8006b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc2:	e02d      	b.n	8006c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f88d 	bl	8006ce4 <I2C_IsAcknowledgeFailed>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e02d      	b.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d021      	beq.n	8006c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bdc:	f7fd f9b8 	bl	8003f50 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d116      	bne.n	8006c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	f043 0220 	orr.w	r2, r3, #32
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e007      	b.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d1ca      	bne.n	8006bc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c44:	e042      	b.n	8006ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d119      	bne.n	8006c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0210 	mvn.w	r2, #16
 8006c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e029      	b.n	8006cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c88:	f7fd f962 	bl	8003f50 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d116      	bne.n	8006ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	f043 0220 	orr.w	r2, r3, #32
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e007      	b.n	8006cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d1b5      	bne.n	8006c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfa:	d11b      	bne.n	8006d34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f043 0204 	orr.w	r2, r3, #4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e267      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d075      	beq.n	8006e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d62:	4b88      	ldr	r3, [pc, #544]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 030c 	and.w	r3, r3, #12
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d00c      	beq.n	8006d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d6e:	4b85      	ldr	r3, [pc, #532]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d112      	bne.n	8006da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d7a:	4b82      	ldr	r3, [pc, #520]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d86:	d10b      	bne.n	8006da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d88:	4b7e      	ldr	r3, [pc, #504]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d05b      	beq.n	8006e4c <HAL_RCC_OscConfig+0x108>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d157      	bne.n	8006e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e242      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da8:	d106      	bne.n	8006db8 <HAL_RCC_OscConfig+0x74>
 8006daa:	4b76      	ldr	r3, [pc, #472]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a75      	ldr	r2, [pc, #468]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e01d      	b.n	8006df4 <HAL_RCC_OscConfig+0xb0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0x98>
 8006dc2:	4b70      	ldr	r3, [pc, #448]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a6f      	ldr	r2, [pc, #444]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b6d      	ldr	r3, [pc, #436]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a6c      	ldr	r2, [pc, #432]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e00b      	b.n	8006df4 <HAL_RCC_OscConfig+0xb0>
 8006ddc:	4b69      	ldr	r3, [pc, #420]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a68      	ldr	r2, [pc, #416]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfc:	f7fd f8a8 	bl	8003f50 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e04:	f7fd f8a4 	bl	8003f50 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b64      	cmp	r3, #100	; 0x64
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e207      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b5b      	ldr	r3, [pc, #364]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0f0      	beq.n	8006e04 <HAL_RCC_OscConfig+0xc0>
 8006e22:	e014      	b.n	8006e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e24:	f7fd f894 	bl	8003f50 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e2c:	f7fd f890 	bl	8003f50 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b64      	cmp	r3, #100	; 0x64
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e1f3      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e3e:	4b51      	ldr	r3, [pc, #324]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0xe8>
 8006e4a:	e000      	b.n	8006e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d063      	beq.n	8006f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e5a:	4b4a      	ldr	r3, [pc, #296]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e66:	4b47      	ldr	r3, [pc, #284]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d11c      	bne.n	8006eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e72:	4b44      	ldr	r3, [pc, #272]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d116      	bne.n	8006eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7e:	4b41      	ldr	r3, [pc, #260]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_RCC_OscConfig+0x152>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e1c7      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e96:	4b3b      	ldr	r3, [pc, #236]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4937      	ldr	r1, [pc, #220]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eaa:	e03a      	b.n	8006f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d020      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eb4:	4b34      	ldr	r3, [pc, #208]	; (8006f88 <HAL_RCC_OscConfig+0x244>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fd f849 	bl	8003f50 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec2:	f7fd f845 	bl	8003f50 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e1a8      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed4:	4b2b      	ldr	r3, [pc, #172]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0f0      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4925      	ldr	r1, [pc, #148]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	600b      	str	r3, [r1, #0]
 8006ef4:	e015      	b.n	8006f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef6:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <HAL_RCC_OscConfig+0x244>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fd f828 	bl	8003f50 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f04:	f7fd f824 	bl	8003f50 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e187      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f16:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d036      	beq.n	8006f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d016      	beq.n	8006f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f36:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <HAL_RCC_OscConfig+0x248>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3c:	f7fd f808 	bl	8003f50 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f44:	f7fd f804 	bl	8003f50 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e167      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f56:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <HAL_RCC_OscConfig+0x240>)
 8006f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x200>
 8006f62:	e01b      	b.n	8006f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <HAL_RCC_OscConfig+0x248>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6a:	f7fc fff1 	bl	8003f50 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f70:	e00e      	b.n	8006f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f72:	f7fc ffed 	bl	8003f50 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d907      	bls.n	8006f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e150      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
 8006f84:	40023800 	.word	0x40023800
 8006f88:	42470000 	.word	0x42470000
 8006f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f90:	4b88      	ldr	r3, [pc, #544]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1ea      	bne.n	8006f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8097 	beq.w	80070d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fae:	4b81      	ldr	r3, [pc, #516]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10f      	bne.n	8006fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	4b7d      	ldr	r3, [pc, #500]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	4a7c      	ldr	r2, [pc, #496]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fca:	4b7a      	ldr	r3, [pc, #488]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	60bb      	str	r3, [r7, #8]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fda:	4b77      	ldr	r3, [pc, #476]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d118      	bne.n	8007018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fe6:	4b74      	ldr	r3, [pc, #464]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a73      	ldr	r2, [pc, #460]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 8006fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ff2:	f7fc ffad 	bl	8003f50 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff8:	e008      	b.n	800700c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffa:	f7fc ffa9 	bl	8003f50 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d901      	bls.n	800700c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e10c      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700c:	4b6a      	ldr	r3, [pc, #424]	; (80071b8 <HAL_RCC_OscConfig+0x474>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0f0      	beq.n	8006ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d106      	bne.n	800702e <HAL_RCC_OscConfig+0x2ea>
 8007020:	4b64      	ldr	r3, [pc, #400]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	4a63      	ldr	r2, [pc, #396]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	6713      	str	r3, [r2, #112]	; 0x70
 800702c:	e01c      	b.n	8007068 <HAL_RCC_OscConfig+0x324>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b05      	cmp	r3, #5
 8007034:	d10c      	bne.n	8007050 <HAL_RCC_OscConfig+0x30c>
 8007036:	4b5f      	ldr	r3, [pc, #380]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4a5e      	ldr	r2, [pc, #376]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800703c:	f043 0304 	orr.w	r3, r3, #4
 8007040:	6713      	str	r3, [r2, #112]	; 0x70
 8007042:	4b5c      	ldr	r3, [pc, #368]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	4a5b      	ldr	r2, [pc, #364]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	6713      	str	r3, [r2, #112]	; 0x70
 800704e:	e00b      	b.n	8007068 <HAL_RCC_OscConfig+0x324>
 8007050:	4b58      	ldr	r3, [pc, #352]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	4a57      	ldr	r2, [pc, #348]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	6713      	str	r3, [r2, #112]	; 0x70
 800705c:	4b55      	ldr	r3, [pc, #340]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	4a54      	ldr	r2, [pc, #336]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007062:	f023 0304 	bic.w	r3, r3, #4
 8007066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d015      	beq.n	800709c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007070:	f7fc ff6e 	bl	8003f50 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007076:	e00a      	b.n	800708e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007078:	f7fc ff6a 	bl	8003f50 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	; 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e0cb      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800708e:	4b49      	ldr	r3, [pc, #292]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0ee      	beq.n	8007078 <HAL_RCC_OscConfig+0x334>
 800709a:	e014      	b.n	80070c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800709c:	f7fc ff58 	bl	8003f50 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a4:	f7fc ff54 	bl	8003f50 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e0b5      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ba:	4b3e      	ldr	r3, [pc, #248]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ee      	bne.n	80070a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d105      	bne.n	80070d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070cc:	4b39      	ldr	r3, [pc, #228]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	4a38      	ldr	r2, [pc, #224]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80a1 	beq.w	8007224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070e2:	4b34      	ldr	r3, [pc, #208]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 030c 	and.w	r3, r3, #12
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d05c      	beq.n	80071a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d141      	bne.n	800717a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070f6:	4b31      	ldr	r3, [pc, #196]	; (80071bc <HAL_RCC_OscConfig+0x478>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070fc:	f7fc ff28 	bl	8003f50 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007104:	f7fc ff24 	bl	8003f50 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e087      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007116:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69da      	ldr	r2, [r3, #28]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	019b      	lsls	r3, r3, #6
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	3b01      	subs	r3, #1
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	061b      	lsls	r3, r3, #24
 8007146:	491b      	ldr	r1, [pc, #108]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 8007148:	4313      	orrs	r3, r2
 800714a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800714c:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <HAL_RCC_OscConfig+0x478>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007152:	f7fc fefd 	bl	8003f50 <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715a:	f7fc fef9 	bl	8003f50 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e05c      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800716c:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x416>
 8007178:	e054      	b.n	8007224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800717a:	4b10      	ldr	r3, [pc, #64]	; (80071bc <HAL_RCC_OscConfig+0x478>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007180:	f7fc fee6 	bl	8003f50 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007188:	f7fc fee2 	bl	8003f50 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e045      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719a:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <HAL_RCC_OscConfig+0x470>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x444>
 80071a6:	e03d      	b.n	8007224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d107      	bne.n	80071c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e038      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
 80071b4:	40023800 	.word	0x40023800
 80071b8:	40007000 	.word	0x40007000
 80071bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071c0:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <HAL_RCC_OscConfig+0x4ec>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d028      	beq.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d8:	429a      	cmp	r2, r3
 80071da:	d121      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d11a      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071f0:	4013      	ands	r3, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d111      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	3b01      	subs	r3, #1
 800720a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800720c:	429a      	cmp	r2, r3
 800720e:	d107      	bne.n	8007220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800721c:	429a      	cmp	r2, r3
 800721e:	d001      	beq.n	8007224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40023800 	.word	0x40023800

08007234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e0cc      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007248:	4b68      	ldr	r3, [pc, #416]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d90c      	bls.n	8007270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	4b65      	ldr	r3, [pc, #404]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725e:	4b63      	ldr	r3, [pc, #396]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0b8      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d020      	beq.n	80072be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007288:	4b59      	ldr	r3, [pc, #356]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	4a58      	ldr	r2, [pc, #352]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0308 	and.w	r3, r3, #8
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072a0:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4a52      	ldr	r2, [pc, #328]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ac:	4b50      	ldr	r3, [pc, #320]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	494d      	ldr	r1, [pc, #308]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d044      	beq.n	8007354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d107      	bne.n	80072e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d2:	4b47      	ldr	r3, [pc, #284]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d119      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e07f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d003      	beq.n	80072f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d107      	bne.n	8007302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072f2:	4b3f      	ldr	r3, [pc, #252]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e06f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007302:	4b3b      	ldr	r3, [pc, #236]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e067      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007312:	4b37      	ldr	r3, [pc, #220]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 0203 	bic.w	r2, r3, #3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4934      	ldr	r1, [pc, #208]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	4313      	orrs	r3, r2
 8007322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007324:	f7fc fe14 	bl	8003f50 <HAL_GetTick>
 8007328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	e00a      	b.n	8007342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800732c:	f7fc fe10 	bl	8003f50 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	f241 3288 	movw	r2, #5000	; 0x1388
 800733a:	4293      	cmp	r3, r2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e04f      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007342:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f003 020c 	and.w	r2, r3, #12
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	429a      	cmp	r2, r3
 8007352:	d1eb      	bne.n	800732c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007354:	4b25      	ldr	r3, [pc, #148]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d20c      	bcs.n	800737c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007362:	4b22      	ldr	r3, [pc, #136]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <HAL_RCC_ClockConfig+0x1b8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e032      	b.n	80073e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4916      	ldr	r1, [pc, #88]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	4313      	orrs	r3, r2
 8007398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	490e      	ldr	r1, [pc, #56]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ba:	f000 f821 	bl	8007400 <HAL_RCC_GetSysClockFreq>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	490a      	ldr	r1, [pc, #40]	; (80073f4 <HAL_RCC_ClockConfig+0x1c0>)
 80073cc:	5ccb      	ldrb	r3, [r1, r3]
 80073ce:	fa22 f303 	lsr.w	r3, r2, r3
 80073d2:	4a09      	ldr	r2, [pc, #36]	; (80073f8 <HAL_RCC_ClockConfig+0x1c4>)
 80073d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073d6:	4b09      	ldr	r3, [pc, #36]	; (80073fc <HAL_RCC_ClockConfig+0x1c8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fc fd74 	bl	8003ec8 <HAL_InitTick>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40023c00 	.word	0x40023c00
 80073f0:	40023800 	.word	0x40023800
 80073f4:	0800a020 	.word	0x0800a020
 80073f8:	200006ec 	.word	0x200006ec
 80073fc:	200006f0 	.word	0x200006f0

08007400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007404:	b090      	sub	sp, #64	; 0x40
 8007406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
 800740c:	2300      	movs	r3, #0
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007410:	2300      	movs	r3, #0
 8007412:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007418:	4b59      	ldr	r3, [pc, #356]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 030c 	and.w	r3, r3, #12
 8007420:	2b08      	cmp	r3, #8
 8007422:	d00d      	beq.n	8007440 <HAL_RCC_GetSysClockFreq+0x40>
 8007424:	2b08      	cmp	r3, #8
 8007426:	f200 80a1 	bhi.w	800756c <HAL_RCC_GetSysClockFreq+0x16c>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x34>
 800742e:	2b04      	cmp	r3, #4
 8007430:	d003      	beq.n	800743a <HAL_RCC_GetSysClockFreq+0x3a>
 8007432:	e09b      	b.n	800756c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007434:	4b53      	ldr	r3, [pc, #332]	; (8007584 <HAL_RCC_GetSysClockFreq+0x184>)
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007438:	e09b      	b.n	8007572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800743a:	4b53      	ldr	r3, [pc, #332]	; (8007588 <HAL_RCC_GetSysClockFreq+0x188>)
 800743c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800743e:	e098      	b.n	8007572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007440:	4b4f      	ldr	r3, [pc, #316]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800744a:	4b4d      	ldr	r3, [pc, #308]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d028      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007456:	4b4a      	ldr	r3, [pc, #296]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	099b      	lsrs	r3, r3, #6
 800745c:	2200      	movs	r2, #0
 800745e:	623b      	str	r3, [r7, #32]
 8007460:	627a      	str	r2, [r7, #36]	; 0x24
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007468:	2100      	movs	r1, #0
 800746a:	4b47      	ldr	r3, [pc, #284]	; (8007588 <HAL_RCC_GetSysClockFreq+0x188>)
 800746c:	fb03 f201 	mul.w	r2, r3, r1
 8007470:	2300      	movs	r3, #0
 8007472:	fb00 f303 	mul.w	r3, r0, r3
 8007476:	4413      	add	r3, r2
 8007478:	4a43      	ldr	r2, [pc, #268]	; (8007588 <HAL_RCC_GetSysClockFreq+0x188>)
 800747a:	fba0 1202 	umull	r1, r2, r0, r2
 800747e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007480:	460a      	mov	r2, r1
 8007482:	62ba      	str	r2, [r7, #40]	; 0x28
 8007484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007486:	4413      	add	r3, r2
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	2200      	movs	r2, #0
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	61fa      	str	r2, [r7, #28]
 8007492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007496:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800749a:	f7f9 f9d3 	bl	8000844 <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4613      	mov	r3, r2
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a6:	e053      	b.n	8007550 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a8:	4b35      	ldr	r3, [pc, #212]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	099b      	lsrs	r3, r3, #6
 80074ae:	2200      	movs	r2, #0
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	617a      	str	r2, [r7, #20]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80074ba:	f04f 0b00 	mov.w	fp, #0
 80074be:	4652      	mov	r2, sl
 80074c0:	465b      	mov	r3, fp
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	0159      	lsls	r1, r3, #5
 80074cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074d0:	0150      	lsls	r0, r2, #5
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	ebb2 080a 	subs.w	r8, r2, sl
 80074da:	eb63 090b 	sbc.w	r9, r3, fp
 80074de:	f04f 0200 	mov.w	r2, #0
 80074e2:	f04f 0300 	mov.w	r3, #0
 80074e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80074ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80074ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80074f2:	ebb2 0408 	subs.w	r4, r2, r8
 80074f6:	eb63 0509 	sbc.w	r5, r3, r9
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	00eb      	lsls	r3, r5, #3
 8007504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007508:	00e2      	lsls	r2, r4, #3
 800750a:	4614      	mov	r4, r2
 800750c:	461d      	mov	r5, r3
 800750e:	eb14 030a 	adds.w	r3, r4, sl
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	eb45 030b 	adc.w	r3, r5, fp
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007526:	4629      	mov	r1, r5
 8007528:	028b      	lsls	r3, r1, #10
 800752a:	4621      	mov	r1, r4
 800752c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007530:	4621      	mov	r1, r4
 8007532:	028a      	lsls	r2, r1, #10
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	2200      	movs	r2, #0
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	60fa      	str	r2, [r7, #12]
 8007540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007544:	f7f9 f97e 	bl	8000844 <__aeabi_uldivmod>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4613      	mov	r3, r2
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <HAL_RCC_GetSysClockFreq+0x180>)
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	3301      	adds	r3, #1
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800756a:	e002      	b.n	8007572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <HAL_RCC_GetSysClockFreq+0x184>)
 800756e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007574:	4618      	mov	r0, r3
 8007576:	3740      	adds	r7, #64	; 0x40
 8007578:	46bd      	mov	sp, r7
 800757a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800757e:	bf00      	nop
 8007580:	40023800 	.word	0x40023800
 8007584:	00f42400 	.word	0x00f42400
 8007588:	017d7840 	.word	0x017d7840

0800758c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007590:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007592:	681b      	ldr	r3, [r3, #0]
}
 8007594:	4618      	mov	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	200006ec 	.word	0x200006ec

080075a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075a8:	f7ff fff0 	bl	800758c <HAL_RCC_GetHCLKFreq>
 80075ac:	4602      	mov	r2, r0
 80075ae:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	0a9b      	lsrs	r3, r3, #10
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	4903      	ldr	r1, [pc, #12]	; (80075c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ba:	5ccb      	ldrb	r3, [r1, r3]
 80075bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40023800 	.word	0x40023800
 80075c8:	0800a030 	.word	0x0800a030

080075cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e07b      	b.n	80076d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d108      	bne.n	80075f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ee:	d009      	beq.n	8007604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	61da      	str	r2, [r3, #28]
 80075f6:	e005      	b.n	8007604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fc fa56 	bl	8003ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800763a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007688:	ea42 0103 	orr.w	r1, r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	f003 0104 	and.w	r1, r3, #4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	f003 0210 	and.w	r2, r3, #16
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69da      	ldr	r2, [r3, #28]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b088      	sub	sp, #32
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4613      	mov	r3, r2
 80076ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_SPI_Transmit+0x22>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e126      	b.n	800794e <HAL_SPI_Transmit+0x270>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007708:	f7fc fc22 	bl	8003f50 <HAL_GetTick>
 800770c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	d002      	beq.n	8007724 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800771e:	2302      	movs	r3, #2
 8007720:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007722:	e10b      	b.n	800793c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_SPI_Transmit+0x52>
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007734:	e102      	b.n	800793c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2203      	movs	r2, #3
 800773a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777c:	d10f      	bne.n	800779e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800778c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800779c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d007      	beq.n	80077bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c4:	d14b      	bne.n	800785e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_SPI_Transmit+0xf6>
 80077ce:	8afb      	ldrh	r3, [r7, #22]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d13e      	bne.n	8007852 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	881a      	ldrh	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e4:	1c9a      	adds	r2, r3, #2
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077f8:	e02b      	b.n	8007852 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b02      	cmp	r3, #2
 8007806:	d112      	bne.n	800782e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	881a      	ldrh	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	1c9a      	adds	r2, r3, #2
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	86da      	strh	r2, [r3, #54]	; 0x36
 800782c:	e011      	b.n	8007852 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800782e:	f7fc fb8f 	bl	8003f50 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d803      	bhi.n	8007846 <HAL_SPI_Transmit+0x168>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007844:	d102      	bne.n	800784c <HAL_SPI_Transmit+0x16e>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007850:	e074      	b.n	800793c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1ce      	bne.n	80077fa <HAL_SPI_Transmit+0x11c>
 800785c:	e04c      	b.n	80078f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_SPI_Transmit+0x18e>
 8007866:	8afb      	ldrh	r3, [r7, #22]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d140      	bne.n	80078ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	7812      	ldrb	r2, [r2, #0]
 8007878:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007892:	e02c      	b.n	80078ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d113      	bne.n	80078ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	7812      	ldrb	r2, [r2, #0]
 80078ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80078c8:	e011      	b.n	80078ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ca:	f7fc fb41 	bl	8003f50 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d803      	bhi.n	80078e2 <HAL_SPI_Transmit+0x204>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d102      	bne.n	80078e8 <HAL_SPI_Transmit+0x20a>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078ec:	e026      	b.n	800793c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1cd      	bne.n	8007894 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fbcb 	bl	8008098 <SPI_EndRxTxTransaction>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007916:	2300      	movs	r3, #0
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e000      	b.n	800793c <HAL_SPI_Transmit+0x25e>
  }

error:
 800793a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800794c:	7ffb      	ldrb	r3, [r7, #31]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b088      	sub	sp, #32
 800795a:	af02      	add	r7, sp, #8
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007972:	d112      	bne.n	800799a <HAL_SPI_Receive+0x44>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10e      	bne.n	800799a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2204      	movs	r2, #4
 8007980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	4613      	mov	r3, r2
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 f8f1 	bl	8007b78 <HAL_SPI_TransmitReceive>
 8007996:	4603      	mov	r3, r0
 8007998:	e0ea      	b.n	8007b70 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_SPI_Receive+0x52>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e0e3      	b.n	8007b70 <HAL_SPI_Receive+0x21a>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079b0:	f7fc face 	bl	8003f50 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d002      	beq.n	80079c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80079c2:	2302      	movs	r3, #2
 80079c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079c6:	e0ca      	b.n	8007b5e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_SPI_Receive+0x7e>
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d102      	bne.n	80079da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079d8:	e0c1      	b.n	8007b5e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2204      	movs	r2, #4
 80079de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a20:	d10f      	bne.n	8007a42 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d007      	beq.n	8007a60 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d162      	bne.n	8007b2e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a68:	e02e      	b.n	8007ac8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d115      	bne.n	8007aa4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f103 020c 	add.w	r2, r3, #12
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	7812      	ldrb	r2, [r2, #0]
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aa2:	e011      	b.n	8007ac8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa4:	f7fc fa54 	bl	8003f50 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d803      	bhi.n	8007abc <HAL_SPI_Receive+0x166>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d102      	bne.n	8007ac2 <HAL_SPI_Receive+0x16c>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d102      	bne.n	8007ac8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ac6:	e04a      	b.n	8007b5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1cb      	bne.n	8007a6a <HAL_SPI_Receive+0x114>
 8007ad2:	e031      	b.n	8007b38 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d113      	bne.n	8007b0a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	b292      	uxth	r2, r2
 8007aee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	1c9a      	adds	r2, r3, #2
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b08:	e011      	b.n	8007b2e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b0a:	f7fc fa21 	bl	8003f50 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d803      	bhi.n	8007b22 <HAL_SPI_Receive+0x1cc>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d102      	bne.n	8007b28 <HAL_SPI_Receive+0x1d2>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b2c:	e017      	b.n	8007b5e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1cd      	bne.n	8007ad4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fa45 	bl	8007fcc <SPI_EndRxTransaction>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
 8007b5a:	e000      	b.n	8007b5e <HAL_SPI_Receive+0x208>
  }

error :
 8007b5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08c      	sub	sp, #48	; 0x30
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b86:	2301      	movs	r3, #1
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x26>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e18a      	b.n	8007eb4 <HAL_SPI_TransmitReceive+0x33c>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ba6:	f7fc f9d3 	bl	8003f50 <HAL_GetTick>
 8007baa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bbc:	887b      	ldrh	r3, [r7, #2]
 8007bbe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d00f      	beq.n	8007be8 <HAL_SPI_TransmitReceive+0x70>
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bce:	d107      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x68>
 8007bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d003      	beq.n	8007be8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007be0:	2302      	movs	r3, #2
 8007be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007be6:	e15b      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x82>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x82>
 8007bf4:	887b      	ldrh	r3, [r7, #2]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c00:	e14e      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d003      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2205      	movs	r2, #5
 8007c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	887a      	ldrh	r2, [r7, #2]
 8007c26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	887a      	ldrh	r2, [r7, #2]
 8007c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	887a      	ldrh	r2, [r7, #2]
 8007c38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	887a      	ldrh	r2, [r7, #2]
 8007c3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d007      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c72:	d178      	bne.n	8007d66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_SPI_TransmitReceive+0x10a>
 8007c7c:	8b7b      	ldrh	r3, [r7, #26]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d166      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	881a      	ldrh	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	1c9a      	adds	r2, r3, #2
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ca6:	e053      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d11b      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x176>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d016      	beq.n	8007cee <HAL_SPI_TransmitReceive+0x176>
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d113      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	881a      	ldrh	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	1c9a      	adds	r2, r3, #2
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d119      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x1b8>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d014      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	b292      	uxth	r2, r2
 8007d12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	1c9a      	adds	r2, r3, #2
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d30:	f7fc f90e 	bl	8003f50 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d807      	bhi.n	8007d50 <HAL_SPI_TransmitReceive+0x1d8>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d003      	beq.n	8007d50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d4e:	e0a7      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1a6      	bne.n	8007ca8 <HAL_SPI_TransmitReceive+0x130>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1a1      	bne.n	8007ca8 <HAL_SPI_TransmitReceive+0x130>
 8007d64:	e07c      	b.n	8007e60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <HAL_SPI_TransmitReceive+0x1fc>
 8007d6e:	8b7b      	ldrh	r3, [r7, #26]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d16b      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	7812      	ldrb	r2, [r2, #0]
 8007d80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d9a:	e057      	b.n	8007e4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d11c      	bne.n	8007de4 <HAL_SPI_TransmitReceive+0x26c>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d017      	beq.n	8007de4 <HAL_SPI_TransmitReceive+0x26c>
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d114      	bne.n	8007de4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d119      	bne.n	8007e26 <HAL_SPI_TransmitReceive+0x2ae>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d014      	beq.n	8007e26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e22:	2301      	movs	r3, #1
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e26:	f7fc f893 	bl	8003f50 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d803      	bhi.n	8007e3e <HAL_SPI_TransmitReceive+0x2c6>
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3c:	d102      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x2cc>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e4a:	e029      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1a2      	bne.n	8007d9c <HAL_SPI_TransmitReceive+0x224>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d19d      	bne.n	8007d9c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f917 	bl	8008098 <SPI_EndRxTxTransaction>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d006      	beq.n	8007e7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e7c:	e010      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10b      	bne.n	8007e9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	e000      	b.n	8007ea0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3730      	adds	r7, #48	; 0x30
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ecc:	f7fc f840 	bl	8003f50 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4413      	add	r3, r2
 8007eda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007edc:	f7fc f838 	bl	8003f50 <HAL_GetTick>
 8007ee0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ee2:	4b39      	ldr	r3, [pc, #228]	; (8007fc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	015b      	lsls	r3, r3, #5
 8007ee8:	0d1b      	lsrs	r3, r3, #20
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	fb02 f303 	mul.w	r3, r2, r3
 8007ef0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ef2:	e054      	b.n	8007f9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d050      	beq.n	8007f9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007efc:	f7fc f828 	bl	8003f50 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d902      	bls.n	8007f12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d13d      	bne.n	8007f8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f2a:	d111      	bne.n	8007f50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f34:	d004      	beq.n	8007f40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f3e:	d107      	bne.n	8007f50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f58:	d10f      	bne.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e017      	b.n	8007fbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	bf0c      	ite	eq
 8007fae:	2301      	moveq	r3, #1
 8007fb0:	2300      	movne	r3, #0
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d19b      	bne.n	8007ef4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3720      	adds	r7, #32
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200006ec 	.word	0x200006ec

08007fcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe0:	d111      	bne.n	8008006 <SPI_EndRxTransaction+0x3a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fea:	d004      	beq.n	8007ff6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff4:	d107      	bne.n	8008006 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008004:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800800e:	d12a      	bne.n	8008066 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008018:	d012      	beq.n	8008040 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2200      	movs	r2, #0
 8008022:	2180      	movs	r1, #128	; 0x80
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7ff ff49 	bl	8007ebc <SPI_WaitFlagStateUntilTimeout>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d02d      	beq.n	800808c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008034:	f043 0220 	orr.w	r2, r3, #32
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e026      	b.n	800808e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	2101      	movs	r1, #1
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff ff36 	bl	8007ebc <SPI_WaitFlagStateUntilTimeout>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d01a      	beq.n	800808c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	f043 0220 	orr.w	r2, r3, #32
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e013      	b.n	800808e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2200      	movs	r2, #0
 800806e:	2101      	movs	r1, #1
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff ff23 	bl	8007ebc <SPI_WaitFlagStateUntilTimeout>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	f043 0220 	orr.w	r2, r3, #32
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e000      	b.n	800808e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af02      	add	r7, sp, #8
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080a4:	4b1b      	ldr	r3, [pc, #108]	; (8008114 <SPI_EndRxTxTransaction+0x7c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a1b      	ldr	r2, [pc, #108]	; (8008118 <SPI_EndRxTxTransaction+0x80>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	0d5b      	lsrs	r3, r3, #21
 80080b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080c2:	d112      	bne.n	80080ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2200      	movs	r2, #0
 80080cc:	2180      	movs	r1, #128	; 0x80
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7ff fef4 	bl	8007ebc <SPI_WaitFlagStateUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d016      	beq.n	8008108 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	f043 0220 	orr.w	r2, r3, #32
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e00f      	b.n	800810a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008100:	2b80      	cmp	r3, #128	; 0x80
 8008102:	d0f2      	beq.n	80080ea <SPI_EndRxTxTransaction+0x52>
 8008104:	e000      	b.n	8008108 <SPI_EndRxTxTransaction+0x70>
        break;
 8008106:	bf00      	nop
  }

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	200006ec 	.word	0x200006ec
 8008118:	165e9f81 	.word	0x165e9f81

0800811c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e041      	b.n	80081b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fb fdbe 	bl	8003cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f000 fd54 	bl	8008c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d001      	beq.n	80081d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e03c      	b.n	800824e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1e      	ldr	r2, [pc, #120]	; (800825c <HAL_TIM_Base_Start+0xa0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d018      	beq.n	8008218 <HAL_TIM_Base_Start+0x5c>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ee:	d013      	beq.n	8008218 <HAL_TIM_Base_Start+0x5c>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1a      	ldr	r2, [pc, #104]	; (8008260 <HAL_TIM_Base_Start+0xa4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00e      	beq.n	8008218 <HAL_TIM_Base_Start+0x5c>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a19      	ldr	r2, [pc, #100]	; (8008264 <HAL_TIM_Base_Start+0xa8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d009      	beq.n	8008218 <HAL_TIM_Base_Start+0x5c>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a17      	ldr	r2, [pc, #92]	; (8008268 <HAL_TIM_Base_Start+0xac>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d004      	beq.n	8008218 <HAL_TIM_Base_Start+0x5c>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a16      	ldr	r2, [pc, #88]	; (800826c <HAL_TIM_Base_Start+0xb0>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d111      	bne.n	800823c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b06      	cmp	r3, #6
 8008228:	d010      	beq.n	800824c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0201 	orr.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823a:	e007      	b.n	800824c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40014000 	.word	0x40014000

08008270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b01      	cmp	r3, #1
 8008282:	d001      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e044      	b.n	8008312 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68da      	ldr	r2, [r3, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0201 	orr.w	r2, r2, #1
 800829e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <HAL_TIM_Base_Start_IT+0xb0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d018      	beq.n	80082dc <HAL_TIM_Base_Start_IT+0x6c>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b2:	d013      	beq.n	80082dc <HAL_TIM_Base_Start_IT+0x6c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1a      	ldr	r2, [pc, #104]	; (8008324 <HAL_TIM_Base_Start_IT+0xb4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00e      	beq.n	80082dc <HAL_TIM_Base_Start_IT+0x6c>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a19      	ldr	r2, [pc, #100]	; (8008328 <HAL_TIM_Base_Start_IT+0xb8>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d009      	beq.n	80082dc <HAL_TIM_Base_Start_IT+0x6c>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a17      	ldr	r2, [pc, #92]	; (800832c <HAL_TIM_Base_Start_IT+0xbc>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <HAL_TIM_Base_Start_IT+0x6c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a16      	ldr	r2, [pc, #88]	; (8008330 <HAL_TIM_Base_Start_IT+0xc0>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d111      	bne.n	8008300 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b06      	cmp	r3, #6
 80082ec:	d010      	beq.n	8008310 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0201 	orr.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fe:	e007      	b.n	8008310 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40010000 	.word	0x40010000
 8008324:	40000400 	.word	0x40000400
 8008328:	40000800 	.word	0x40000800
 800832c:	40000c00 	.word	0x40000c00
 8008330:	40014000 	.word	0x40014000

08008334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e041      	b.n	80083ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f839 	bl	80083d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3304      	adds	r3, #4
 8008370:	4619      	mov	r1, r3
 8008372:	4610      	mov	r0, r2
 8008374:	f000 fc48 	bl	8008c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
	...

080083e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d109      	bne.n	800840c <HAL_TIM_PWM_Start+0x24>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b01      	cmp	r3, #1
 8008402:	bf14      	ite	ne
 8008404:	2301      	movne	r3, #1
 8008406:	2300      	moveq	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	e022      	b.n	8008452 <HAL_TIM_PWM_Start+0x6a>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b04      	cmp	r3, #4
 8008410:	d109      	bne.n	8008426 <HAL_TIM_PWM_Start+0x3e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b01      	cmp	r3, #1
 800841c:	bf14      	ite	ne
 800841e:	2301      	movne	r3, #1
 8008420:	2300      	moveq	r3, #0
 8008422:	b2db      	uxtb	r3, r3
 8008424:	e015      	b.n	8008452 <HAL_TIM_PWM_Start+0x6a>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b08      	cmp	r3, #8
 800842a:	d109      	bne.n	8008440 <HAL_TIM_PWM_Start+0x58>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b01      	cmp	r3, #1
 8008436:	bf14      	ite	ne
 8008438:	2301      	movne	r3, #1
 800843a:	2300      	moveq	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	e008      	b.n	8008452 <HAL_TIM_PWM_Start+0x6a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	bf14      	ite	ne
 800844c:	2301      	movne	r3, #1
 800844e:	2300      	moveq	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e068      	b.n	800852c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <HAL_TIM_PWM_Start+0x82>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008468:	e013      	b.n	8008492 <HAL_TIM_PWM_Start+0xaa>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b04      	cmp	r3, #4
 800846e:	d104      	bne.n	800847a <HAL_TIM_PWM_Start+0x92>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008478:	e00b      	b.n	8008492 <HAL_TIM_PWM_Start+0xaa>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b08      	cmp	r3, #8
 800847e:	d104      	bne.n	800848a <HAL_TIM_PWM_Start+0xa2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008488:	e003      	b.n	8008492 <HAL_TIM_PWM_Start+0xaa>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2202      	movs	r2, #2
 800848e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2201      	movs	r2, #1
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 fe5a 	bl	8009154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a23      	ldr	r2, [pc, #140]	; (8008534 <HAL_TIM_PWM_Start+0x14c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d107      	bne.n	80084ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <HAL_TIM_PWM_Start+0x14c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d018      	beq.n	80084f6 <HAL_TIM_PWM_Start+0x10e>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d013      	beq.n	80084f6 <HAL_TIM_PWM_Start+0x10e>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a19      	ldr	r2, [pc, #100]	; (8008538 <HAL_TIM_PWM_Start+0x150>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00e      	beq.n	80084f6 <HAL_TIM_PWM_Start+0x10e>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a17      	ldr	r2, [pc, #92]	; (800853c <HAL_TIM_PWM_Start+0x154>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d009      	beq.n	80084f6 <HAL_TIM_PWM_Start+0x10e>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a16      	ldr	r2, [pc, #88]	; (8008540 <HAL_TIM_PWM_Start+0x158>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d004      	beq.n	80084f6 <HAL_TIM_PWM_Start+0x10e>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a14      	ldr	r2, [pc, #80]	; (8008544 <HAL_TIM_PWM_Start+0x15c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d111      	bne.n	800851a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f003 0307 	and.w	r3, r3, #7
 8008500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2b06      	cmp	r3, #6
 8008506:	d010      	beq.n	800852a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0201 	orr.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008518:	e007      	b.n	800852a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0201 	orr.w	r2, r2, #1
 8008528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	40010000 	.word	0x40010000
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800
 8008540:	40000c00 	.word	0x40000c00
 8008544:	40014000 	.word	0x40014000

08008548 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e097      	b.n	800868c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b00      	cmp	r3, #0
 8008566:	d106      	bne.n	8008576 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7fb fb2b 	bl	8003bcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6812      	ldr	r2, [r2, #0]
 8008588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800858c:	f023 0307 	bic.w	r3, r3, #7
 8008590:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3304      	adds	r3, #4
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f000 fb33 	bl	8008c08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ca:	f023 0303 	bic.w	r3, r3, #3
 80085ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	4313      	orrs	r3, r2
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80085e8:	f023 030c 	bic.w	r3, r3, #12
 80085ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	021b      	lsls	r3, r3, #8
 8008604:	4313      	orrs	r3, r2
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	011a      	lsls	r2, r3, #4
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	031b      	lsls	r3, r3, #12
 8008618:	4313      	orrs	r3, r2
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4313      	orrs	r3, r2
 800861e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008626:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800862e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	4313      	orrs	r3, r2
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d122      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d11b      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0202 	mvn.w	r2, #2
 80086c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fa77 	bl	8008bca <HAL_TIM_IC_CaptureCallback>
 80086dc:	e005      	b.n	80086ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa69 	bl	8008bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa7a 	bl	8008bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	d122      	bne.n	8008744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b04      	cmp	r3, #4
 800870a:	d11b      	bne.n	8008744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0204 	mvn.w	r2, #4
 8008714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2202      	movs	r2, #2
 800871a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa4d 	bl	8008bca <HAL_TIM_IC_CaptureCallback>
 8008730:	e005      	b.n	800873e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa3f 	bl	8008bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fa50 	bl	8008bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0308 	and.w	r3, r3, #8
 800874e:	2b08      	cmp	r3, #8
 8008750:	d122      	bne.n	8008798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b08      	cmp	r3, #8
 800875e:	d11b      	bne.n	8008798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f06f 0208 	mvn.w	r2, #8
 8008768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2204      	movs	r2, #4
 800876e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fa23 	bl	8008bca <HAL_TIM_IC_CaptureCallback>
 8008784:	e005      	b.n	8008792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa15 	bl	8008bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa26 	bl	8008bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f003 0310 	and.w	r3, r3, #16
 80087a2:	2b10      	cmp	r3, #16
 80087a4:	d122      	bne.n	80087ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f003 0310 	and.w	r3, r3, #16
 80087b0:	2b10      	cmp	r3, #16
 80087b2:	d11b      	bne.n	80087ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f06f 0210 	mvn.w	r2, #16
 80087bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2208      	movs	r2, #8
 80087c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f9f9 	bl	8008bca <HAL_TIM_IC_CaptureCallback>
 80087d8:	e005      	b.n	80087e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f9eb 	bl	8008bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f9fc 	bl	8008bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d10e      	bne.n	8008818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b01      	cmp	r3, #1
 8008806:	d107      	bne.n	8008818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f06f 0201 	mvn.w	r2, #1
 8008810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7f8 f9d6 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008822:	2b80      	cmp	r3, #128	; 0x80
 8008824:	d10e      	bne.n	8008844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008830:	2b80      	cmp	r3, #128	; 0x80
 8008832:	d107      	bne.n	8008844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800883c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fd26 	bl	8009290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884e:	2b40      	cmp	r3, #64	; 0x40
 8008850:	d10e      	bne.n	8008870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	d107      	bne.n	8008870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f9c1 	bl	8008bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b20      	cmp	r3, #32
 800887c:	d10e      	bne.n	800889c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	2b20      	cmp	r3, #32
 800888a:	d107      	bne.n	800889c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f06f 0220 	mvn.w	r2, #32
 8008894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fcf0 	bl	800927c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088be:	2302      	movs	r3, #2
 80088c0:	e0ae      	b.n	8008a20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b0c      	cmp	r3, #12
 80088ce:	f200 809f 	bhi.w	8008a10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	0800890d 	.word	0x0800890d
 80088dc:	08008a11 	.word	0x08008a11
 80088e0:	08008a11 	.word	0x08008a11
 80088e4:	08008a11 	.word	0x08008a11
 80088e8:	0800894d 	.word	0x0800894d
 80088ec:	08008a11 	.word	0x08008a11
 80088f0:	08008a11 	.word	0x08008a11
 80088f4:	08008a11 	.word	0x08008a11
 80088f8:	0800898f 	.word	0x0800898f
 80088fc:	08008a11 	.word	0x08008a11
 8008900:	08008a11 	.word	0x08008a11
 8008904:	08008a11 	.word	0x08008a11
 8008908:	080089cf 	.word	0x080089cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 f9f8 	bl	8008d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f042 0208 	orr.w	r2, r2, #8
 8008926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699a      	ldr	r2, [r3, #24]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0204 	bic.w	r2, r2, #4
 8008936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6999      	ldr	r1, [r3, #24]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	691a      	ldr	r2, [r3, #16]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	619a      	str	r2, [r3, #24]
      break;
 800894a:	e064      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fa3e 	bl	8008dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6999      	ldr	r1, [r3, #24]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	021a      	lsls	r2, r3, #8
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	619a      	str	r2, [r3, #24]
      break;
 800898c:	e043      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 fa89 	bl	8008eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0208 	orr.w	r2, r2, #8
 80089a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0204 	bic.w	r2, r2, #4
 80089b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69d9      	ldr	r1, [r3, #28]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	61da      	str	r2, [r3, #28]
      break;
 80089cc:	e023      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68b9      	ldr	r1, [r7, #8]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fad3 	bl	8008f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69da      	ldr	r2, [r3, #28]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69d9      	ldr	r1, [r3, #28]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	021a      	lsls	r2, r3, #8
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	61da      	str	r2, [r3, #28]
      break;
 8008a0e:	e002      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
      break;
 8008a14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIM_ConfigClockSource+0x1c>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e0b4      	b.n	8008bae <HAL_TIM_ConfigClockSource+0x186>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7c:	d03e      	beq.n	8008afc <HAL_TIM_ConfigClockSource+0xd4>
 8008a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a82:	f200 8087 	bhi.w	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8a:	f000 8086 	beq.w	8008b9a <HAL_TIM_ConfigClockSource+0x172>
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d87f      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008a94:	2b70      	cmp	r3, #112	; 0x70
 8008a96:	d01a      	beq.n	8008ace <HAL_TIM_ConfigClockSource+0xa6>
 8008a98:	2b70      	cmp	r3, #112	; 0x70
 8008a9a:	d87b      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008a9c:	2b60      	cmp	r3, #96	; 0x60
 8008a9e:	d050      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x11a>
 8008aa0:	2b60      	cmp	r3, #96	; 0x60
 8008aa2:	d877      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa4:	2b50      	cmp	r3, #80	; 0x50
 8008aa6:	d03c      	beq.n	8008b22 <HAL_TIM_ConfigClockSource+0xfa>
 8008aa8:	2b50      	cmp	r3, #80	; 0x50
 8008aaa:	d873      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d058      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x13a>
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d86f      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab4:	2b30      	cmp	r3, #48	; 0x30
 8008ab6:	d064      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008ab8:	2b30      	cmp	r3, #48	; 0x30
 8008aba:	d86b      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d060      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	d867      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d05c      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d05a      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x15a>
 8008acc:	e062      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	6899      	ldr	r1, [r3, #8]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f000 fb19 	bl	8009114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	609a      	str	r2, [r3, #8]
      break;
 8008afa:	e04f      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	6899      	ldr	r1, [r3, #8]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f000 fb02 	bl	8009114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b1e:	609a      	str	r2, [r3, #8]
      break;
 8008b20:	e03c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6859      	ldr	r1, [r3, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f000 fa76 	bl	8009020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2150      	movs	r1, #80	; 0x50
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 facf 	bl	80090de <TIM_ITRx_SetConfig>
      break;
 8008b40:	e02c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6859      	ldr	r1, [r3, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f000 fa95 	bl	800907e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2160      	movs	r1, #96	; 0x60
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fabf 	bl	80090de <TIM_ITRx_SetConfig>
      break;
 8008b60:	e01c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f000 fa56 	bl	8009020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2140      	movs	r1, #64	; 0x40
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 faaf 	bl	80090de <TIM_ITRx_SetConfig>
      break;
 8008b80:	e00c      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f000 faa6 	bl	80090de <TIM_ITRx_SetConfig>
      break;
 8008b92:	e003      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]
      break;
 8008b98:	e000      	b.n	8008b9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a34      	ldr	r2, [pc, #208]	; (8008cec <TIM_Base_SetConfig+0xe4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00f      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d00b      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a31      	ldr	r2, [pc, #196]	; (8008cf0 <TIM_Base_SetConfig+0xe8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d007      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a30      	ldr	r2, [pc, #192]	; (8008cf4 <TIM_Base_SetConfig+0xec>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a2f      	ldr	r2, [pc, #188]	; (8008cf8 <TIM_Base_SetConfig+0xf0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d108      	bne.n	8008c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a25      	ldr	r2, [pc, #148]	; (8008cec <TIM_Base_SetConfig+0xe4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d01b      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c60:	d017      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a22      	ldr	r2, [pc, #136]	; (8008cf0 <TIM_Base_SetConfig+0xe8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <TIM_Base_SetConfig+0xec>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00f      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a20      	ldr	r2, [pc, #128]	; (8008cf8 <TIM_Base_SetConfig+0xf0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d00b      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <TIM_Base_SetConfig+0xf4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d007      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a1e      	ldr	r2, [pc, #120]	; (8008d00 <TIM_Base_SetConfig+0xf8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a1d      	ldr	r2, [pc, #116]	; (8008d04 <TIM_Base_SetConfig+0xfc>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d108      	bne.n	8008ca4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a08      	ldr	r2, [pc, #32]	; (8008cec <TIM_Base_SetConfig+0xe4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d103      	bne.n	8008cd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	615a      	str	r2, [r3, #20]
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40000400 	.word	0x40000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	40000c00 	.word	0x40000c00
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40014400 	.word	0x40014400
 8008d04:	40014800 	.word	0x40014800

08008d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0201 	bic.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f023 0302 	bic.w	r3, r3, #2
 8008d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a1c      	ldr	r2, [pc, #112]	; (8008dd0 <TIM_OC1_SetConfig+0xc8>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d10c      	bne.n	8008d7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f023 0308 	bic.w	r3, r3, #8
 8008d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f023 0304 	bic.w	r3, r3, #4
 8008d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <TIM_OC1_SetConfig+0xc8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d111      	bne.n	8008daa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	621a      	str	r2, [r3, #32]
}
 8008dc4:	bf00      	nop
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	40010000 	.word	0x40010000

08008dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	f023 0210 	bic.w	r2, r3, #16
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f023 0320 	bic.w	r3, r3, #32
 8008e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ea8 <TIM_OC2_SetConfig+0xd4>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d10d      	bne.n	8008e50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a15      	ldr	r2, [pc, #84]	; (8008ea8 <TIM_OC2_SetConfig+0xd4>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d113      	bne.n	8008e80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	621a      	str	r2, [r3, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	40010000 	.word	0x40010000

08008eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	021b      	lsls	r3, r3, #8
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <TIM_OC3_SetConfig+0xd0>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d10d      	bne.n	8008f26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a14      	ldr	r2, [pc, #80]	; (8008f7c <TIM_OC3_SetConfig+0xd0>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d113      	bne.n	8008f56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	011b      	lsls	r3, r3, #4
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	621a      	str	r2, [r3, #32]
}
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	40010000 	.word	0x40010000

08008f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	031b      	lsls	r3, r3, #12
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a10      	ldr	r2, [pc, #64]	; (800901c <TIM_OC4_SetConfig+0x9c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d109      	bne.n	8008ff4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	019b      	lsls	r3, r3, #6
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40010000 	.word	0x40010000

08009020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	f023 0201 	bic.w	r2, r3, #1
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800904a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f023 030a 	bic.w	r3, r3, #10
 800905c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4313      	orrs	r3, r2
 8009064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	621a      	str	r2, [r3, #32]
}
 8009072:	bf00      	nop
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800907e:	b480      	push	{r7}
 8009080:	b087      	sub	sp, #28
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	f023 0210 	bic.w	r2, r3, #16
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	031b      	lsls	r3, r3, #12
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	621a      	str	r2, [r3, #32]
}
 80090d2:	bf00      	nop
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f043 0307 	orr.w	r3, r3, #7
 8009100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	609a      	str	r2, [r3, #8]
}
 8009108:	bf00      	nop
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800912e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	021a      	lsls	r2, r3, #8
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	431a      	orrs	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4313      	orrs	r3, r2
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	609a      	str	r2, [r3, #8]
}
 8009148:	bf00      	nop
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	2201      	movs	r2, #1
 8009168:	fa02 f303 	lsl.w	r3, r2, r3
 800916c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a1a      	ldr	r2, [r3, #32]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	43db      	mvns	r3, r3
 8009176:	401a      	ands	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6a1a      	ldr	r2, [r3, #32]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f003 031f 	and.w	r3, r3, #31
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	431a      	orrs	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	621a      	str	r2, [r3, #32]
}
 8009192:	bf00      	nop
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
	...

080091a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e050      	b.n	800925a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a1c      	ldr	r2, [pc, #112]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d018      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009204:	d013      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a18      	ldr	r2, [pc, #96]	; (800926c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d00e      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a16      	ldr	r2, [pc, #88]	; (8009270 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d009      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a15      	ldr	r2, [pc, #84]	; (8009274 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d004      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a13      	ldr	r2, [pc, #76]	; (8009278 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d10c      	bne.n	8009248 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	4313      	orrs	r3, r2
 800923e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40010000 	.word	0x40010000
 800926c:	40000400 	.word	0x40000400
 8009270:	40000800 	.word	0x40000800
 8009274:	40000c00 	.word	0x40000c00
 8009278:	40014000 	.word	0x40014000

0800927c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <arm_sin_f32>:
 80092a4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009320 <arm_sin_f32+0x7c>
 80092a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80092ac:	ee20 7a07 	vmul.f32	s14, s0, s14
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80092b8:	d42c      	bmi.n	8009314 <arm_sin_f32+0x70>
 80092ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092be:	eddf 6a19 	vldr	s13, [pc, #100]	; 8009324 <arm_sin_f32+0x80>
 80092c2:	4a19      	ldr	r2, [pc, #100]	; (8009328 <arm_sin_f32+0x84>)
 80092c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80092cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80092d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d8:	bfa8      	it	ge
 80092da:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80092de:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80092e2:	ee17 3a10 	vmov	r3, s14
 80092e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ea:	ee07 3a10 	vmov	s14, r3
 80092ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80092f2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80092f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092fa:	edd1 6a01 	vldr	s13, [r1, #4]
 80092fe:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009302:	ed91 0a00 	vldr	s0, [r1]
 8009306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800930a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800930e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009312:	4770      	bx	lr
 8009314:	ee17 3a90 	vmov	r3, s15
 8009318:	3b01      	subs	r3, #1
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	e7cc      	b.n	80092ba <arm_sin_f32+0x16>
 8009320:	3e22f983 	.word	0x3e22f983
 8009324:	44000000 	.word	0x44000000
 8009328:	0800a040 	.word	0x0800a040

0800932c <__libc_init_array>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	4d0d      	ldr	r5, [pc, #52]	; (8009364 <__libc_init_array+0x38>)
 8009330:	4c0d      	ldr	r4, [pc, #52]	; (8009368 <__libc_init_array+0x3c>)
 8009332:	1b64      	subs	r4, r4, r5
 8009334:	10a4      	asrs	r4, r4, #2
 8009336:	2600      	movs	r6, #0
 8009338:	42a6      	cmp	r6, r4
 800933a:	d109      	bne.n	8009350 <__libc_init_array+0x24>
 800933c:	4d0b      	ldr	r5, [pc, #44]	; (800936c <__libc_init_array+0x40>)
 800933e:	4c0c      	ldr	r4, [pc, #48]	; (8009370 <__libc_init_array+0x44>)
 8009340:	f000 f82e 	bl	80093a0 <_init>
 8009344:	1b64      	subs	r4, r4, r5
 8009346:	10a4      	asrs	r4, r4, #2
 8009348:	2600      	movs	r6, #0
 800934a:	42a6      	cmp	r6, r4
 800934c:	d105      	bne.n	800935a <__libc_init_array+0x2e>
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	f855 3b04 	ldr.w	r3, [r5], #4
 8009354:	4798      	blx	r3
 8009356:	3601      	adds	r6, #1
 8009358:	e7ee      	b.n	8009338 <__libc_init_array+0xc>
 800935a:	f855 3b04 	ldr.w	r3, [r5], #4
 800935e:	4798      	blx	r3
 8009360:	3601      	adds	r6, #1
 8009362:	e7f2      	b.n	800934a <__libc_init_array+0x1e>
 8009364:	0800a84c 	.word	0x0800a84c
 8009368:	0800a84c 	.word	0x0800a84c
 800936c:	0800a84c 	.word	0x0800a84c
 8009370:	0800a850 	.word	0x0800a850

08009374 <memcpy>:
 8009374:	440a      	add	r2, r1
 8009376:	4291      	cmp	r1, r2
 8009378:	f100 33ff 	add.w	r3, r0, #4294967295
 800937c:	d100      	bne.n	8009380 <memcpy+0xc>
 800937e:	4770      	bx	lr
 8009380:	b510      	push	{r4, lr}
 8009382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800938a:	4291      	cmp	r1, r2
 800938c:	d1f9      	bne.n	8009382 <memcpy+0xe>
 800938e:	bd10      	pop	{r4, pc}

08009390 <memset>:
 8009390:	4402      	add	r2, r0
 8009392:	4603      	mov	r3, r0
 8009394:	4293      	cmp	r3, r2
 8009396:	d100      	bne.n	800939a <memset+0xa>
 8009398:	4770      	bx	lr
 800939a:	f803 1b01 	strb.w	r1, [r3], #1
 800939e:	e7f9      	b.n	8009394 <memset+0x4>

080093a0 <_init>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	bf00      	nop
 80093a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a6:	bc08      	pop	{r3}
 80093a8:	469e      	mov	lr, r3
 80093aa:	4770      	bx	lr

080093ac <_fini>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	bf00      	nop
 80093b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b2:	bc08      	pop	{r3}
 80093b4:	469e      	mov	lr, r3
 80093b6:	4770      	bx	lr
