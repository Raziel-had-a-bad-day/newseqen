
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f4  08007b8c  08007b8c  00017b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c80  08008c80  000205f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c88  08008c88  000205f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005f0  20000000  08008c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  200005f0  08009280  000205f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020c8  08009280  000220c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001200e  00000000  00000000  00020620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224a  00000000  00000000  0003262e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00034878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  000358b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753e  00000000  00000000  00036800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012056  00000000  00000000  0004dd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095328  00000000  00000000  0005fd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000f50bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ec  00000000  00000000  000f517c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  000f9768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005f0 	.word	0x200005f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b74 	.word	0x08007b74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005f4 	.word	0x200005f4
 80001d4:	08007b74 	.word	0x08007b74

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0aa      	sub	sp, #168	; 0xa8
 8000b4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f002 fead 	bl	80038ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 fb01 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f000 fd79 	bl	800164c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5a:	f000 fd57 	bl	800160c <MX_DMA_Init>
  MX_ADC1_Init();
 8000b5e:	f000 fb65 	bl	800122c <MX_ADC1_Init>
  MX_SPI2_Init();
 8000b62:	f000 fbff 	bl	8001364 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000b66:	f000 fc87 	bl	8001478 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b6a:	f000 fcfb 	bl	8001564 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000b6e:	f000 fbcb 	bl	8001308 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000b72:	f000 fc2d 	bl	80013d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8000b76:	4ba2      	ldr	r3, [pc, #648]	; (8000e00 <main+0x2b8>)
 8000b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2);
 8000b7c:	48a1      	ldr	r0, [pc, #644]	; (8000e04 <main+0x2bc>)
 8000b7e:	f005 fdd1 	bl	8006724 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8000b82:	48a1      	ldr	r0, [pc, #644]	; (8000e08 <main+0x2c0>)
 8000b84:	f006 f861 	bl	8006c4a <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8000b88:	4ba0      	ldr	r3, [pc, #640]	; (8000e0c <main+0x2c4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8000b8e:	48a0      	ldr	r0, [pc, #640]	; (8000e10 <main+0x2c8>)
 8000b90:	f006 f837 	bl	8006c02 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8000b94:	489f      	ldr	r0, [pc, #636]	; (8000e14 <main+0x2cc>)
 8000b96:	f006 f834 	bl	8006c02 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	489a      	ldr	r0, [pc, #616]	; (8000e08 <main+0x2c0>)
 8000b9e:	f006 f8ad 	bl	8006cfc <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8000ba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8000bac:	489a      	ldr	r0, [pc, #616]	; (8000e18 <main+0x2d0>)
 8000bae:	f002 ff57 	bl	8003a60 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 3); //dma start ,needs this and adc start
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	4999      	ldr	r1, [pc, #612]	; (8000e1c <main+0x2d4>)
 8000bb6:	4898      	ldr	r0, [pc, #608]	; (8000e18 <main+0x2d0>)
 8000bb8:	f002 fff8 	bl	8003bac <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8000bbc:	4898      	ldr	r0, [pc, #608]	; (8000e20 <main+0x2d8>)
 8000bbe:	f002 fc77 	bl	80034b0 <HAL_I2C_MspInit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	2340      	movs	r3, #64	; 0x40
 8000bca:	9301      	str	r3, [sp, #4]
 8000bcc:	4b95      	ldr	r3, [pc, #596]	; (8000e24 <main+0x2dc>)
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	21a0      	movs	r1, #160	; 0xa0
 8000bd6:	4892      	ldr	r0, [pc, #584]	; (8000e20 <main+0x2d8>)
 8000bd8:	f004 fbe8 	bl	80053ac <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8000bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be0:	9302      	str	r3, [sp, #8]
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2302      	movs	r3, #2
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	21a0      	movs	r1, #160	; 0xa0
 8000bf2:	488b      	ldr	r0, [pc, #556]	; (8000e20 <main+0x2d8>)
 8000bf4:	f004 fbda 	bl	80053ac <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	2302      	movs	r3, #2
 8000c08:	22c0      	movs	r2, #192	; 0xc0
 8000c0a:	21a0      	movs	r1, #160	; 0xa0
 8000c0c:	4884      	ldr	r0, [pc, #528]	; (8000e20 <main+0x2d8>)
 8000c0e:	f004 fbcd 	bl	80053ac <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8000c12:	4b85      	ldr	r3, [pc, #532]	; (8000e28 <main+0x2e0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	801a      	strh	r2, [r3, #0]
 8000c18:	e024      	b.n	8000c64 <main+0x11c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8000c1a:	4b83      	ldr	r3, [pc, #524]	; (8000e28 <main+0x2e0>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	f103 0208 	add.w	r2, r3, #8
 8000c26:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <main+0x2e0>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000c34:	441a      	add	r2, r3
 8000c36:	4b7c      	ldr	r3, [pc, #496]	; (8000e28 <main+0x2e0>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c3e:	497a      	ldr	r1, [pc, #488]	; (8000e28 <main+0x2e0>)
 8000c40:	8809      	ldrh	r1, [r1, #0]
 8000c42:	0989      	lsrs	r1, r1, #6
 8000c44:	b289      	uxth	r1, r1
 8000c46:	4608      	mov	r0, r1
 8000c48:	4978      	ldr	r1, [pc, #480]	; (8000e2c <main+0x2e4>)
 8000c4a:	5c89      	ldrb	r1, [r1, r2]
 8000c4c:	4a78      	ldr	r2, [pc, #480]	; (8000e30 <main+0x2e8>)
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	4413      	add	r3, r2
 8000c52:	4403      	add	r3, r0
 8000c54:	460a      	mov	r2, r1
 8000c56:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8000c58:	4b73      	ldr	r3, [pc, #460]	; (8000e28 <main+0x2e0>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b71      	ldr	r3, [pc, #452]	; (8000e28 <main+0x2e0>)
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	4b70      	ldr	r3, [pc, #448]	; (8000e28 <main+0x2e0>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6c:	d3d5      	bcc.n	8000c1a <main+0xd2>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8000c6e:	4b6e      	ldr	r3, [pc, #440]	; (8000e28 <main+0x2e0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
 8000c74:	e011      	b.n	8000c9a <main+0x152>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8000c76:	4b6c      	ldr	r3, [pc, #432]	; (8000e28 <main+0x2e0>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b6a      	ldr	r3, [pc, #424]	; (8000e28 <main+0x2e0>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	3340      	adds	r3, #64	; 0x40
 8000c82:	3298      	adds	r2, #152	; 0x98
 8000c84:	443a      	add	r2, r7
 8000c86:	f812 1c50 	ldrb.w	r1, [r2, #-80]
 8000c8a:	4a66      	ldr	r2, [pc, #408]	; (8000e24 <main+0x2dc>)
 8000c8c:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000c8e:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <main+0x2e0>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b64      	ldr	r3, [pc, #400]	; (8000e28 <main+0x2e0>)
 8000c98:	801a      	strh	r2, [r3, #0]
 8000c9a:	4b63      	ldr	r3, [pc, #396]	; (8000e28 <main+0x2e0>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca0:	d9e9      	bls.n	8000c76 <main+0x12e>
}

for(i=0;i<64;i++){
 8000ca2:	4b61      	ldr	r3, [pc, #388]	; (8000e28 <main+0x2e0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	801a      	strh	r2, [r3, #0]
 8000ca8:	e011      	b.n	8000cce <main+0x186>
	potSource[i+128]=potSource3[i];
 8000caa:	4b5f      	ldr	r3, [pc, #380]	; (8000e28 <main+0x2e0>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <main+0x2e0>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	3380      	adds	r3, #128	; 0x80
 8000cb6:	3298      	adds	r2, #152	; 0x98
 8000cb8:	443a      	add	r2, r7
 8000cba:	f812 1c94 	ldrb.w	r1, [r2, #-148]
 8000cbe:	4a59      	ldr	r2, [pc, #356]	; (8000e24 <main+0x2dc>)
 8000cc0:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000cc2:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <main+0x2e0>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <main+0x2e0>)
 8000ccc:	801a      	strh	r2, [r3, #0]
 8000cce:	4b56      	ldr	r3, [pc, #344]	; (8000e28 <main+0x2e0>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd4:	d9e9      	bls.n	8000caa <main+0x162>
}

for(i=0;i<180;i++){
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <main+0x2e0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	801a      	strh	r2, [r3, #0]
 8000cdc:	e010      	b.n	8000d00 <main+0x1b8>
	potValues[i]=potSource[i]>>4;
 8000cde:	4b52      	ldr	r3, [pc, #328]	; (8000e28 <main+0x2e0>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b4f      	ldr	r3, [pc, #316]	; (8000e24 <main+0x2dc>)
 8000ce6:	5c9b      	ldrb	r3, [r3, r2]
 8000ce8:	4a4f      	ldr	r2, [pc, #316]	; (8000e28 <main+0x2e0>)
 8000cea:	8812      	ldrh	r2, [r2, #0]
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	b2d9      	uxtb	r1, r3
 8000cf0:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <main+0x2ec>)
 8000cf2:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8000cf4:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <main+0x2e0>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <main+0x2e0>)
 8000cfe:	801a      	strh	r2, [r3, #0]
 8000d00:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <main+0x2e0>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	2bb3      	cmp	r3, #179	; 0xb3
 8000d06:	d9ea      	bls.n	8000cde <main+0x196>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8000d08:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <main+0x2e0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	801a      	strh	r2, [r3, #0]
 8000d0e:	e049      	b.n	8000da4 <main+0x25c>

tempo_hold=(i+180)*0.0166666666;
 8000d10:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <main+0x2e0>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	33b4      	adds	r3, #180	; 0xb4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fcda 	bl	80006d0 <__aeabi_i2d>
 8000d1c:	a334      	add	r3, pc, #208	; (adr r3, 8000df0 <main+0x2a8>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fa59 	bl	80001d8 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f7ff fd39 	bl	80007a4 <__aeabi_d2f>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_hold=	1/tempo_hold;
 8000d38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d3c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8000d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d44:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
 8000d48:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d4c:	f7ff fcd2 	bl	80006f4 <__aeabi_f2d>
 8000d50:	a329      	add	r3, pc, #164	; (adr r3, 8000df8 <main+0x2b0>)
 8000d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d56:	f7ff fa3f 	bl	80001d8 <__aeabi_dmul>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	4610      	mov	r0, r2
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <main+0x2f0>)
 8000d68:	f7ff fa36 	bl	80001d8 <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4610      	mov	r0, r2
 8000d72:	4619      	mov	r1, r3
 8000d74:	f7ff fd16 	bl	80007a4 <__aeabi_d2f>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_lut[i]=tempo_hold;
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <main+0x2e0>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d8c:	ee17 3a90 	vmov	r3, s15
 8000d90:	b299      	uxth	r1, r3
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <main+0x2f4>)
 8000d94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <main+0x2e0>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <main+0x2e0>)
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <main+0x2e0>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	2ba0      	cmp	r3, #160	; 0xa0
 8000daa:	d9b1      	bls.n	8000d10 <main+0x1c8>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <main+0x2f8>)
 8000dae:	f240 223b 	movw	r2, #571	; 0x23b
 8000db2:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <main+0x2fc>)
 8000db6:	2218      	movs	r2, #24
 8000db8:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <main+0x2e0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	801a      	strh	r2, [r3, #0]
 8000dc0:	e00b      	b.n	8000dda <main+0x292>
	spell[i]=67;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <main+0x2e0>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <main+0x300>)
 8000dca:	2143      	movs	r1, #67	; 0x43
 8000dcc:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <main+0x2e0>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <main+0x2e0>)
 8000dd8:	801a      	strh	r2, [r3, #0]
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <main+0x2e0>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000de2:	d3ee      	bcc.n	8000dc2 <main+0x27a>

}

display_fill();
 8000de4:	f000 ffcc 	bl	8001d80 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <main+0x2e0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	801a      	strh	r2, [r3, #0]
 8000dee:	e03d      	b.n	8000e6c <main+0x324>
 8000df0:	0febdd13 	.word	0x0febdd13
 8000df4:	3f911111 	.word	0x3f911111
 8000df8:	33333333 	.word	0x33333333
 8000dfc:	40a11733 	.word	0x40a11733
 8000e00:	0800d2f0 	.word	0x0800d2f0
 8000e04:	20000708 	.word	0x20000708
 8000e08:	200007a0 	.word	0x200007a0
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	20000760 	.word	0x20000760
 8000e14:	200007e0 	.word	0x200007e0
 8000e18:	2000060c 	.word	0x2000060c
 8000e1c:	2000134c 	.word	0x2000134c
 8000e20:	200006b4 	.word	0x200006b4
 8000e24:	200009a4 	.word	0x200009a4
 8000e28:	20000b00 	.word	0x20000b00
 8000e2c:	200001d4 	.word	0x200001d4
 8000e30:	20001c78 	.word	0x20001c78
 8000e34:	200008a4 	.word	0x200008a4
 8000e38:	40100000 	.word	0x40100000
 8000e3c:	20001b34 	.word	0x20001b34
 8000e40:	20000aac 	.word	0x20000aac
 8000e44:	20000aa4 	.word	0x20000aa4
 8000e48:	20000024 	.word	0x20000024
 8000e4c:	4b79      	ldr	r3, [pc, #484]	; (8001034 <main+0x4ec>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4b78      	ldr	r3, [pc, #480]	; (8001034 <main+0x4ec>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b77      	ldr	r3, [pc, #476]	; (8001038 <main+0x4f0>)
 8000e5a:	5c59      	ldrb	r1, [r3, r1]
 8000e5c:	4b76      	ldr	r3, [pc, #472]	; (8001038 <main+0x4f0>)
 8000e5e:	5499      	strb	r1, [r3, r2]
 8000e60:	4b74      	ldr	r3, [pc, #464]	; (8001034 <main+0x4ec>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b72      	ldr	r3, [pc, #456]	; (8001034 <main+0x4ec>)
 8000e6a:	801a      	strh	r2, [r3, #0]
 8000e6c:	4b71      	ldr	r3, [pc, #452]	; (8001034 <main+0x4ec>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e74:	d3ea      	bcc.n	8000e4c <main+0x304>

}    //font replace



uint8_t lut_temp2=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
uint8_t lut_temp3=0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
for (i=0;i<256;i++){
 8000e82:	4b6c      	ldr	r3, [pc, #432]	; (8001034 <main+0x4ec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	801a      	strh	r2, [r3, #0]
 8000e88:	e027      	b.n	8000eda <main+0x392>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;
 8000e8a:	4b6a      	ldr	r3, [pc, #424]	; (8001034 <main+0x4ec>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b67      	ldr	r3, [pc, #412]	; (8001034 <main+0x4ec>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	4967      	ldr	r1, [pc, #412]	; (800103c <main+0x4f4>)
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ea6:	2b5e      	cmp	r3, #94	; 0x5e
 8000ea8:	d805      	bhi.n	8000eb6 <main+0x36e>
 8000eaa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000eb4:	e00b      	b.n	8000ece <main+0x386>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}
 8000eb6:	4b5f      	ldr	r3, [pc, #380]	; (8001034 <main+0x4ec>)
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000ebe:	b2d1      	uxtb	r1, r2
 8000ec0:	4a5f      	ldr	r2, [pc, #380]	; (8001040 <main+0x4f8>)
 8000ec2:	54d1      	strb	r1, [r2, r3]
 8000ec4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
for (i=0;i<256;i++){
 8000ece:	4b59      	ldr	r3, [pc, #356]	; (8001034 <main+0x4ec>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b57      	ldr	r3, [pc, #348]	; (8001034 <main+0x4ec>)
 8000ed8:	801a      	strh	r2, [r3, #0]
 8000eda:	4b56      	ldr	r3, [pc, #344]	; (8001034 <main+0x4ec>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d9d3      	bls.n	8000e8a <main+0x342>
}


menuSelect=0;
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <main+0x4fc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8000ee8:	4b57      	ldr	r3, [pc, #348]	; (8001048 <main+0x500>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8000eee:	4b57      	ldr	r3, [pc, #348]	; (800104c <main+0x504>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b55      	ldr	r3, [pc, #340]	; (800104c <main+0x504>)
 8000ef8:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8000efa:	4b55      	ldr	r3, [pc, #340]	; (8001050 <main+0x508>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a53      	ldr	r2, [pc, #332]	; (8001050 <main+0x508>)
 8000f02:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick
 8000f04:	4b52      	ldr	r3, [pc, #328]	; (8001050 <main+0x508>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	2b06      	cmp	r3, #6
 8000f0e:	d101      	bne.n	8000f14 <main+0x3cc>
 8000f10:	f000 fc60 	bl	80017d4 <analoginputloopb>
if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8000f14:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <main+0x508>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f242 3288 	movw	r2, #9096	; 0x2388
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d137      	bne.n	8000f90 <main+0x448>

	mem_buf=potSource[mem_count];
 8000f20:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <main+0x50c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <main+0x510>)
 8000f28:	5c9a      	ldrb	r2, [r3, r2]
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <main+0x514>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	// read values from stored
	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);
 8000f2e:	4b49      	ldr	r3, [pc, #292]	; (8001054 <main+0x50c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	099b      	lsrs	r3, r3, #6
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	019b      	lsls	r3, r3, #6
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b44      	ldr	r3, [pc, #272]	; (8001054 <main+0x50c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <main+0x514>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	21a0      	movs	r1, #160	; 0xa0
 8000f62:	483f      	ldr	r0, [pc, #252]	; (8001060 <main+0x518>)
 8000f64:	f004 f928 	bl	80051b8 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000f68:	2005      	movs	r0, #5
 8000f6a:	f002 fd11 	bl	8003990 <HAL_Delay>
	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 8000f6e:	4b39      	ldr	r3, [pc, #228]	; (8001054 <main+0x50c>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d103      	bne.n	8000f7e <main+0x436>
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <main+0x50c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e005      	b.n	8000f8a <main+0x442>
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <main+0x50c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <main+0x50c>)
 8000f88:	701a      	strb	r2, [r3, #0]
	loop_counter2=0; //reset
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <main+0x508>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <main+0x51c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d12e      	bne.n	8000ff6 <main+0x4ae>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 8000f98:	4b33      	ldr	r3, [pc, #204]	; (8001068 <main+0x520>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <main+0x466>
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <main+0x524>)
 8000fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <main+0x528>)
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e004      	b.n	8000fb8 <main+0x470>
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <main+0x528>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <main+0x524>)
 8000fb6:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <main+0x520>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bf0c      	ite	eq
 8000fc0:	2301      	moveq	r3, #1
 8000fc2:	2300      	movne	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <main+0x520>)
 8000fca:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <main+0x4ec>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	e007      	b.n	8000fe4 <main+0x49c>
 8000fd4:	f000 ff08 	bl	8001de8 <displayBuffer>
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <main+0x4ec>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <main+0x4ec>)
 8000fe2:	801a      	strh	r2, [r3, #0]
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <main+0x4ec>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d9f3      	bls.n	8000fd4 <main+0x48c>
		  enc2_dir=enc2_tempc;
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <main+0x528>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <main+0x524>)
 8000ff4:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <main+0x52c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	d810      	bhi.n	8001020 <main+0x4d8>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <main+0x4ec>)
 8001000:	2200      	movs	r2, #0
 8001002:	801a      	strh	r2, [r3, #0]
 8001004:	e007      	b.n	8001016 <main+0x4ce>
 8001006:	f000 fce7 	bl	80019d8 <display_init>
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <main+0x4ec>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	b29a      	uxth	r2, r3
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <main+0x4ec>)
 8001014:	801a      	strh	r2, [r3, #0]
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <main+0x4ec>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b05      	cmp	r3, #5
 800101c:	d9f3      	bls.n	8001006 <main+0x4be>
 800101e:	e001      	b.n	8001024 <main+0x4dc>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8001020:	f000 fde2 	bl	8001be8 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter & 255)	{ // grab adc readings + 3ms , 32 step
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <main+0x504>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d044      	beq.n	80010b6 <main+0x56e>
	  	for (i=0;i<3;i++) {
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <main+0x4ec>)
 800102e:	2200      	movs	r2, #0
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	e039      	b.n	80010a8 <main+0x560>
 8001034:	20000b00 	.word	0x20000b00
 8001038:	200001d4 	.word	0x200001d4
 800103c:	08007c60 	.word	0x08007c60
 8001040:	20000820 	.word	0x20000820
 8001044:	20000aa5 	.word	0x20000aa5
 8001048:	20000aaa 	.word	0x20000aaa
 800104c:	20000afc 	.word	0x20000afc
 8001050:	200017d4 	.word	0x200017d4
 8001054:	200017d3 	.word	0x200017d3
 8001058:	200009a4 	.word	0x200009a4
 800105c:	200017d8 	.word	0x200017d8
 8001060:	200006b4 	.word	0x200006b4
 8001064:	200020be 	.word	0x200020be
 8001068:	200020bf 	.word	0x200020bf
 800106c:	200017be 	.word	0x200017be
 8001070:	200020c0 	.word	0x200020c0
 8001074:	200017cd 	.word	0x200017cd

	  	adc_values[2-i]= (adc_source[i]>>7) &31;
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <main+0x5e4>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <main+0x5e8>)
 8001080:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001084:	09db      	lsrs	r3, r3, #7
 8001086:	b29b      	uxth	r3, r3
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <main+0x5e4>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	f1c3 0302 	rsb	r3, r3, #2
 8001092:	f002 021f 	and.w	r2, r2, #31
 8001096:	b2d1      	uxtb	r1, r2
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <main+0x5ec>)
 800109a:	54d1      	strb	r1, [r2, r3]
	  	for (i=0;i<3;i++) {
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <main+0x5e4>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <main+0x5e4>)
 80010a6:	801a      	strh	r2, [r3, #0]
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <main+0x5e4>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d9e3      	bls.n	8001078 <main+0x530>
	  }
	  	loop_counter=0;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <main+0x5f0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <main+0x5f4>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	d106      	bne.n	80010cc <main+0x584>
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <main+0x5f8>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <main+0x584>
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <main+0x5f8>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <main+0x5f4>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	4819      	ldr	r0, [pc, #100]	; (8001144 <main+0x5fc>)
 80010de:	f003 ff0d 	bl	8004efc <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <main+0x600>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ec:	d302      	bcc.n	80010f4 <main+0x5ac>
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <main+0x604>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <main+0x600>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80010fe:	d803      	bhi.n	8001108 <main+0x5c0>
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <main+0x604>)
 8001102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001106:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <main+0x608>)
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <main+0x604>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d002      	beq.n	800111a <main+0x5d2>
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <main+0x60c>)
 8001116:	2201      	movs	r2, #1
 8001118:	801a      	strh	r2, [r3, #0]
	  if (bank_write){
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <main+0x60c>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f43f aee5 	beq.w	8000eee <main+0x3a6>

	  	sampling();
 8001124:	f000 ffbc 	bl	80020a0 <sampling>
	  loop_counter++ ;
 8001128:	e6e1      	b.n	8000eee <main+0x3a6>
 800112a:	bf00      	nop
 800112c:	20000b00 	.word	0x20000b00
 8001130:	2000134c 	.word	0x2000134c
 8001134:	200001cc 	.word	0x200001cc
 8001138:	20000afc 	.word	0x20000afc
 800113c:	20000ad8 	.word	0x20000ad8
 8001140:	200017c4 	.word	0x200017c4
 8001144:	40020800 	.word	0x40020800
 8001148:	20001306 	.word	0x20001306
 800114c:	2000130a 	.word	0x2000130a
 8001150:	20000afe 	.word	0x20000afe
 8001154:	200001d2 	.word	0x200001d2

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	; 0x50
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	2230      	movs	r2, #48	; 0x30
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f006 fcfc 	bl	8007b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <SystemClock_Config+0xcc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <SystemClock_Config+0xcc>)
 8001186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <SystemClock_Config+0xcc>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <SystemClock_Config+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <SystemClock_Config+0xd0>)
 80011a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <SystemClock_Config+0xd0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011bc:	2310      	movs	r3, #16
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011c8:	2308      	movs	r3, #8
 80011ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 fe67 	bl	8005eb0 <HAL_RCC_OscConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011e8:	f002 f8bc 	bl	8003364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	230f      	movs	r3, #15
 80011ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2302      	movs	r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2103      	movs	r1, #3
 800120a:	4618      	mov	r0, r3
 800120c:	f005 f8be 	bl	800638c <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001216:	f002 f8a5 	bl	8003364 <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	; 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001240:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <MX_ADC1_Init+0xd4>)
 8001242:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <MX_ADC1_Init+0xd0>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001250:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001252:	2201      	movs	r2, #1
 8001254:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001258:	2201      	movs	r2, #1
 800125a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <MX_ADC1_Init+0xd0>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_ADC1_Init+0xd0>)
 800126c:	4a25      	ldr	r2, [pc, #148]	; (8001304 <MX_ADC1_Init+0xd8>)
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001278:	2203      	movs	r2, #3
 800127a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_ADC1_Init+0xd0>)
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_ADC1_Init+0xd0>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128a:	481c      	ldr	r0, [pc, #112]	; (80012fc <MX_ADC1_Init+0xd0>)
 800128c:	f002 fba4 	bl	80039d8 <HAL_ADC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001296:	f002 f865 	bl	8003364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800129a:	2303      	movs	r3, #3
 800129c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012a2:	2307      	movs	r3, #7
 80012a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	4619      	mov	r1, r3
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <MX_ADC1_Init+0xd0>)
 80012ac:	f002 fd70 	bl	8003d90 <HAL_ADC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012b6:	f002 f855 	bl	8003364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012ba:	2304      	movs	r3, #4
 80012bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_ADC1_Init+0xd0>)
 80012c8:	f002 fd62 	bl	8003d90 <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80012d2:	f002 f847 	bl	8003364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012d6:	2305      	movs	r3, #5
 80012d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012da:	2303      	movs	r3, #3
 80012dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_ADC1_Init+0xd0>)
 80012e4:	f002 fd54 	bl	8003d90 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80012ee:	f002 f839 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000060c 	.word	0x2000060c
 8001300:	40012000 	.word	0x40012000
 8001304:	0f000001 	.word	0x0f000001

08001308 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C2_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C2_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C2_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C2_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C2_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C2_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C2_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C2_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C2_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C2_Init+0x50>)
 8001346:	f003 fdf3 	bl	8004f30 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001350:	f002 f808 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200006b4 	.word	0x200006b4
 800135c:	40005800 	.word	0x40005800
 8001360:	00061a80 	.word	0x00061a80

08001364 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_SPI2_Init+0x64>)
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <MX_SPI2_Init+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <MX_SPI2_Init+0x64>)
 8001370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001374:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_SPI2_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_SPI2_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_SPI2_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_SPI2_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_SPI2_Init+0x64>)
 8001390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001394:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_SPI2_Init+0x64>)
 8001398:	2230      	movs	r2, #48	; 0x30
 800139a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_SPI2_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_SPI2_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_SPI2_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_SPI2_Init+0x64>)
 80013b0:	220a      	movs	r2, #10
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_SPI2_Init+0x64>)
 80013b6:	f005 f9b5 	bl	8006724 <HAL_SPI_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013c0:	f001 ffd0 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000708 	.word	0x20000708
 80013cc:	40003800 	.word	0x40003800

080013d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2224      	movs	r2, #36	; 0x24
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 fbc0 	bl	8007b64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <MX_TIM2_Init+0xa4>)
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <MX_TIM2_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM2_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_TIM2_Init+0xa4>)
 8001402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM2_Init+0xa4>)
 800140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_TIM2_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001416:	2301      	movs	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800141a:	2302      	movs	r3, #2
 800141c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800142e:	2301      	movs	r3, #1
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001436:	2301      	movs	r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_TIM2_Init+0xa4>)
 8001442:	f005 fc8d 	bl	8006d60 <HAL_TIM_Encoder_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800144c:	f001 ff8a 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_TIM2_Init+0xa4>)
 800145e:	f006 fa97 	bl	8007990 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001468:	f001 ff7c 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000760 	.word	0x20000760

08001478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <MX_TIM3_Init+0xe4>)
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <MX_TIM3_Init+0xe8>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <MX_TIM3_Init+0xe4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <MX_TIM3_Init+0xe4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2857;
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <MX_TIM3_Init+0xe4>)
 80014bc:	f640 3229 	movw	r2, #2857	; 0xb29
 80014c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <MX_TIM3_Init+0xe4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <MX_TIM3_Init+0xe4>)
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ce:	4823      	ldr	r0, [pc, #140]	; (800155c <MX_TIM3_Init+0xe4>)
 80014d0:	f005 fb6c 	bl	8006bac <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014da:	f001 ff43 	bl	8003364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e8:	4619      	mov	r1, r3
 80014ea:	481c      	ldr	r0, [pc, #112]	; (800155c <MX_TIM3_Init+0xe4>)
 80014ec:	f005 fe98 	bl	8007220 <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014f6:	f001 ff35 	bl	8003364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014fa:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_TIM3_Init+0xe4>)
 80014fc:	f005 fbc9 	bl	8006c92 <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001506:	f001 ff2d 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	4619      	mov	r1, r3
 8001518:	4810      	ldr	r0, [pc, #64]	; (800155c <MX_TIM3_Init+0xe4>)
 800151a:	f006 fa39 	bl	8007990 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001524:	f001 ff1e 	bl	8003364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001528:	2370      	movs	r3, #112	; 0x70
 800152a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2208      	movs	r2, #8
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM3_Init+0xe4>)
 8001540:	f005 fda8 	bl	8007094 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800154a:	f001 ff0b 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM3_Init+0xe4>)
 8001550:	f002 f8f4 	bl	800373c <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200007a0 	.word	0x200007a0
 8001560:	40000400 	.word	0x40000400

08001564 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2224      	movs	r2, #36	; 0x24
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f006 faf6 	bl	8007b64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MX_TIM4_Init+0xa0>)
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <MX_TIM4_Init+0xa4>)
 8001584:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001586:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_TIM4_Init+0xa0>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM4_Init+0xa0>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_TIM4_Init+0xa0>)
 8001594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001598:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_TIM4_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM4_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80015aa:	2302      	movs	r3, #2
 80015ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80015ba:	2302      	movs	r3, #2
 80015bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015be:	2301      	movs	r3, #1
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80015c6:	2308      	movs	r3, #8
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_TIM4_Init+0xa0>)
 80015d2:	f005 fbc5 	bl	8006d60 <HAL_TIM_Encoder_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015dc:	f001 fec2 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_TIM4_Init+0xa0>)
 80015ee:	f006 f9cf 	bl	8007990 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015f8:	f001 feb4 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3730      	adds	r7, #48	; 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200007e0 	.word	0x200007e0
 8001608:	40000800 	.word	0x40000800

0800160c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_DMA_Init+0x3c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <MX_DMA_Init+0x3c>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_DMA_Init+0x3c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2038      	movs	r0, #56	; 0x38
 8001634:	f002 ff37 	bl	80044a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001638:	2038      	movs	r0, #56	; 0x38
 800163a:	f002 ff50 	bl	80044de <HAL_NVIC_EnableIRQ>

}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_GPIO_Init+0x9c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <MX_GPIO_Init+0x9c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_GPIO_Init+0x9c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_GPIO_Init+0x9c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <MX_GPIO_Init+0x9c>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_GPIO_Init+0x9c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_GPIO_Init+0x9c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <MX_GPIO_Init+0x9c>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_GPIO_Init+0x9c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0xa0>)
 80016be:	f003 fc1d 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	4619      	mov	r1, r3
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_GPIO_Init+0xa0>)
 80016dc:	f003 fa8a 	bl	8004bf4 <HAL_GPIO_Init>

}
 80016e0:	bf00      	nop
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020800 	.word	0x40020800

080016f0 <SPI_command>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void SPI_command(void){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <SPI_command+0x68>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d128      	bne.n	8001750 <SPI_command+0x60>
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <SPI_command+0x6c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d124      	bne.n	8001750 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <SPI_command+0x70>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	b29b      	uxth	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <SPI_command+0x2a>
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <SPI_command+0x74>)
 8001714:	22f8      	movs	r2, #248	; 0xf8
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e002      	b.n	8001720 <SPI_command+0x30>
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <SPI_command+0x74>)
 800171c:	22fa      	movs	r2, #250	; 0xfa
 800171e:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SPI_command+0x74>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <SPI_command+0x70>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	b29b      	uxth	r3, r3
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	b2db      	uxtb	r3, r3
 8001732:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <SPI_command+0x70>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	b2db      	uxtb	r3, r3
 800173c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 800173e:	4639      	mov	r1, r7
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	2203      	movs	r2, #3
 8001744:	4808      	ldr	r0, [pc, #32]	; (8001768 <SPI_command+0x78>)
 8001746:	f005 f851 	bl	80067ec <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 800174a:	4b03      	ldr	r3, [pc, #12]	; (8001758 <SPI_command+0x68>)
 800174c:	2201      	movs	r2, #1
 800174e:	801a      	strh	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200017c6 	.word	0x200017c6
 800175c:	200017cc 	.word	0x200017cc
 8001760:	200017ca 	.word	0x200017ca
 8001764:	200017c8 	.word	0x200017c8
 8001768:	20000708 	.word	0x20000708

0800176c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001782:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800178e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001794:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d10b      	bne.n	80017b8 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017b6:	801a      	strh	r2, [r3, #0]

}

}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20001306 	.word	0x20001306
 80017c8:	20000b04 	.word	0x20000b04
 80017cc:	20001308 	.word	0x20001308
 80017d0:	40000400 	.word	0x40000400

080017d4 <analoginputloopb>:
		HAL_ADC_Stop(&hadc1);
for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit

}

void analoginputloopb(void){  //works fine still
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80017da:	4b6e      	ldr	r3, [pc, #440]	; (8001994 <analoginputloopb+0x1c0>)
 80017dc:	789b      	ldrb	r3, [r3, #2]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <analoginputloopb+0x1c4>)
 80017e4:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 80017e6:	4b6b      	ldr	r3, [pc, #428]	; (8001994 <analoginputloopb+0x1c0>)
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <analoginputloopb+0x1c8>)
 80017f2:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <analoginputloopb+0x1c4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	4b68      	ldr	r3, [pc, #416]	; (800199c <analoginputloopb+0x1c8>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <analoginputloopb+0x1cc>)
 8001802:	0103      	lsls	r3, r0, #4
 8001804:	440b      	add	r3, r1
 8001806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800180a:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 800180c:	4b61      	ldr	r3, [pc, #388]	; (8001994 <analoginputloopb+0x1c0>)
 800180e:	2200      	movs	r2, #0
 8001810:	705a      	strb	r2, [r3, #1]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <analoginputloopb+0x1d0>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b5e      	ldr	r3, [pc, #376]	; (8001994 <analoginputloopb+0x1c0>)
 800181c:	709a      	strb	r2, [r3, #2]
		
		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	2b7f      	cmp	r3, #127	; 0x7f
 8001822:	d904      	bls.n	800182e <analoginputloopb+0x5a>
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	3b80      	subs	r3, #128	; 0x80
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <analoginputloopb+0x1d4>)
 800182c:	801a      	strh	r2, [r3, #0]
		if (menu_holder>383)	counterVarB=256;		//fix second page issue later
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001834:	d303      	bcc.n	800183e <analoginputloopb+0x6a>
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <analoginputloopb+0x1d4>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	801a      	strh	r2, [r3, #0]


		enc_dir=potSource[counterVarB];
 800183e:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <analoginputloopb+0x1d4>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b59      	ldr	r3, [pc, #356]	; (80019ac <analoginputloopb+0x1d8>)
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	b21a      	sxth	r2, r3
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <analoginputloopb+0x1dc>)
 800184c:	801a      	strh	r2, [r3, #0]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 800184e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <analoginputloopb+0x1e0>)
 800185a:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <analoginputloopb+0x1e4>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <analoginputloopb+0x1e8>)
 8001866:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&255; // fix overflow ?
 8001868:	4b54      	ldr	r3, [pc, #336]	; (80019bc <analoginputloopb+0x1e8>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b52      	ldr	r3, [pc, #328]	; (80019bc <analoginputloopb+0x1e8>)
 8001872:	801a      	strh	r2, [r3, #0]
	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8001874:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <analoginputloopb+0x1e0>)
 8001876:	881a      	ldrh	r2, [r3, #0]
 8001878:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <analoginputloopb+0x1ec>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d911      	bls.n	80018a4 <analoginputloopb+0xd0>
 8001880:	4b4b      	ldr	r3, [pc, #300]	; (80019b0 <analoginputloopb+0x1dc>)
 8001882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <analoginputloopb+0x1d0>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	111b      	asrs	r3, r3, #4
 8001890:	b21b      	sxth	r3, r3
 8001892:	4619      	mov	r1, r3
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <analoginputloopb+0x1f0>)
 8001896:	5c5b      	ldrb	r3, [r3, r1]
 8001898:	b29b      	uxth	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	b29b      	uxth	r3, r3
 800189e:	b21a      	sxth	r2, r3
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <analoginputloopb+0x1dc>)
 80018a2:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <analoginputloopb+0x1e0>)
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <analoginputloopb+0x1ec>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d211      	bcs.n	80018d4 <analoginputloopb+0x100>
 80018b0:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <analoginputloopb+0x1d0>)
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	111b      	asrs	r3, r3, #4
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <analoginputloopb+0x1f0>)
 80018be:	5c9b      	ldrb	r3, [r3, r2]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <analoginputloopb+0x1dc>)
 80018c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <analoginputloopb+0x1dc>)
 80018d2:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;


enc2_temp=enc2_lut[enc2_temp];  // force alternative values for , seems to work ok
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <analoginputloopb+0x1e8>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <analoginputloopb+0x1f4>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b36      	ldr	r3, [pc, #216]	; (80019bc <analoginputloopb+0x1e8>)
 80018e2:	801a      	strh	r2, [r3, #0]

	if (enc_dir>160) enc_dir=160;
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <analoginputloopb+0x1dc>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	2ba0      	cmp	r3, #160	; 0xa0
 80018ec:	dd02      	ble.n	80018f4 <analoginputloopb+0x120>
 80018ee:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <analoginputloopb+0x1dc>)
 80018f0:	22a0      	movs	r2, #160	; 0xa0
 80018f2:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <analoginputloopb+0x1dc>)
 80018f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da02      	bge.n	8001904 <analoginputloopb+0x130>
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <analoginputloopb+0x1dc>)
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <analoginputloopb+0x1dc>)
 8001906:	f9b3 1000 	ldrsh.w	r1, [r3]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <analoginputloopb+0x1d4>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	b2c9      	uxtb	r1, r1
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <analoginputloopb+0x1d8>)
 8001914:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <analoginputloopb+0x1dc>)
 8001918:	2200      	movs	r2, #0
 800191a:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <analoginputloopb+0x1e0>)
 800191e:	881a      	ldrh	r2, [r3, #0]
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <analoginputloopb+0x1ec>)
 8001922:	801a      	strh	r2, [r3, #0]



			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <analoginputloopb+0x1e8>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <analoginputloopb+0x1d0>)
 800192c:	801a      	strh	r2, [r3, #0]
			if (enc2_dir>127) menu_page[1]=127; else menu_page[1]=0;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <analoginputloopb+0x1d0>)
 8001930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001934:	2b7f      	cmp	r3, #127	; 0x7f
 8001936:	dd03      	ble.n	8001940 <analoginputloopb+0x16c>
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <analoginputloopb+0x1f8>)
 800193a:	227f      	movs	r2, #127	; 0x7f
 800193c:	705a      	strb	r2, [r3, #1]
 800193e:	e002      	b.n	8001946 <analoginputloopb+0x172>
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <analoginputloopb+0x1f8>)
 8001942:	2200      	movs	r2, #0
 8001944:	705a      	strb	r2, [r3, #1]
			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <analoginputloopb+0x1e8>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	2b7f      	cmp	r3, #127	; 0x7f
 800194c:	d905      	bls.n	800195a <analoginputloopb+0x186>
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <analoginputloopb+0x1fc>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b7f      	cmp	r3, #127	; 0x7f
 8001954:	d801      	bhi.n	800195a <analoginputloopb+0x186>
 8001956:	f000 fa13 	bl	8001d80 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <analoginputloopb+0x1e8>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	2b7f      	cmp	r3, #127	; 0x7f
 8001960:	d805      	bhi.n	800196e <analoginputloopb+0x19a>
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <analoginputloopb+0x1fc>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b7f      	cmp	r3, #127	; 0x7f
 8001968:	d901      	bls.n	800196e <analoginputloopb+0x19a>
 800196a:	f000 fa09 	bl	8001d80 <display_fill>

			enc2_tempB=enc2_temp; // to effective as counter not getting reset
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <analoginputloopb+0x1e8>)
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <analoginputloopb+0x1fc>)
 8001974:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <analoginputloopb+0x1d4>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <analoginputloopb+0x1d8>)
 800197e:	5c9b      	ldrb	r3, [r3, r2]
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <analoginputloopb+0x1d4>)
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	b2d9      	uxtb	r1, r3
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <analoginputloopb+0x200>)
 800198a:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200017d0 	.word	0x200017d0
 8001998:	20000aa5 	.word	0x20000aa5
 800199c:	20000aa6 	.word	0x20000aa6
 80019a0:	08007c60 	.word	0x08007c60
 80019a4:	200017be 	.word	0x200017be
 80019a8:	20000aa8 	.word	0x20000aa8
 80019ac:	200009a4 	.word	0x200009a4
 80019b0:	200017c0 	.word	0x200017c0
 80019b4:	200017b6 	.word	0x200017b6
 80019b8:	40000800 	.word	0x40000800
 80019bc:	200017ba 	.word	0x200017ba
 80019c0:	200017b8 	.word	0x200017b8
 80019c4:	200005d8 	.word	0x200005d8
 80019c8:	20000820 	.word	0x20000820
 80019cc:	200017dc 	.word	0x200017dc
 80019d0:	200017bc 	.word	0x200017bc
 80019d4:	200008a4 	.word	0x200008a4

080019d8 <display_init>:
void display_init(void){
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 80019de:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <display_init+0x1e8>)
 80019e0:	1d3c      	adds	r4, r7, #4
 80019e2:	461d      	mov	r5, r3
 80019e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 80019f0:	4b74      	ldr	r3, [pc, #464]	; (8001bc4 <display_init+0x1ec>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f040 80de 	bne.w	8001bb6 <display_init+0x1de>

if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <display_init+0x1f0>)
 80019fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a00:	2b3f      	cmp	r3, #63	; 0x3f
 8001a02:	dd09      	ble.n	8001a18 <display_init+0x40>
 8001a04:	4b71      	ldr	r3, [pc, #452]	; (8001bcc <display_init+0x1f4>)
 8001a06:	789b      	ldrb	r3, [r3, #2]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <display_init+0x40>
 8001a0c:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <display_init+0x1f8>)
 8001a0e:	2204      	movs	r2, #4
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	4b6e      	ldr	r3, [pc, #440]	; (8001bcc <display_init+0x1f4>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	709a      	strb	r2, [r3, #2]
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
 8001a18:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <display_init+0x1f8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b4c      	cmp	r3, #76	; 0x4c
 8001a1e:	d106      	bne.n	8001a2e <display_init+0x56>
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <display_init+0x1f4>)
 8001a22:	789b      	ldrb	r3, [r3, #2]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <display_init+0x56>
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <display_init+0x1f4>)
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	709a      	strb	r2, [r3, #2]
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
 8001a2e:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <display_init+0x1f0>)
 8001a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a34:	2b3e      	cmp	r3, #62	; 0x3e
 8001a36:	dc09      	bgt.n	8001a4c <display_init+0x74>
 8001a38:	4b64      	ldr	r3, [pc, #400]	; (8001bcc <display_init+0x1f4>)
 8001a3a:	789b      	ldrb	r3, [r3, #2]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d105      	bne.n	8001a4c <display_init+0x74>
 8001a40:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <display_init+0x1f8>)
 8001a42:	2204      	movs	r2, #4
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <display_init+0x1f4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	709a      	strb	r2, [r3, #2]

switch(init){     //Remember every line advances +char on display
 8001a4c:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <display_init+0x1f8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3b4d      	subs	r3, #77	; 0x4d
 8001a52:	2b07      	cmp	r3, #7
 8001a54:	d879      	bhi.n	8001b4a <display_init+0x172>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <display_init+0x84>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a7d 	.word	0x08001a7d
 8001a60:	08001aad 	.word	0x08001aad
 8001a64:	08001ab5 	.word	0x08001ab5
 8001a68:	08001ad1 	.word	0x08001ad1
 8001a6c:	08001ae5 	.word	0x08001ae5
 8001a70:	08001af3 	.word	0x08001af3
 8001a74:	08001b09 	.word	0x08001b09
 8001a78:	08001b1d 	.word	0x08001b1d

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <display_init+0x1fc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <display_init+0x200>)
 8001a8e:	801a      	strh	r2, [r3, #0]
 8001a90:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <display_init+0x1fc>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <display_init+0x1f8>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <display_init+0x1f8>)
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e05f      	b.n	8001b6c <display_init+0x194>

case 78: spi_hold=10;break; //write one set then jump
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <display_init+0x200>)
 8001aae:	220a      	movs	r2, #10
 8001ab0:	801a      	strh	r2, [r3, #0]
 8001ab2:	e05b      	b.n	8001b6c <display_init+0x194>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <display_init+0x1fc>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001abc:	3301      	adds	r3, #1
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <display_init+0x204>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <display_init+0x200>)
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <display_init+0x1f8>)
 8001aca:	2251      	movs	r2, #81	; 0x51
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e04d      	b.n	8001b6c <display_init+0x194>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <display_init+0x1fc>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001ad8:	4a40      	ldr	r2, [pc, #256]	; (8001bdc <display_init+0x204>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <display_init+0x200>)
 8001ae0:	801a      	strh	r2, [r3, #0]
 8001ae2:	e043      	b.n	8001b6c <display_init+0x194>
case 81: spi_hold=10;init=81;break;
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <display_init+0x200>)
 8001ae6:	220a      	movs	r2, #10
 8001ae8:	801a      	strh	r2, [r3, #0]
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <display_init+0x1f8>)
 8001aec:	2251      	movs	r2, #81	; 0x51
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e03c      	b.n	8001b6c <display_init+0x194>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <display_init+0x1fc>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <display_init+0x200>)
 8001b04:	801a      	strh	r2, [r3, #0]
 8001b06:	e031      	b.n	8001b6c <display_init+0x194>
case 83: spi_hold=spell[init_b&62];break;
 8001b08:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <display_init+0x1fc>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b10:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <display_init+0x204>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <display_init+0x200>)
 8001b18:	801a      	strh	r2, [r3, #0]
 8001b1a:	e027      	b.n	8001b6c <display_init+0x194>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <display_init+0x1fc>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b24:	3301      	adds	r3, #1
 8001b26:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <display_init+0x204>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <display_init+0x200>)
 8001b2e:	801a      	strh	r2, [r3, #0]
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <display_init+0x208>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <display_init+0x1fc>)
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	f000 f953 	bl	8001de8 <displayBuffer>
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <display_init+0x1f8>)
 8001b44:	224c      	movs	r2, #76	; 0x4c
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e010      	b.n	8001b6c <display_init+0x194>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <display_init+0x1f8>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3b06      	subs	r3, #6
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <display_init+0x1fc>)
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	f000 f947 	bl	8001de8 <displayBuffer>
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <display_init+0x1fc>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <display_init+0x204>)
 8001b62:	5c9b      	ldrb	r3, [r3, r2]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <display_init+0x200>)
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <display_init+0x1f8>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d80f      	bhi.n	8001b94 <display_init+0x1bc>
 8001b74:	201e      	movs	r0, #30
 8001b76:	f001 ff0b 	bl	8003990 <HAL_Delay>
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <display_init+0x1f8>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3328      	adds	r3, #40	; 0x28
 8001b82:	443b      	add	r3, r7
 8001b84:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <display_init+0x200>)
 8001b8a:	801a      	strh	r2, [r3, #0]
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <display_init+0x208>)
 8001b8e:	789a      	ldrb	r2, [r3, #2]
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <display_init+0x1fc>)
 8001b92:	701a      	strb	r2, [r3, #0]

init++;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <display_init+0x1f8>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <display_init+0x1f8>)
 8001b9e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <display_init+0x1ec>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	f7ff fda3 	bl	80016f0 <SPI_command>
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <display_init+0x1ec>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <display_init+0x20c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	801a      	strh	r2, [r3, #0]

		 }

*/

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08007b8c 	.word	0x08007b8c
 8001bc4:	200017cc 	.word	0x200017cc
 8001bc8:	200017be 	.word	0x200017be
 8001bcc:	200017dc 	.word	0x200017dc
 8001bd0:	200017cd 	.word	0x200017cd
 8001bd4:	200017ce 	.word	0x200017ce
 8001bd8:	200017ca 	.word	0x200017ca
 8001bdc:	20000024 	.word	0x20000024
 8001be0:	200017d0 	.word	0x200017d0
 8001be4:	200017c6 	.word	0x200017c6

08001be8 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <display_update+0x17c>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d035      	beq.n	8001c62 <display_update+0x7a>
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	dc3d      	bgt.n	8001c76 <display_update+0x8e>
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d002      	beq.n	8001c04 <display_update+0x1c>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d020      	beq.n	8001c44 <display_update+0x5c>
 8001c02:	e038      	b.n	8001c76 <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 8001c04:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <display_update+0x180>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <display_update+0x184>)
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <display_update+0x180>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <display_update+0x180>)
 8001c22:	811a      	strh	r2, [r3, #8]
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <display_update+0x180>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b4d      	ldr	r3, [pc, #308]	; (8001d68 <display_update+0x180>)
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <display_update+0x17c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <display_update+0x17c>)
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e028      	b.n	8001c96 <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <display_update+0x180>)
 8001c46:	891b      	ldrh	r3, [r3, #8]
 8001c48:	3330      	adds	r3, #48	; 0x30
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <display_update+0x184>)
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <display_update+0x17c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <display_update+0x17c>)
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e019      	b.n	8001c96 <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <display_update+0x180>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	80da      	strh	r2, [r3, #6]
 8001c68:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <display_update+0x17c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b3c      	ldr	r3, [pc, #240]	; (8001d64 <display_update+0x17c>)
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e00f      	b.n	8001c96 <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <display_update+0x180>)
 8001c78:	88db      	ldrh	r3, [r3, #6]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <display_update+0x180>)
 8001c86:	80da      	strh	r2, [r3, #6]
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <display_update+0x17c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <display_update+0x17c>)
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <display_update+0x17c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d007      	beq.n	8001cae <display_update+0xc6>
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <display_update+0x17c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d003      	beq.n	8001cae <display_update+0xc6>
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <display_update+0x17c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d104      	bne.n	8001cb8 <display_update+0xd0>
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <display_update+0x184>)
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <display_update+0x184>)
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	e00d      	b.n	8001cd4 <display_update+0xec>
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <display_update+0x180>)
 8001cba:	889b      	ldrh	r3, [r3, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <display_update+0x180>)
 8001cc0:	88db      	ldrh	r3, [r3, #6]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4a2a      	ldr	r2, [pc, #168]	; (8001d70 <display_update+0x188>)
 8001cc6:	0103      	lsls	r3, r0, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <display_update+0x184>)
 8001cd2:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <display_update+0x17c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b13      	cmp	r3, #19
 8001cda:	d10e      	bne.n	8001cfa <display_update+0x112>
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <display_update+0x180>)
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <display_update+0x180>)
 8001cec:	809a      	strh	r2, [r3, #4]
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <display_update+0x180>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	80da      	strh	r2, [r3, #6]
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <display_update+0x17c>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <display_update+0x184>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <display_update+0x126>
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <display_update+0x18c>)
 8001d08:	22f8      	movs	r2, #248	; 0xf8
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	e002      	b.n	8001d14 <display_update+0x12c>
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <display_update+0x18c>)
 8001d10:	22fa      	movs	r2, #250	; 0xfa
 8001d12:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <display_update+0x18c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <display_update+0x184>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <display_update+0x184>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 8001d32:	4639      	mov	r1, r7
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	2203      	movs	r2, #3
 8001d38:	480f      	ldr	r0, [pc, #60]	; (8001d78 <display_update+0x190>)
 8001d3a:	f004 fd57 	bl	80067ec <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <display_update+0x180>)
 8001d40:	889b      	ldrh	r3, [r3, #4]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <display_update+0x17c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <display_update+0x180>)
 8001d4e:	88db      	ldrh	r3, [r3, #6]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <display_update+0x194>)
 8001d58:	701a      	strb	r2, [r3, #0]


}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200005d4 	.word	0x200005d4
 8001d68:	200020b0 	.word	0x200020b0
 8001d6c:	200017ca 	.word	0x200017ca
 8001d70:	20001c78 	.word	0x20001c78
 8001d74:	200017c8 	.word	0x200017c8
 8001d78:	20000708 	.word	0x20000708
 8001d7c:	200020be 	.word	0x200020be

08001d80 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <display_fill+0x58>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <display_fill+0x5c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	801a      	strh	r2, [r3, #0]
 8001d90:	e013      	b.n	8001dba <display_fill+0x3a>

enc2_dir=(n>>4)+menu_page[1];
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <display_fill+0x5c>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <display_fill+0x60>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <display_fill+0x64>)
 8001da8:	801a      	strh	r2, [r3, #0]

displayBuffer();
 8001daa:	f000 f81d 	bl	8001de8 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <display_fill+0x5c>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <display_fill+0x5c>)
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <display_fill+0x5c>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dc2:	d3e6      	bcc.n	8001d92 <display_fill+0x12>
}
enc2_dir=menu_page[1]*2;  // end clean
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <display_fill+0x60>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <display_fill+0x64>)
 8001dd2:	801a      	strh	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200020bf 	.word	0x200020bf
 8001ddc:	20000ade 	.word	0x20000ade
 8001de0:	200017dc 	.word	0x200017dc
 8001de4:	200017be 	.word	0x200017be

08001de8 <displayBuffer>:

	// if(store_c>239) {lcd_feedback(); }

}
*/
void displayBuffer (void){        //  in a constant state of flux
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001dee:	4b94      	ldr	r3, [pc, #592]	; (8002040 <displayBuffer+0x258>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <displayBuffer+0x1c>
 8001df6:	4b93      	ldr	r3, [pc, #588]	; (8002044 <displayBuffer+0x25c>)
 8001df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b92      	ldr	r3, [pc, #584]	; (8002048 <displayBuffer+0x260>)
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e005      	b.n	8001e10 <displayBuffer+0x28>
 8001e04:	4b8e      	ldr	r3, [pc, #568]	; (8002040 <displayBuffer+0x258>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	336f      	adds	r3, #111	; 0x6f
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <displayBuffer+0x260>)
 8001e0e:	701a      	strb	r2, [r3, #0]

	uint8_t d_count;
uint8_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001e10:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <displayBuffer+0x260>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	73bb      	strb	r3, [r7, #14]
uint8_t init_x2=init_x&63;
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e22:	737b      	strb	r3, [r7, #13]
uint8_t init_y=init_b&15;
 8001e24:	4b88      	ldr	r3, [pc, #544]	; (8002048 <displayBuffer+0x260>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	733b      	strb	r3, [r7, #12]
uint16_t store_x;
uint8_t lfotarget_menu[10]={0,40,16,8,40,40,48,56,64,72,0};  // keep lfo target list here for now *8
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <displayBuffer+0x264>)
 8001e30:	463b      	mov	r3, r7
 8001e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e34:	c303      	stmia	r3!, {r0, r1}
 8001e36:	801a      	strh	r2, [r3, #0]
// use this to set feedback pointer for now
// just to point the lfo number



if (disp_stepper==0) store_c= disp_lut [init_b>>4]  [init_y] ;  else if (disp_stepper<9)
 8001e38:	4b81      	ldr	r3, [pc, #516]	; (8002040 <displayBuffer+0x258>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10d      	bne.n	8001e5c <displayBuffer+0x74>
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <displayBuffer+0x260>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	7b3b      	ldrb	r3, [r7, #12]
 8001e4c:	4980      	ldr	r1, [pc, #512]	; (8002050 <displayBuffer+0x268>)
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <displayBuffer+0x26c>)
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	e023      	b.n	8001ea4 <displayBuffer+0xbc>
 8001e5c:	4b78      	ldr	r3, [pc, #480]	; (8002040 <displayBuffer+0x258>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d817      	bhi.n	8001e94 <displayBuffer+0xac>

{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data
 8001e64:	4b76      	ldr	r3, [pc, #472]	; (8002040 <displayBuffer+0x258>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <displayBuffer+0x270>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a7a      	ldr	r2, [pc, #488]	; (800205c <displayBuffer+0x274>)
 8001e72:	5cd1      	ldrb	r1, [r2, r3]
 8001e74:	4b72      	ldr	r3, [pc, #456]	; (8002040 <displayBuffer+0x258>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	b289      	uxth	r1, r1
 8001e7c:	4b78      	ldr	r3, [pc, #480]	; (8002060 <displayBuffer+0x278>)
 8001e7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <displayBuffer+0x258>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b75      	ldr	r3, [pc, #468]	; (8002060 <displayBuffer+0x278>)
 8001e8a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001e8e:	4b71      	ldr	r3, [pc, #452]	; (8002054 <displayBuffer+0x26c>)
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	e007      	b.n	8001ea4 <displayBuffer+0xbc>
}
else store_c=feedback_line[disp_stepper];
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <displayBuffer+0x258>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b71      	ldr	r3, [pc, #452]	; (8002060 <displayBuffer+0x278>)
 8001e9c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001ea0:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <displayBuffer+0x26c>)
 8001ea2:	801a      	strh	r2, [r3, #0]


if (disp_stepper==0) {lcd_out3=potSource[store_c-128]; feedback_pointer=(enc2_dir>>4)<<3; feedback_line[10]=((enc2_dir&15)>>1)+48; }    // feedback related
 8001ea4:	4b66      	ldr	r3, [pc, #408]	; (8002040 <displayBuffer+0x258>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d11e      	bne.n	8001eea <displayBuffer+0x102>
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <displayBuffer+0x26c>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3b80      	subs	r3, #128	; 0x80
 8001eb2:	4a6c      	ldr	r2, [pc, #432]	; (8002064 <displayBuffer+0x27c>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <displayBuffer+0x280>)
 8001eba:	801a      	strh	r2, [r3, #0]
 8001ebc:	4b61      	ldr	r3, [pc, #388]	; (8002044 <displayBuffer+0x25c>)
 8001ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec2:	111b      	asrs	r3, r3, #4
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b62      	ldr	r3, [pc, #392]	; (8002058 <displayBuffer+0x270>)
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <displayBuffer+0x25c>)
 8001ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	105b      	asrs	r3, r3, #1
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3330      	adds	r3, #48	; 0x30
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <displayBuffer+0x278>)
 8001ee8:	829a      	strh	r2, [r3, #20]





	 if (store_c==64) store_c=47;  //EMPTY SPACE
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <displayBuffer+0x26c>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d102      	bne.n	8001ef8 <displayBuffer+0x110>
 8001ef2:	4b58      	ldr	r3, [pc, #352]	; (8002054 <displayBuffer+0x26c>)
 8001ef4:	222f      	movs	r2, #47	; 0x2f
 8001ef6:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {store_c= potValues[store_c&127]+48;}		// NORMAL POTVALUES
 8001ef8:	4b56      	ldr	r3, [pc, #344]	; (8002054 <displayBuffer+0x26c>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	2b7f      	cmp	r3, #127	; 0x7f
 8001efe:	d90e      	bls.n	8001f1e <displayBuffer+0x136>
 8001f00:	4b54      	ldr	r3, [pc, #336]	; (8002054 <displayBuffer+0x26c>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2bfe      	cmp	r3, #254	; 0xfe
 8001f06:	d80a      	bhi.n	8001f1e <displayBuffer+0x136>
 8001f08:	4b52      	ldr	r3, [pc, #328]	; (8002054 <displayBuffer+0x26c>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f10:	4a56      	ldr	r2, [pc, #344]	; (800206c <displayBuffer+0x284>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3330      	adds	r3, #48	; 0x30
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <displayBuffer+0x26c>)
 8001f1c:	801a      	strh	r2, [r3, #0]
	if ((store_c>254)	&& (store_c<384)) 											{store_c= potValues[store_c-128]+48;}  // POTVALUES 128-254
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <displayBuffer+0x26c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	2bfe      	cmp	r3, #254	; 0xfe
 8001f24:	d90e      	bls.n	8001f44 <displayBuffer+0x15c>
 8001f26:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <displayBuffer+0x26c>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001f2e:	d209      	bcs.n	8001f44 <displayBuffer+0x15c>
 8001f30:	4b48      	ldr	r3, [pc, #288]	; (8002054 <displayBuffer+0x26c>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	3b80      	subs	r3, #128	; 0x80
 8001f36:	4a4d      	ldr	r2, [pc, #308]	; (800206c <displayBuffer+0x284>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3330      	adds	r3, #48	; 0x30
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b44      	ldr	r3, [pc, #272]	; (8002054 <displayBuffer+0x26c>)
 8001f42:	801a      	strh	r2, [r3, #0]
	if (store_c>383)		{store_c=store_c-384;			store_c= menuList2		[     (lfotarget_menu[   ((store_c>>3))  ])	+(store_c&7)]						; } // VARIABLE MENU ITEMS CHAR LUT
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <displayBuffer+0x26c>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001f4c:	d319      	bcc.n	8001f82 <displayBuffer+0x19a>
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <displayBuffer+0x26c>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <displayBuffer+0x26c>)
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <displayBuffer+0x26c>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3310      	adds	r3, #16
 8001f66:	443b      	add	r3, r7
 8001f68:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <displayBuffer+0x26c>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	4413      	add	r3, r2
 8001f78:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <displayBuffer+0x288>)
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <displayBuffer+0x26c>)
 8001f80:	801a      	strh	r2, [r3, #0]
store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <displayBuffer+0x26c>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	3b2f      	subs	r3, #47	; 0x2f
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <displayBuffer+0x26c>)
 8001f8c:	801a      	strh	r2, [r3, #0]
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <displayBuffer+0x26c>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <displayBuffer+0x26c>)
 8001f9a:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <displayBuffer+0x26c>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	817b      	strh	r3, [r7, #10]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <displayBuffer+0x28c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11f      	bne.n	8001fec <displayBuffer+0x204>
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <displayBuffer+0x258>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d11b      	bne.n	8001fec <displayBuffer+0x204>
	for (d_count=0;d_count<7;d_count++){
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e014      	b.n	8001fe4 <displayBuffer+0x1fc>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	897b      	ldrh	r3, [r7, #10]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <displayBuffer+0x290>)
 8001fc2:	5cd1      	ldrb	r1, [r2, r3]
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	7b7b      	ldrb	r3, [r7, #13]
 8001fc8:	441a      	add	r2, r3
 8001fca:	7b3b      	ldrb	r3, [r7, #12]
 8001fcc:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 8001fd0:	b2c8      	uxtb	r0, r1
 8001fd2:	492a      	ldr	r1, [pc, #168]	; (800207c <displayBuffer+0x294>)
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	440a      	add	r2, r1
 8001fd8:	4413      	add	r3, r2
 8001fda:	4602      	mov	r2, r0
 8001fdc:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d9e7      	bls.n	8001fba <displayBuffer+0x1d2>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only
 8001fea:	e017      	b.n	800201c <displayBuffer+0x234>
	}
else for (d_count=0;d_count<7;d_count++){
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e011      	b.n	8002016 <displayBuffer+0x22e>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	897b      	ldrh	r3, [r7, #10]
 8001ff6:	18d1      	adds	r1, r2, r3
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	441a      	add	r2, r3
 8001ffe:	7b3b      	ldrb	r3, [r7, #12]
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <displayBuffer+0x290>)
 8002002:	5c40      	ldrb	r0, [r0, r1]
 8002004:	491d      	ldr	r1, [pc, #116]	; (800207c <displayBuffer+0x294>)
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	440a      	add	r2, r1
 800200a:	4413      	add	r3, r2
 800200c:	4602      	mov	r2, r0
 800200e:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3301      	adds	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d9ea      	bls.n	8001ff2 <displayBuffer+0x20a>
}


gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows
 800201c:	7b7b      	ldrb	r3, [r7, #13]
 800201e:	1dda      	adds	r2, r3, #7
 8002020:	7b3b      	ldrb	r3, [r7, #12]
 8002022:	4916      	ldr	r1, [pc, #88]	; (800207c <displayBuffer+0x294>)
 8002024:	0112      	lsls	r2, r2, #4
 8002026:	440a      	add	r2, r1
 8002028:	4413      	add	r3, r2
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <displayBuffer+0x258>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	d124      	bne.n	8002080 <displayBuffer+0x298>
 8002036:	4b02      	ldr	r3, [pc, #8]	; (8002040 <displayBuffer+0x258>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]

}
 800203c:	e026      	b.n	800208c <displayBuffer+0x2a4>
 800203e:	bf00      	nop
 8002040:	200005e1 	.word	0x200005e1
 8002044:	200017be 	.word	0x200017be
 8002048:	200017ce 	.word	0x200017ce
 800204c:	08007bb0 	.word	0x08007bb0
 8002050:	08007c60 	.word	0x08007c60
 8002054:	20000adc 	.word	0x20000adc
 8002058:	200008a1 	.word	0x200008a1
 800205c:	08007ea0 	.word	0x08007ea0
 8002060:	20000000 	.word	0x20000000
 8002064:	200009a4 	.word	0x200009a4
 8002068:	200020bc 	.word	0x200020bc
 800206c:	200008a4 	.word	0x200008a4
 8002070:	08007f24 	.word	0x08007f24
 8002074:	200020bf 	.word	0x200020bf
 8002078:	200001d4 	.word	0x200001d4
 800207c:	20001c78 	.word	0x20001c78
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <displayBuffer+0x2b0>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <displayBuffer+0x2b0>)
 800208a:	701a      	strb	r2, [r3, #0]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	200005e1 	.word	0x200005e1
 800209c:	00000000 	.word	0x00000000

080020a0 <sampling>:
spell[148+n]=spell[108+n];
}
}


void sampling(void){						// 18 ms of data
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 80020a6:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 80020a8:	4ba1      	ldr	r3, [pc, #644]	; (8002330 <sampling+0x290>)
 80020aa:	881a      	ldrh	r2, [r3, #0]
 80020ac:	4ba1      	ldr	r3, [pc, #644]	; (8002334 <sampling+0x294>)
 80020ae:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80020b6:	f102 021c 	add.w	r2, r2, #28
 80020ba:	8013      	strh	r3, [r2, #0]
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80020bc:	4b9e      	ldr	r3, [pc, #632]	; (8002338 <sampling+0x298>)
 80020be:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b9d      	ldr	r3, [pc, #628]	; (800233c <sampling+0x29c>)
 80020c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020ca:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80020ce:	f102 020e 	add.w	r2, r2, #14
 80020d2:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*4)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80020d4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80020d8:	f103 030e 	add.w	r3, r3, #14
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	da00      	bge.n	80020e4 <sampling+0x44>
 80020e2:	337f      	adds	r3, #127	; 0x7f
 80020e4:	11db      	asrs	r3, r3, #7
 80020e6:	461a      	mov	r2, r3
 80020e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80020fc:	f103 0308 	add.w	r3, r3, #8
 8002100:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  //
 8002104:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002108:	f103 0308 	add.w	r3, r3, #8
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8002340 <sampling+0x2a0>
 8002114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002118:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800211c:	f103 0308 	add.w	r3, r3, #8
 8002120:	edc3 7a00 	vstr	s15, [r3]
uint32_t  note_toggler[17];  //records note position on 0-512   using a bit
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002124:	4b87      	ldr	r3, [pc, #540]	; (8002344 <sampling+0x2a4>)
 8002126:	2200      	movs	r2, #0
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	e00e      	b.n	800214a <sampling+0xaa>
 800212c:	4b85      	ldr	r3, [pc, #532]	; (8002344 <sampling+0x2a4>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002136:	443b      	add	r3, r7
 8002138:	2200      	movs	r2, #0
 800213a:	f843 2c7c 	str.w	r2, [r3, #-124]
 800213e:	4b81      	ldr	r3, [pc, #516]	; (8002344 <sampling+0x2a4>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b7f      	ldr	r3, [pc, #508]	; (8002344 <sampling+0x2a4>)
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	4b7e      	ldr	r3, [pc, #504]	; (8002344 <sampling+0x2a4>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	d9ec      	bls.n	800212c <sampling+0x8c>

//lcd_out3=trigger_counter; // still goes to 15

//lcd_out3=adc_values[2]; // 3 digit read out , works ok
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;
 8002152:	4b7d      	ldr	r3, [pc, #500]	; (8002348 <sampling+0x2a8>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	4a7d      	ldr	r2, [pc, #500]	; (800234c <sampling+0x2ac>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b29b      	uxth	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b74      	ldr	r3, [pc, #464]	; (8002338 <sampling+0x298>)
 8002168:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 800216c:	4b76      	ldr	r3, [pc, #472]	; (8002348 <sampling+0x2a8>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	4a76      	ldr	r2, [pc, #472]	; (800234c <sampling+0x2ac>)
 8002172:	fba2 1203 	umull	r1, r2, r2, r3
 8002176:	0952      	lsrs	r2, r2, #5
 8002178:	2164      	movs	r1, #100	; 0x64
 800217a:	fb01 f202 	mul.w	r2, r1, r2
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	b29b      	uxth	r3, r3
 8002182:	4a73      	ldr	r2, [pc, #460]	; (8002350 <sampling+0x2b0>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	b29b      	uxth	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b69      	ldr	r3, [pc, #420]	; (8002338 <sampling+0x298>)
 8002194:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 8002198:	4b6b      	ldr	r3, [pc, #428]	; (8002348 <sampling+0x2a8>)
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <sampling+0x2b0>)
 800219e:	fba3 1302 	umull	r1, r3, r3, r2
 80021a2:	08d9      	lsrs	r1, r3, #3
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b60      	ldr	r3, [pc, #384]	; (8002338 <sampling+0x298>)
 80021b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 80021bc:	4b65      	ldr	r3, [pc, #404]	; (8002354 <sampling+0x2b4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]

uint8_t note_patterns[8]={1,4,2,2,1,4,2,1,4,2,1,4,4};   // creating beats
 80021c2:	4a65      	ldr	r2, [pc, #404]	; (8002358 <sampling+0x2b8>)
 80021c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80021c8:	f103 031c 	add.w	r3, r3, #28
 80021cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021d0:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t note_lenght=5-note_patterns[seq_pos&7] ; // note length modifier , higher faster
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <sampling+0x2bc>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80021e0:	443b      	add	r3, r7
 80021e2:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80021e6:	f1c3 0305 	rsb	r3, r3, #5
 80021ea:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80021ee:	f102 0207 	add.w	r2, r2, #7
 80021f2:	7013      	strb	r3, [r2, #0]
//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80021fa:	f102 0206 	add.w	r2, r2, #6
 80021fe:	7013      	strb	r3, [r2, #0]
//sample_Accu2=0;
//printf ("crap");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002200:	4b57      	ldr	r3, [pc, #348]	; (8002360 <sampling+0x2c0>)
 8002202:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8002206:	f104 0404 	add.w	r4, r4, #4
 800220a:	461d      	mov	r5, r3
 800220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	7023      	strb	r3, [r4, #0]
adc_values[2]=adc_values[1];   // this temp until pot 3 is fixed
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <sampling+0x2c4>)
 8002216:	785a      	ldrb	r2, [r3, #1]
 8002218:	4b52      	ldr	r3, [pc, #328]	; (8002364 <sampling+0x2c4>)
 800221a:	709a      	strb	r2, [r3, #2]
if(adc_values[2]&16)	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <sampling+0x2c4>)
 800221e:	789b      	ldrb	r3, [r3, #2]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d017      	beq.n	8002258 <sampling+0x1b8>
 8002228:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <sampling+0x2c4>)
 800222a:	789b      	ldrb	r3, [r3, #2]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002234:	443b      	add	r3, r7
 8002236:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 800223a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002244:	f102 0219 	add.w	r2, r2, #25
 8002248:	7013      	strb	r3, [r2, #0]
 800224a:	237f      	movs	r3, #127	; 0x7f
 800224c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002250:	f102 021a 	add.w	r2, r2, #26
 8002254:	7013      	strb	r3, [r2, #0]
 8002256:	e013      	b.n	8002280 <sampling+0x1e0>
 8002258:	4b42      	ldr	r3, [pc, #264]	; (8002364 <sampling+0x2c4>)
 800225a:	789b      	ldrb	r3, [r3, #2]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002264:	443b      	add	r3, r7
 8002266:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 800226a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800226e:	f102 021a 	add.w	r2, r2, #26
 8002272:	7013      	strb	r3, [r2, #0]
 8002274:	237f      	movs	r3, #127	; 0x7f
 8002276:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800227a:	f102 0219 	add.w	r2, r2, #25
 800227e:	7013      	strb	r3, [r2, #0]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (adsr_temp==0) {		adsr_att=(161-potSource[20] ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <sampling+0x2c8>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d146      	bne.n	8002316 <sampling+0x276>
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <sampling+0x298>)
 800228a:	7d1b      	ldrb	r3, [r3, #20]
 800228c:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fa1d 	bl	80006d0 <__aeabi_i2d>
 8002296:	a322      	add	r3, pc, #136	; (adr r3, 8002320 <sampling+0x280>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fd ff9c 	bl	80001d8 <__aeabi_dmul>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fa7c 	bl	80007a4 <__aeabi_d2f>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4a2f      	ldr	r2, [pc, #188]	; (800236c <sampling+0x2cc>)
 80022b0:	6013      	str	r3, [r2, #0]
as_sustain=((161-potSource[21])*0.01);  // length and level this is ok is running 1/16 ish				as_attack=as_attack-as_sustain;
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <sampling+0x298>)
 80022b4:	7d5b      	ldrb	r3, [r3, #21]
 80022b6:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fa08 	bl	80006d0 <__aeabi_i2d>
 80022c0:	a319      	add	r3, pc, #100	; (adr r3, 8002328 <sampling+0x288>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fd ff87 	bl	80001d8 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f7fe fa67 	bl	80007a4 <__aeabi_d2f>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <sampling+0x2d0>)
 80022da:	6013      	str	r3, [r2, #0]
adsr_att=adsr_att*adsr_att;
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <sampling+0x2cc>)
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <sampling+0x2cc>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <sampling+0x2cc>)
 80022ee:	edc3 7a00 	vstr	s15, [r3]
as_sustain=as_sustain*as_sustain;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <sampling+0x2d0>)
 80022f4:	ed93 7a00 	vldr	s14, [r3]
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <sampling+0x2d0>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <sampling+0x2d0>)
 8002304:	edc3 7a00 	vstr	s15, [r3]

adsr_temp=1;
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <sampling+0x2c8>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
as_attack=0;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <sampling+0x2d4>)
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
}

float lut_temp;

for (i=0;i<256;i++) {
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <sampling+0x2a4>)
 8002318:	2200      	movs	r2, #0
 800231a:	801a      	strh	r2, [r3, #0]
 800231c:	e0fd      	b.n	800251a <sampling+0x47a>
 800231e:	bf00      	nop
 8002320:	47ae147b 	.word	0x47ae147b
 8002324:	3f947ae1 	.word	0x3f947ae1
 8002328:	47ae147b 	.word	0x47ae147b
 800232c:	3f847ae1 	.word	0x3f847ae1
 8002330:	2000130a 	.word	0x2000130a
 8002334:	20000afe 	.word	0x20000afe
 8002338:	200009a4 	.word	0x200009a4
 800233c:	20001b34 	.word	0x20001b34
 8002340:	42a00000 	.word	0x42a00000
 8002344:	20000b00 	.word	0x20000b00
 8002348:	200020bc 	.word	0x200020bc
 800234c:	51eb851f 	.word	0x51eb851f
 8002350:	cccccccd 	.word	0xcccccccd
 8002354:	2000177b 	.word	0x2000177b
 8002358:	08007bbc 	.word	0x08007bbc
 800235c:	20000ad8 	.word	0x20000ad8
 8002360:	08007bc4 	.word	0x08007bc4
 8002364:	200001cc 	.word	0x200001cc
 8002368:	20001754 	.word	0x20001754
 800236c:	200020ac 	.word	0x200020ac
 8002370:	200020a8 	.word	0x200020a8
 8002374:	200020a4 	.word	0x200020a4

	if     (as_attack<1000)    																		{as_attack=as_attack+adsr_att;					lut_temp=as_attack; } //0-1000
 8002378:	4b8d      	ldr	r3, [pc, #564]	; (80025b0 <sampling+0x510>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80025b4 <sampling+0x514>
 8002382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d511      	bpl.n	80023b0 <sampling+0x310>
 800238c:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <sampling+0x510>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <sampling+0x518>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <sampling+0x510>)
 800239e:	edc3 7a00 	vstr	s15, [r3]
 80023a2:	4b83      	ldr	r3, [pc, #524]	; (80025b0 <sampling+0x510>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80023aa:	f102 0214 	add.w	r2, r2, #20
 80023ae:	6013      	str	r3, [r2, #0]
	 if  ((as_attack<1500)  && (as_attack>999))  										{as_attack=as_attack+adsr_att;					lut_temp=1500-(as_attack-500);  }  // 1000-500
 80023b0:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <sampling+0x510>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80025bc <sampling+0x51c>
 80023ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c2:	d525      	bpl.n	8002410 <sampling+0x370>
 80023c4:	4b7a      	ldr	r3, [pc, #488]	; (80025b0 <sampling+0x510>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80025c0 <sampling+0x520>
 80023ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d6:	dd1b      	ble.n	8002410 <sampling+0x370>
 80023d8:	4b75      	ldr	r3, [pc, #468]	; (80025b0 <sampling+0x510>)
 80023da:	ed93 7a00 	vldr	s14, [r3]
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <sampling+0x518>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e8:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <sampling+0x510>)
 80023ea:	edc3 7a00 	vstr	s15, [r3]
 80023ee:	4b70      	ldr	r3, [pc, #448]	; (80025b0 <sampling+0x510>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80025c4 <sampling+0x524>
 80023f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023fc:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80025bc <sampling+0x51c>
 8002400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002404:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002408:	f103 0314 	add.w	r3, r3, #20
 800240c:	edc3 7a00 	vstr	s15, [r3]
	 if ((as_attack>1499)   && 		(as_attack<2000)) 																{		lut_temp=500; 	as_attack=as_attack+as_sustain;}
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <sampling+0x510>)
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80025c8 <sampling+0x528>
 800241a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	dd1a      	ble.n	800245a <sampling+0x3ba>
 8002424:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <sampling+0x510>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80025cc <sampling+0x52c>
 800242e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	d510      	bpl.n	800245a <sampling+0x3ba>
 8002438:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <sampling+0x530>)
 800243a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800243e:	f102 0214 	add.w	r2, r2, #20
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <sampling+0x510>)
 8002446:	ed93 7a00 	vldr	s14, [r3]
 800244a:	4b62      	ldr	r3, [pc, #392]	; (80025d4 <sampling+0x534>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002454:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <sampling+0x510>)
 8002456:	edc3 7a00 	vstr	s15, [r3]
	if ((as_attack>1999)  &&  (as_attack<2500)	)																							{as_attack=as_attack+as_sustain	;	lut_temp=2500-as_attack; } //500-0;
 800245a:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <sampling+0x510>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80025d8 <sampling+0x538>
 8002464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	dd21      	ble.n	80024b2 <sampling+0x412>
 800246e:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <sampling+0x510>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80025dc <sampling+0x53c>
 8002478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	d517      	bpl.n	80024b2 <sampling+0x412>
 8002482:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <sampling+0x510>)
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <sampling+0x534>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <sampling+0x510>)
 8002494:	edc3 7a00 	vstr	s15, [r3]
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <sampling+0x510>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80025dc <sampling+0x53c>
 80024a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024aa:	f103 0314 	add.w	r3, r3, #20
 80024ae:	edc3 7a00 	vstr	s15, [r3]
	if (as_attack>3000)   																																			{lut_temp=1; as_attack=4000; }
 80024b2:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <sampling+0x510>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80025e0 <sampling+0x540>
 80024bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	dd09      	ble.n	80024da <sampling+0x43a>
 80024c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024ca:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80024ce:	f102 0214 	add.w	r2, r2, #20
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <sampling+0x510>)
 80024d6:	4a43      	ldr	r2, [pc, #268]	; (80025e4 <sampling+0x544>)
 80024d8:	601a      	str	r2, [r3, #0]

adsr_lut[i]= lut_temp*0.001;
 80024da:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80024de:	f103 0314 	add.w	r3, r3, #20
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	f7fe f906 	bl	80006f4 <__aeabi_f2d>
 80024e8:	a32f      	add	r3, pc, #188	; (adr r3, 80025a8 <sampling+0x508>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fd fe73 	bl	80001d8 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	493c      	ldr	r1, [pc, #240]	; (80025e8 <sampling+0x548>)
 80024f8:	8809      	ldrh	r1, [r1, #0]
 80024fa:	460c      	mov	r4, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe f950 	bl	80007a4 <__aeabi_d2f>
 8002504:	4602      	mov	r2, r0
 8002506:	4939      	ldr	r1, [pc, #228]	; (80025ec <sampling+0x54c>)
 8002508:	00a3      	lsls	r3, r4, #2
 800250a:	440b      	add	r3, r1
 800250c:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 800250e:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <sampling+0x548>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <sampling+0x548>)
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <sampling+0x548>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	f67f af2a 	bls.w	8002378 <sampling+0x2d8>
}


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <sampling+0x548>)
 8002526:	2200      	movs	r2, #0
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	e336      	b.n	8002b9a <sampling+0xafa>

	i_total=i+sample_pointB;
 800252c:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <sampling+0x548>)
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <sampling+0x550>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	4413      	add	r3, r2
 8002536:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800253a:	f102 021e 	add.w	r2, r2, #30
 800253e:	8013      	strh	r3, [r2, #0]
	i_frac=i>>6;
 8002540:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <sampling+0x548>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	b29b      	uxth	r3, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <sampling+0x554>)
 800254c:	701a      	strb	r2, [r3, #0]
	note_plain=potValues[seq_pos & 7 ];
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <sampling+0x558>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <sampling+0x55c>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800255e:	f102 021b 	add.w	r2, r2, #27
 8002562:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values 
 8002564:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <sampling+0x548>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	4a25      	ldr	r2, [pc, #148]	; (8002600 <sampling+0x560>)
 800256c:	5cd2      	ldrb	r2, [r2, r3]
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <sampling+0x548>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	0912      	lsrs	r2, r2, #4
 8002576:	b2d1      	uxtb	r1, r2
 8002578:	4a20      	ldr	r2, [pc, #128]	; (80025fc <sampling+0x55c>)
 800257a:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <sampling+0x564>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002584:	f102 020e 	add.w	r2, r2, #14
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d83e      	bhi.n	800260c <sampling+0x56c>
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <sampling+0x568>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <sampling+0x568>)
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <sampling+0x564>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	e037      	b.n	8002618 <sampling+0x578>
 80025a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025ac:	3f50624d 	.word	0x3f50624d
 80025b0:	200020a4 	.word	0x200020a4
 80025b4:	447a0000 	.word	0x447a0000
 80025b8:	200020ac 	.word	0x200020ac
 80025bc:	44bb8000 	.word	0x44bb8000
 80025c0:	4479c000 	.word	0x4479c000
 80025c4:	43fa0000 	.word	0x43fa0000
 80025c8:	44bb6000 	.word	0x44bb6000
 80025cc:	44fa0000 	.word	0x44fa0000
 80025d0:	43fa0000 	.word	0x43fa0000
 80025d4:	200020a8 	.word	0x200020a8
 80025d8:	44f9e000 	.word	0x44f9e000
 80025dc:	451c4000 	.word	0x451c4000
 80025e0:	453b8000 	.word	0x453b8000
 80025e4:	457a0000 	.word	0x457a0000
 80025e8:	20000b00 	.word	0x20000b00
 80025ec:	20001354 	.word	0x20001354
 80025f0:	20000afe 	.word	0x20000afe
 80025f4:	200018d8 	.word	0x200018d8
 80025f8:	20000ad8 	.word	0x20000ad8
 80025fc:	200008a4 	.word	0x200008a4
 8002600:	200009a4 	.word	0x200009a4
 8002604:	200017c2 	.word	0x200017c2
 8002608:	2000176e 	.word	0x2000176e
 800260c:	4ba4      	ldr	r3, [pc, #656]	; (80028a0 <sampling+0x800>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	4ba2      	ldr	r3, [pc, #648]	; (80028a0 <sampling+0x800>)
 8002616:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400 
	tempo_start=0;
 8002618:	2300      	movs	r3, #0
 800261a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800261e:	f102 021c 	add.w	r2, r2, #28
 8002622:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 8002624:	4b9f      	ldr	r3, [pc, #636]	; (80028a4 <sampling+0x804>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b9e      	ldr	r3, [pc, #632]	; (80028a8 <sampling+0x808>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	429a      	cmp	r2, r3
 8002634:	d01c      	beq.n	8002670 <sampling+0x5d0>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002636:	4b9b      	ldr	r3, [pc, #620]	; (80028a4 <sampling+0x804>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	b29b      	uxth	r3, r3
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b99      	ldr	r3, [pc, #612]	; (80028a8 <sampling+0x808>)
 8002642:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002644:	2301      	movs	r3, #1
 8002646:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800264a:	f102 021c 	add.w	r2, r2, #28
 800264e:	8013      	strh	r3, [r2, #0]
note_toggler[i>>5]=1<<(i&31   )   ; // record note triggers or seq_changes position
 8002650:	4b96      	ldr	r3, [pc, #600]	; (80028ac <sampling+0x80c>)
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2201      	movs	r2, #1
 800265a:	409a      	lsls	r2, r3
 800265c:	4b93      	ldr	r3, [pc, #588]	; (80028ac <sampling+0x80c>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b29b      	uxth	r3, r3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800266a:	443b      	add	r3, r7
 800266c:	f843 2c7c 	str.w	r2, [r3, #-124]
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow  , only activates when change in seq pos
 8002670:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002674:	f103 031c 	add.w	r3, r3, #28
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80f3 	beq.w	8002866 <sampling+0x7c6>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=adc_values[0]>>1; //assigned pots to start of loopers 0-16,works
 8002680:	4b8b      	ldr	r3, [pc, #556]	; (80028b0 <sampling+0x810>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b8a      	ldr	r3, [pc, #552]	; (80028b4 <sampling+0x814>)
 800268a:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=adc_values[1]>>1;
 800268e:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <sampling+0x810>)
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b87      	ldr	r3, [pc, #540]	; (80028b4 <sampling+0x814>)
 8002698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 800269c:	4b85      	ldr	r3, [pc, #532]	; (80028b4 <sampling+0x814>)
 800269e:	f893 2020 	ldrb.w	r2, [r3, #32]
 80026a2:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <sampling+0x808>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b80      	ldr	r3, [pc, #512]	; (80028b8 <sampling+0x818>)
 80026b8:	709a      	strb	r2, [r3, #2]
		
		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 80026ba:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <sampling+0x814>)
 80026bc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80026c0:	4b79      	ldr	r3, [pc, #484]	; (80028a8 <sampling+0x808>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b7a      	ldr	r3, [pc, #488]	; (80028b8 <sampling+0x818>)
 80026d0:	70da      	strb	r2, [r3, #3]
		
			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 80026d2:	4b78      	ldr	r3, [pc, #480]	; (80028b4 <sampling+0x814>)
 80026d4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80026d8:	4b73      	ldr	r3, [pc, #460]	; (80028a8 <sampling+0x808>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b72      	ldr	r3, [pc, #456]	; (80028b8 <sampling+0x818>)
 80026ee:	711a      	strb	r2, [r3, #4]
			
		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 80026f0:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <sampling+0x818>)
 80026f2:	789b      	ldrb	r3, [r3, #2]
 80026f4:	3350      	adds	r3, #80	; 0x50
 80026f6:	4a6f      	ldr	r2, [pc, #444]	; (80028b4 <sampling+0x814>)
 80026f8:	5cd3      	ldrb	r3, [r2, r3]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <sampling+0x814>)
 80026fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002702:	b29b      	uxth	r3, r3
 8002704:	4413      	add	r3, r2
 8002706:	b29a      	uxth	r2, r3
 8002708:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <sampling+0x81c>)
 800270a:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <sampling+0x818>)
 800270e:	78db      	ldrb	r3, [r3, #3]
 8002710:	461a      	mov	r2, r3
 8002712:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <sampling+0x814>)
 8002714:	5c9b      	ldrb	r3, [r3, r2]
 8002716:	b29a      	uxth	r2, r3
 8002718:	4b68      	ldr	r3, [pc, #416]	; (80028bc <sampling+0x81c>)
 800271a:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) 		{note_channel[3]=note_channel[3]+potValues[73];	adsr_retrigger[3]=1; } // stay at zero for off
 800271c:	4b67      	ldr	r3, [pc, #412]	; (80028bc <sampling+0x81c>)
 800271e:	88db      	ldrh	r3, [r3, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00c      	beq.n	800273e <sampling+0x69e>
 8002724:	4b65      	ldr	r3, [pc, #404]	; (80028bc <sampling+0x81c>)
 8002726:	88da      	ldrh	r2, [r3, #6]
 8002728:	4b62      	ldr	r3, [pc, #392]	; (80028b4 <sampling+0x814>)
 800272a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800272e:	b29b      	uxth	r3, r3
 8002730:	4413      	add	r3, r2
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b61      	ldr	r3, [pc, #388]	; (80028bc <sampling+0x81c>)
 8002736:	80da      	strh	r2, [r3, #6]
 8002738:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <sampling+0x820>)
 800273a:	2201      	movs	r2, #1
 800273c:	80da      	strh	r2, [r3, #6]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);
	
	//if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 800273e:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <sampling+0x808>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3350      	adds	r3, #80	; 0x50
 8002748:	4a5a      	ldr	r2, [pc, #360]	; (80028b4 <sampling+0x814>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <sampling+0x81c>)
 8002750:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 8002752:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <sampling+0x81c>)
 8002754:	895b      	ldrh	r3, [r3, #10]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <sampling+0x6d2>
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <sampling+0x824>)
 800275c:	795b      	ldrb	r3, [r3, #5]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d107      	bne.n	8002772 <sampling+0x6d2>
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <sampling+0x81c>)
 8002764:	895b      	ldrh	r3, [r3, #10]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <sampling+0x828>)
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	4b57      	ldr	r3, [pc, #348]	; (80028cc <sampling+0x82c>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]

	
	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  // 
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <sampling+0x818>)
 8002774:	789b      	ldrb	r3, [r3, #2]
 8002776:	3350      	adds	r3, #80	; 0x50
 8002778:	4a4e      	ldr	r2, [pc, #312]	; (80028b4 <sampling+0x814>)
 800277a:	5cd2      	ldrb	r2, [r2, r3]
 800277c:	4b4d      	ldr	r3, [pc, #308]	; (80028b4 <sampling+0x814>)
 800277e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002782:	4413      	add	r3, r2
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <sampling+0x828>)
 8002788:	701a      	strb	r2, [r3, #0]
	
	note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <sampling+0x830>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <sampling+0x834>)
 8002790:	3314      	adds	r3, #20
 8002792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002796:	0adb      	lsrs	r3, r3, #11
 8002798:	b29b      	uxth	r3, r3
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <sampling+0x828>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3b04      	subs	r3, #4
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <sampling+0x828>)
 80027aa:	701a      	strb	r2, [r3, #0]



	note_holdB=MajorNote[note_holdB];
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <sampling+0x828>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <sampling+0x838>)
 80027b4:	5c9a      	ldrb	r2, [r3, r2]
 80027b6:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <sampling+0x828>)
 80027b8:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <sampling+0x828>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	4b46      	ldr	r3, [pc, #280]	; (80028dc <sampling+0x83c>)
 80027c2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <sampling+0x840>)
 80027c8:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 80027ca:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <sampling+0x840>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	129b      	asrs	r3, r3, #10
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <sampling+0x840>)
 80027de:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 80027e0:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <sampling+0x844>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	801a      	strh	r2, [r3, #0]
		sample_Accu[3]=0; // reset to 0 mani sample hold
		sample_Accu[4]=0; // reset to 0 mani sample hold
		sample_Accu[5]=0; // reset to 0 mani sample hold
*/

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80027e6:	2300      	movs	r3, #0
 80027e8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80027ec:	f102 021f 	add.w	r2, r2, #31
 80027f0:	7013      	strb	r3, [r2, #0]
 80027f2:	e031      	b.n	8002858 <sampling+0x7b8>

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 80027f4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80027f8:	f103 031f 	add.w	r3, r3, #31
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <sampling+0x81c>)
 8002800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01c      	beq.n	8002842 <sampling+0x7a2>
 8002808:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800280c:	f103 031f 	add.w	r3, r3, #31
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <sampling+0x81c>)
 8002814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002818:	461a      	mov	r2, r3
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <sampling+0x838>)
 800281c:	5c9b      	ldrb	r3, [r3, r2]
 800281e:	461a      	mov	r2, r3
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <sampling+0x848>)
 8002822:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002826:	461a      	mov	r2, r3
 8002828:	4b30      	ldr	r3, [pc, #192]	; (80028ec <sampling+0x84c>)
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <sampling+0x84c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002834:	f103 031f 	add.w	r3, r3, #31
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b291      	uxth	r1, r2
 800283c:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <sampling+0x850>)
 800283e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002842:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002846:	f103 031f 	add.w	r3, r3, #31
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002852:	f102 021f 	add.w	r2, r2, #31
 8002856:	7013      	strb	r3, [r2, #0]
 8002858:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800285c:	f103 031f 	add.w	r3, r3, #31
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d9c6      	bls.n	80027f4 <sampling+0x754>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <sampling+0x80c>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 818d 	bne.w	8002b8e <sampling+0xaee>
freq_temp=0;
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800287c:	f102 0214 	add.w	r2, r2, #20
 8002880:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800288a:	f102 0210 	add.w	r2, r2, #16
 800288e:	6013      	str	r3, [r2, #0]

//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 8002890:	2300      	movs	r3, #0
 8002892:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002896:	f102 021b 	add.w	r2, r2, #27
 800289a:	7013      	strb	r3, [r2, #0]
 800289c:	e135      	b.n	8002b0a <sampling+0xa6a>
 800289e:	bf00      	nop
 80028a0:	200017c2 	.word	0x200017c2
 80028a4:	2000176e 	.word	0x2000176e
 80028a8:	20000ad8 	.word	0x20000ad8
 80028ac:	20000b00 	.word	0x20000b00
 80028b0:	200001cc 	.word	0x200001cc
 80028b4:	200008a4 	.word	0x200008a4
 80028b8:	200017e0 	.word	0x200017e0
 80028bc:	2000130c 	.word	0x2000130c
 80028c0:	20001758 	.word	0x20001758
 80028c4:	20001770 	.word	0x20001770
 80028c8:	2000177c 	.word	0x2000177c
 80028cc:	200017b4 	.word	0x200017b4
 80028d0:	200018d8 	.word	0x200018d8
 80028d4:	20001a6c 	.word	0x20001a6c
 80028d8:	08007be0 	.word	0x08007be0
 80028dc:	20000168 	.word	0x20000168
 80028e0:	20000ada 	.word	0x20000ada
 80028e4:	2000134a 	.word	0x2000134a
 80028e8:	08007bfc 	.word	0x08007bfc
 80028ec:	20000ad4 	.word	0x20000ad4
 80028f0:	20000abc 	.word	0x20000abc

			freq_temp=potSource[130+l];
 80028f4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80028f8:	f103 031b 	add.w	r3, r3, #27
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	3382      	adds	r3, #130	; 0x82
 8002900:	4aaf      	ldr	r2, [pc, #700]	; (8002bc0 <sampling+0xb20>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002910:	f103 0314 	add.w	r3, r3, #20
 8002914:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed
 8002918:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800291c:	f103 0314 	add.w	r3, r3, #20
 8002920:	ed93 7a00 	vldr	s14, [r3]
 8002924:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002928:	f103 0308 	add.w	r3, r3, #8
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002934:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002938:	f103 0310 	add.w	r3, r3, #16
 800293c:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8002940:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002944:	f103 031b 	add.w	r3, r3, #27
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <sampling+0xb24>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	499d      	ldr	r1, [pc, #628]	; (8002bc8 <sampling+0xb28>)
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4403      	add	r3, r0
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002968:	f103 0310 	add.w	r3, r3, #16
 800296c:	ed93 7a00 	vldr	s14, [r3]
 8002970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002974:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002978:	f103 0314 	add.w	r3, r3, #20
 800297c:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 8002980:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002984:	f103 0314 	add.w	r3, r3, #20
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002bcc <sampling+0xb2c>
 8002990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	dd1c      	ble.n	80029d4 <sampling+0x934>
 800299a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800299e:	f103 031b 	add.w	r3, r3, #27
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	4b87      	ldr	r3, [pc, #540]	; (8002bc4 <sampling+0xb24>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80029ae:	f103 0314 	add.w	r3, r3, #20
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002bcc <sampling+0xb2c>
 80029ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029be:	4982      	ldr	r1, [pc, #520]	; (8002bc8 <sampling+0xb28>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4403      	add	r3, r0
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	edc3 7a00 	vstr	s15, [r3]
 80029d2:	e015      	b.n	8002a00 <sampling+0x960>
 80029d4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80029d8:	f103 031b 	add.w	r3, r3, #27
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	4b79      	ldr	r3, [pc, #484]	; (8002bc4 <sampling+0xb24>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	4978      	ldr	r1, [pc, #480]	; (8002bc8 <sampling+0xb28>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4403      	add	r3, r0
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80029f8:	f102 0214 	add.w	r2, r2, #20
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8002a00:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a04:	f103 031b 	add.w	r3, r3, #27
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <sampling+0xb24>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	496d      	ldr	r1, [pc, #436]	; (8002bc8 <sampling+0xb28>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4403      	add	r3, r0
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a26:	f102 0214 	add.w	r2, r2, #20
 8002a2a:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002a2c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a30:	f103 0314 	add.w	r3, r3, #20
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	f7fd fe5d 	bl	80006f4 <__aeabi_f2d>
 8002a3a:	a35d      	add	r3, pc, #372	; (adr r3, 8002bb0 <sampling+0xb10>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fbca 	bl	80001d8 <__aeabi_dmul>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fd feaa 	bl	80007a4 <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002a56:	f102 0214 	add.w	r2, r2, #20
 8002a5a:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems to be working ok till here , not doing right here now
 8002a5c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a60:	f103 0314 	add.w	r3, r3, #20
 8002a64:	ed93 0a00 	vldr	s0, [r3]
 8002a68:	f005 f814 	bl	8007a94 <arm_sin_f32>
 8002a6c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a70:	f103 0310 	add.w	r3, r3, #16
 8002a74:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // not working  proper something with angles i think
 8002a78:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002a7c:	f103 031b 	add.w	r3, r3, #27
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	338c      	adds	r3, #140	; 0x8c
 8002a84:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <sampling+0xb20>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a90:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002a94:	f103 0310 	add.w	r3, r3, #16
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002bd0 <sampling+0xb30>
 8002aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002aac:	f103 0314 	add.w	r3, r3, #20
 8002ab0:	edc3 7a00 	vstr	s15, [r3]

		lfo_out[l] [i_frac]=freq_temp+8195; // ok now
 8002ab4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002ab8:	f103 0314 	add.w	r3, r3, #20
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002bd4 <sampling+0xb34>
 8002ac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ac8:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002acc:	f103 031b 	add.w	r3, r3, #27
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <sampling+0xb24>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461c      	mov	r4, r3
 8002ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002adc:	ee17 3a90 	vmov	r3, s15
 8002ae0:	b298      	uxth	r0, r3
 8002ae2:	493d      	ldr	r1, [pc, #244]	; (8002bd8 <sampling+0xb38>)
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4423      	add	r3, r4
 8002aee:	4602      	mov	r2, r0
 8002af0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (l=0;l<10;l++){   //current lfo setup , messy
 8002af4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002af8:	f103 031b 	add.w	r3, r3, #27
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b04:	f102 021b 	add.w	r2, r2, #27
 8002b08:	7013      	strb	r3, [r2, #0]
 8002b0a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8002b0e:	f103 031b 	add.w	r3, r3, #27
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	f67f aeed 	bls.w	80028f4 <sampling+0x854>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <sampling+0xb24>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <sampling+0xb38>)
 8002b22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fdd2 	bl	80006d0 <__aeabi_i2d>
 8002b2c:	a322      	add	r3, pc, #136	; (adr r3, 8002bb8 <sampling+0xb18>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fb51 	bl	80001d8 <__aeabi_dmul>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4922      	ldr	r1, [pc, #136]	; (8002bc4 <sampling+0xb24>)
 8002b3c:	7809      	ldrb	r1, [r1, #0]
 8002b3e:	460c      	mov	r4, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f7fd fe2e 	bl	80007a4 <__aeabi_d2f>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4924      	ldr	r1, [pc, #144]	; (8002bdc <sampling+0xb3c>)
 8002b4c:	00a3      	lsls	r3, r4, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <sampling+0xb24>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <sampling+0xb38>)
 8002b58:	331e      	adds	r3, #30
 8002b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd fdb6 	bl	80006d0 <__aeabi_i2d>
 8002b64:	a314      	add	r3, pc, #80	; (adr r3, 8002bb8 <sampling+0xb18>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd fb35 	bl	80001d8 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4914      	ldr	r1, [pc, #80]	; (8002bc4 <sampling+0xb24>)
 8002b74:	7809      	ldrb	r1, [r1, #0]
 8002b76:	460c      	mov	r4, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f7fd fe12 	bl	80007a4 <__aeabi_d2f>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4916      	ldr	r1, [pc, #88]	; (8002bdc <sampling+0xb3c>)
 8002b84:	f104 0312 	add.w	r3, r4, #18
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <sampling+0xb40>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <sampling+0xb40>)
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <sampling+0xb40>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba2:	f4ff acc3 	bcc.w	800252c <sampling+0x48c>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <sampling+0xb40>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e0f8      	b.n	8002da0 <sampling+0xd00>
 8002bae:	bf00      	nop
 8002bb0:	7bb1a72c 	.word	0x7bb1a72c
 8002bb4:	3f3921fa 	.word	0x3f3921fa
 8002bb8:	94fd52a7 	.word	0x94fd52a7
 8002bbc:	3f10de74 	.word	0x3f10de74
 8002bc0:	200009a4 	.word	0x200009a4
 8002bc4:	200018d8 	.word	0x200018d8
 8002bc8:	200018dc 	.word	0x200018dc
 8002bcc:	46800000 	.word	0x46800000
 8002bd0:	424c0000 	.word	0x424c0000
 8002bd4:	46000c00 	.word	0x46000c00
 8002bd8:	20001a6c 	.word	0x20001a6c
 8002bdc:	20001848 	.word	0x20001848
 8002be0:	20000b00 	.word	0x20000b00
	i_total=i+sample_pointB;
 8002be4:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <sampling+0xd20>)
 8002be6:	881a      	ldrh	r2, [r3, #0]
 8002be8:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <sampling+0xd24>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002bf2:	f102 021e 	add.w	r2, r2, #30
 8002bf6:	8013      	strh	r3, [r2, #0]
	i_frac=(i>>6);
 8002bf8:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <sampling+0xd20>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <sampling+0xd28>)
 8002c04:	701a      	strb	r2, [r3, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 8002c06:	4b71      	ldr	r3, [pc, #452]	; (8002dcc <sampling+0xd2c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a71      	ldr	r2, [pc, #452]	; (8002dd0 <sampling+0xd30>)
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a6e      	ldr	r2, [pc, #440]	; (8002dcc <sampling+0xd2c>)
 8002c12:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002c14:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <sampling+0xd2c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c1c:	db04      	blt.n	8002c28 <sampling+0xb88>
 8002c1e:	4b6b      	ldr	r3, [pc, #428]	; (8002dcc <sampling+0xd2c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	425b      	negs	r3, r3
 8002c24:	4a69      	ldr	r2, [pc, #420]	; (8002dcc <sampling+0xd2c>)
 8002c26:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 8002c28:	4b68      	ldr	r3, [pc, #416]	; (8002dcc <sampling+0xd2c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a68      	ldr	r2, [pc, #416]	; (8002dd0 <sampling+0xd30>)
 8002c2e:	8852      	ldrh	r2, [r2, #2]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a66      	ldr	r2, [pc, #408]	; (8002dcc <sampling+0xd2c>)
 8002c34:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 8002c36:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <sampling+0xd2c>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c3e:	db04      	blt.n	8002c4a <sampling+0xbaa>
 8002c40:	4b62      	ldr	r3, [pc, #392]	; (8002dcc <sampling+0xd2c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	425b      	negs	r3, r3
 8002c46:	4a61      	ldr	r2, [pc, #388]	; (8002dcc <sampling+0xd2c>)
 8002c48:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 8002c4a:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <sampling+0xd2c>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4a60      	ldr	r2, [pc, #384]	; (8002dd0 <sampling+0xd30>)
 8002c50:	8892      	ldrh	r2, [r2, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	4a5d      	ldr	r2, [pc, #372]	; (8002dcc <sampling+0xd2c>)
 8002c56:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002c58:	4b5c      	ldr	r3, [pc, #368]	; (8002dcc <sampling+0xd2c>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c60:	db04      	blt.n	8002c6c <sampling+0xbcc>
 8002c62:	4b5a      	ldr	r3, [pc, #360]	; (8002dcc <sampling+0xd2c>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	425b      	negs	r3, r3
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <sampling+0xd2c>)
 8002c6a:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 8002c6c:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <sampling+0xd2c>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <sampling+0xd30>)
 8002c72:	88d2      	ldrh	r2, [r2, #6]
 8002c74:	4413      	add	r3, r2
 8002c76:	4a55      	ldr	r2, [pc, #340]	; (8002dcc <sampling+0xd2c>)
 8002c78:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002c7a:	4b54      	ldr	r3, [pc, #336]	; (8002dcc <sampling+0xd2c>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c82:	db04      	blt.n	8002c8e <sampling+0xbee>
 8002c84:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <sampling+0xd2c>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	425b      	negs	r3, r3
 8002c8a:	4a50      	ldr	r2, [pc, #320]	; (8002dcc <sampling+0xd2c>)
 8002c8c:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002c8e:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <sampling+0xd2c>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <sampling+0xd30>)
 8002c94:	8912      	ldrh	r2, [r2, #8]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <sampling+0xd2c>)
 8002c9a:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002c9c:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <sampling+0xd2c>)
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ca4:	db04      	blt.n	8002cb0 <sampling+0xc10>
 8002ca6:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <sampling+0xd2c>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	425b      	negs	r3, r3
 8002cac:	4a47      	ldr	r2, [pc, #284]	; (8002dcc <sampling+0xd2c>)
 8002cae:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <sampling+0xd34>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <sampling+0xd34>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <sampling+0xd34>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002cc2:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <sampling+0xd2c>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	11db      	asrs	r3, r3, #7
 8002cc8:	4a42      	ldr	r2, [pc, #264]	; (8002dd4 <sampling+0xd34>)
 8002cca:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <sampling+0xd34>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <sampling+0xd38>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002cda:	f102 0219 	add.w	r2, r2, #25
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <sampling+0xd34>)
 8002ce6:	6013      	str	r3, [r2, #0]

									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 8002ce8:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <sampling+0xd2c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <sampling+0xd34>)
 8002cee:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002cf0:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <sampling+0xd34>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002cf8:	f102 021a 	add.w	r2, r2, #26
 8002cfc:	7812      	ldrb	r2, [r2, #0]
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	4a34      	ldr	r2, [pc, #208]	; (8002dd4 <sampling+0xd34>)
 8002d04:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 8002d06:	4b35      	ldr	r3, [pc, #212]	; (8002ddc <sampling+0xd3c>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <sampling+0xc76>
 8002d0e:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <sampling+0xd40>)
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <sampling+0xd44>)
 8002d14:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <sampling+0xd3c>)
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <sampling+0xd44>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	4413      	add	r3, r2
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <sampling+0xd3c>)
 8002d24:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <sampling+0xd3c>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	09db      	lsrs	r3, r3, #7
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <sampling+0xca0>
 8002d32:	2300      	movs	r3, #0
 8002d34:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002d38:	f102 021c 	add.w	r2, r2, #28
 8002d3c:	8013      	strh	r3, [r2, #0]
 8002d3e:	e005      	b.n	8002d4c <sampling+0xcac>
 8002d40:	2301      	movs	r3, #1
 8002d42:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002d46:	f102 021c 	add.w	r2, r2, #28
 8002d4a:	8013      	strh	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <sampling+0xd3c>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <sampling+0xd48>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	015b      	lsls	r3, r3, #5
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dd02      	ble.n	8002d62 <sampling+0xcc2>
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <sampling+0xd3c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine
 8002d62:	f000 fa93 	bl	800328c <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <sampling+0xd20>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <sampling+0xd34>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002d74:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8002d78:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <sampling+0xd20>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <sampling+0xd34>)
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	0083      	lsls	r3, r0, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f843 2c9c 	str.w	r2, [r3, #-156]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <sampling+0xd20>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <sampling+0xd20>)
 8002d9e:	801a      	strh	r2, [r3, #0]
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <sampling+0xd20>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da8:	f4ff af1c 	bcc.w	8002be4 <sampling+0xb44>


int32_t filter_Accu;


int32_t feedback_out=filter_out[3];
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <sampling+0xd4c>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002db4:	6013      	str	r3, [r2, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002db6:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <sampling+0xd20>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	e250      	b.n	8003260 <sampling+0x11c0>
 8002dbe:	bf00      	nop
 8002dc0:	20000b00 	.word	0x20000b00
 8002dc4:	20000afe 	.word	0x20000afe
 8002dc8:	200018d8 	.word	0x200018d8
 8002dcc:	2000179c 	.word	0x2000179c
 8002dd0:	20000abc 	.word	0x20000abc
 8002dd4:	20000ae0 	.word	0x20000ae0
 8002dd8:	20000ab4 	.word	0x20000ab4
 8002ddc:	20000ab0 	.word	0x20000ab0
 8002de0:	20000ada 	.word	0x20000ada
 8002de4:	20000ab8 	.word	0x20000ab8
 8002de8:	20000166 	.word	0x20000166
 8002dec:	20001780 	.word	0x20001780
	i_total=i+sample_pointB;
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <sampling+0xe24>)
 8002df2:	881a      	ldrh	r2, [r3, #0]
 8002df4:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <sampling+0xe28>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002dfe:	f102 021e 	add.w	r2, r2, #30
 8002e02:	8013      	strh	r3, [r2, #0]
i_frac=(i>>6);
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <sampling+0xe24>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <sampling+0xe2c>)
 8002e10:	701a      	strb	r2, [r3, #0]

// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{adsr_temp =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002e12:	4b2c      	ldr	r3, [pc, #176]	; (8002ec4 <sampling+0xe24>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002e20:	443b      	add	r3, r7
 8002e22:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002e26:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <sampling+0xe24>)
 8002e28:	8812      	ldrh	r2, [r2, #0]
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10f      	bne.n	8002e58 <sampling+0xdb8>
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <sampling+0xe30>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <sampling+0xe34>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <sampling+0xe34>)
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <sampling+0xe34>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <sampling+0xe34>)
 8002e56:	801a      	strh	r2, [r3, #0]

//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits

sample_Accu[1]=play_holder1[i];  // sine input
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <sampling+0xe24>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8002e62:	f6a3 039c 	subw	r3, r3, #2204	; 0x89c
 8002e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <sampling+0xe38>)
 8002e6c:	6053      	str	r3, [r2, #4]
freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <sampling+0xe2c>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <sampling+0xe3c>)
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <sampling+0xe40>)
 8002e7c:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <sampling+0xe2c>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <sampling+0xe3c>)
 8002e84:	3312      	adds	r3, #18
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <sampling+0xe40>)
 8002e8e:	6093      	str	r3, [r2, #8]
//freq_point[3]=freq_pointer[3] [i_frac];
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;


adsr_level[3] = adsr_lut	[i>>1];
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <sampling+0xe24>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <sampling+0xe44>)
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <sampling+0xe48>)
 8002ea2:	60d3      	str	r3, [r2, #12]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <sampling+0xe40>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	dd19      	ble.n	8002eec <sampling+0xe4c>
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <sampling+0xe40>)
 8002eba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e020      	b.n	8002f04 <sampling+0xe64>
 8002ec2:	bf00      	nop
 8002ec4:	20000b00 	.word	0x20000b00
 8002ec8:	20000afe 	.word	0x20000afe
 8002ecc:	200018d8 	.word	0x200018d8
 8002ed0:	20001754 	.word	0x20001754
 8002ed4:	200018da 	.word	0x200018da
 8002ed8:	20000ae0 	.word	0x20000ae0
 8002edc:	20001848 	.word	0x20001848
 8002ee0:	20001838 	.word	0x20001838
 8002ee4:	20001354 	.word	0x20001354
 8002ee8:	20002078 	.word	0x20002078
 8002eec:	4bc1      	ldr	r3, [pc, #772]	; (80031f4 <sampling+0x1154>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efa:	d503      	bpl.n	8002f04 <sampling+0xe64>
 8002efc:	4bbd      	ldr	r3, [pc, #756]	; (80031f4 <sampling+0x1154>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002f04:	4bbb      	ldr	r3, [pc, #748]	; (80031f4 <sampling+0x1154>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f12:	4bb8      	ldr	r3, [pc, #736]	; (80031f4 <sampling+0x1154>)
 8002f14:	edc3 7a01 	vstr	s15, [r3, #4]
		//filter_accus[1]=sample_Accu[1];
		filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5); // saw
 8002f18:	4bb7      	ldr	r3, [pc, #732]	; (80031f8 <sampling+0x1158>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fbd7 	bl	80006d0 <__aeabi_i2d>
 8002f22:	4604      	mov	r4, r0
 8002f24:	460d      	mov	r5, r1
 8002f26:	4bb5      	ldr	r3, [pc, #724]	; (80031fc <sampling+0x115c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fbe2 	bl	80006f4 <__aeabi_f2d>
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	4bb2      	ldr	r3, [pc, #712]	; (8003200 <sampling+0x1160>)
 8002f36:	f7fd f94f 	bl	80001d8 <__aeabi_dmul>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4620      	mov	r0, r4
 8002f40:	4629      	mov	r1, r5
 8002f42:	f7fd fa79 	bl	8000438 <__adddf3>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f7fd fc29 	bl	80007a4 <__aeabi_d2f>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4aab      	ldr	r2, [pc, #684]	; (8003204 <sampling+0x1164>)
 8002f56:	6053      	str	r3, [r2, #4]
	//	filter_accus[1]=	filter_accus[1]*adsr_level[3][i_frac];
		filter_accus[1]=	filter_accus[1]*adsr_level[3];
 8002f58:	4baa      	ldr	r3, [pc, #680]	; (8003204 <sampling+0x1164>)
 8002f5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f5e:	4baa      	ldr	r3, [pc, #680]	; (8003208 <sampling+0x1168>)
 8002f60:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f68:	4ba6      	ldr	r3, [pc, #664]	; (8003204 <sampling+0x1164>)
 8002f6a:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);
 8002f6e:	4ba5      	ldr	r3, [pc, #660]	; (8003204 <sampling+0x1164>)
 8002f70:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f74:	4b9f      	ldr	r3, [pc, #636]	; (80031f4 <sampling+0x1154>)
 8002f76:	edd3 7a00 	vldr	s15, [r3]
 8002f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f7e:	4ba1      	ldr	r3, [pc, #644]	; (8003204 <sampling+0x1164>)
 8002f80:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f84:	4b9b      	ldr	r3, [pc, #620]	; (80031f4 <sampling+0x1154>)
 8002f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f92:	4b9c      	ldr	r3, [pc, #624]	; (8003204 <sampling+0x1164>)
 8002f94:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 8002f98:	4b9a      	ldr	r3, [pc, #616]	; (8003204 <sampling+0x1164>)
 8002f9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f9e:	4b95      	ldr	r3, [pc, #596]	; (80031f4 <sampling+0x1154>)
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa8:	4b96      	ldr	r3, [pc, #600]	; (8003204 <sampling+0x1164>)
 8002faa:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fae:	4b91      	ldr	r3, [pc, #580]	; (80031f4 <sampling+0x1154>)
 8002fb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbc:	4b91      	ldr	r3, [pc, #580]	; (8003204 <sampling+0x1164>)
 8002fbe:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 8002fc2:	4b90      	ldr	r3, [pc, #576]	; (8003204 <sampling+0x1164>)
 8002fc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fc8:	4b8a      	ldr	r3, [pc, #552]	; (80031f4 <sampling+0x1154>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd2:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <sampling+0x1164>)
 8002fd4:	edd3 6a04 	vldr	s13, [r3, #16]
 8002fd8:	4b86      	ldr	r3, [pc, #536]	; (80031f4 <sampling+0x1154>)
 8002fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe6:	4b87      	ldr	r3, [pc, #540]	; (8003204 <sampling+0x1164>)
 8002fe8:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8002fec:	4b85      	ldr	r3, [pc, #532]	; (8003204 <sampling+0x1164>)
 8002fee:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ff2:	4b80      	ldr	r3, [pc, #512]	; (80031f4 <sampling+0x1154>)
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <sampling+0x1164>)
 8002ffe:	edd3 6a05 	vldr	s13, [r3, #20]
 8003002:	4b7c      	ldr	r3, [pc, #496]	; (80031f4 <sampling+0x1154>)
 8003004:	edd3 7a01 	vldr	s15, [r3, #4]
 8003008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003010:	4b7c      	ldr	r3, [pc, #496]	; (8003204 <sampling+0x1164>)
 8003012:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8003016:	4b7b      	ldr	r3, [pc, #492]	; (8003204 <sampling+0x1164>)
 8003018:	ed93 7a05 	vldr	s14, [r3, #20]
 800301c:	4b79      	ldr	r3, [pc, #484]	; (8003204 <sampling+0x1164>)
 800301e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003026:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800302a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302e:	4b73      	ldr	r3, [pc, #460]	; (80031fc <sampling+0x115c>)
 8003030:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8003034:	4b73      	ldr	r3, [pc, #460]	; (8003204 <sampling+0x1164>)
 8003036:	edd3 7a05 	vldr	s15, [r3, #20]
 800303a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303e:	ee17 2a90 	vmov	r2, s15
 8003042:	4b6d      	ldr	r3, [pc, #436]	; (80031f8 <sampling+0x1158>)
 8003044:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8003046:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <sampling+0x1164>)
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <sampling+0x1164>)
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // sine
 800304e:	4b6f      	ldr	r3, [pc, #444]	; (800320c <sampling+0x116c>)
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 800305e:	115b      	asrs	r3, r3, #5
 8003060:	4a65      	ldr	r2, [pc, #404]	; (80031f8 <sampling+0x1158>)
 8003062:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 8003064:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <sampling+0x1154>)
 8003066:	edd3 7a02 	vldr	s15, [r3, #8]
 800306a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800306e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003076:	dd03      	ble.n	8003080 <sampling+0xfe0>
 8003078:	4b5e      	ldr	r3, [pc, #376]	; (80031f4 <sampling+0x1154>)
 800307a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800307e:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8003080:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <sampling+0x1154>)
 8003082:	edd3 7a02 	vldr	s15, [r3, #8]
 8003086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800308a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308e:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <sampling+0x1154>)
 8003090:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8003094:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <sampling+0x1158>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a0:	4b58      	ldr	r3, [pc, #352]	; (8003204 <sampling+0x1164>)
 80030a2:	edc3 7a06 	vstr	s15, [r3, #24]
				filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 80030a6:	4b57      	ldr	r3, [pc, #348]	; (8003204 <sampling+0x1164>)
 80030a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80030ac:	4b56      	ldr	r3, [pc, #344]	; (8003208 <sampling+0x1168>)
 80030ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80030b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b6:	4b53      	ldr	r3, [pc, #332]	; (8003204 <sampling+0x1164>)
 80030b8:	edc3 7a06 	vstr	s15, [r3, #24]

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 80030bc:	4b51      	ldr	r3, [pc, #324]	; (8003204 <sampling+0x1164>)
 80030be:	ed93 7a06 	vldr	s14, [r3, #24]
 80030c2:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <sampling+0x1154>)
 80030c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80030c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030cc:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <sampling+0x1164>)
 80030ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80030d2:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <sampling+0x1154>)
 80030d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80030d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	4b48      	ldr	r3, [pc, #288]	; (8003204 <sampling+0x1164>)
 80030e2:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <sampling+0x1164>)
 80030e8:	ed93 7a07 	vldr	s14, [r3, #28]
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <sampling+0x1154>)
 80030ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80030f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f6:	4b43      	ldr	r3, [pc, #268]	; (8003204 <sampling+0x1164>)
 80030f8:	edd3 6a08 	vldr	s13, [r3, #32]
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <sampling+0x1154>)
 80030fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <sampling+0x1164>)
 800310c:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8003110:	4b3c      	ldr	r3, [pc, #240]	; (8003204 <sampling+0x1164>)
 8003112:	ed93 7a08 	vldr	s14, [r3, #32]
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <sampling+0x1154>)
 8003118:	edd3 7a02 	vldr	s15, [r3, #8]
 800311c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003120:	4b38      	ldr	r3, [pc, #224]	; (8003204 <sampling+0x1164>)
 8003122:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003126:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <sampling+0x1154>)
 8003128:	edd3 7a03 	vldr	s15, [r3, #12]
 800312c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	4b33      	ldr	r3, [pc, #204]	; (8003204 <sampling+0x1164>)
 8003136:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 800313a:	4b32      	ldr	r3, [pc, #200]	; (8003204 <sampling+0x1164>)
 800313c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <sampling+0x1154>)
 8003142:	edd3 7a02 	vldr	s15, [r3, #8]
 8003146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314a:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <sampling+0x1164>)
 800314c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <sampling+0x1154>)
 8003152:	edd3 7a03 	vldr	s15, [r3, #12]
 8003156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <sampling+0x1164>)
 8003160:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <sampling+0x1164>)
 8003166:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <sampling+0x1164>)
 800316c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <sampling+0x115c>)
 800317e:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <sampling+0x1164>)
 8003184:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800318c:	ee17 2a90 	vmov	r2, s15
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <sampling+0x1158>)
 8003192:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <sampling+0x1164>)
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <sampling+0x1164>)
 800319a:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 800319c:	2300      	movs	r3, #0
 800319e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80031a2:	f102 0210 	add.w	r2, r2, #16
 80031a6:	6013      	str	r3, [r2, #0]
filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <sampling+0x1158>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <sampling+0x1158>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4413      	add	r3, r2
 80031b2:	121b      	asrs	r3, r3, #8
 80031b4:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80031b8:	f102 0210 	add.w	r2, r2, #16
 80031bc:	6013      	str	r3, [r2, #0]


 if (one_shot!=199)   one_shot++;  //play one attack then stop
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <sampling+0x1170>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2bc7      	cmp	r3, #199	; 0xc7
 80031c4:	d005      	beq.n	80031d2 <sampling+0x1132>
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <sampling+0x1170>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <sampling+0x1170>)
 80031d0:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 80031d2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80031d6:	f103 0310 	add.w	r3, r3, #16
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	db18      	blt.n	8003214 <sampling+0x1174>
 80031e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031e6:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80031ea:	f102 0210 	add.w	r2, r2, #16
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e01e      	b.n	8003230 <sampling+0x1190>
 80031f2:	bf00      	nop
 80031f4:	20001838 	.word	0x20001838
 80031f8:	20000ae0 	.word	0x20000ae0
 80031fc:	20001824 	.word	0x20001824
 8003200:	3fe00000 	.word	0x3fe00000
 8003204:	200017e8 	.word	0x200017e8
 8003208:	20002078 	.word	0x20002078
 800320c:	20000b00 	.word	0x20000b00
 8003210:	200017b4 	.word	0x200017b4
 8003214:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003218:	f103 0310 	add.w	r3, r3, #16
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003222:	dc05      	bgt.n	8003230 <sampling+0x1190>
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <sampling+0x11dc>)
 8003226:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800322a:	f102 0210 	add.w	r2, r2, #16
 800322e:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1023;   // final output disable for now
 8003230:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003234:	f103 0310 	add.w	r3, r3, #16
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	119b      	asrs	r3, r3, #6
 800323c:	b29a      	uxth	r2, r3
 800323e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003242:	f103 031e 	add.w	r3, r3, #30
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800324c:	b291      	uxth	r1, r2
 800324e:	4a0c      	ldr	r2, [pc, #48]	; (8003280 <sampling+0x11e0>)
 8003250:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <sampling+0x11e4>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <sampling+0x11e4>)
 800325e:	801a      	strh	r2, [r3, #0]
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <sampling+0x11e4>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	f4ff adc2 	bcc.w	8002df0 <sampling+0xd50>


} // end of filer


bank_write=0;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <sampling+0x11e8>)
 800326e:	2200      	movs	r2, #0
 8003270:	801a      	strh	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 8003278:	46bd      	mov	sp, r7
 800327a:	bdb0      	pop	{r4, r5, r7, pc}
 800327c:	ffff0001 	.word	0xffff0001
 8003280:	20000b04 	.word	0x20000b04
 8003284:	20000b00 	.word	0x20000b00
 8003288:	200001d2 	.word	0x200001d2

0800328c <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <sine_count+0xc4>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <sine_count+0xc8>)
 800329c:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 800329e:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <sine_count+0xc4>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <sine_count+0xc8>)
 80032ac:	881a      	ldrh	r2, [r3, #0]
 80032ae:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <sine_count+0xcc>)
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d903      	bls.n	80032be <sine_count+0x32>
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <sine_count+0xcc>)
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <sine_count+0xc8>)
 80032bc:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <sine_count+0xc8>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b25      	ldr	r3, [pc, #148]	; (800335c <sine_count+0xd0>)
 80032c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <sine_count+0xd4>)
 80032ce:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <sine_count+0xd4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80032dc:	3b20      	subs	r3, #32
 80032de:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <sine_count+0xc8>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <sine_count+0xc8>)
 80032ea:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <sine_count+0xc8>)
 80032ee:	881a      	ldrh	r2, [r3, #0]
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <sine_count+0xcc>)
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d302      	bcc.n	80032fe <sine_count+0x72>
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <sine_count+0xc8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <sine_count+0xc8>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <sine_count+0xd0>)
 8003306:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800330a:	461a      	mov	r2, r3
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <sine_count+0xd4>)
 800330e:	601a      	str	r2, [r3, #0]
		
		sine_tempB=sine_out; // grab first value
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <sine_count+0xd4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 800331c:	3b20      	subs	r3, #32
 800331e:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	115b      	asrs	r3, r3, #5
 800332c:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 800332e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <sine_count+0xd4>)
 8003342:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	20000ab0 	.word	0x20000ab0
 8003354:	20000aae 	.word	0x20000aae
 8003358:	20000166 	.word	0x20000166
 800335c:	08007fa8 	.word	0x08007fa8
 8003360:	20000ab4 	.word	0x20000ab4

08003364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003368:	b672      	cpsid	i
}
 800336a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800336c:	e7fe      	b.n	800336c <Error_Handler+0x8>
	...

08003370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_MspInit+0x4c>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <HAL_MspInit+0x4c>)
 8003380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003384:	6453      	str	r3, [r2, #68]	; 0x44
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_MspInit+0x4c>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_MspInit+0x4c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_MspInit+0x4c>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_MspInit+0x4c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2f      	ldr	r2, [pc, #188]	; (800349c <HAL_ADC_MspInit+0xdc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d157      	bne.n	8003492 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <HAL_ADC_MspInit+0xe0>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <HAL_ADC_MspInit+0xe0>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_ADC_MspInit+0xe0>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <HAL_ADC_MspInit+0xe0>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <HAL_ADC_MspInit+0xe0>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_ADC_MspInit+0xe0>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 800341a:	2338      	movs	r3, #56	; 0x38
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341e:	2303      	movs	r3, #3
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	481d      	ldr	r0, [pc, #116]	; (80034a4 <HAL_ADC_MspInit+0xe4>)
 800342e:	f001 fbe1 	bl	8004bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <HAL_ADC_MspInit+0xec>)
 8003436:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 800343a:	2200      	movs	r2, #0
 800343c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 8003454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003458:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 800345c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003460:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 8003464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003468:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 800346c:	2200      	movs	r2, #0
 800346e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 8003472:	2200      	movs	r2, #0
 8003474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003476:	480c      	ldr	r0, [pc, #48]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 8003478:	f001 f84c 	bl	8004514 <HAL_DMA_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003482:	f7ff ff6f 	bl	8003364 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
 800348c:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <HAL_ADC_MspInit+0xe8>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003492:	bf00      	nop
 8003494:	3728      	adds	r7, #40	; 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40012000 	.word	0x40012000
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020000 	.word	0x40020000
 80034a8:	20000654 	.word	0x20000654
 80034ac:	40026410 	.word	0x40026410

080034b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a22      	ldr	r2, [pc, #136]	; (8003558 <HAL_I2C_MspInit+0xa8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d13d      	bne.n	800354e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_I2C_MspInit+0xac>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a20      	ldr	r2, [pc, #128]	; (800355c <HAL_I2C_MspInit+0xac>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <HAL_I2C_MspInit+0xac>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034f4:	2312      	movs	r3, #18
 80034f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fc:	2303      	movs	r3, #3
 80034fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003500:	2309      	movs	r3, #9
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	4619      	mov	r1, r3
 800350a:	4815      	ldr	r0, [pc, #84]	; (8003560 <HAL_I2C_MspInit+0xb0>)
 800350c:	f001 fb72 	bl	8004bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003516:	2312      	movs	r3, #18
 8003518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351e:	2303      	movs	r3, #3
 8003520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003522:	2304      	movs	r3, #4
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	4619      	mov	r1, r3
 800352c:	480c      	ldr	r0, [pc, #48]	; (8003560 <HAL_I2C_MspInit+0xb0>)
 800352e:	f001 fb61 	bl	8004bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_I2C_MspInit+0xac>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_I2C_MspInit+0xac>)
 800353c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_I2C_MspInit+0xac>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	3728      	adds	r7, #40	; 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40005800 	.word	0x40005800
 800355c:	40023800 	.word	0x40023800
 8003560:	40020400 	.word	0x40020400

08003564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_SPI_MspInit+0x84>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d12c      	bne.n	80035e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_SPI_MspInit+0x88>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_SPI_MspInit+0x88>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_SPI_MspInit+0x88>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_SPI_MspInit+0x88>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <HAL_SPI_MspInit+0x88>)
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_SPI_MspInit+0x88>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80035be:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80035c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c4:	2302      	movs	r3, #2
 80035c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035c8:	2302      	movs	r3, #2
 80035ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035cc:	2303      	movs	r3, #3
 80035ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035d0:	2305      	movs	r3, #5
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	4619      	mov	r1, r3
 80035da:	4805      	ldr	r0, [pc, #20]	; (80035f0 <HAL_SPI_MspInit+0x8c>)
 80035dc:	f001 fb0a 	bl	8004bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035e0:	bf00      	nop
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40003800 	.word	0x40003800
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020400 	.word	0x40020400

080035f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d12d      	bne.n	8003672 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
 8003626:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4a28      	ldr	r2, [pc, #160]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6313      	str	r3, [r2, #48]	; 0x30
 8003642:	4b26      	ldr	r3, [pc, #152]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800364e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003658:	2301      	movs	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003660:	2301      	movs	r3, #1
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003664:	f107 031c 	add.w	r3, r7, #28
 8003668:	4619      	mov	r1, r3
 800366a:	481d      	ldr	r0, [pc, #116]	; (80036e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800366c:	f001 fac2 	bl	8004bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003670:	e030      	b.n	80036d4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d12b      	bne.n	80036d4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	4b16      	ldr	r3, [pc, #88]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	6313      	str	r3, [r2, #48]	; 0x30
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_TIM_Encoder_MspInit+0xe8>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036b4:	23c0      	movs	r3, #192	; 0xc0
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036c4:	2302      	movs	r3, #2
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c8:	f107 031c 	add.w	r3, r7, #28
 80036cc:	4619      	mov	r1, r3
 80036ce:	4806      	ldr	r0, [pc, #24]	; (80036e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80036d0:	f001 fa90 	bl	8004bf4 <HAL_GPIO_Init>
}
 80036d4:	bf00      	nop
 80036d6:	3730      	adds	r7, #48	; 0x30
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40020400 	.word	0x40020400

080036ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <HAL_TIM_Base_MspInit+0x48>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d115      	bne.n	800372a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_TIM_Base_MspInit+0x4c>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <HAL_TIM_Base_MspInit+0x4c>)
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	6413      	str	r3, [r2, #64]	; 0x40
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_TIM_Base_MspInit+0x4c>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	201d      	movs	r0, #29
 8003720:	f000 fec1 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003724:	201d      	movs	r0, #29
 8003726:	f000 feda 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40000400 	.word	0x40000400
 8003738:	40023800 	.word	0x40023800

0800373c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 030c 	add.w	r3, r7, #12
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <HAL_TIM_MspPostInit+0x68>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d11d      	bne.n	800379a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_TIM_MspPostInit+0x6c>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <HAL_TIM_MspPostInit+0x6c>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_TIM_MspPostInit+0x6c>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800377a:	2301      	movs	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800378a:	2302      	movs	r3, #2
 800378c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	f107 030c 	add.w	r3, r7, #12
 8003792:	4619      	mov	r1, r3
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <HAL_TIM_MspPostInit+0x70>)
 8003796:	f001 fa2d 	bl	8004bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800379a:	bf00      	nop
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020400 	.word	0x40020400

080037b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037b4:	e7fe      	b.n	80037b4 <NMI_Handler+0x4>

080037b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037b6:	b480      	push	{r7}
 80037b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ba:	e7fe      	b.n	80037ba <HardFault_Handler+0x4>

080037bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037c0:	e7fe      	b.n	80037c0 <MemManage_Handler+0x4>

080037c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037c6:	e7fe      	b.n	80037c6 <BusFault_Handler+0x4>

080037c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037cc:	e7fe      	b.n	80037cc <UsageFault_Handler+0x4>

080037ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037fc:	f000 f8a8 	bl	8003950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}

08003804 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <TIM3_IRQHandler+0x10>)
 800380a:	f003 fb3b 	bl	8006e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200007a0 	.word	0x200007a0

08003818 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800381c:	4802      	ldr	r0, [pc, #8]	; (8003828 <DMA2_Stream0_IRQHandler+0x10>)
 800381e:	f000 ff7f 	bl	8004720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000654 	.word	0x20000654

0800382c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <SystemInit+0x28>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	4a07      	ldr	r2, [pc, #28]	; (8003854 <SystemInit+0x28>)
 8003838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800383c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <SystemInit+0x28>)
 8003842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003846:	609a      	str	r2, [r3, #8]
#endif
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003890 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800385c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800385e:	e003      	b.n	8003868 <LoopCopyDataInit>

08003860 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003862:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003864:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003866:	3104      	adds	r1, #4

08003868 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003868:	480b      	ldr	r0, [pc, #44]	; (8003898 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800386c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800386e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003870:	d3f6      	bcc.n	8003860 <CopyDataInit>
  ldr  r2, =_sbss
 8003872:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003874:	e002      	b.n	800387c <LoopFillZerobss>

08003876 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003876:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003878:	f842 3b04 	str.w	r3, [r2], #4

0800387c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800387e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003880:	d3f9      	bcc.n	8003876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003882:	f7ff ffd3 	bl	800382c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003886:	f004 f949 	bl	8007b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800388a:	f7fd f95d 	bl	8000b48 <main>
  bx  lr    
 800388e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003890:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003894:	08008c90 	.word	0x08008c90
  ldr  r0, =_sdata
 8003898:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800389c:	200005f0 	.word	0x200005f0
  ldr  r2, =_sbss
 80038a0:	200005f0 	.word	0x200005f0
  ldr  r3, = _ebss
 80038a4:	200020c8 	.word	0x200020c8

080038a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a8:	e7fe      	b.n	80038a8 <ADC_IRQHandler>
	...

080038ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <HAL_Init+0x40>)
 80038b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_Init+0x40>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_Init+0x40>)
 80038c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_Init+0x40>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <HAL_Init+0x40>)
 80038ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d4:	2003      	movs	r0, #3
 80038d6:	f000 fddb 	bl	8004490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038da:	2000      	movs	r0, #0
 80038dc:	f000 f808 	bl	80038f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e0:	f7ff fd46 	bl	8003370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023c00 	.word	0x40023c00

080038f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_InitTick+0x54>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_InitTick+0x58>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003906:	fbb3 f3f1 	udiv	r3, r3, r1
 800390a:	fbb2 f3f3 	udiv	r3, r2, r3
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fdf3 	bl	80044fa <HAL_SYSTICK_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e00e      	b.n	800393c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b0f      	cmp	r3, #15
 8003922:	d80a      	bhi.n	800393a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003924:	2200      	movs	r2, #0
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	f000 fdbb 	bl	80044a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003930:	4a06      	ldr	r2, [pc, #24]	; (800394c <HAL_InitTick+0x5c>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	200005e4 	.word	0x200005e4
 8003948:	200005ec 	.word	0x200005ec
 800394c:	200005e8 	.word	0x200005e8

08003950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_IncTick+0x20>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x24>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_IncTick+0x24>)
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	200005ec 	.word	0x200005ec
 8003974:	200020c4 	.word	0x200020c4

08003978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return uwTick;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_GetTick+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	200020c4 	.word	0x200020c4

08003990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003998:	f7ff ffee 	bl	8003978 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d005      	beq.n	80039b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_Delay+0x44>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039b6:	bf00      	nop
 80039b8:	f7ff ffde 	bl	8003978 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d8f7      	bhi.n	80039b8 <HAL_Delay+0x28>
  {
  }
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200005ec 	.word	0x200005ec

080039d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e033      	b.n	8003a56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fce2 	bl	80033c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d118      	bne.n	8003a48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a1e:	f023 0302 	bic.w	r3, r3, #2
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fae2 	bl	8003ff4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
 8003a46:	e001      	b.n	8003a4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_Start+0x1a>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e08a      	b.n	8003b90 <HAL_ADC_Start+0x130>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d018      	beq.n	8003ac2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003aa0:	4b3e      	ldr	r3, [pc, #248]	; (8003b9c <HAL_ADC_Start+0x13c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3e      	ldr	r2, [pc, #248]	; (8003ba0 <HAL_ADC_Start+0x140>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0c9a      	lsrs	r2, r3, #18
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ab4:	e002      	b.n	8003abc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f9      	bne.n	8003ab6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d15e      	bne.n	8003b8e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003afa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	d106      	bne.n	8003b1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	f023 0206 	bic.w	r2, r3, #6
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b1c:	e002      	b.n	8003b24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_ADC_Start+0x144>)
 8003b2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11c      	bne.n	8003b8e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	e013      	b.n	8003b8e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ba8 <HAL_ADC_Start+0x148>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10e      	bne.n	8003b8e <HAL_ADC_Start+0x12e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b8c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	200005e4 	.word	0x200005e4
 8003ba0:	431bde83 	.word	0x431bde83
 8003ba4:	40012300 	.word	0x40012300
 8003ba8:	40012000 	.word	0x40012000

08003bac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Start_DMA+0x1e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e0b1      	b.n	8003d2e <HAL_ADC_Start_DMA+0x182>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d018      	beq.n	8003c12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bf0:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_ADC_Start_DMA+0x18c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a51      	ldr	r2, [pc, #324]	; (8003d3c <HAL_ADC_Start_DMA+0x190>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	0c9a      	lsrs	r2, r3, #18
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c04:	e002      	b.n	8003c0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f9      	bne.n	8003c06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	f040 8085 	bne.w	8003d2c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c60:	d106      	bne.n	8003c70 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f023 0206 	bic.w	r2, r3, #6
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c6e:	e002      	b.n	8003c76 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c7e:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <HAL_ADC_Start_DMA+0x194>)
 8003c80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	4a2f      	ldr	r2, [pc, #188]	; (8003d44 <HAL_ADC_Start_DMA+0x198>)
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <HAL_ADC_Start_DMA+0x19c>)
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	4a2d      	ldr	r2, [pc, #180]	; (8003d4c <HAL_ADC_Start_DMA+0x1a0>)
 8003c98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003cb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	334c      	adds	r3, #76	; 0x4c
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f000 fccc 	bl	8004670 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10f      	bne.n	8003d04 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d11c      	bne.n	8003d2c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	e013      	b.n	8003d2c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_ADC_Start_DMA+0x1a4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10e      	bne.n	8003d2c <HAL_ADC_Start_DMA+0x180>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d107      	bne.n	8003d2c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d2a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200005e4 	.word	0x200005e4
 8003d3c:	431bde83 	.word	0x431bde83
 8003d40:	40012300 	.word	0x40012300
 8003d44:	080041ed 	.word	0x080041ed
 8003d48:	080042a7 	.word	0x080042a7
 8003d4c:	080042c3 	.word	0x080042c3
 8003d50:	40012000 	.word	0x40012000

08003d54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x1c>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e113      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x244>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b09      	cmp	r3, #9
 8003dba:	d925      	bls.n	8003e08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68d9      	ldr	r1, [r3, #12]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	3b1e      	subs	r3, #30
 8003dd2:	2207      	movs	r2, #7
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	400a      	ands	r2, r1
 8003de0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68d9      	ldr	r1, [r3, #12]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	4618      	mov	r0, r3
 8003df4:	4603      	mov	r3, r0
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4403      	add	r3, r0
 8003dfa:	3b1e      	subs	r3, #30
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	e022      	b.n	8003e4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6919      	ldr	r1, [r3, #16]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43da      	mvns	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	400a      	ands	r2, r1
 8003e2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6919      	ldr	r1, [r3, #16]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4403      	add	r3, r0
 8003e44:	409a      	lsls	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b06      	cmp	r3, #6
 8003e54:	d824      	bhi.n	8003ea0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	3b05      	subs	r3, #5
 8003e68:	221f      	movs	r2, #31
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	400a      	ands	r2, r1
 8003e76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	3b05      	subs	r3, #5
 8003e92:	fa00 f203 	lsl.w	r2, r0, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e9e:	e04c      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d824      	bhi.n	8003ef2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3b23      	subs	r3, #35	; 0x23
 8003eba:	221f      	movs	r2, #31
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3b23      	subs	r3, #35	; 0x23
 8003ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef0:	e023      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	3b41      	subs	r3, #65	; 0x41
 8003f04:	221f      	movs	r2, #31
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	400a      	ands	r2, r1
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3b41      	subs	r3, #65	; 0x41
 8003f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f3a:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <HAL_ADC_ConfigChannel+0x250>)
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a28      	ldr	r2, [pc, #160]	; (8003fe4 <HAL_ADC_ConfigChannel+0x254>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10f      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x1d8>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b12      	cmp	r3, #18
 8003f4e:	d10b      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_ADC_ConfigChannel+0x254>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d12b      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x23a>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <HAL_ADC_ConfigChannel+0x258>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x1f4>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b11      	cmp	r3, #17
 8003f82:	d122      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <HAL_ADC_ConfigChannel+0x258>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d111      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_ADC_ConfigChannel+0x25c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <HAL_ADC_ConfigChannel+0x260>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	0c9a      	lsrs	r2, r3, #18
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fbc:	e002      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f9      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40012300 	.word	0x40012300
 8003fe4:	40012000 	.word	0x40012000
 8003fe8:	10000012 	.word	0x10000012
 8003fec:	200005e4 	.word	0x200005e4
 8003ff0:	431bde83 	.word	0x431bde83

08003ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ffc:	4b79      	ldr	r3, [pc, #484]	; (80041e4 <ADC_Init+0x1f0>)
 8003ffe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	021a      	lsls	r2, r3, #8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800404c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6899      	ldr	r1, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <ADC_Init+0x1f4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d022      	beq.n	80040d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800409a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	e00f      	b.n	80040f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0202 	bic.w	r2, r2, #2
 8004100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6899      	ldr	r1, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7e1b      	ldrb	r3, [r3, #24]
 800410c:	005a      	lsls	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01b      	beq.n	8004158 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800413e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	3b01      	subs	r3, #1
 800414c:	035a      	lsls	r2, r3, #13
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	e007      	b.n	8004168 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004166:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	3b01      	subs	r3, #1
 8004184:	051a      	lsls	r2, r3, #20
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800419c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041aa:	025a      	lsls	r2, r3, #9
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6899      	ldr	r1, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	029a      	lsls	r2, r3, #10
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40012300 	.word	0x40012300
 80041e8:	0f000001 	.word	0x0f000001

080041ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d13c      	bne.n	8004280 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d12b      	bne.n	8004278 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004224:	2b00      	cmp	r3, #0
 8004226:	d127      	bne.n	8004278 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004232:	2b00      	cmp	r3, #0
 8004234:	d006      	beq.n	8004244 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004240:	2b00      	cmp	r3, #0
 8004242:	d119      	bne.n	8004278 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0220 	bic.w	r2, r2, #32
 8004252:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f043 0201 	orr.w	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff fd6b 	bl	8003d54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800427e:	e00e      	b.n	800429e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff fd75 	bl	8003d7c <HAL_ADC_ErrorCallback>
}
 8004292:	e004      	b.n	800429e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fd57 	bl	8003d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2240      	movs	r2, #64	; 0x40
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f043 0204 	orr.w	r2, r3, #4
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff fd4a 	bl	8003d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800430c:	4013      	ands	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800431c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004322:	4a04      	ldr	r2, [pc, #16]	; (8004334 <__NVIC_SetPriorityGrouping+0x44>)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	60d3      	str	r3, [r2, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <__NVIC_GetPriorityGrouping+0x18>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	f003 0307 	and.w	r3, r3, #7
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db0b      	blt.n	800437e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4907      	ldr	r1, [pc, #28]	; (800438c <__NVIC_EnableIRQ+0x38>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2001      	movs	r0, #1
 8004376:	fa00 f202 	lsl.w	r2, r0, r2
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	e000e100 	.word	0xe000e100

08004390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	db0a      	blt.n	80043ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	490c      	ldr	r1, [pc, #48]	; (80043dc <__NVIC_SetPriority+0x4c>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	0112      	lsls	r2, r2, #4
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	440b      	add	r3, r1
 80043b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b8:	e00a      	b.n	80043d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4908      	ldr	r1, [pc, #32]	; (80043e0 <__NVIC_SetPriority+0x50>)
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3b04      	subs	r3, #4
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	440b      	add	r3, r1
 80043ce:	761a      	strb	r2, [r3, #24]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000e100 	.word	0xe000e100
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f1c3 0307 	rsb	r3, r3, #7
 80043fe:	2b04      	cmp	r3, #4
 8004400:	bf28      	it	cs
 8004402:	2304      	movcs	r3, #4
 8004404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3304      	adds	r3, #4
 800440a:	2b06      	cmp	r3, #6
 800440c:	d902      	bls.n	8004414 <NVIC_EncodePriority+0x30>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	3b03      	subs	r3, #3
 8004412:	e000      	b.n	8004416 <NVIC_EncodePriority+0x32>
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004418:	f04f 32ff 	mov.w	r2, #4294967295
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	401a      	ands	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800442c:	f04f 31ff 	mov.w	r1, #4294967295
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	43d9      	mvns	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800443c:	4313      	orrs	r3, r2
         );
}
 800443e:	4618      	mov	r0, r3
 8004440:	3724      	adds	r7, #36	; 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800445c:	d301      	bcc.n	8004462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800445e:	2301      	movs	r3, #1
 8004460:	e00f      	b.n	8004482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <SysTick_Config+0x40>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800446a:	210f      	movs	r1, #15
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	f7ff ff8e 	bl	8004390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <SysTick_Config+0x40>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <SysTick_Config+0x40>)
 800447c:	2207      	movs	r2, #7
 800447e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	e000e010 	.word	0xe000e010

08004490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff29 	bl	80042f0 <__NVIC_SetPriorityGrouping>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	4603      	mov	r3, r0
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b8:	f7ff ff3e 	bl	8004338 <__NVIC_GetPriorityGrouping>
 80044bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f7ff ff8e 	bl	80043e4 <NVIC_EncodePriority>
 80044c8:	4602      	mov	r2, r0
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff5d 	bl	8004390 <__NVIC_SetPriority>
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff31 	bl	8004354 <__NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ffa2 	bl	800444c <SysTick_Config>
 8004508:	4603      	mov	r3, r0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7ff fa2a 	bl	8003978 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e099      	b.n	8004664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004550:	e00f      	b.n	8004572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004552:	f7ff fa11 	bl	8003978 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b05      	cmp	r3, #5
 800455e:	d908      	bls.n	8004572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2203      	movs	r2, #3
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e078      	b.n	8004664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e8      	bne.n	8004552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_DMA_Init+0x158>)
 800458c:	4013      	ands	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800459e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d107      	bne.n	80045dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4313      	orrs	r3, r2
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b04      	cmp	r3, #4
 8004604:	d117      	bne.n	8004636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa6f 	bl	8004afc <DMA_CheckFifoParam>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004632:	2301      	movs	r3, #1
 8004634:	e016      	b.n	8004664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fa26 	bl	8004a90 <DMA_CalcBaseAndBitshift>
 8004644:	4603      	mov	r3, r0
 8004646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	223f      	movs	r2, #63	; 0x3f
 800464e:	409a      	lsls	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	f010803f 	.word	0xf010803f

08004670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_DMA_Start_IT+0x26>
 8004692:	2302      	movs	r3, #2
 8004694:	e040      	b.n	8004718 <HAL_DMA_Start_IT+0xa8>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d12f      	bne.n	800470a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f9b8 	bl	8004a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	223f      	movs	r2, #63	; 0x3f
 80046ca:	409a      	lsls	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0216 	orr.w	r2, r2, #22
 80046de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e005      	b.n	8004716 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004712:	2302      	movs	r3, #2
 8004714:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800472c:	4b8e      	ldr	r3, [pc, #568]	; (8004968 <HAL_DMA_IRQHandler+0x248>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a8e      	ldr	r2, [pc, #568]	; (800496c <HAL_DMA_IRQHandler+0x24c>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0a9b      	lsrs	r3, r3, #10
 8004738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474a:	2208      	movs	r2, #8
 800474c:	409a      	lsls	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01a      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0204 	bic.w	r2, r2, #4
 8004772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	2208      	movs	r2, #8
 800477a:	409a      	lsls	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2201      	movs	r2, #1
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	2201      	movs	r2, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	2204      	movs	r2, #4
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d012      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	2204      	movs	r2, #4
 80047e6:	409a      	lsls	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	f043 0204 	orr.w	r2, r3, #4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	2210      	movs	r2, #16
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d043      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d03c      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2210      	movs	r2, #16
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d108      	bne.n	8004850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d024      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
 800484e:	e01f      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e016      	b.n	8004890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0208 	bic.w	r2, r2, #8
 800487e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	2220      	movs	r2, #32
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 808f 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8087 	beq.w	80049c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	2220      	movs	r2, #32
 80048b8:	409a      	lsls	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d136      	bne.n	8004938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0216 	bic.w	r2, r2, #22
 80048d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_DMA_IRQHandler+0x1da>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	223f      	movs	r2, #63	; 0x3f
 8004910:	409a      	lsls	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d07e      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
        }
        return;
 8004936:	e079      	b.n	8004a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	2b00      	cmp	r3, #0
 800495a:	d031      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
 8004964:	e02c      	b.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
 8004966:	bf00      	nop
 8004968:	200005e4 	.word	0x200005e4
 800496c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
 8004980:	e01e      	b.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10f      	bne.n	80049b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0210 	bic.w	r2, r2, #16
 800499e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d032      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d022      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2205      	movs	r2, #5
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d307      	bcc.n	8004a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f2      	bne.n	80049ec <HAL_DMA_IRQHandler+0x2cc>
 8004a06:	e000      	b.n	8004a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a08:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e000      	b.n	8004a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a2c:	bf00      	nop
    }
  }
}
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d108      	bne.n	8004a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a72:	e007      	b.n	8004a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3b10      	subs	r3, #16
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <DMA_CalcBaseAndBitshift+0x64>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <DMA_CalcBaseAndBitshift+0x68>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d909      	bls.n	8004ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	659a      	str	r2, [r3, #88]	; 0x58
 8004ad0:	e007      	b.n	8004ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	aaaaaaab 	.word	0xaaaaaaab
 8004af8:	08008474 	.word	0x08008474

08004afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d856      	bhi.n	8004bca <DMA_CheckFifoParam+0xce>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <DMA_CheckFifoParam+0x28>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b47 	.word	0x08004b47
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004bcb 	.word	0x08004bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d046      	beq.n	8004bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b44:	e043      	b.n	8004bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b4e:	d140      	bne.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e03d      	b.n	8004bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5e:	d121      	bne.n	8004ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d837      	bhi.n	8004bd6 <DMA_CheckFifoParam+0xda>
 8004b66:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <DMA_CheckFifoParam+0x70>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b83 	.word	0x08004b83
 8004b74:	08004b7d 	.word	0x08004b7d
 8004b78:	08004b95 	.word	0x08004b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e030      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d025      	beq.n	8004bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b92:	e022      	b.n	8004bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ba2:	e01c      	b.n	8004bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d903      	bls.n	8004bb2 <DMA_CheckFifoParam+0xb6>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d003      	beq.n	8004bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bb0:	e018      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb6:	e015      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc8:	e00b      	b.n	8004be2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e00a      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e008      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e006      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e004      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
    }
  } 
  
  return status; 
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop

08004bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e159      	b.n	8004ec4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c10:	2201      	movs	r2, #1
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	f040 8148 	bne.w	8004ebe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d00b      	beq.n	8004c4e <HAL_GPIO_Init+0x5a>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d007      	beq.n	8004c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c42:	2b11      	cmp	r3, #17
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b12      	cmp	r3, #18
 8004c4c:	d130      	bne.n	8004cb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	2203      	movs	r2, #3
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c84:	2201      	movs	r2, #1
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	f003 0201 	and.w	r2, r3, #1
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	2203      	movs	r2, #3
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d003      	beq.n	8004cf0 <HAL_GPIO_Init+0xfc>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b12      	cmp	r3, #18
 8004cee:	d123      	bne.n	8004d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	08da      	lsrs	r2, r3, #3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3208      	adds	r2, #8
 8004cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	220f      	movs	r2, #15
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	08da      	lsrs	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3208      	adds	r2, #8
 8004d32:	69b9      	ldr	r1, [r7, #24]
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	2203      	movs	r2, #3
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0203 	and.w	r2, r3, #3
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80a2 	beq.w	8004ebe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	4b57      	ldr	r3, [pc, #348]	; (8004edc <HAL_GPIO_Init+0x2e8>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	4a56      	ldr	r2, [pc, #344]	; (8004edc <HAL_GPIO_Init+0x2e8>)
 8004d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d88:	6453      	str	r3, [r2, #68]	; 0x44
 8004d8a:	4b54      	ldr	r3, [pc, #336]	; (8004edc <HAL_GPIO_Init+0x2e8>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d96:	4a52      	ldr	r2, [pc, #328]	; (8004ee0 <HAL_GPIO_Init+0x2ec>)
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	089b      	lsrs	r3, r3, #2
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	220f      	movs	r2, #15
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a49      	ldr	r2, [pc, #292]	; (8004ee4 <HAL_GPIO_Init+0x2f0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d019      	beq.n	8004df6 <HAL_GPIO_Init+0x202>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a48      	ldr	r2, [pc, #288]	; (8004ee8 <HAL_GPIO_Init+0x2f4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <HAL_GPIO_Init+0x1fe>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a47      	ldr	r2, [pc, #284]	; (8004eec <HAL_GPIO_Init+0x2f8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00d      	beq.n	8004dee <HAL_GPIO_Init+0x1fa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a46      	ldr	r2, [pc, #280]	; (8004ef0 <HAL_GPIO_Init+0x2fc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <HAL_GPIO_Init+0x1f6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a45      	ldr	r2, [pc, #276]	; (8004ef4 <HAL_GPIO_Init+0x300>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_GPIO_Init+0x1f2>
 8004de2:	2304      	movs	r3, #4
 8004de4:	e008      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004de6:	2307      	movs	r3, #7
 8004de8:	e006      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004dea:	2303      	movs	r3, #3
 8004dec:	e004      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e002      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_GPIO_Init+0x204>
 8004df6:	2300      	movs	r3, #0
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	f002 0203 	and.w	r2, r2, #3
 8004dfe:	0092      	lsls	r2, r2, #2
 8004e00:	4093      	lsls	r3, r2
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e08:	4935      	ldr	r1, [pc, #212]	; (8004ee0 <HAL_GPIO_Init+0x2ec>)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	3302      	adds	r3, #2
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e16:	4b38      	ldr	r3, [pc, #224]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4013      	ands	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e3a:	4a2f      	ldr	r2, [pc, #188]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e64:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4013      	ands	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e8e:	4a1a      	ldr	r2, [pc, #104]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e94:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb8:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <HAL_GPIO_Init+0x304>)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	f67f aea2 	bls.w	8004c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3724      	adds	r7, #36	; 0x24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40013800 	.word	0x40013800
 8004ee4:	40020000 	.word	0x40020000
 8004ee8:	40020400 	.word	0x40020400
 8004eec:	40020800 	.word	0x40020800
 8004ef0:	40020c00 	.word	0x40020c00
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40013c00 	.word	0x40013c00

08004efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f0c:	787b      	ldrb	r3, [r7, #1]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f18:	e003      	b.n	8004f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f1a:	887b      	ldrh	r3, [r7, #2]
 8004f1c:	041a      	lsls	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e12b      	b.n	800519a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fe faaa 	bl	80034b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f94:	f001 fbb2 	bl	80066fc <HAL_RCC_GetPCLK1Freq>
 8004f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4a81      	ldr	r2, [pc, #516]	; (80051a4 <HAL_I2C_Init+0x274>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d807      	bhi.n	8004fb4 <HAL_I2C_Init+0x84>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a80      	ldr	r2, [pc, #512]	; (80051a8 <HAL_I2C_Init+0x278>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	bf94      	ite	ls
 8004fac:	2301      	movls	r3, #1
 8004fae:	2300      	movhi	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e006      	b.n	8004fc2 <HAL_I2C_Init+0x92>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a7d      	ldr	r2, [pc, #500]	; (80051ac <HAL_I2C_Init+0x27c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	bf94      	ite	ls
 8004fbc:	2301      	movls	r3, #1
 8004fbe:	2300      	movhi	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0e7      	b.n	800519a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a78      	ldr	r2, [pc, #480]	; (80051b0 <HAL_I2C_Init+0x280>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	0c9b      	lsrs	r3, r3, #18
 8004fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4a6a      	ldr	r2, [pc, #424]	; (80051a4 <HAL_I2C_Init+0x274>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d802      	bhi.n	8005004 <HAL_I2C_Init+0xd4>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3301      	adds	r3, #1
 8005002:	e009      	b.n	8005018 <HAL_I2C_Init+0xe8>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <HAL_I2C_Init+0x284>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	3301      	adds	r3, #1
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	430b      	orrs	r3, r1
 800501e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800502a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	495c      	ldr	r1, [pc, #368]	; (80051a4 <HAL_I2C_Init+0x274>)
 8005034:	428b      	cmp	r3, r1
 8005036:	d819      	bhi.n	800506c <HAL_I2C_Init+0x13c>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1e59      	subs	r1, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	fbb1 f3f3 	udiv	r3, r1, r3
 8005046:	1c59      	adds	r1, r3, #1
 8005048:	f640 73fc 	movw	r3, #4092	; 0xffc
 800504c:	400b      	ands	r3, r1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_I2C_Init+0x138>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1e59      	subs	r1, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005060:	3301      	adds	r3, #1
 8005062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005066:	e051      	b.n	800510c <HAL_I2C_Init+0x1dc>
 8005068:	2304      	movs	r3, #4
 800506a:	e04f      	b.n	800510c <HAL_I2C_Init+0x1dc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d111      	bne.n	8005098 <HAL_I2C_Init+0x168>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1e58      	subs	r0, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	440b      	add	r3, r1
 8005082:	fbb0 f3f3 	udiv	r3, r0, r3
 8005086:	3301      	adds	r3, #1
 8005088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e012      	b.n	80050be <HAL_I2C_Init+0x18e>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1e58      	subs	r0, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	0099      	lsls	r1, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_I2C_Init+0x196>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e022      	b.n	800510c <HAL_I2C_Init+0x1dc>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10e      	bne.n	80050ec <HAL_I2C_Init+0x1bc>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1e58      	subs	r0, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	440b      	add	r3, r1
 80050dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ea:	e00f      	b.n	800510c <HAL_I2C_Init+0x1dc>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1e58      	subs	r0, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6859      	ldr	r1, [r3, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	0099      	lsls	r1, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005102:	3301      	adds	r3, #1
 8005104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	6809      	ldr	r1, [r1, #0]
 8005110:	4313      	orrs	r3, r2
 8005112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800513a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6911      	ldr	r1, [r2, #16]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	4311      	orrs	r1, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	430b      	orrs	r3, r1
 800514e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	000186a0 	.word	0x000186a0
 80051a8:	001e847f 	.word	0x001e847f
 80051ac:	003d08ff 	.word	0x003d08ff
 80051b0:	431bde83 	.word	0x431bde83
 80051b4:	10624dd3 	.word	0x10624dd3

080051b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	4608      	mov	r0, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	461a      	mov	r2, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	817b      	strh	r3, [r7, #10]
 80051ca:	460b      	mov	r3, r1
 80051cc:	813b      	strh	r3, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051d2:	f7fe fbd1 	bl	8003978 <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	f040 80d9 	bne.w	8005398 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	2319      	movs	r3, #25
 80051ec:	2201      	movs	r2, #1
 80051ee:	496d      	ldr	r1, [pc, #436]	; (80053a4 <HAL_I2C_Mem_Write+0x1ec>)
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fc7f 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0cc      	b.n	800539a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_I2C_Mem_Write+0x56>
 800520a:	2302      	movs	r3, #2
 800520c:	e0c5      	b.n	800539a <HAL_I2C_Mem_Write+0x1e2>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d007      	beq.n	8005234 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005242:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2221      	movs	r2, #33	; 0x21
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a3a      	ldr	r2, [r7, #32]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a4d      	ldr	r2, [pc, #308]	; (80053a8 <HAL_I2C_Mem_Write+0x1f0>)
 8005274:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005276:	88f8      	ldrh	r0, [r7, #6]
 8005278:	893a      	ldrh	r2, [r7, #8]
 800527a:	8979      	ldrh	r1, [r7, #10]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	4603      	mov	r3, r0
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fab6 	bl	80057f8 <I2C_RequestMemoryWrite>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d052      	beq.n	8005338 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e081      	b.n	800539a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fd00 	bl	8005ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00d      	beq.n	80052c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d107      	bne.n	80052be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e06b      	b.n	800539a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	781a      	ldrb	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d11b      	bne.n	8005338 <HAL_I2C_Mem_Write+0x180>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	781a      	ldrb	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1aa      	bne.n	8005296 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fcec 	bl	8005d22 <I2C_WaitOnBTFFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	2b04      	cmp	r3, #4
 8005356:	d107      	bne.n	8005368 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005366:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e016      	b.n	800539a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e000      	b.n	800539a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	00100002 	.word	0x00100002
 80053a8:	ffff0000 	.word	0xffff0000

080053ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08c      	sub	sp, #48	; 0x30
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	4608      	mov	r0, r1
 80053b6:	4611      	mov	r1, r2
 80053b8:	461a      	mov	r2, r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	817b      	strh	r3, [r7, #10]
 80053be:	460b      	mov	r3, r1
 80053c0:	813b      	strh	r3, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053c6:	f7fe fad7 	bl	8003978 <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	f040 8208 	bne.w	80057ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2319      	movs	r3, #25
 80053e0:	2201      	movs	r2, #1
 80053e2:	497b      	ldr	r1, [pc, #492]	; (80055d0 <HAL_I2C_Mem_Read+0x224>)
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fb85 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
 80053f2:	e1fb      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_I2C_Mem_Read+0x56>
 80053fe:	2302      	movs	r3, #2
 8005400:	e1f4      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d007      	beq.n	8005428 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2222      	movs	r2, #34	; 0x22
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2240      	movs	r2, #64	; 0x40
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4a5b      	ldr	r2, [pc, #364]	; (80055d4 <HAL_I2C_Mem_Read+0x228>)
 8005468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800546a:	88f8      	ldrh	r0, [r7, #6]
 800546c:	893a      	ldrh	r2, [r7, #8]
 800546e:	8979      	ldrh	r1, [r7, #10]
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	4603      	mov	r3, r0
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa52 	bl	8005924 <I2C_RequestMemoryRead>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e1b0      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d113      	bne.n	80054ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005492:	2300      	movs	r3, #0
 8005494:	623b      	str	r3, [r7, #32]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e184      	b.n	80057c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d11b      	bne.n	80054fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e164      	b.n	80057c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d11b      	bne.n	800553a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005510:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005520:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	e144      	b.n	80057c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005550:	e138      	b.n	80057c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005556:	2b03      	cmp	r3, #3
 8005558:	f200 80f1 	bhi.w	800573e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	2b01      	cmp	r3, #1
 8005562:	d123      	bne.n	80055ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fc1b 	bl	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e139      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055aa:	e10b      	b.n	80057c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d14e      	bne.n	8005652 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	2200      	movs	r2, #0
 80055bc:	4906      	ldr	r1, [pc, #24]	; (80055d8 <HAL_I2C_Mem_Read+0x22c>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa98 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e10e      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
 80055ce:	bf00      	nop
 80055d0:	00100002 	.word	0x00100002
 80055d4:	ffff0000 	.word	0xffff0000
 80055d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005650:	e0b8      	b.n	80057c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2200      	movs	r2, #0
 800565a:	4966      	ldr	r1, [pc, #408]	; (80057f4 <HAL_I2C_Mem_Read+0x448>)
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fa49 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0bf      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	2200      	movs	r2, #0
 80056b6:	494f      	ldr	r1, [pc, #316]	; (80057f4 <HAL_I2C_Mem_Read+0x448>)
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fa1b 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e091      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800573c:	e042      	b.n	80057c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800573e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005740:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fb2e 	bl	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e04c      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b04      	cmp	r3, #4
 8005790:	d118      	bne.n	80057c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f aec2 	bne.w	8005552 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3728      	adds	r7, #40	; 0x28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	00010004 	.word	0x00010004

080057f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	4608      	mov	r0, r1
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4603      	mov	r3, r0
 8005808:	817b      	strh	r3, [r7, #10]
 800580a:	460b      	mov	r3, r1
 800580c:	813b      	strh	r3, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005820:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2200      	movs	r2, #0
 800582a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f960 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005848:	d103      	bne.n	8005852 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e05f      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005856:	897b      	ldrh	r3, [r7, #10]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005864:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	492d      	ldr	r1, [pc, #180]	; (8005920 <I2C_RequestMemoryWrite+0x128>)
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f998 	bl	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e04c      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005894:	6a39      	ldr	r1, [r7, #32]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fa02 	bl	8005ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d107      	bne.n	80058ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e02b      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c4:	893b      	ldrh	r3, [r7, #8]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	611a      	str	r2, [r3, #16]
 80058ce:	e021      	b.n	8005914 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058d0:	893b      	ldrh	r3, [r7, #8]
 80058d2:	0a1b      	lsrs	r3, r3, #8
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e0:	6a39      	ldr	r1, [r7, #32]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f9dc 	bl	8005ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d107      	bne.n	8005906 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005904:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e005      	b.n	8005916 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800590a:	893b      	ldrh	r3, [r7, #8]
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	00010002 	.word	0x00010002

08005924 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	461a      	mov	r2, r3
 8005932:	4603      	mov	r3, r0
 8005934:	817b      	strh	r3, [r7, #10]
 8005936:	460b      	mov	r3, r1
 8005938:	813b      	strh	r3, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800594c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800595c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	2200      	movs	r2, #0
 8005966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f8c2 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005984:	d103      	bne.n	800598e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e0aa      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005992:	897b      	ldrh	r3, [r7, #10]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	4952      	ldr	r1, [pc, #328]	; (8005af0 <I2C_RequestMemoryRead+0x1cc>)
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f8fa 	bl	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e097      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f964 	bl	8005ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d107      	bne.n	80059f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e076      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d105      	bne.n	8005a0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a00:	893b      	ldrh	r3, [r7, #8]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e021      	b.n	8005a50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a0c:	893b      	ldrh	r3, [r7, #8]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	6a39      	ldr	r1, [r7, #32]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f93e 	bl	8005ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d107      	bne.n	8005a42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e050      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a46:	893b      	ldrh	r3, [r7, #8]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	6a39      	ldr	r1, [r7, #32]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f923 	bl	8005ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00d      	beq.n	8005a7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d107      	bne.n	8005a78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e035      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f82b 	bl	8005af4 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab2:	d103      	bne.n	8005abc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e013      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ac0:	897b      	ldrh	r3, [r7, #10]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	6a3a      	ldr	r2, [r7, #32]
 8005ad4:	4906      	ldr	r1, [pc, #24]	; (8005af0 <I2C_RequestMemoryRead+0x1cc>)
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f863 	bl	8005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	00010002 	.word	0x00010002

08005af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b04:	e025      	b.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d021      	beq.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0e:	f7fd ff33 	bl	8003978 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d302      	bcc.n	8005b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d116      	bne.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e023      	b.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d10d      	bne.n	8005b78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	43da      	mvns	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	e00c      	b.n	8005b92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	43da      	mvns	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4013      	ands	r3, r2
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bf0c      	ite	eq
 8005b8a:	2301      	moveq	r3, #1
 8005b8c:	2300      	movne	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	79fb      	ldrb	r3, [r7, #7]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d0b6      	beq.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bb0:	e051      	b.n	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc0:	d123      	bne.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f043 0204 	orr.w	r2, r3, #4
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e046      	b.n	8005c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d021      	beq.n	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fd feb1 	bl	8003978 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d116      	bne.n	8005c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e020      	b.n	8005c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d10c      	bne.n	8005c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	43da      	mvns	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bf14      	ite	ne
 8005c72:	2301      	movne	r3, #1
 8005c74:	2300      	moveq	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	e00b      	b.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	43da      	mvns	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4013      	ands	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d18d      	bne.n	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cac:	e02d      	b.n	8005d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f8ce 	bl	8005e50 <I2C_IsAcknowledgeFailed>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e02d      	b.n	8005d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc4:	d021      	beq.n	8005d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc6:	f7fd fe57 	bl	8003978 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d302      	bcc.n	8005cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d116      	bne.n	8005d0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e007      	b.n	8005d1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d14:	2b80      	cmp	r3, #128	; 0x80
 8005d16:	d1ca      	bne.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d2e:	e02d      	b.n	8005d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f88d 	bl	8005e50 <I2C_IsAcknowledgeFailed>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e02d      	b.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d021      	beq.n	8005d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d48:	f7fd fe16 	bl	8003978 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d302      	bcc.n	8005d5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	f043 0220 	orr.w	r2, r3, #32
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e007      	b.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d1ca      	bne.n	8005d30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db0:	e042      	b.n	8005e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d119      	bne.n	8005df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0210 	mvn.w	r2, #16
 8005dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e029      	b.n	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df4:	f7fd fdc0 	bl	8003978 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d302      	bcc.n	8005e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d116      	bne.n	8005e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e007      	b.n	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d1b5      	bne.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e66:	d11b      	bne.n	8005ea0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	f043 0204 	orr.w	r2, r3, #4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e25e      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d075      	beq.n	8005fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ece:	4b88      	ldr	r3, [pc, #544]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eda:	4b85      	ldr	r3, [pc, #532]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d112      	bne.n	8005f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ee6:	4b82      	ldr	r3, [pc, #520]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef2:	d10b      	bne.n	8005f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef4:	4b7e      	ldr	r3, [pc, #504]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d05b      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x108>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d157      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e239      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f14:	d106      	bne.n	8005f24 <HAL_RCC_OscConfig+0x74>
 8005f16:	4b76      	ldr	r3, [pc, #472]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a75      	ldr	r2, [pc, #468]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e01d      	b.n	8005f60 <HAL_RCC_OscConfig+0xb0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f2c:	d10c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x98>
 8005f2e:	4b70      	ldr	r3, [pc, #448]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a6f      	ldr	r2, [pc, #444]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	4b6d      	ldr	r3, [pc, #436]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a6c      	ldr	r2, [pc, #432]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e00b      	b.n	8005f60 <HAL_RCC_OscConfig+0xb0>
 8005f48:	4b69      	ldr	r3, [pc, #420]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a68      	ldr	r2, [pc, #416]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	4b66      	ldr	r3, [pc, #408]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d013      	beq.n	8005f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f68:	f7fd fd06 	bl	8003978 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f70:	f7fd fd02 	bl	8003978 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b64      	cmp	r3, #100	; 0x64
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e1fe      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	4b5b      	ldr	r3, [pc, #364]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0xc0>
 8005f8e:	e014      	b.n	8005fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7fd fcf2 	bl	8003978 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f98:	f7fd fcee 	bl	8003978 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b64      	cmp	r3, #100	; 0x64
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e1ea      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005faa:	4b51      	ldr	r3, [pc, #324]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0xe8>
 8005fb6:	e000      	b.n	8005fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d063      	beq.n	800608e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fc6:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fd2:	4b47      	ldr	r3, [pc, #284]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d11c      	bne.n	8006018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fde:	4b44      	ldr	r3, [pc, #272]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d116      	bne.n	8006018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fea:	4b41      	ldr	r3, [pc, #260]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <HAL_RCC_OscConfig+0x152>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d001      	beq.n	8006002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e1be      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006002:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4937      	ldr	r1, [pc, #220]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006012:	4313      	orrs	r3, r2
 8006014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006016:	e03a      	b.n	800608e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d020      	beq.n	8006062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006020:	4b34      	ldr	r3, [pc, #208]	; (80060f4 <HAL_RCC_OscConfig+0x244>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fd fca7 	bl	8003978 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800602e:	f7fd fca3 	bl	8003978 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e19f      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006040:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604c:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4925      	ldr	r1, [pc, #148]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]
 8006060:	e015      	b.n	800608e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006062:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <HAL_RCC_OscConfig+0x244>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006068:	f7fd fc86 	bl	8003978 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006070:	f7fd fc82 	bl	8003978 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e17e      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d036      	beq.n	8006108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d016      	beq.n	80060d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <HAL_RCC_OscConfig+0x248>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a8:	f7fd fc66 	bl	8003978 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060b0:	f7fd fc62 	bl	8003978 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e15e      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0x200>
 80060ce:	e01b      	b.n	8006108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060d0:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <HAL_RCC_OscConfig+0x248>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d6:	f7fd fc4f 	bl	8003978 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060dc:	e00e      	b.n	80060fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060de:	f7fd fc4b 	bl	8003978 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d907      	bls.n	80060fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e147      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
 80060f0:	40023800 	.word	0x40023800
 80060f4:	42470000 	.word	0x42470000
 80060f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060fc:	4b88      	ldr	r3, [pc, #544]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80060fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ea      	bne.n	80060de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8097 	beq.w	8006244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006116:	2300      	movs	r3, #0
 8006118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800611a:	4b81      	ldr	r3, [pc, #516]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	4b7d      	ldr	r3, [pc, #500]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	4a7c      	ldr	r2, [pc, #496]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 8006130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006134:	6413      	str	r3, [r2, #64]	; 0x40
 8006136:	4b7a      	ldr	r3, [pc, #488]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006142:	2301      	movs	r3, #1
 8006144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006146:	4b77      	ldr	r3, [pc, #476]	; (8006324 <HAL_RCC_OscConfig+0x474>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d118      	bne.n	8006184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006152:	4b74      	ldr	r3, [pc, #464]	; (8006324 <HAL_RCC_OscConfig+0x474>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a73      	ldr	r2, [pc, #460]	; (8006324 <HAL_RCC_OscConfig+0x474>)
 8006158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800615c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800615e:	f7fd fc0b 	bl	8003978 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006166:	f7fd fc07 	bl	8003978 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e103      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	4b6a      	ldr	r3, [pc, #424]	; (8006324 <HAL_RCC_OscConfig+0x474>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d106      	bne.n	800619a <HAL_RCC_OscConfig+0x2ea>
 800618c:	4b64      	ldr	r3, [pc, #400]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 800618e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006190:	4a63      	ldr	r2, [pc, #396]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	6713      	str	r3, [r2, #112]	; 0x70
 8006198:	e01c      	b.n	80061d4 <HAL_RCC_OscConfig+0x324>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b05      	cmp	r3, #5
 80061a0:	d10c      	bne.n	80061bc <HAL_RCC_OscConfig+0x30c>
 80061a2:	4b5f      	ldr	r3, [pc, #380]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	4a5e      	ldr	r2, [pc, #376]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061a8:	f043 0304 	orr.w	r3, r3, #4
 80061ac:	6713      	str	r3, [r2, #112]	; 0x70
 80061ae:	4b5c      	ldr	r3, [pc, #368]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	4a5b      	ldr	r2, [pc, #364]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ba:	e00b      	b.n	80061d4 <HAL_RCC_OscConfig+0x324>
 80061bc:	4b58      	ldr	r3, [pc, #352]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	4a57      	ldr	r2, [pc, #348]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	6713      	str	r3, [r2, #112]	; 0x70
 80061c8:	4b55      	ldr	r3, [pc, #340]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	4a54      	ldr	r2, [pc, #336]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061ce:	f023 0304 	bic.w	r3, r3, #4
 80061d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d015      	beq.n	8006208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061dc:	f7fd fbcc 	bl	8003978 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e2:	e00a      	b.n	80061fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061e4:	f7fd fbc8 	bl	8003978 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e0c2      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fa:	4b49      	ldr	r3, [pc, #292]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0ee      	beq.n	80061e4 <HAL_RCC_OscConfig+0x334>
 8006206:	e014      	b.n	8006232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006208:	f7fd fbb6 	bl	8003978 <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800620e:	e00a      	b.n	8006226 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006210:	f7fd fbb2 	bl	8003978 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f241 3288 	movw	r2, #5000	; 0x1388
 800621e:	4293      	cmp	r3, r2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e0ac      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006226:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1ee      	bne.n	8006210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b39      	ldr	r3, [pc, #228]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	4a38      	ldr	r2, [pc, #224]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 800623e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8098 	beq.w	800637e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800624e:	4b34      	ldr	r3, [pc, #208]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 030c 	and.w	r3, r3, #12
 8006256:	2b08      	cmp	r3, #8
 8006258:	d05c      	beq.n	8006314 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d141      	bne.n	80062e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006262:	4b31      	ldr	r3, [pc, #196]	; (8006328 <HAL_RCC_OscConfig+0x478>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006268:	f7fd fb86 	bl	8003978 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006270:	f7fd fb82 	bl	8003978 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e07e      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006282:	4b27      	ldr	r3, [pc, #156]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69da      	ldr	r2, [r3, #28]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	019b      	lsls	r3, r3, #6
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	3b01      	subs	r3, #1
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	491b      	ldr	r1, [pc, #108]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <HAL_RCC_OscConfig+0x478>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062be:	f7fd fb5b 	bl	8003978 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c6:	f7fd fb57 	bl	8003978 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e053      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x416>
 80062e4:	e04b      	b.n	800637e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <HAL_RCC_OscConfig+0x478>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fd fb44 	bl	8003978 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062f4:	f7fd fb40 	bl	8003978 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e03c      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <HAL_RCC_OscConfig+0x470>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x444>
 8006312:	e034      	b.n	800637e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e02f      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
 8006320:	40023800 	.word	0x40023800
 8006324:	40007000 	.word	0x40007000
 8006328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <HAL_RCC_OscConfig+0x4d8>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	429a      	cmp	r2, r3
 800633e:	d11c      	bne.n	800637a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800634a:	429a      	cmp	r2, r3
 800634c:	d115      	bne.n	800637a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006354:	4013      	ands	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800635a:	4293      	cmp	r3, r2
 800635c:	d10d      	bne.n	800637a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006368:	429a      	cmp	r2, r3
 800636a:	d106      	bne.n	800637a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006376:	429a      	cmp	r2, r3
 8006378:	d001      	beq.n	800637e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40023800 	.word	0x40023800

0800638c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0cc      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063a0:	4b68      	ldr	r3, [pc, #416]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d90c      	bls.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b65      	ldr	r3, [pc, #404]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b63      	ldr	r3, [pc, #396]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0b8      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e0:	4b59      	ldr	r3, [pc, #356]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a58      	ldr	r2, [pc, #352]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f8:	4b53      	ldr	r3, [pc, #332]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4a52      	ldr	r2, [pc, #328]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006404:	4b50      	ldr	r3, [pc, #320]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	494d      	ldr	r1, [pc, #308]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	4313      	orrs	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d044      	beq.n	80064ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d119      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e07f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d003      	beq.n	800644a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006446:	2b03      	cmp	r3, #3
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644a:	4b3f      	ldr	r3, [pc, #252]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e06f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e067      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b37      	ldr	r3, [pc, #220]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4934      	ldr	r1, [pc, #208]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	4313      	orrs	r3, r2
 800647a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800647c:	f7fd fa7c 	bl	8003978 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fd fa78 	bl	8003978 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e04f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b2b      	ldr	r3, [pc, #172]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	4b25      	ldr	r3, [pc, #148]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d20c      	bcs.n	80064d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b22      	ldr	r3, [pc, #136]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e032      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4916      	ldr	r1, [pc, #88]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	490e      	ldr	r1, [pc, #56]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006512:	f000 f821 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490a      	ldr	r1, [pc, #40]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	fa22 f303 	lsr.w	r3, r2, r3
 800652a:	4a09      	ldr	r2, [pc, #36]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800652c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <HAL_RCC_ClockConfig+0x1c8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fd f9dc 	bl	80038f0 <HAL_InitTick>

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40023c00 	.word	0x40023c00
 8006548:	40023800 	.word	0x40023800
 800654c:	0800845c 	.word	0x0800845c
 8006550:	200005e4 	.word	0x200005e4
 8006554:	200005e8 	.word	0x200005e8

08006558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800655c:	b090      	sub	sp, #64	; 0x40
 800655e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006568:	2300      	movs	r3, #0
 800656a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006570:	4b59      	ldr	r3, [pc, #356]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b08      	cmp	r3, #8
 800657a:	d00d      	beq.n	8006598 <HAL_RCC_GetSysClockFreq+0x40>
 800657c:	2b08      	cmp	r3, #8
 800657e:	f200 80a1 	bhi.w	80066c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_RCC_GetSysClockFreq+0x34>
 8006586:	2b04      	cmp	r3, #4
 8006588:	d003      	beq.n	8006592 <HAL_RCC_GetSysClockFreq+0x3a>
 800658a:	e09b      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800658c:	4b53      	ldr	r3, [pc, #332]	; (80066dc <HAL_RCC_GetSysClockFreq+0x184>)
 800658e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006590:	e09b      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006592:	4b53      	ldr	r3, [pc, #332]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006596:	e098      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006598:	4b4f      	ldr	r3, [pc, #316]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065a2:	4b4d      	ldr	r3, [pc, #308]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d028      	beq.n	8006600 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ae:	4b4a      	ldr	r3, [pc, #296]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	099b      	lsrs	r3, r3, #6
 80065b4:	2200      	movs	r2, #0
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	627a      	str	r2, [r7, #36]	; 0x24
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80065c0:	2100      	movs	r1, #0
 80065c2:	4b47      	ldr	r3, [pc, #284]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80065c4:	fb03 f201 	mul.w	r2, r3, r1
 80065c8:	2300      	movs	r3, #0
 80065ca:	fb00 f303 	mul.w	r3, r0, r3
 80065ce:	4413      	add	r3, r2
 80065d0:	4a43      	ldr	r2, [pc, #268]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80065d2:	fba0 1202 	umull	r1, r2, r0, r2
 80065d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d8:	460a      	mov	r2, r1
 80065da:	62ba      	str	r2, [r7, #40]	; 0x28
 80065dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065de:	4413      	add	r3, r2
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	2200      	movs	r2, #0
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	61fa      	str	r2, [r7, #28]
 80065ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065f2:	f7fa f927 	bl	8000844 <__aeabi_uldivmod>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4613      	mov	r3, r2
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fe:	e053      	b.n	80066a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006600:	4b35      	ldr	r3, [pc, #212]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	099b      	lsrs	r3, r3, #6
 8006606:	2200      	movs	r2, #0
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	617a      	str	r2, [r7, #20]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006612:	f04f 0b00 	mov.w	fp, #0
 8006616:	4652      	mov	r2, sl
 8006618:	465b      	mov	r3, fp
 800661a:	f04f 0000 	mov.w	r0, #0
 800661e:	f04f 0100 	mov.w	r1, #0
 8006622:	0159      	lsls	r1, r3, #5
 8006624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006628:	0150      	lsls	r0, r2, #5
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	ebb2 080a 	subs.w	r8, r2, sl
 8006632:	eb63 090b 	sbc.w	r9, r3, fp
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006642:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006646:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800664a:	ebb2 0408 	subs.w	r4, r2, r8
 800664e:	eb63 0509 	sbc.w	r5, r3, r9
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	00eb      	lsls	r3, r5, #3
 800665c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006660:	00e2      	lsls	r2, r4, #3
 8006662:	4614      	mov	r4, r2
 8006664:	461d      	mov	r5, r3
 8006666:	eb14 030a 	adds.w	r3, r4, sl
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	eb45 030b 	adc.w	r3, r5, fp
 8006670:	607b      	str	r3, [r7, #4]
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	f04f 0300 	mov.w	r3, #0
 800667a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800667e:	4629      	mov	r1, r5
 8006680:	028b      	lsls	r3, r1, #10
 8006682:	4621      	mov	r1, r4
 8006684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006688:	4621      	mov	r1, r4
 800668a:	028a      	lsls	r2, r1, #10
 800668c:	4610      	mov	r0, r2
 800668e:	4619      	mov	r1, r3
 8006690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006692:	2200      	movs	r2, #0
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	60fa      	str	r2, [r7, #12]
 8006698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800669c:	f7fa f8d2 	bl	8000844 <__aeabi_uldivmod>
 80066a0:	4602      	mov	r2, r0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4613      	mov	r3, r2
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	3301      	adds	r3, #1
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80066b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066c2:	e002      	b.n	80066ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <HAL_RCC_GetSysClockFreq+0x184>)
 80066c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3740      	adds	r7, #64	; 0x40
 80066d0:	46bd      	mov	sp, r7
 80066d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d6:	bf00      	nop
 80066d8:	40023800 	.word	0x40023800
 80066dc:	00f42400 	.word	0x00f42400
 80066e0:	017d7840 	.word	0x017d7840

080066e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e8:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066ea:	681b      	ldr	r3, [r3, #0]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	200005e4 	.word	0x200005e4

080066fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006700:	f7ff fff0 	bl	80066e4 <HAL_RCC_GetHCLKFreq>
 8006704:	4602      	mov	r2, r0
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	0a9b      	lsrs	r3, r3, #10
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	4903      	ldr	r1, [pc, #12]	; (8006720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006712:	5ccb      	ldrb	r3, [r1, r3]
 8006714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006718:	4618      	mov	r0, r3
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40023800 	.word	0x40023800
 8006720:	0800846c 	.word	0x0800846c

08006724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e056      	b.n	80067e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fc ff07 	bl	8003564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	ea42 0103 	orr.w	r1, r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	f003 0104 	and.w	r1, r3, #4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69da      	ldr	r2, [r3, #28]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	4613      	mov	r3, r2
 80067fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_SPI_Transmit+0x22>
 800680a:	2302      	movs	r3, #2
 800680c:	e11e      	b.n	8006a4c <HAL_SPI_Transmit+0x260>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006816:	f7fd f8af 	bl	8003978 <HAL_GetTick>
 800681a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d002      	beq.n	8006832 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800682c:	2302      	movs	r3, #2
 800682e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006830:	e103      	b.n	8006a3a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_SPI_Transmit+0x52>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006842:	e0fa      	b.n	8006a3a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2203      	movs	r2, #3
 8006848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	88fa      	ldrh	r2, [r7, #6]
 8006862:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688a:	d107      	bne.n	800689c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d007      	beq.n	80068ba <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c2:	d14b      	bne.n	800695c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Transmit+0xe6>
 80068cc:	8afb      	ldrh	r3, [r7, #22]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d13e      	bne.n	8006950 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	881a      	ldrh	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	1c9a      	adds	r2, r3, #2
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068f6:	e02b      	b.n	8006950 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b02      	cmp	r3, #2
 8006904:	d112      	bne.n	800692c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	86da      	strh	r2, [r3, #54]	; 0x36
 800692a:	e011      	b.n	8006950 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692c:	f7fd f824 	bl	8003978 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d803      	bhi.n	8006944 <HAL_SPI_Transmit+0x158>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d102      	bne.n	800694a <HAL_SPI_Transmit+0x15e>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800694e:	e074      	b.n	8006a3a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ce      	bne.n	80068f8 <HAL_SPI_Transmit+0x10c>
 800695a:	e04c      	b.n	80069f6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <HAL_SPI_Transmit+0x17e>
 8006964:	8afb      	ldrh	r3, [r7, #22]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d140      	bne.n	80069ec <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	330c      	adds	r3, #12
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006990:	e02c      	b.n	80069ec <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b02      	cmp	r3, #2
 800699e:	d113      	bne.n	80069c8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	7812      	ldrb	r2, [r2, #0]
 80069ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80069c6:	e011      	b.n	80069ec <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c8:	f7fc ffd6 	bl	8003978 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d803      	bhi.n	80069e0 <HAL_SPI_Transmit+0x1f4>
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d102      	bne.n	80069e6 <HAL_SPI_Transmit+0x1fa>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069ea:	e026      	b.n	8006a3a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1cd      	bne.n	8006992 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f894 	bl	8006b28 <SPI_EndRxTxTransaction>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e000      	b.n	8006a3a <HAL_SPI_Transmit+0x24e>
  }

error:
 8006a38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a64:	e04c      	b.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d048      	beq.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a6e:	f7fc ff83 	bl	8003978 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d902      	bls.n	8006a84 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d13d      	bne.n	8006b00 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a9c:	d111      	bne.n	8006ac2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa6:	d004      	beq.n	8006ab2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab0:	d107      	bne.n	8006ac2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aca:	d10f      	bne.n	8006aec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e00f      	b.n	8006b20 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	bf0c      	ite	eq
 8006b10:	2301      	moveq	r3, #1
 8006b12:	2300      	movne	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d1a3      	bne.n	8006a66 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b34:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <SPI_EndRxTxTransaction+0x7c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1b      	ldr	r2, [pc, #108]	; (8006ba8 <SPI_EndRxTxTransaction+0x80>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	0d5b      	lsrs	r3, r3, #21
 8006b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b44:	fb02 f303 	mul.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b52:	d112      	bne.n	8006b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2180      	movs	r1, #128	; 0x80
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7ff ff78 	bl	8006a54 <SPI_WaitFlagStateUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6e:	f043 0220 	orr.w	r2, r3, #32
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e00f      	b.n	8006b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b90:	2b80      	cmp	r3, #128	; 0x80
 8006b92:	d0f2      	beq.n	8006b7a <SPI_EndRxTxTransaction+0x52>
 8006b94:	e000      	b.n	8006b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b96:	bf00      	nop
  }

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	200005e4 	.word	0x200005e4
 8006ba8:	165e9f81 	.word	0x165e9f81

08006bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e01d      	b.n	8006bfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fc fd8a 	bl	80036ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f000 fc04 	bl	80073f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d007      	beq.n	8006c34 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0201 	orr.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0201 	orr.w	r2, r2, #1
 8006c60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b06      	cmp	r3, #6
 8006c72:	d007      	beq.n	8006c84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e01d      	b.n	8006ce0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f815 	bl	8006ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f000 fb91 	bl	80073f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fe18 	bl	8007944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <HAL_TIM_PWM_Start+0x60>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d107      	bne.n	8006d2e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b06      	cmp	r3, #6
 8006d3e:	d007      	beq.n	8006d50 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40010000 	.word	0x40010000

08006d60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e083      	b.n	8006e7c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fc fc33 	bl	80035f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da4:	f023 0307 	bic.w	r3, r3, #7
 8006da8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f000 fb1f 	bl	80073f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	4313      	orrs	r3, r2
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e00:	f023 030c 	bic.w	r3, r3, #12
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	011a      	lsls	r2, r3, #4
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	031b      	lsls	r3, r3, #12
 8006e30:	4313      	orrs	r3, r2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	4313      	orrs	r3, r2
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d122      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d11b      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0202 	mvn.w	r2, #2
 8006eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa78 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006ecc:	e005      	b.n	8006eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa6a 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fa7b 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d122      	bne.n	8006f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d11b      	bne.n	8006f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0204 	mvn.w	r2, #4
 8006f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa4e 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006f20:	e005      	b.n	8006f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa40 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa51 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d122      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d11b      	bne.n	8006f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0208 	mvn.w	r2, #8
 8006f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa24 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006f74:	e005      	b.n	8006f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa16 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fa27 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	2b10      	cmp	r3, #16
 8006f94:	d122      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d11b      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0210 	mvn.w	r2, #16
 8006fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9fa 	bl	80073bc <HAL_TIM_IC_CaptureCallback>
 8006fc8:	e005      	b.n	8006fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f9ec 	bl	80073a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f9fd 	bl	80073d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d10e      	bne.n	8007008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d107      	bne.n	8007008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0201 	mvn.w	r2, #1
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fa fbb2 	bl	800176c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007012:	2b80      	cmp	r3, #128	; 0x80
 8007014:	d10e      	bne.n	8007034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d107      	bne.n	8007034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800702c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fd26 	bl	8007a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d10e      	bne.n	8007060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704c:	2b40      	cmp	r3, #64	; 0x40
 800704e:	d107      	bne.n	8007060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9c2 	bl	80073e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b20      	cmp	r3, #32
 800706c:	d10e      	bne.n	800708c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b20      	cmp	r3, #32
 800707a:	d107      	bne.n	800708c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f06f 0220 	mvn.w	r2, #32
 8007084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fcf0 	bl	8007a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e0b4      	b.n	8007218 <HAL_TIM_PWM_ConfigChannel+0x184>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2202      	movs	r2, #2
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b0c      	cmp	r3, #12
 80070c2:	f200 809f 	bhi.w	8007204 <HAL_TIM_PWM_ConfigChannel+0x170>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	08007101 	.word	0x08007101
 80070d0:	08007205 	.word	0x08007205
 80070d4:	08007205 	.word	0x08007205
 80070d8:	08007205 	.word	0x08007205
 80070dc:	08007141 	.word	0x08007141
 80070e0:	08007205 	.word	0x08007205
 80070e4:	08007205 	.word	0x08007205
 80070e8:	08007205 	.word	0x08007205
 80070ec:	08007183 	.word	0x08007183
 80070f0:	08007205 	.word	0x08007205
 80070f4:	08007205 	.word	0x08007205
 80070f8:	08007205 	.word	0x08007205
 80070fc:	080071c3 	.word	0x080071c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f9f6 	bl	80074f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0208 	orr.w	r2, r2, #8
 800711a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0204 	bic.w	r2, r2, #4
 800712a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6999      	ldr	r1, [r3, #24]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	619a      	str	r2, [r3, #24]
      break;
 800713e:	e062      	b.n	8007206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fa3c 	bl	80075c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800715a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800716a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6999      	ldr	r1, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	021a      	lsls	r2, r3, #8
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	619a      	str	r2, [r3, #24]
      break;
 8007180:	e041      	b.n	8007206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fa87 	bl	800769c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0208 	orr.w	r2, r2, #8
 800719c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0204 	bic.w	r2, r2, #4
 80071ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69d9      	ldr	r1, [r3, #28]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	61da      	str	r2, [r3, #28]
      break;
 80071c0:	e021      	b.n	8007206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fad1 	bl	8007770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69d9      	ldr	r1, [r3, #28]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	021a      	lsls	r2, r3, #8
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	61da      	str	r2, [r3, #28]
      break;
 8007202:	e000      	b.n	8007206 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007204:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_TIM_ConfigClockSource+0x18>
 8007234:	2302      	movs	r3, #2
 8007236:	e0b3      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x180>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007256:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800725e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007270:	d03e      	beq.n	80072f0 <HAL_TIM_ConfigClockSource+0xd0>
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007276:	f200 8087 	bhi.w	8007388 <HAL_TIM_ConfigClockSource+0x168>
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727e:	f000 8085 	beq.w	800738c <HAL_TIM_ConfigClockSource+0x16c>
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d87f      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
 8007288:	2b70      	cmp	r3, #112	; 0x70
 800728a:	d01a      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0xa2>
 800728c:	2b70      	cmp	r3, #112	; 0x70
 800728e:	d87b      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
 8007290:	2b60      	cmp	r3, #96	; 0x60
 8007292:	d050      	beq.n	8007336 <HAL_TIM_ConfigClockSource+0x116>
 8007294:	2b60      	cmp	r3, #96	; 0x60
 8007296:	d877      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
 8007298:	2b50      	cmp	r3, #80	; 0x50
 800729a:	d03c      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0xf6>
 800729c:	2b50      	cmp	r3, #80	; 0x50
 800729e:	d873      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d058      	beq.n	8007356 <HAL_TIM_ConfigClockSource+0x136>
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d86f      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
 80072a8:	2b30      	cmp	r3, #48	; 0x30
 80072aa:	d064      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x156>
 80072ac:	2b30      	cmp	r3, #48	; 0x30
 80072ae:	d86b      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d060      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x156>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d867      	bhi.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d05c      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x156>
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d05a      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80072c0:	e062      	b.n	8007388 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6899      	ldr	r1, [r3, #8]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f000 fb17 	bl	8007904 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	609a      	str	r2, [r3, #8]
      break;
 80072ee:	e04e      	b.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6899      	ldr	r1, [r3, #8]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f000 fb00 	bl	8007904 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007312:	609a      	str	r2, [r3, #8]
      break;
 8007314:	e03b      	b.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	6859      	ldr	r1, [r3, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	461a      	mov	r2, r3
 8007324:	f000 fa74 	bl	8007810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2150      	movs	r1, #80	; 0x50
 800732e:	4618      	mov	r0, r3
 8007330:	f000 facd 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 8007334:	e02b      	b.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6859      	ldr	r1, [r3, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	461a      	mov	r2, r3
 8007344:	f000 fa93 	bl	800786e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2160      	movs	r1, #96	; 0x60
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fabd 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 8007354:	e01b      	b.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6859      	ldr	r1, [r3, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	461a      	mov	r2, r3
 8007364:	f000 fa54 	bl	8007810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2140      	movs	r1, #64	; 0x40
 800736e:	4618      	mov	r0, r3
 8007370:	f000 faad 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 8007374:	e00b      	b.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f000 faa4 	bl	80078ce <TIM_ITRx_SetConfig>
      break;
 8007386:	e002      	b.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800738c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a34      	ldr	r2, [pc, #208]	; (80074dc <TIM_Base_SetConfig+0xe4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00f      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007416:	d00b      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a31      	ldr	r2, [pc, #196]	; (80074e0 <TIM_Base_SetConfig+0xe8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a30      	ldr	r2, [pc, #192]	; (80074e4 <TIM_Base_SetConfig+0xec>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_Base_SetConfig+0x38>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a2f      	ldr	r2, [pc, #188]	; (80074e8 <TIM_Base_SetConfig+0xf0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d108      	bne.n	8007442 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a25      	ldr	r2, [pc, #148]	; (80074dc <TIM_Base_SetConfig+0xe4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d01b      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007450:	d017      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a22      	ldr	r2, [pc, #136]	; (80074e0 <TIM_Base_SetConfig+0xe8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <TIM_Base_SetConfig+0xec>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00f      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a20      	ldr	r2, [pc, #128]	; (80074e8 <TIM_Base_SetConfig+0xf0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d00b      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a1f      	ldr	r2, [pc, #124]	; (80074ec <TIM_Base_SetConfig+0xf4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d007      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a1e      	ldr	r2, [pc, #120]	; (80074f0 <TIM_Base_SetConfig+0xf8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d003      	beq.n	8007482 <TIM_Base_SetConfig+0x8a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <TIM_Base_SetConfig+0xfc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d108      	bne.n	8007494 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a08      	ldr	r2, [pc, #32]	; (80074dc <TIM_Base_SetConfig+0xe4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d103      	bne.n	80074c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	615a      	str	r2, [r3, #20]
}
 80074ce:	bf00      	nop
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40010000 	.word	0x40010000
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	40000c00 	.word	0x40000c00
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40014400 	.word	0x40014400
 80074f4:	40014800 	.word	0x40014800

080074f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f023 0201 	bic.w	r2, r3, #1
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 0302 	bic.w	r3, r3, #2
 8007540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a1c      	ldr	r2, [pc, #112]	; (80075c0 <TIM_OC1_SetConfig+0xc8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d10c      	bne.n	800756e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f023 0308 	bic.w	r3, r3, #8
 800755a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f023 0304 	bic.w	r3, r3, #4
 800756c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <TIM_OC1_SetConfig+0xc8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d111      	bne.n	800759a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800757c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	621a      	str	r2, [r3, #32]
}
 80075b4:	bf00      	nop
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	40010000 	.word	0x40010000

080075c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f023 0210 	bic.w	r2, r3, #16
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 0320 	bic.w	r3, r3, #32
 800760e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <TIM_OC2_SetConfig+0xd4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d10d      	bne.n	8007640 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a15      	ldr	r2, [pc, #84]	; (8007698 <TIM_OC2_SetConfig+0xd4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d113      	bne.n	8007670 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800764e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	621a      	str	r2, [r3, #32]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000

0800769c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	021b      	lsls	r3, r3, #8
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1d      	ldr	r2, [pc, #116]	; (800776c <TIM_OC3_SetConfig+0xd0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d10d      	bne.n	8007716 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a14      	ldr	r2, [pc, #80]	; (800776c <TIM_OC3_SetConfig+0xd0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d113      	bne.n	8007746 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800772c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40010000 	.word	0x40010000

08007770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	031b      	lsls	r3, r3, #12
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a10      	ldr	r2, [pc, #64]	; (800780c <TIM_OC4_SetConfig+0x9c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d109      	bne.n	80077e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	019b      	lsls	r3, r3, #6
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40010000 	.word	0x40010000

08007810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f023 0201 	bic.w	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800783a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 030a 	bic.w	r3, r3, #10
 800784c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	621a      	str	r2, [r3, #32]
}
 8007862:	bf00      	nop
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800786e:	b480      	push	{r7}
 8007870:	b087      	sub	sp, #28
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	f023 0210 	bic.w	r2, r3, #16
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f043 0307 	orr.w	r3, r3, #7
 80078f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	609a      	str	r2, [r3, #8]
}
 80078f8:	bf00      	nop
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800791e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	021a      	lsls	r2, r3, #8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	431a      	orrs	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	609a      	str	r2, [r3, #8]
}
 8007938:	bf00      	nop
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	2201      	movs	r2, #1
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a1a      	ldr	r2, [r3, #32]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	43db      	mvns	r3, r3
 8007966:	401a      	ands	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1a      	ldr	r2, [r3, #32]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	fa01 f303 	lsl.w	r3, r1, r3
 800797c:	431a      	orrs	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	621a      	str	r2, [r3, #32]
}
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e050      	b.n	8007a4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1c      	ldr	r2, [pc, #112]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f4:	d013      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a15      	ldr	r2, [pc, #84]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a13      	ldr	r2, [pc, #76]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d10c      	bne.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40014000 	.word	0x40014000

08007a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <arm_sin_f32>:
 8007a94:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007b10 <arm_sin_f32+0x7c>
 8007a98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a9c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8007aa8:	d42c      	bmi.n	8007b04 <arm_sin_f32+0x70>
 8007aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aae:	eddf 6a19 	vldr	s13, [pc, #100]	; 8007b14 <arm_sin_f32+0x80>
 8007ab2:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <arm_sin_f32+0x84>)
 8007ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ab8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007abc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ac0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac8:	bfa8      	it	ge
 8007aca:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8007ace:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007ad2:	ee17 3a10 	vmov	r3, s14
 8007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ada:	ee07 3a10 	vmov	s14, r3
 8007ade:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007ae2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007ae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aea:	edd1 6a01 	vldr	s13, [r1, #4]
 8007aee:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007af2:	ed91 0a00 	vldr	s0, [r1]
 8007af6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007afa:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007afe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b02:	4770      	bx	lr
 8007b04:	ee17 3a90 	vmov	r3, s15
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	e7cc      	b.n	8007aaa <arm_sin_f32+0x16>
 8007b10:	3e22f983 	.word	0x3e22f983
 8007b14:	44000000 	.word	0x44000000
 8007b18:	0800847c 	.word	0x0800847c

08007b1c <__libc_init_array>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	; (8007b54 <__libc_init_array+0x38>)
 8007b20:	4c0d      	ldr	r4, [pc, #52]	; (8007b58 <__libc_init_array+0x3c>)
 8007b22:	1b64      	subs	r4, r4, r5
 8007b24:	10a4      	asrs	r4, r4, #2
 8007b26:	2600      	movs	r6, #0
 8007b28:	42a6      	cmp	r6, r4
 8007b2a:	d109      	bne.n	8007b40 <__libc_init_array+0x24>
 8007b2c:	4d0b      	ldr	r5, [pc, #44]	; (8007b5c <__libc_init_array+0x40>)
 8007b2e:	4c0c      	ldr	r4, [pc, #48]	; (8007b60 <__libc_init_array+0x44>)
 8007b30:	f000 f820 	bl	8007b74 <_init>
 8007b34:	1b64      	subs	r4, r4, r5
 8007b36:	10a4      	asrs	r4, r4, #2
 8007b38:	2600      	movs	r6, #0
 8007b3a:	42a6      	cmp	r6, r4
 8007b3c:	d105      	bne.n	8007b4a <__libc_init_array+0x2e>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b44:	4798      	blx	r3
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7ee      	b.n	8007b28 <__libc_init_array+0xc>
 8007b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4e:	4798      	blx	r3
 8007b50:	3601      	adds	r6, #1
 8007b52:	e7f2      	b.n	8007b3a <__libc_init_array+0x1e>
 8007b54:	08008c88 	.word	0x08008c88
 8007b58:	08008c88 	.word	0x08008c88
 8007b5c:	08008c88 	.word	0x08008c88
 8007b60:	08008c8c 	.word	0x08008c8c

08007b64 <memset>:
 8007b64:	4402      	add	r2, r0
 8007b66:	4603      	mov	r3, r0
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d100      	bne.n	8007b6e <memset+0xa>
 8007b6c:	4770      	bx	lr
 8007b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b72:	e7f9      	b.n	8007b68 <memset+0x4>

08007b74 <_init>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr

08007b80 <_fini>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr
